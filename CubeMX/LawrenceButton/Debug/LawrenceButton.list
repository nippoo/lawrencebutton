
LawrenceButton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007970  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08007af8  08007af8  00017af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bf8  08007bf8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007bf8  08007bf8  00017bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c00  08007c00  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c00  08007c00  00017c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c04  08007c04  00017c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007c08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004aac  2000000c  08007c14  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ab8  08007c14  00024ab8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146e7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cb6  00000000  00000000  00034723  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001010  00000000  00000000  000373e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ed0  00000000  00000000  000383f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002324f  00000000  00000000  000392c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000101a1  00000000  00000000  0005c50f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca9dc  00000000  00000000  0006c6b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013708c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041fc  00000000  00000000  00137108  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007ae0 	.word	0x08007ae0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08007ae0 	.word	0x08007ae0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 f94d 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f007 f8d6 	bl	80076ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f965 	bl	80007fa <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000548:	f000 f92d 	bl	80007a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000008 	.word	0x20000008
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	20000068 	.word	0x20000068

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000068 	.word	0x20000068

080005ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b4:	f7ff ffee 	bl	8000594 <HAL_GetTick>
 80005b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005c4:	d005      	beq.n	80005d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_Delay+0x40>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005d2:	bf00      	nop
 80005d4:	f7ff ffde 	bl	8000594 <HAL_GetTick>
 80005d8:	4602      	mov	r2, r0
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d8f7      	bhi.n	80005d4 <HAL_Delay+0x28>
  {
  }
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000004 	.word	0x20000004

080005f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800061c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	2b00      	cmp	r3, #0
 8000664:	db0b      	blt.n	800067e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f003 021f 	and.w	r2, r3, #31
 800066c:	4907      	ldr	r1, [pc, #28]	; (800068c <__NVIC_EnableIRQ+0x38>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	095b      	lsrs	r3, r3, #5
 8000674:	2001      	movs	r0, #1
 8000676:	fa00 f202 	lsl.w	r2, r0, r2
 800067a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000e100 	.word	0xe000e100

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	; (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	; (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43da      	mvns	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	401a      	ands	r2, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43d9      	mvns	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	4313      	orrs	r3, r2
         );
}
 800073e:	4618      	mov	r0, r3
 8000740:	3724      	adds	r7, #36	; 0x24
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800075c:	d301      	bcc.n	8000762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075e:	2301      	movs	r3, #1
 8000760:	e00f      	b.n	8000782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <SysTick_Config+0x40>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076a:	210f      	movs	r1, #15
 800076c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000770:	f7ff ff8e 	bl	8000690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <SysTick_Config+0x40>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SysTick_Config+0x40>)
 800077c:	2207      	movs	r2, #7
 800077e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	e000e010 	.word	0xe000e010

08000790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff29 	bl	80005f0 <__NVIC_SetPriorityGrouping>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b086      	sub	sp, #24
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
 80007b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b8:	f7ff ff3e 	bl	8000638 <__NVIC_GetPriorityGrouping>
 80007bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	68b9      	ldr	r1, [r7, #8]
 80007c2:	6978      	ldr	r0, [r7, #20]
 80007c4:	f7ff ff8e 	bl	80006e4 <NVIC_EncodePriority>
 80007c8:	4602      	mov	r2, r0
 80007ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff5d 	bl	8000690 <__NVIC_SetPriority>
}
 80007d6:	bf00      	nop
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff31 	bl	8000654 <__NVIC_EnableIRQ>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff ffa2 	bl	800074c <SysTick_Config>
 8000808:	4603      	mov	r3, r0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000820:	f7ff feb8 	bl	8000594 <HAL_GetTick>
 8000824:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d101      	bne.n	8000830 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800082c:	2301      	movs	r3, #1
 800082e:	e099      	b.n	8000964 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2200      	movs	r2, #0
 8000834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2202      	movs	r2, #2
 800083c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f022 0201 	bic.w	r2, r2, #1
 800084e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000850:	e00f      	b.n	8000872 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000852:	f7ff fe9f 	bl	8000594 <HAL_GetTick>
 8000856:	4602      	mov	r2, r0
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	2b05      	cmp	r3, #5
 800085e:	d908      	bls.n	8000872 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2220      	movs	r2, #32
 8000864:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2203      	movs	r2, #3
 800086a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800086e:	2303      	movs	r3, #3
 8000870:	e078      	b.n	8000964 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f003 0301 	and.w	r3, r3, #1
 800087c:	2b00      	cmp	r3, #0
 800087e:	d1e8      	bne.n	8000852 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000888:	697a      	ldr	r2, [r7, #20]
 800088a:	4b38      	ldr	r3, [pc, #224]	; (800096c <HAL_DMA_Init+0x158>)
 800088c:	4013      	ands	r3, r2
 800088e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	685a      	ldr	r2, [r3, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	689b      	ldr	r3, [r3, #8]
 8000898:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800089e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	691b      	ldr	r3, [r3, #16]
 80008a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6a1b      	ldr	r3, [r3, #32]
 80008bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008be:	697a      	ldr	r2, [r7, #20]
 80008c0:	4313      	orrs	r3, r2
 80008c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008c8:	2b04      	cmp	r3, #4
 80008ca:	d107      	bne.n	80008dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d4:	4313      	orrs	r3, r2
 80008d6:	697a      	ldr	r2, [r7, #20]
 80008d8:	4313      	orrs	r3, r2
 80008da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	697a      	ldr	r2, [r7, #20]
 80008e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	f023 0307 	bic.w	r3, r3, #7
 80008f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008f8:	697a      	ldr	r2, [r7, #20]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000902:	2b04      	cmp	r3, #4
 8000904:	d117      	bne.n	8000936 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800090a:	697a      	ldr	r2, [r7, #20]
 800090c:	4313      	orrs	r3, r2
 800090e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000914:	2b00      	cmp	r3, #0
 8000916:	d00e      	beq.n	8000936 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f000 fa6f 	bl	8000dfc <DMA_CheckFifoParam>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d008      	beq.n	8000936 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2240      	movs	r2, #64	; 0x40
 8000928:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2201      	movs	r2, #1
 800092e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000932:	2301      	movs	r3, #1
 8000934:	e016      	b.n	8000964 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	697a      	ldr	r2, [r7, #20]
 800093c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f000 fa26 	bl	8000d90 <DMA_CalcBaseAndBitshift>
 8000944:	4603      	mov	r3, r0
 8000946:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800094c:	223f      	movs	r2, #63	; 0x3f
 800094e:	409a      	lsls	r2, r3
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2200      	movs	r2, #0
 8000958:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2201      	movs	r2, #1
 800095e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000962:	2300      	movs	r3, #0
}
 8000964:	4618      	mov	r0, r3
 8000966:	3718      	adds	r7, #24
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	f010803f 	.word	0xf010803f

08000970 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
 800097c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800097e:	2300      	movs	r3, #0
 8000980:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000986:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800098e:	2b01      	cmp	r3, #1
 8000990:	d101      	bne.n	8000996 <HAL_DMA_Start_IT+0x26>
 8000992:	2302      	movs	r3, #2
 8000994:	e040      	b.n	8000a18 <HAL_DMA_Start_IT+0xa8>
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	2201      	movs	r2, #1
 800099a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d12f      	bne.n	8000a0a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	2202      	movs	r2, #2
 80009ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	2200      	movs	r2, #0
 80009b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	68b9      	ldr	r1, [r7, #8]
 80009be:	68f8      	ldr	r0, [r7, #12]
 80009c0:	f000 f9b8 	bl	8000d34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009c8:	223f      	movs	r2, #63	; 0x3f
 80009ca:	409a      	lsls	r2, r3
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f042 0216 	orr.w	r2, r2, #22
 80009de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d007      	beq.n	80009f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f042 0208 	orr.w	r2, r2, #8
 80009f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f042 0201 	orr.w	r2, r2, #1
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	e005      	b.n	8000a16 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000a12:	2302      	movs	r3, #2
 8000a14:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3718      	adds	r7, #24
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000a2c:	4b92      	ldr	r3, [pc, #584]	; (8000c78 <HAL_DMA_IRQHandler+0x258>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a92      	ldr	r2, [pc, #584]	; (8000c7c <HAL_DMA_IRQHandler+0x25c>)
 8000a32:	fba2 2303 	umull	r2, r3, r2, r3
 8000a36:	0a9b      	lsrs	r3, r3, #10
 8000a38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a4a:	2208      	movs	r2, #8
 8000a4c:	409a      	lsls	r2, r3
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	4013      	ands	r3, r2
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d01a      	beq.n	8000a8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f003 0304 	and.w	r3, r3, #4
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d013      	beq.n	8000a8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f022 0204 	bic.w	r2, r2, #4
 8000a72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a78:	2208      	movs	r2, #8
 8000a7a:	409a      	lsls	r2, r3
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a84:	f043 0201 	orr.w	r2, r3, #1
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a90:	2201      	movs	r2, #1
 8000a92:	409a      	lsls	r2, r3
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	4013      	ands	r3, r2
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d012      	beq.n	8000ac2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d00b      	beq.n	8000ac2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aae:	2201      	movs	r2, #1
 8000ab0:	409a      	lsls	r2, r3
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000aba:	f043 0202 	orr.w	r2, r3, #2
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ac6:	2204      	movs	r2, #4
 8000ac8:	409a      	lsls	r2, r3
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	4013      	ands	r3, r2
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d012      	beq.n	8000af8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f003 0302 	and.w	r3, r3, #2
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d00b      	beq.n	8000af8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ae4:	2204      	movs	r2, #4
 8000ae6:	409a      	lsls	r2, r3
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000af0:	f043 0204 	orr.w	r2, r3, #4
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000afc:	2210      	movs	r2, #16
 8000afe:	409a      	lsls	r2, r3
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	4013      	ands	r3, r2
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d043      	beq.n	8000b90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f003 0308 	and.w	r3, r3, #8
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d03c      	beq.n	8000b90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b1a:	2210      	movs	r2, #16
 8000b1c:	409a      	lsls	r2, r3
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d018      	beq.n	8000b62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d108      	bne.n	8000b50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d024      	beq.n	8000b90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	4798      	blx	r3
 8000b4e:	e01f      	b.n	8000b90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d01b      	beq.n	8000b90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	4798      	blx	r3
 8000b60:	e016      	b.n	8000b90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d107      	bne.n	8000b80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f022 0208 	bic.w	r2, r2, #8
 8000b7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d003      	beq.n	8000b90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b94:	2220      	movs	r2, #32
 8000b96:	409a      	lsls	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	f000 808e 	beq.w	8000cbe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f003 0310 	and.w	r3, r3, #16
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	f000 8086 	beq.w	8000cbe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bb6:	2220      	movs	r2, #32
 8000bb8:	409a      	lsls	r2, r3
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2b05      	cmp	r3, #5
 8000bc8:	d136      	bne.n	8000c38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f022 0216 	bic.w	r2, r2, #22
 8000bd8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	695a      	ldr	r2, [r3, #20]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000be8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d103      	bne.n	8000bfa <HAL_DMA_IRQHandler+0x1da>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d007      	beq.n	8000c0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f022 0208 	bic.w	r2, r2, #8
 8000c08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c0e:	223f      	movs	r2, #63	; 0x3f
 8000c10:	409a      	lsls	r2, r3
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2201      	movs	r2, #1
 8000c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d07d      	beq.n	8000d2a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	4798      	blx	r3
        }
        return;
 8000c36:	e078      	b.n	8000d2a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d01c      	beq.n	8000c80 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d108      	bne.n	8000c66 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d030      	beq.n	8000cbe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	4798      	blx	r3
 8000c64:	e02b      	b.n	8000cbe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d027      	beq.n	8000cbe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	4798      	blx	r3
 8000c76:	e022      	b.n	8000cbe <HAL_DMA_IRQHandler+0x29e>
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d10f      	bne.n	8000cae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f022 0210 	bic.w	r2, r2, #16
 8000c9c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d003      	beq.n	8000cbe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d032      	beq.n	8000d2c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d022      	beq.n	8000d18 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2205      	movs	r2, #5
 8000cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f022 0201 	bic.w	r2, r2, #1
 8000ce8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	3301      	adds	r3, #1
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	697a      	ldr	r2, [r7, #20]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d307      	bcc.n	8000d06 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d1f2      	bne.n	8000cea <HAL_DMA_IRQHandler+0x2ca>
 8000d04:	e000      	b.n	8000d08 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000d06:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2201      	movs	r2, #1
 8000d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d005      	beq.n	8000d2c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	4798      	blx	r3
 8000d28:	e000      	b.n	8000d2c <HAL_DMA_IRQHandler+0x30c>
        return;
 8000d2a:	bf00      	nop
    }
  }
}
 8000d2c:	3718      	adds	r7, #24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop

08000d34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
 8000d40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	683a      	ldr	r2, [r7, #0]
 8000d58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	2b40      	cmp	r3, #64	; 0x40
 8000d60:	d108      	bne.n	8000d74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000d72:	e007      	b.n	8000d84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	68ba      	ldr	r2, [r7, #8]
 8000d7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	60da      	str	r2, [r3, #12]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	3b10      	subs	r3, #16
 8000da0:	4a14      	ldr	r2, [pc, #80]	; (8000df4 <DMA_CalcBaseAndBitshift+0x64>)
 8000da2:	fba2 2303 	umull	r2, r3, r2, r3
 8000da6:	091b      	lsrs	r3, r3, #4
 8000da8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000daa:	4a13      	ldr	r2, [pc, #76]	; (8000df8 <DMA_CalcBaseAndBitshift+0x68>)
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	4413      	add	r3, r2
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d909      	bls.n	8000dd2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000dc6:	f023 0303 	bic.w	r3, r3, #3
 8000dca:	1d1a      	adds	r2, r3, #4
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	659a      	str	r2, [r3, #88]	; 0x58
 8000dd0:	e007      	b.n	8000de2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000dda:	f023 0303 	bic.w	r3, r3, #3
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	aaaaaaab 	.word	0xaaaaaaab
 8000df8:	08007b44 	.word	0x08007b44

08000dfc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e04:	2300      	movs	r3, #0
 8000e06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d11f      	bne.n	8000e56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	2b03      	cmp	r3, #3
 8000e1a:	d855      	bhi.n	8000ec8 <DMA_CheckFifoParam+0xcc>
 8000e1c:	a201      	add	r2, pc, #4	; (adr r2, 8000e24 <DMA_CheckFifoParam+0x28>)
 8000e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e22:	bf00      	nop
 8000e24:	08000e35 	.word	0x08000e35
 8000e28:	08000e47 	.word	0x08000e47
 8000e2c:	08000e35 	.word	0x08000e35
 8000e30:	08000ec9 	.word	0x08000ec9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d045      	beq.n	8000ecc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e44:	e042      	b.n	8000ecc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e4e:	d13f      	bne.n	8000ed0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e54:	e03c      	b.n	8000ed0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e5e:	d121      	bne.n	8000ea4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	2b03      	cmp	r3, #3
 8000e64:	d836      	bhi.n	8000ed4 <DMA_CheckFifoParam+0xd8>
 8000e66:	a201      	add	r2, pc, #4	; (adr r2, 8000e6c <DMA_CheckFifoParam+0x70>)
 8000e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6c:	08000e7d 	.word	0x08000e7d
 8000e70:	08000e83 	.word	0x08000e83
 8000e74:	08000e7d 	.word	0x08000e7d
 8000e78:	08000e95 	.word	0x08000e95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8000e80:	e02f      	b.n	8000ee2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d024      	beq.n	8000ed8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e92:	e021      	b.n	8000ed8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e9c:	d11e      	bne.n	8000edc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000ea2:	e01b      	b.n	8000edc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d902      	bls.n	8000eb0 <DMA_CheckFifoParam+0xb4>
 8000eaa:	2b03      	cmp	r3, #3
 8000eac:	d003      	beq.n	8000eb6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000eae:	e018      	b.n	8000ee2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8000eb4:	e015      	b.n	8000ee2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d00e      	beq.n	8000ee0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	73fb      	strb	r3, [r7, #15]
      break;
 8000ec6:	e00b      	b.n	8000ee0 <DMA_CheckFifoParam+0xe4>
      break;
 8000ec8:	bf00      	nop
 8000eca:	e00a      	b.n	8000ee2 <DMA_CheckFifoParam+0xe6>
      break;
 8000ecc:	bf00      	nop
 8000ece:	e008      	b.n	8000ee2 <DMA_CheckFifoParam+0xe6>
      break;
 8000ed0:	bf00      	nop
 8000ed2:	e006      	b.n	8000ee2 <DMA_CheckFifoParam+0xe6>
      break;
 8000ed4:	bf00      	nop
 8000ed6:	e004      	b.n	8000ee2 <DMA_CheckFifoParam+0xe6>
      break;
 8000ed8:	bf00      	nop
 8000eda:	e002      	b.n	8000ee2 <DMA_CheckFifoParam+0xe6>
      break;   
 8000edc:	bf00      	nop
 8000ede:	e000      	b.n	8000ee2 <DMA_CheckFifoParam+0xe6>
      break;
 8000ee0:	bf00      	nop
    }
  } 
  
  return status; 
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
 8000f0a:	e16b      	b.n	80011e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	f040 815a 	bne.w	80011de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d00b      	beq.n	8000f4a <HAL_GPIO_Init+0x5a>
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d007      	beq.n	8000f4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f3e:	2b11      	cmp	r3, #17
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b12      	cmp	r3, #18
 8000f48:	d130      	bne.n	8000fac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f80:	2201      	movs	r2, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	091b      	lsrs	r3, r3, #4
 8000f96:	f003 0201 	and.w	r2, r3, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0xfc>
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b12      	cmp	r3, #18
 8000fea:	d123      	bne.n	8001034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	08da      	lsrs	r2, r3, #3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3208      	adds	r2, #8
 8000ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	f003 0307 	and.w	r3, r3, #7
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	220f      	movs	r2, #15
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	691a      	ldr	r2, [r3, #16]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	08da      	lsrs	r2, r3, #3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3208      	adds	r2, #8
 800102e:	69b9      	ldr	r1, [r7, #24]
 8001030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2203      	movs	r2, #3
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0203 	and.w	r2, r3, #3
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 80b4 	beq.w	80011de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b5f      	ldr	r3, [pc, #380]	; (80011f8 <HAL_GPIO_Init+0x308>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	4a5e      	ldr	r2, [pc, #376]	; (80011f8 <HAL_GPIO_Init+0x308>)
 8001080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001084:	6453      	str	r3, [r2, #68]	; 0x44
 8001086:	4b5c      	ldr	r3, [pc, #368]	; (80011f8 <HAL_GPIO_Init+0x308>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001092:	4a5a      	ldr	r2, [pc, #360]	; (80011fc <HAL_GPIO_Init+0x30c>)
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	089b      	lsrs	r3, r3, #2
 8001098:	3302      	adds	r3, #2
 800109a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	220f      	movs	r2, #15
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a51      	ldr	r2, [pc, #324]	; (8001200 <HAL_GPIO_Init+0x310>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d02b      	beq.n	8001116 <HAL_GPIO_Init+0x226>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a50      	ldr	r2, [pc, #320]	; (8001204 <HAL_GPIO_Init+0x314>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d025      	beq.n	8001112 <HAL_GPIO_Init+0x222>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4f      	ldr	r2, [pc, #316]	; (8001208 <HAL_GPIO_Init+0x318>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d01f      	beq.n	800110e <HAL_GPIO_Init+0x21e>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4e      	ldr	r2, [pc, #312]	; (800120c <HAL_GPIO_Init+0x31c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d019      	beq.n	800110a <HAL_GPIO_Init+0x21a>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4d      	ldr	r2, [pc, #308]	; (8001210 <HAL_GPIO_Init+0x320>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d013      	beq.n	8001106 <HAL_GPIO_Init+0x216>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4c      	ldr	r2, [pc, #304]	; (8001214 <HAL_GPIO_Init+0x324>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d00d      	beq.n	8001102 <HAL_GPIO_Init+0x212>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4b      	ldr	r2, [pc, #300]	; (8001218 <HAL_GPIO_Init+0x328>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d007      	beq.n	80010fe <HAL_GPIO_Init+0x20e>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4a      	ldr	r2, [pc, #296]	; (800121c <HAL_GPIO_Init+0x32c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d101      	bne.n	80010fa <HAL_GPIO_Init+0x20a>
 80010f6:	2307      	movs	r3, #7
 80010f8:	e00e      	b.n	8001118 <HAL_GPIO_Init+0x228>
 80010fa:	2308      	movs	r3, #8
 80010fc:	e00c      	b.n	8001118 <HAL_GPIO_Init+0x228>
 80010fe:	2306      	movs	r3, #6
 8001100:	e00a      	b.n	8001118 <HAL_GPIO_Init+0x228>
 8001102:	2305      	movs	r3, #5
 8001104:	e008      	b.n	8001118 <HAL_GPIO_Init+0x228>
 8001106:	2304      	movs	r3, #4
 8001108:	e006      	b.n	8001118 <HAL_GPIO_Init+0x228>
 800110a:	2303      	movs	r3, #3
 800110c:	e004      	b.n	8001118 <HAL_GPIO_Init+0x228>
 800110e:	2302      	movs	r3, #2
 8001110:	e002      	b.n	8001118 <HAL_GPIO_Init+0x228>
 8001112:	2301      	movs	r3, #1
 8001114:	e000      	b.n	8001118 <HAL_GPIO_Init+0x228>
 8001116:	2300      	movs	r3, #0
 8001118:	69fa      	ldr	r2, [r7, #28]
 800111a:	f002 0203 	and.w	r2, r2, #3
 800111e:	0092      	lsls	r2, r2, #2
 8001120:	4093      	lsls	r3, r2
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001128:	4934      	ldr	r1, [pc, #208]	; (80011fc <HAL_GPIO_Init+0x30c>)
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	089b      	lsrs	r3, r3, #2
 800112e:	3302      	adds	r3, #2
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001136:	4b3a      	ldr	r3, [pc, #232]	; (8001220 <HAL_GPIO_Init+0x330>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800115a:	4a31      	ldr	r2, [pc, #196]	; (8001220 <HAL_GPIO_Init+0x330>)
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001160:	4b2f      	ldr	r3, [pc, #188]	; (8001220 <HAL_GPIO_Init+0x330>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001184:	4a26      	ldr	r2, [pc, #152]	; (8001220 <HAL_GPIO_Init+0x330>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800118a:	4b25      	ldr	r3, [pc, #148]	; (8001220 <HAL_GPIO_Init+0x330>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ae:	4a1c      	ldr	r2, [pc, #112]	; (8001220 <HAL_GPIO_Init+0x330>)
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011b4:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <HAL_GPIO_Init+0x330>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011d8:	4a11      	ldr	r2, [pc, #68]	; (8001220 <HAL_GPIO_Init+0x330>)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3301      	adds	r3, #1
 80011e2:	61fb      	str	r3, [r7, #28]
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	2b0f      	cmp	r3, #15
 80011e8:	f67f ae90 	bls.w	8000f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011ec:	bf00      	nop
 80011ee:	3724      	adds	r7, #36	; 0x24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40013800 	.word	0x40013800
 8001200:	40020000 	.word	0x40020000
 8001204:	40020400 	.word	0x40020400
 8001208:	40020800 	.word	0x40020800
 800120c:	40020c00 	.word	0x40020c00
 8001210:	40021000 	.word	0x40021000
 8001214:	40021400 	.word	0x40021400
 8001218:	40021800 	.word	0x40021800
 800121c:	40021c00 	.word	0x40021c00
 8001220:	40013c00 	.word	0x40013c00

08001224 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	691a      	ldr	r2, [r3, #16]
 8001234:	887b      	ldrh	r3, [r7, #2]
 8001236:	4013      	ands	r3, r2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d002      	beq.n	8001242 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800123c:	2301      	movs	r3, #1
 800123e:	73fb      	strb	r3, [r7, #15]
 8001240:	e001      	b.n	8001246 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001242:	2300      	movs	r3, #0
 8001244:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001246:	7bfb      	ldrb	r3, [r7, #15]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	807b      	strh	r3, [r7, #2]
 8001260:	4613      	mov	r3, r2
 8001262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001264:	787b      	ldrb	r3, [r7, #1]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800126a:	887a      	ldrh	r2, [r7, #2]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001270:	e003      	b.n	800127a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001272:	887b      	ldrh	r3, [r7, #2]
 8001274:	041a      	lsls	r2, r3, #16
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	619a      	str	r2, [r3, #24]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e11f      	b.n	80014da <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d106      	bne.n	80012b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f006 fa24 	bl	80076fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2224      	movs	r2, #36	; 0x24
 80012b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 0201 	bic.w	r2, r2, #1
 80012ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80012ec:	f001 fada 	bl	80028a4 <HAL_RCC_GetPCLK1Freq>
 80012f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	4a7b      	ldr	r2, [pc, #492]	; (80014e4 <HAL_I2C_Init+0x25c>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d807      	bhi.n	800130c <HAL_I2C_Init+0x84>
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4a7a      	ldr	r2, [pc, #488]	; (80014e8 <HAL_I2C_Init+0x260>)
 8001300:	4293      	cmp	r3, r2
 8001302:	bf94      	ite	ls
 8001304:	2301      	movls	r3, #1
 8001306:	2300      	movhi	r3, #0
 8001308:	b2db      	uxtb	r3, r3
 800130a:	e006      	b.n	800131a <HAL_I2C_Init+0x92>
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4a77      	ldr	r2, [pc, #476]	; (80014ec <HAL_I2C_Init+0x264>)
 8001310:	4293      	cmp	r3, r2
 8001312:	bf94      	ite	ls
 8001314:	2301      	movls	r3, #1
 8001316:	2300      	movhi	r3, #0
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e0db      	b.n	80014da <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4a72      	ldr	r2, [pc, #456]	; (80014f0 <HAL_I2C_Init+0x268>)
 8001326:	fba2 2303 	umull	r2, r3, r2, r3
 800132a:	0c9b      	lsrs	r3, r3, #18
 800132c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	68ba      	ldr	r2, [r7, #8]
 800133e:	430a      	orrs	r2, r1
 8001340:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	4a64      	ldr	r2, [pc, #400]	; (80014e4 <HAL_I2C_Init+0x25c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d802      	bhi.n	800135c <HAL_I2C_Init+0xd4>
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	3301      	adds	r3, #1
 800135a:	e009      	b.n	8001370 <HAL_I2C_Init+0xe8>
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001362:	fb02 f303 	mul.w	r3, r2, r3
 8001366:	4a63      	ldr	r2, [pc, #396]	; (80014f4 <HAL_I2C_Init+0x26c>)
 8001368:	fba2 2303 	umull	r2, r3, r2, r3
 800136c:	099b      	lsrs	r3, r3, #6
 800136e:	3301      	adds	r3, #1
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	6812      	ldr	r2, [r2, #0]
 8001374:	430b      	orrs	r3, r1
 8001376:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001382:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	4956      	ldr	r1, [pc, #344]	; (80014e4 <HAL_I2C_Init+0x25c>)
 800138c:	428b      	cmp	r3, r1
 800138e:	d80d      	bhi.n	80013ac <HAL_I2C_Init+0x124>
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	1e59      	subs	r1, r3, #1
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	fbb1 f3f3 	udiv	r3, r1, r3
 800139e:	3301      	adds	r3, #1
 80013a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013a4:	2b04      	cmp	r3, #4
 80013a6:	bf38      	it	cc
 80013a8:	2304      	movcc	r3, #4
 80013aa:	e04f      	b.n	800144c <HAL_I2C_Init+0x1c4>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d111      	bne.n	80013d8 <HAL_I2C_Init+0x150>
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	1e58      	subs	r0, r3, #1
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6859      	ldr	r1, [r3, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	440b      	add	r3, r1
 80013c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80013c6:	3301      	adds	r3, #1
 80013c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	bf0c      	ite	eq
 80013d0:	2301      	moveq	r3, #1
 80013d2:	2300      	movne	r3, #0
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	e012      	b.n	80013fe <HAL_I2C_Init+0x176>
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	1e58      	subs	r0, r3, #1
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6859      	ldr	r1, [r3, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	0099      	lsls	r1, r3, #2
 80013e8:	440b      	add	r3, r1
 80013ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80013ee:	3301      	adds	r3, #1
 80013f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	bf0c      	ite	eq
 80013f8:	2301      	moveq	r3, #1
 80013fa:	2300      	movne	r3, #0
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_I2C_Init+0x17e>
 8001402:	2301      	movs	r3, #1
 8001404:	e022      	b.n	800144c <HAL_I2C_Init+0x1c4>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d10e      	bne.n	800142c <HAL_I2C_Init+0x1a4>
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	1e58      	subs	r0, r3, #1
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6859      	ldr	r1, [r3, #4]
 8001416:	460b      	mov	r3, r1
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	440b      	add	r3, r1
 800141c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001420:	3301      	adds	r3, #1
 8001422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800142a:	e00f      	b.n	800144c <HAL_I2C_Init+0x1c4>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	1e58      	subs	r0, r3, #1
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6859      	ldr	r1, [r3, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	0099      	lsls	r1, r3, #2
 800143c:	440b      	add	r3, r1
 800143e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001442:	3301      	adds	r3, #1
 8001444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001448:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	6809      	ldr	r1, [r1, #0]
 8001450:	4313      	orrs	r3, r2
 8001452:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69da      	ldr	r2, [r3, #28]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	431a      	orrs	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	430a      	orrs	r2, r1
 800146e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800147a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	6911      	ldr	r1, [r2, #16]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	68d2      	ldr	r2, [r2, #12]
 8001486:	4311      	orrs	r1, r2
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	6812      	ldr	r2, [r2, #0]
 800148c:	430b      	orrs	r3, r1
 800148e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	695a      	ldr	r2, [r3, #20]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	431a      	orrs	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f042 0201 	orr.w	r2, r2, #1
 80014ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2220      	movs	r2, #32
 80014c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	000186a0 	.word	0x000186a0
 80014e8:	001e847f 	.word	0x001e847f
 80014ec:	003d08ff 	.word	0x003d08ff
 80014f0:	431bde83 	.word	0x431bde83
 80014f4:	10624dd3 	.word	0x10624dd3

080014f8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e128      	b.n	800175c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d109      	bne.n	800152a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a90      	ldr	r2, [pc, #576]	; (8001764 <HAL_I2S_Init+0x26c>)
 8001522:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f006 f931 	bl	800778c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2202      	movs	r2, #2
 800152e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	69db      	ldr	r3, [r3, #28]
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	6812      	ldr	r2, [r2, #0]
 800153c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001540:	f023 030f 	bic.w	r3, r3, #15
 8001544:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2202      	movs	r2, #2
 800154c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d060      	beq.n	8001618 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d102      	bne.n	8001564 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800155e:	2310      	movs	r3, #16
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	e001      	b.n	8001568 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001564:	2320      	movs	r3, #32
 8001566:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2b20      	cmp	r3, #32
 800156e:	d802      	bhi.n	8001576 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001576:	2001      	movs	r0, #1
 8001578:	f001 fa8a 	bl	8002a90 <HAL_RCCEx_GetPeriphCLKFreq>
 800157c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001586:	d125      	bne.n	80015d4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d010      	beq.n	80015b2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	fbb2 f2f3 	udiv	r2, r2, r3
 800159a:	4613      	mov	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	461a      	mov	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ac:	3305      	adds	r3, #5
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	e01f      	b.n	80015f2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	461a      	mov	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ce:	3305      	adds	r3, #5
 80015d0:	613b      	str	r3, [r7, #16]
 80015d2:	e00e      	b.n	80015f2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	461a      	mov	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ee:	3305      	adds	r3, #5
 80015f0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4a5c      	ldr	r2, [pc, #368]	; (8001768 <HAL_I2S_Init+0x270>)
 80015f6:	fba2 2303 	umull	r2, r3, r2, r3
 80015fa:	08db      	lsrs	r3, r3, #3
 80015fc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	085b      	lsrs	r3, r3, #1
 800160e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	021b      	lsls	r3, r3, #8
 8001614:	61bb      	str	r3, [r7, #24]
 8001616:	e003      	b.n	8001620 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001618:	2302      	movs	r3, #2
 800161a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800161c:	2300      	movs	r3, #0
 800161e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d902      	bls.n	800162c <HAL_I2S_Init+0x134>
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	2bff      	cmp	r3, #255	; 0xff
 800162a:	d907      	bls.n	800163c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001630:	f043 0210 	orr.w	r2, r3, #16
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e08f      	b.n	800175c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	691a      	ldr	r2, [r3, #16]
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	ea42 0103 	orr.w	r1, r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	69fa      	ldr	r2, [r7, #28]
 800164c:	430a      	orrs	r2, r1
 800164e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800165a:	f023 030f 	bic.w	r3, r3, #15
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	6851      	ldr	r1, [r2, #4]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6892      	ldr	r2, [r2, #8]
 8001666:	4311      	orrs	r1, r2
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	68d2      	ldr	r2, [r2, #12]
 800166c:	4311      	orrs	r1, r2
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	6992      	ldr	r2, [r2, #24]
 8001672:	430a      	orrs	r2, r1
 8001674:	431a      	orrs	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800167e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d161      	bne.n	800174c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a38      	ldr	r2, [pc, #224]	; (800176c <HAL_I2S_Init+0x274>)
 800168c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a37      	ldr	r2, [pc, #220]	; (8001770 <HAL_I2S_Init+0x278>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d101      	bne.n	800169c <HAL_I2S_Init+0x1a4>
 8001698:	4b36      	ldr	r3, [pc, #216]	; (8001774 <HAL_I2S_Init+0x27c>)
 800169a:	e001      	b.n	80016a0 <HAL_I2S_Init+0x1a8>
 800169c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6812      	ldr	r2, [r2, #0]
 80016a6:	4932      	ldr	r1, [pc, #200]	; (8001770 <HAL_I2S_Init+0x278>)
 80016a8:	428a      	cmp	r2, r1
 80016aa:	d101      	bne.n	80016b0 <HAL_I2S_Init+0x1b8>
 80016ac:	4a31      	ldr	r2, [pc, #196]	; (8001774 <HAL_I2S_Init+0x27c>)
 80016ae:	e001      	b.n	80016b4 <HAL_I2S_Init+0x1bc>
 80016b0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80016b4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80016b8:	f023 030f 	bic.w	r3, r3, #15
 80016bc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a2b      	ldr	r2, [pc, #172]	; (8001770 <HAL_I2S_Init+0x278>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d101      	bne.n	80016cc <HAL_I2S_Init+0x1d4>
 80016c8:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <HAL_I2S_Init+0x27c>)
 80016ca:	e001      	b.n	80016d0 <HAL_I2S_Init+0x1d8>
 80016cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80016d0:	2202      	movs	r2, #2
 80016d2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a25      	ldr	r2, [pc, #148]	; (8001770 <HAL_I2S_Init+0x278>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d101      	bne.n	80016e2 <HAL_I2S_Init+0x1ea>
 80016de:	4b25      	ldr	r3, [pc, #148]	; (8001774 <HAL_I2S_Init+0x27c>)
 80016e0:	e001      	b.n	80016e6 <HAL_I2S_Init+0x1ee>
 80016e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016f2:	d003      	beq.n	80016fc <HAL_I2S_Init+0x204>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d103      	bne.n	8001704 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80016fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	e001      	b.n	8001708 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001704:	2300      	movs	r3, #0
 8001706:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	b299      	uxth	r1, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800171e:	4303      	orrs	r3, r0
 8001720:	b29b      	uxth	r3, r3
 8001722:	430b      	orrs	r3, r1
 8001724:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001726:	4313      	orrs	r3, r2
 8001728:	b29a      	uxth	r2, r3
 800172a:	897b      	ldrh	r3, [r7, #10]
 800172c:	4313      	orrs	r3, r2
 800172e:	b29b      	uxth	r3, r3
 8001730:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001734:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a0d      	ldr	r2, [pc, #52]	; (8001770 <HAL_I2S_Init+0x278>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d101      	bne.n	8001744 <HAL_I2S_Init+0x24c>
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <HAL_I2S_Init+0x27c>)
 8001742:	e001      	b.n	8001748 <HAL_I2S_Init+0x250>
 8001744:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001748:	897a      	ldrh	r2, [r7, #10]
 800174a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3720      	adds	r7, #32
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	08001a55 	.word	0x08001a55
 8001768:	cccccccd 	.word	0xcccccccd
 800176c:	08001b69 	.word	0x08001b69
 8001770:	40003800 	.word	0x40003800
 8001774:	40003400 	.word	0x40003400

08001778 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	4613      	mov	r3, r2
 8001784:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d002      	beq.n	8001792 <HAL_I2S_Transmit_DMA+0x1a>
 800178c:	88fb      	ldrh	r3, [r7, #6]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e08e      	b.n	80018b4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d101      	bne.n	80017a6 <HAL_I2S_Transmit_DMA+0x2e>
 80017a2:	2302      	movs	r3, #2
 80017a4:	e086      	b.n	80018b4 <HAL_I2S_Transmit_DMA+0x13c>
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2201      	movs	r2, #1
 80017aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d005      	beq.n	80017c6 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80017c2:	2302      	movs	r3, #2
 80017c4:	e076      	b.n	80018b4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2203      	movs	r2, #3
 80017ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2200      	movs	r2, #0
 80017d2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	f003 0307 	and.w	r3, r3, #7
 80017e4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	2b03      	cmp	r3, #3
 80017ea:	d002      	beq.n	80017f2 <HAL_I2S_Transmit_DMA+0x7a>
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	2b05      	cmp	r3, #5
 80017f0:	d10a      	bne.n	8001808 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80017f2:	88fb      	ldrh	r3, [r7, #6]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80017fc:	88fb      	ldrh	r3, [r7, #6]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	b29a      	uxth	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001806:	e005      	b.n	8001814 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	88fa      	ldrh	r2, [r7, #6]
 800180c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	88fa      	ldrh	r2, [r7, #6]
 8001812:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001818:	4a28      	ldr	r2, [pc, #160]	; (80018bc <HAL_I2S_Transmit_DMA+0x144>)
 800181a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001820:	4a27      	ldr	r2, [pc, #156]	; (80018c0 <HAL_I2S_Transmit_DMA+0x148>)
 8001822:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001828:	4a26      	ldr	r2, [pc, #152]	; (80018c4 <HAL_I2S_Transmit_DMA+0x14c>)
 800182a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8001834:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800183c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001842:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8001844:	f7ff f894 	bl	8000970 <HAL_DMA_Start_IT>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00f      	beq.n	800186e <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	f043 0208 	orr.w	r2, r3, #8
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e022      	b.n	80018b4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	69db      	ldr	r3, [r3, #28]
 8001874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001878:	2b00      	cmp	r3, #0
 800187a:	d107      	bne.n	800188c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	69da      	ldr	r2, [r3, #28]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800188a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d107      	bne.n	80018aa <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f042 0202 	orr.w	r2, r2, #2
 80018a8:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	08001933 	.word	0x08001933
 80018c0:	080018f1 	.word	0x080018f1
 80018c4:	0800194f 	.word	0x0800194f

080018c8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018fc:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10e      	bne.n	8001924 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0202 	bic.w	r2, r2, #2
 8001914:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f005 fd85 	bl	8007434 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b084      	sub	sp, #16
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800193e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f005 fd9f 	bl	8007484 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b084      	sub	sp, #16
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800195a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 0203 	bic.w	r2, r2, #3
 800196a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001984:	f043 0208 	orr.w	r2, r3, #8
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f7ff ffa5 	bl	80018dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001992:	bf00      	nop
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	881a      	ldrh	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b2:	1c9a      	adds	r2, r3, #2
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019bc:	b29b      	uxth	r3, r3
 80019be:	3b01      	subs	r3, #1
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d10e      	bne.n	80019ee <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80019de:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f005 fd23 	bl	8007434 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a08:	b292      	uxth	r2, r2
 8001a0a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a10:	1c9a      	adds	r2, r3, #2
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10e      	bne.n	8001a4c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001a3c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ff3e 	bl	80018c8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d13a      	bne.n	8001ae6 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d109      	bne.n	8001a8e <I2S_IRQHandler+0x3a>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a84:	2b40      	cmp	r3, #64	; 0x40
 8001a86:	d102      	bne.n	8001a8e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff ffb4 	bl	80019f6 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a94:	2b40      	cmp	r3, #64	; 0x40
 8001a96:	d126      	bne.n	8001ae6 <I2S_IRQHandler+0x92>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 0320 	and.w	r3, r3, #32
 8001aa2:	2b20      	cmp	r3, #32
 8001aa4:	d11f      	bne.n	8001ae6 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ab4:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad8:	f043 0202 	orr.w	r2, r3, #2
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff fefb 	bl	80018dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d136      	bne.n	8001b60 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d109      	bne.n	8001b10 <I2S_IRQHandler+0xbc>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b06:	2b80      	cmp	r3, #128	; 0x80
 8001b08:	d102      	bne.n	8001b10 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ff45 	bl	800199a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d122      	bne.n	8001b60 <I2S_IRQHandler+0x10c>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0320 	and.w	r3, r3, #32
 8001b24:	2b20      	cmp	r3, #32
 8001b26:	d11b      	bne.n	8001b60 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b36:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	f043 0204 	orr.w	r2, r3, #4
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff febe 	bl	80018dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001b60:	bf00      	nop
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b088      	sub	sp, #32
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4aa2      	ldr	r2, [pc, #648]	; (8001e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d101      	bne.n	8001b86 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001b82:	4ba2      	ldr	r3, [pc, #648]	; (8001e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001b84:	e001      	b.n	8001b8a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001b86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a9b      	ldr	r2, [pc, #620]	; (8001e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d101      	bne.n	8001ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001ba0:	4b9a      	ldr	r3, [pc, #616]	; (8001e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001ba2:	e001      	b.n	8001ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001ba4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bb4:	d004      	beq.n	8001bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f040 8099 	bne.w	8001cf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d107      	bne.n	8001bda <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d002      	beq.n	8001bda <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 f925 	bl	8001e24 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d107      	bne.n	8001bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d002      	beq.n	8001bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f9c8 	bl	8001f84 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bfa:	2b40      	cmp	r3, #64	; 0x40
 8001bfc:	d13a      	bne.n	8001c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	f003 0320 	and.w	r3, r3, #32
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d035      	beq.n	8001c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a7e      	ldr	r2, [pc, #504]	; (8001e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d101      	bne.n	8001c16 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001c12:	4b7e      	ldr	r3, [pc, #504]	; (8001e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001c14:	e001      	b.n	8001c1a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001c16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4979      	ldr	r1, [pc, #484]	; (8001e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001c22:	428b      	cmp	r3, r1
 8001c24:	d101      	bne.n	8001c2a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001c26:	4b79      	ldr	r3, [pc, #484]	; (8001e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001c28:	e001      	b.n	8001c2e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001c2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c32:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c42:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001c44:	2300      	movs	r3, #0
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	f043 0202 	orr.w	r2, r3, #2
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff fe34 	bl	80018dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	f040 80be 	bne.w	8001dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f003 0320 	and.w	r3, r3, #32
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 80b8 	beq.w	8001dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c9a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a59      	ldr	r2, [pc, #356]	; (8001e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d101      	bne.n	8001caa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001ca6:	4b59      	ldr	r3, [pc, #356]	; (8001e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001ca8:	e001      	b.n	8001cae <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001caa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4954      	ldr	r1, [pc, #336]	; (8001e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001cb6:	428b      	cmp	r3, r1
 8001cb8:	d101      	bne.n	8001cbe <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001cba:	4b54      	ldr	r3, [pc, #336]	; (8001e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001cbc:	e001      	b.n	8001cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001cbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cc2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cc6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	f043 0204 	orr.w	r2, r3, #4
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff fdf6 	bl	80018dc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001cf0:	e084      	b.n	8001dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d107      	bne.n	8001d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d002      	beq.n	8001d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f8be 	bl	8001e88 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d107      	bne.n	8001d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d002      	beq.n	8001d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f8fd 	bl	8001f20 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2c:	2b40      	cmp	r3, #64	; 0x40
 8001d2e:	d12f      	bne.n	8001d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f003 0320 	and.w	r3, r3, #32
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d02a      	beq.n	8001d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d48:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a2e      	ldr	r2, [pc, #184]	; (8001e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d101      	bne.n	8001d58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001d54:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001d56:	e001      	b.n	8001d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001d58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4929      	ldr	r1, [pc, #164]	; (8001e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001d64:	428b      	cmp	r3, r1
 8001d66:	d101      	bne.n	8001d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001d68:	4b28      	ldr	r3, [pc, #160]	; (8001e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001d6a:	e001      	b.n	8001d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001d6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d74:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d82:	f043 0202 	orr.w	r2, r3, #2
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff fda6 	bl	80018dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	2b08      	cmp	r3, #8
 8001d98:	d131      	bne.n	8001dfe <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	f003 0320 	and.w	r3, r3, #32
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d02c      	beq.n	8001dfe <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a17      	ldr	r2, [pc, #92]	; (8001e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d101      	bne.n	8001db2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001dae:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001db0:	e001      	b.n	8001db6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001db2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4912      	ldr	r1, [pc, #72]	; (8001e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001dbe:	428b      	cmp	r3, r1
 8001dc0:	d101      	bne.n	8001dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8001dc2:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001dc4:	e001      	b.n	8001dca <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8001dc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001dce:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001dde:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dec:	f043 0204 	orr.w	r2, r3, #4
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff fd71 	bl	80018dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001dfa:	e000      	b.n	8001dfe <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001dfc:	bf00      	nop
}
 8001dfe:	bf00      	nop
 8001e00:	3720      	adds	r7, #32
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40003800 	.word	0x40003800
 8001e0c:	40003400 	.word	0x40003400

08001e10 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	1c99      	adds	r1, r3, #2
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6251      	str	r1, [r2, #36]	; 0x24
 8001e36:	881a      	ldrh	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	3b01      	subs	r3, #1
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d113      	bne.n	8001e7e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e64:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d106      	bne.n	8001e7e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ffc9 	bl	8001e10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	1c99      	adds	r1, r3, #2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6251      	str	r1, [r2, #36]	; 0x24
 8001e9a:	8819      	ldrh	r1, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a1d      	ldr	r2, [pc, #116]	; (8001f18 <I2SEx_TxISR_I2SExt+0x90>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d101      	bne.n	8001eaa <I2SEx_TxISR_I2SExt+0x22>
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <I2SEx_TxISR_I2SExt+0x94>)
 8001ea8:	e001      	b.n	8001eae <I2SEx_TxISR_I2SExt+0x26>
 8001eaa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001eae:	460a      	mov	r2, r1
 8001eb0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d121      	bne.n	8001f0e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a12      	ldr	r2, [pc, #72]	; (8001f18 <I2SEx_TxISR_I2SExt+0x90>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d101      	bne.n	8001ed8 <I2SEx_TxISR_I2SExt+0x50>
 8001ed4:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <I2SEx_TxISR_I2SExt+0x94>)
 8001ed6:	e001      	b.n	8001edc <I2SEx_TxISR_I2SExt+0x54>
 8001ed8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	490d      	ldr	r1, [pc, #52]	; (8001f18 <I2SEx_TxISR_I2SExt+0x90>)
 8001ee4:	428b      	cmp	r3, r1
 8001ee6:	d101      	bne.n	8001eec <I2SEx_TxISR_I2SExt+0x64>
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <I2SEx_TxISR_I2SExt+0x94>)
 8001eea:	e001      	b.n	8001ef0 <I2SEx_TxISR_I2SExt+0x68>
 8001eec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ef0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ef4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d106      	bne.n	8001f0e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff ff81 	bl	8001e10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40003800 	.word	0x40003800
 8001f1c:	40003400 	.word	0x40003400

08001f20 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68d8      	ldr	r0, [r3, #12]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f32:	1c99      	adds	r1, r3, #2
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001f38:	b282      	uxth	r2, r0
 8001f3a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	3b01      	subs	r3, #1
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d113      	bne.n	8001f7c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f62:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d106      	bne.n	8001f7c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff ff4a 	bl	8001e10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f7c:	bf00      	nop
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a20      	ldr	r2, [pc, #128]	; (8002014 <I2SEx_RxISR_I2SExt+0x90>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d101      	bne.n	8001f9a <I2SEx_RxISR_I2SExt+0x16>
 8001f96:	4b20      	ldr	r3, [pc, #128]	; (8002018 <I2SEx_RxISR_I2SExt+0x94>)
 8001f98:	e001      	b.n	8001f9e <I2SEx_RxISR_I2SExt+0x1a>
 8001f9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f9e:	68d8      	ldr	r0, [r3, #12]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa4:	1c99      	adds	r1, r3, #2
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001faa:	b282      	uxth	r2, r0
 8001fac:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d121      	bne.n	800200a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a12      	ldr	r2, [pc, #72]	; (8002014 <I2SEx_RxISR_I2SExt+0x90>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d101      	bne.n	8001fd4 <I2SEx_RxISR_I2SExt+0x50>
 8001fd0:	4b11      	ldr	r3, [pc, #68]	; (8002018 <I2SEx_RxISR_I2SExt+0x94>)
 8001fd2:	e001      	b.n	8001fd8 <I2SEx_RxISR_I2SExt+0x54>
 8001fd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	490d      	ldr	r1, [pc, #52]	; (8002014 <I2SEx_RxISR_I2SExt+0x90>)
 8001fe0:	428b      	cmp	r3, r1
 8001fe2:	d101      	bne.n	8001fe8 <I2SEx_RxISR_I2SExt+0x64>
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <I2SEx_RxISR_I2SExt+0x94>)
 8001fe6:	e001      	b.n	8001fec <I2SEx_RxISR_I2SExt+0x68>
 8001fe8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ff0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d106      	bne.n	800200a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff ff03 	bl	8001e10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40003800 	.word	0x40003800
 8002018:	40003400 	.word	0x40003400

0800201c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e25b      	b.n	80024e6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d075      	beq.n	8002126 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800203a:	4ba3      	ldr	r3, [pc, #652]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	2b04      	cmp	r3, #4
 8002044:	d00c      	beq.n	8002060 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002046:	4ba0      	ldr	r3, [pc, #640]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800204e:	2b08      	cmp	r3, #8
 8002050:	d112      	bne.n	8002078 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002052:	4b9d      	ldr	r3, [pc, #628]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800205a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800205e:	d10b      	bne.n	8002078 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002060:	4b99      	ldr	r3, [pc, #612]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d05b      	beq.n	8002124 <HAL_RCC_OscConfig+0x108>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d157      	bne.n	8002124 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e236      	b.n	80024e6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002080:	d106      	bne.n	8002090 <HAL_RCC_OscConfig+0x74>
 8002082:	4b91      	ldr	r3, [pc, #580]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a90      	ldr	r2, [pc, #576]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 8002088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	e01d      	b.n	80020cc <HAL_RCC_OscConfig+0xb0>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002098:	d10c      	bne.n	80020b4 <HAL_RCC_OscConfig+0x98>
 800209a:	4b8b      	ldr	r3, [pc, #556]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a8a      	ldr	r2, [pc, #552]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 80020a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	4b88      	ldr	r3, [pc, #544]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a87      	ldr	r2, [pc, #540]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 80020ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	e00b      	b.n	80020cc <HAL_RCC_OscConfig+0xb0>
 80020b4:	4b84      	ldr	r3, [pc, #528]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a83      	ldr	r2, [pc, #524]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 80020ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020be:	6013      	str	r3, [r2, #0]
 80020c0:	4b81      	ldr	r3, [pc, #516]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a80      	ldr	r2, [pc, #512]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 80020c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d013      	beq.n	80020fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d4:	f7fe fa5e 	bl	8000594 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020dc:	f7fe fa5a 	bl	8000594 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b64      	cmp	r3, #100	; 0x64
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e1fb      	b.n	80024e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ee:	4b76      	ldr	r3, [pc, #472]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f0      	beq.n	80020dc <HAL_RCC_OscConfig+0xc0>
 80020fa:	e014      	b.n	8002126 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fc:	f7fe fa4a 	bl	8000594 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002104:	f7fe fa46 	bl	8000594 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b64      	cmp	r3, #100	; 0x64
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e1e7      	b.n	80024e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002116:	4b6c      	ldr	r3, [pc, #432]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0xe8>
 8002122:	e000      	b.n	8002126 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d063      	beq.n	80021fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002132:	4b65      	ldr	r3, [pc, #404]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00b      	beq.n	8002156 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800213e:	4b62      	ldr	r3, [pc, #392]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002146:	2b08      	cmp	r3, #8
 8002148:	d11c      	bne.n	8002184 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800214a:	4b5f      	ldr	r3, [pc, #380]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d116      	bne.n	8002184 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002156:	4b5c      	ldr	r3, [pc, #368]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d005      	beq.n	800216e <HAL_RCC_OscConfig+0x152>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d001      	beq.n	800216e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e1bb      	b.n	80024e6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216e:	4b56      	ldr	r3, [pc, #344]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4952      	ldr	r1, [pc, #328]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 800217e:	4313      	orrs	r3, r2
 8002180:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002182:	e03a      	b.n	80021fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d020      	beq.n	80021ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800218c:	4b4f      	ldr	r3, [pc, #316]	; (80022cc <HAL_RCC_OscConfig+0x2b0>)
 800218e:	2201      	movs	r2, #1
 8002190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002192:	f7fe f9ff 	bl	8000594 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800219a:	f7fe f9fb 	bl	8000594 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e19c      	b.n	80024e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ac:	4b46      	ldr	r3, [pc, #280]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f0      	beq.n	800219a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b8:	4b43      	ldr	r3, [pc, #268]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4940      	ldr	r1, [pc, #256]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	600b      	str	r3, [r1, #0]
 80021cc:	e015      	b.n	80021fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ce:	4b3f      	ldr	r3, [pc, #252]	; (80022cc <HAL_RCC_OscConfig+0x2b0>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d4:	f7fe f9de 	bl	8000594 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021dc:	f7fe f9da 	bl	8000594 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e17b      	b.n	80024e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ee:	4b36      	ldr	r3, [pc, #216]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d030      	beq.n	8002268 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d016      	beq.n	800223c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800220e:	4b30      	ldr	r3, [pc, #192]	; (80022d0 <HAL_RCC_OscConfig+0x2b4>)
 8002210:	2201      	movs	r2, #1
 8002212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002214:	f7fe f9be 	bl	8000594 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800221c:	f7fe f9ba 	bl	8000594 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e15b      	b.n	80024e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800222e:	4b26      	ldr	r3, [pc, #152]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 8002230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0f0      	beq.n	800221c <HAL_RCC_OscConfig+0x200>
 800223a:	e015      	b.n	8002268 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800223c:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <HAL_RCC_OscConfig+0x2b4>)
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002242:	f7fe f9a7 	bl	8000594 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800224a:	f7fe f9a3 	bl	8000594 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e144      	b.n	80024e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800225c:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 800225e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1f0      	bne.n	800224a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 80a0 	beq.w	80023b6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002276:	2300      	movs	r3, #0
 8002278:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800227a:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10f      	bne.n	80022a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	4a0e      	ldr	r2, [pc, #56]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 8002290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002294:	6413      	str	r3, [r2, #64]	; 0x40
 8002296:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <HAL_RCC_OscConfig+0x2ac>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022a2:	2301      	movs	r3, #1
 80022a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a6:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <HAL_RCC_OscConfig+0x2b8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d121      	bne.n	80022f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022b2:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <HAL_RCC_OscConfig+0x2b8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a07      	ldr	r2, [pc, #28]	; (80022d4 <HAL_RCC_OscConfig+0x2b8>)
 80022b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022be:	f7fe f969 	bl	8000594 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c4:	e011      	b.n	80022ea <HAL_RCC_OscConfig+0x2ce>
 80022c6:	bf00      	nop
 80022c8:	40023800 	.word	0x40023800
 80022cc:	42470000 	.word	0x42470000
 80022d0:	42470e80 	.word	0x42470e80
 80022d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d8:	f7fe f95c 	bl	8000594 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e0fd      	b.n	80024e6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ea:	4b81      	ldr	r3, [pc, #516]	; (80024f0 <HAL_RCC_OscConfig+0x4d4>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0f0      	beq.n	80022d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d106      	bne.n	800230c <HAL_RCC_OscConfig+0x2f0>
 80022fe:	4b7d      	ldr	r3, [pc, #500]	; (80024f4 <HAL_RCC_OscConfig+0x4d8>)
 8002300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002302:	4a7c      	ldr	r2, [pc, #496]	; (80024f4 <HAL_RCC_OscConfig+0x4d8>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	6713      	str	r3, [r2, #112]	; 0x70
 800230a:	e01c      	b.n	8002346 <HAL_RCC_OscConfig+0x32a>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2b05      	cmp	r3, #5
 8002312:	d10c      	bne.n	800232e <HAL_RCC_OscConfig+0x312>
 8002314:	4b77      	ldr	r3, [pc, #476]	; (80024f4 <HAL_RCC_OscConfig+0x4d8>)
 8002316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002318:	4a76      	ldr	r2, [pc, #472]	; (80024f4 <HAL_RCC_OscConfig+0x4d8>)
 800231a:	f043 0304 	orr.w	r3, r3, #4
 800231e:	6713      	str	r3, [r2, #112]	; 0x70
 8002320:	4b74      	ldr	r3, [pc, #464]	; (80024f4 <HAL_RCC_OscConfig+0x4d8>)
 8002322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002324:	4a73      	ldr	r2, [pc, #460]	; (80024f4 <HAL_RCC_OscConfig+0x4d8>)
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	6713      	str	r3, [r2, #112]	; 0x70
 800232c:	e00b      	b.n	8002346 <HAL_RCC_OscConfig+0x32a>
 800232e:	4b71      	ldr	r3, [pc, #452]	; (80024f4 <HAL_RCC_OscConfig+0x4d8>)
 8002330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002332:	4a70      	ldr	r2, [pc, #448]	; (80024f4 <HAL_RCC_OscConfig+0x4d8>)
 8002334:	f023 0301 	bic.w	r3, r3, #1
 8002338:	6713      	str	r3, [r2, #112]	; 0x70
 800233a:	4b6e      	ldr	r3, [pc, #440]	; (80024f4 <HAL_RCC_OscConfig+0x4d8>)
 800233c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233e:	4a6d      	ldr	r2, [pc, #436]	; (80024f4 <HAL_RCC_OscConfig+0x4d8>)
 8002340:	f023 0304 	bic.w	r3, r3, #4
 8002344:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d015      	beq.n	800237a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234e:	f7fe f921 	bl	8000594 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002354:	e00a      	b.n	800236c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002356:	f7fe f91d 	bl	8000594 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	f241 3288 	movw	r2, #5000	; 0x1388
 8002364:	4293      	cmp	r3, r2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e0bc      	b.n	80024e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236c:	4b61      	ldr	r3, [pc, #388]	; (80024f4 <HAL_RCC_OscConfig+0x4d8>)
 800236e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0ee      	beq.n	8002356 <HAL_RCC_OscConfig+0x33a>
 8002378:	e014      	b.n	80023a4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237a:	f7fe f90b 	bl	8000594 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002380:	e00a      	b.n	8002398 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002382:	f7fe f907 	bl	8000594 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002390:	4293      	cmp	r3, r2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e0a6      	b.n	80024e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002398:	4b56      	ldr	r3, [pc, #344]	; (80024f4 <HAL_RCC_OscConfig+0x4d8>)
 800239a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1ee      	bne.n	8002382 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023a4:	7dfb      	ldrb	r3, [r7, #23]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d105      	bne.n	80023b6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023aa:	4b52      	ldr	r3, [pc, #328]	; (80024f4 <HAL_RCC_OscConfig+0x4d8>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	4a51      	ldr	r2, [pc, #324]	; (80024f4 <HAL_RCC_OscConfig+0x4d8>)
 80023b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 8092 	beq.w	80024e4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023c0:	4b4c      	ldr	r3, [pc, #304]	; (80024f4 <HAL_RCC_OscConfig+0x4d8>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 030c 	and.w	r3, r3, #12
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d05c      	beq.n	8002486 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d141      	bne.n	8002458 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d4:	4b48      	ldr	r3, [pc, #288]	; (80024f8 <HAL_RCC_OscConfig+0x4dc>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023da:	f7fe f8db 	bl	8000594 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023e2:	f7fe f8d7 	bl	8000594 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e078      	b.n	80024e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f4:	4b3f      	ldr	r3, [pc, #252]	; (80024f4 <HAL_RCC_OscConfig+0x4d8>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1f0      	bne.n	80023e2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69da      	ldr	r2, [r3, #28]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	431a      	orrs	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240e:	019b      	lsls	r3, r3, #6
 8002410:	431a      	orrs	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002416:	085b      	lsrs	r3, r3, #1
 8002418:	3b01      	subs	r3, #1
 800241a:	041b      	lsls	r3, r3, #16
 800241c:	431a      	orrs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002422:	061b      	lsls	r3, r3, #24
 8002424:	4933      	ldr	r1, [pc, #204]	; (80024f4 <HAL_RCC_OscConfig+0x4d8>)
 8002426:	4313      	orrs	r3, r2
 8002428:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800242a:	4b33      	ldr	r3, [pc, #204]	; (80024f8 <HAL_RCC_OscConfig+0x4dc>)
 800242c:	2201      	movs	r2, #1
 800242e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002430:	f7fe f8b0 	bl	8000594 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002438:	f7fe f8ac 	bl	8000594 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e04d      	b.n	80024e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244a:	4b2a      	ldr	r3, [pc, #168]	; (80024f4 <HAL_RCC_OscConfig+0x4d8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0x41c>
 8002456:	e045      	b.n	80024e4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002458:	4b27      	ldr	r3, [pc, #156]	; (80024f8 <HAL_RCC_OscConfig+0x4dc>)
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245e:	f7fe f899 	bl	8000594 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002466:	f7fe f895 	bl	8000594 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e036      	b.n	80024e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002478:	4b1e      	ldr	r3, [pc, #120]	; (80024f4 <HAL_RCC_OscConfig+0x4d8>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f0      	bne.n	8002466 <HAL_RCC_OscConfig+0x44a>
 8002484:	e02e      	b.n	80024e4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e029      	b.n	80024e6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002492:	4b18      	ldr	r3, [pc, #96]	; (80024f4 <HAL_RCC_OscConfig+0x4d8>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d11c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d115      	bne.n	80024e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024ba:	4013      	ands	r3, r2
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d10d      	bne.n	80024e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d106      	bne.n	80024e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024dc:	429a      	cmp	r2, r3
 80024de:	d001      	beq.n	80024e4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e000      	b.n	80024e6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40007000 	.word	0x40007000
 80024f4:	40023800 	.word	0x40023800
 80024f8:	42470060 	.word	0x42470060

080024fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e0cc      	b.n	80026aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002510:	4b68      	ldr	r3, [pc, #416]	; (80026b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 030f 	and.w	r3, r3, #15
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d90c      	bls.n	8002538 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251e:	4b65      	ldr	r3, [pc, #404]	; (80026b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002526:	4b63      	ldr	r3, [pc, #396]	; (80026b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d001      	beq.n	8002538 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0b8      	b.n	80026aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d020      	beq.n	8002586 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002550:	4b59      	ldr	r3, [pc, #356]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	4a58      	ldr	r2, [pc, #352]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002556:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800255a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0308 	and.w	r3, r3, #8
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002568:	4b53      	ldr	r3, [pc, #332]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	4a52      	ldr	r2, [pc, #328]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 800256e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002572:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002574:	4b50      	ldr	r3, [pc, #320]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	494d      	ldr	r1, [pc, #308]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002582:	4313      	orrs	r3, r2
 8002584:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d044      	beq.n	800261c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d107      	bne.n	80025aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259a:	4b47      	ldr	r3, [pc, #284]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d119      	bne.n	80025da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e07f      	b.n	80026aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d003      	beq.n	80025ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025b6:	2b03      	cmp	r3, #3
 80025b8:	d107      	bne.n	80025ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ba:	4b3f      	ldr	r3, [pc, #252]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d109      	bne.n	80025da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e06f      	b.n	80026aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ca:	4b3b      	ldr	r3, [pc, #236]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e067      	b.n	80026aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025da:	4b37      	ldr	r3, [pc, #220]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f023 0203 	bic.w	r2, r3, #3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	4934      	ldr	r1, [pc, #208]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025ec:	f7fd ffd2 	bl	8000594 <HAL_GetTick>
 80025f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f2:	e00a      	b.n	800260a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f4:	f7fd ffce 	bl	8000594 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002602:	4293      	cmp	r3, r2
 8002604:	d901      	bls.n	800260a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e04f      	b.n	80026aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260a:	4b2b      	ldr	r3, [pc, #172]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 020c 	and.w	r2, r3, #12
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	429a      	cmp	r2, r3
 800261a:	d1eb      	bne.n	80025f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800261c:	4b25      	ldr	r3, [pc, #148]	; (80026b4 <HAL_RCC_ClockConfig+0x1b8>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 030f 	and.w	r3, r3, #15
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d20c      	bcs.n	8002644 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262a:	4b22      	ldr	r3, [pc, #136]	; (80026b4 <HAL_RCC_ClockConfig+0x1b8>)
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002632:	4b20      	ldr	r3, [pc, #128]	; (80026b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	429a      	cmp	r2, r3
 800263e:	d001      	beq.n	8002644 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e032      	b.n	80026aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	d008      	beq.n	8002662 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002650:	4b19      	ldr	r3, [pc, #100]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	4916      	ldr	r1, [pc, #88]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	4313      	orrs	r3, r2
 8002660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d009      	beq.n	8002682 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800266e:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	490e      	ldr	r1, [pc, #56]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	4313      	orrs	r3, r2
 8002680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002682:	f000 f821 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 8002686:	4601      	mov	r1, r0
 8002688:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	091b      	lsrs	r3, r3, #4
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	4a0a      	ldr	r2, [pc, #40]	; (80026bc <HAL_RCC_ClockConfig+0x1c0>)
 8002694:	5cd3      	ldrb	r3, [r2, r3]
 8002696:	fa21 f303 	lsr.w	r3, r1, r3
 800269a:	4a09      	ldr	r2, [pc, #36]	; (80026c0 <HAL_RCC_ClockConfig+0x1c4>)
 800269c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800269e:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <HAL_RCC_ClockConfig+0x1c8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fd ff32 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40023c00 	.word	0x40023c00
 80026b8:	40023800 	.word	0x40023800
 80026bc:	08007be0 	.word	0x08007be0
 80026c0:	20000008 	.word	0x20000008
 80026c4:	20000000 	.word	0x20000000

080026c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80026cc:	b084      	sub	sp, #16
 80026ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	607b      	str	r3, [r7, #4]
 80026d4:	2300      	movs	r3, #0
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	2300      	movs	r3, #0
 80026da:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026e0:	4b67      	ldr	r3, [pc, #412]	; (8002880 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 030c 	and.w	r3, r3, #12
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d007      	beq.n	80026fc <HAL_RCC_GetSysClockFreq+0x34>
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d008      	beq.n	8002702 <HAL_RCC_GetSysClockFreq+0x3a>
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f040 80bb 	bne.w	800286c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026f6:	4b63      	ldr	r3, [pc, #396]	; (8002884 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80026f8:	60bb      	str	r3, [r7, #8]
       break;
 80026fa:	e0ba      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026fc:	4b62      	ldr	r3, [pc, #392]	; (8002888 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80026fe:	60bb      	str	r3, [r7, #8]
      break;
 8002700:	e0b7      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002702:	4b5f      	ldr	r3, [pc, #380]	; (8002880 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800270a:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800270c:	4b5c      	ldr	r3, [pc, #368]	; (8002880 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d051      	beq.n	80027bc <HAL_RCC_GetSysClockFreq+0xf4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002718:	4b59      	ldr	r3, [pc, #356]	; (8002880 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	099b      	lsrs	r3, r3, #6
 800271e:	f04f 0400 	mov.w	r4, #0
 8002722:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	ea03 0501 	and.w	r5, r3, r1
 800272e:	ea04 0602 	and.w	r6, r4, r2
 8002732:	46ab      	mov	fp, r5
 8002734:	46b4      	mov	ip, r6
 8002736:	eb1b 030b 	adds.w	r3, fp, fp
 800273a:	eb4c 040c 	adc.w	r4, ip, ip
 800273e:	469b      	mov	fp, r3
 8002740:	46a4      	mov	ip, r4
 8002742:	eb1b 0b05 	adds.w	fp, fp, r5
 8002746:	eb4c 0c06 	adc.w	ip, ip, r6
 800274a:	f04f 0100 	mov.w	r1, #0
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	ea4f 120c 	mov.w	r2, ip, lsl #4
 8002756:	ea42 721b 	orr.w	r2, r2, fp, lsr #28
 800275a:	ea4f 110b 	mov.w	r1, fp, lsl #4
 800275e:	468b      	mov	fp, r1
 8002760:	4694      	mov	ip, r2
 8002762:	ebbb 0b05 	subs.w	fp, fp, r5
 8002766:	eb6c 0c06 	sbc.w	ip, ip, r6
 800276a:	f04f 0100 	mov.w	r1, #0
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8002776:	ea42 725b 	orr.w	r2, r2, fp, lsr #29
 800277a:	ea4f 01cb 	mov.w	r1, fp, lsl #3
 800277e:	468b      	mov	fp, r1
 8002780:	4694      	mov	ip, r2
 8002782:	ebbb 0b05 	subs.w	fp, fp, r5
 8002786:	eb6c 0c06 	sbc.w	ip, ip, r6
 800278a:	f04f 0100 	mov.w	r1, #0
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8002796:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 800279a:	ea4f 410b 	mov.w	r1, fp, lsl #16
 800279e:	468b      	mov	fp, r1
 80027a0:	4694      	mov	ip, r2
 80027a2:	4658      	mov	r0, fp
 80027a4:	4661      	mov	r1, ip
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f04f 0400 	mov.w	r4, #0
 80027ac:	461a      	mov	r2, r3
 80027ae:	4623      	mov	r3, r4
 80027b0:	f7fd fd0a 	bl	80001c8 <__aeabi_uldivmod>
 80027b4:	4603      	mov	r3, r0
 80027b6:	460c      	mov	r4, r1
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	e049      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027bc:	4b30      	ldr	r3, [pc, #192]	; (8002880 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	099b      	lsrs	r3, r3, #6
 80027c2:	f04f 0400 	mov.w	r4, #0
 80027c6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	ea03 0501 	and.w	r5, r3, r1
 80027d2:	ea04 0602 	and.w	r6, r4, r2
 80027d6:	4629      	mov	r1, r5
 80027d8:	4632      	mov	r2, r6
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	f04f 0400 	mov.w	r4, #0
 80027e2:	0154      	lsls	r4, r2, #5
 80027e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80027e8:	014b      	lsls	r3, r1, #5
 80027ea:	4619      	mov	r1, r3
 80027ec:	4622      	mov	r2, r4
 80027ee:	1b49      	subs	r1, r1, r5
 80027f0:	eb62 0206 	sbc.w	r2, r2, r6
 80027f4:	f04f 0300 	mov.w	r3, #0
 80027f8:	f04f 0400 	mov.w	r4, #0
 80027fc:	0194      	lsls	r4, r2, #6
 80027fe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002802:	018b      	lsls	r3, r1, #6
 8002804:	1a5b      	subs	r3, r3, r1
 8002806:	eb64 0402 	sbc.w	r4, r4, r2
 800280a:	f04f 0100 	mov.w	r1, #0
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	00e2      	lsls	r2, r4, #3
 8002814:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002818:	00d9      	lsls	r1, r3, #3
 800281a:	460b      	mov	r3, r1
 800281c:	4614      	mov	r4, r2
 800281e:	195b      	adds	r3, r3, r5
 8002820:	eb44 0406 	adc.w	r4, r4, r6
 8002824:	f04f 0100 	mov.w	r1, #0
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	02a2      	lsls	r2, r4, #10
 800282e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002832:	0299      	lsls	r1, r3, #10
 8002834:	460b      	mov	r3, r1
 8002836:	4614      	mov	r4, r2
 8002838:	4618      	mov	r0, r3
 800283a:	4621      	mov	r1, r4
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f04f 0400 	mov.w	r4, #0
 8002842:	461a      	mov	r2, r3
 8002844:	4623      	mov	r3, r4
 8002846:	f7fd fcbf 	bl	80001c8 <__aeabi_uldivmod>
 800284a:	4603      	mov	r3, r0
 800284c:	460c      	mov	r4, r1
 800284e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	0c1b      	lsrs	r3, r3, #16
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	3301      	adds	r3, #1
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	fbb2 f3f3 	udiv	r3, r2, r3
 8002868:	60bb      	str	r3, [r7, #8]
      break;
 800286a:	e002      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800286c:	4b05      	ldr	r3, [pc, #20]	; (8002884 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800286e:	60bb      	str	r3, [r7, #8]
      break;
 8002870:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002872:	68bb      	ldr	r3, [r7, #8]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800287e:	bf00      	nop
 8002880:	40023800 	.word	0x40023800
 8002884:	00f42400 	.word	0x00f42400
 8002888:	01770000 	.word	0x01770000

0800288c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002890:	4b03      	ldr	r3, [pc, #12]	; (80028a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002892:	681b      	ldr	r3, [r3, #0]
}
 8002894:	4618      	mov	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	20000008 	.word	0x20000008

080028a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028a8:	f7ff fff0 	bl	800288c <HAL_RCC_GetHCLKFreq>
 80028ac:	4601      	mov	r1, r0
 80028ae:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	0a9b      	lsrs	r3, r3, #10
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	4a03      	ldr	r2, [pc, #12]	; (80028c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ba:	5cd3      	ldrb	r3, [r2, r3]
 80028bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40023800 	.word	0x40023800
 80028c8:	08007bf0 	.word	0x08007bf0

080028cc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d105      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d035      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80028f4:	4b62      	ldr	r3, [pc, #392]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80028fa:	f7fd fe4b 	bl	8000594 <HAL_GetTick>
 80028fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002900:	e008      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002902:	f7fd fe47 	bl	8000594 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e0b0      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002914:	4b5b      	ldr	r3, [pc, #364]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1f0      	bne.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	019a      	lsls	r2, r3, #6
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	071b      	lsls	r3, r3, #28
 800292c:	4955      	ldr	r1, [pc, #340]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800292e:	4313      	orrs	r3, r2
 8002930:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002934:	4b52      	ldr	r3, [pc, #328]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002936:	2201      	movs	r2, #1
 8002938:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800293a:	f7fd fe2b 	bl	8000594 <HAL_GetTick>
 800293e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002940:	e008      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002942:	f7fd fe27 	bl	8000594 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e090      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002954:	4b4b      	ldr	r3, [pc, #300]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f0      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 8083 	beq.w	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	4b44      	ldr	r3, [pc, #272]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	4a43      	ldr	r2, [pc, #268]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800297c:	6413      	str	r3, [r2, #64]	; 0x40
 800297e:	4b41      	ldr	r3, [pc, #260]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800298a:	4b3f      	ldr	r3, [pc, #252]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a3e      	ldr	r2, [pc, #248]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002994:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002996:	f7fd fdfd 	bl	8000594 <HAL_GetTick>
 800299a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800299c:	e008      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800299e:	f7fd fdf9 	bl	8000594 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e062      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80029b0:	4b35      	ldr	r3, [pc, #212]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0f0      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029bc:	4b31      	ldr	r3, [pc, #196]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d02f      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d028      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029da:	4b2a      	ldr	r3, [pc, #168]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029e4:	4b29      	ldr	r3, [pc, #164]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80029e6:	2201      	movs	r2, #1
 80029e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029ea:	4b28      	ldr	r3, [pc, #160]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80029f0:	4a24      	ldr	r2, [pc, #144]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029f6:	4b23      	ldr	r3, [pc, #140]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d114      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002a02:	f7fd fdc7 	bl	8000594 <HAL_GetTick>
 8002a06:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a08:	e00a      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a0a:	f7fd fdc3 	bl	8000594 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e02a      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a20:	4b18      	ldr	r3, [pc, #96]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0ee      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a38:	d10d      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002a3a:	4b12      	ldr	r3, [pc, #72]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a4e:	490d      	ldr	r1, [pc, #52]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	608b      	str	r3, [r1, #8]
 8002a54:	e005      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002a56:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	4a0a      	ldr	r2, [pc, #40]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a5c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a60:	6093      	str	r3, [r2, #8]
 8002a62:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a6e:	4905      	ldr	r1, [pc, #20]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	42470068 	.word	0x42470068
 8002a84:	40023800 	.word	0x40023800
 8002a88:	40007000 	.word	0x40007000
 8002a8c:	42470e40 	.word	0x42470e40

08002a90 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d13d      	bne.n	8002b2a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002aae:	4b22      	ldr	r3, [pc, #136]	; (8002b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ab6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d004      	beq.n	8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d12f      	bne.n	8002b22 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002ac2:	4b1e      	ldr	r3, [pc, #120]	; (8002b3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002ac4:	617b      	str	r3, [r7, #20]
          break;
 8002ac6:	e02f      	b.n	8002b28 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002ac8:	4b1b      	ldr	r3, [pc, #108]	; (8002b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ad0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ad4:	d108      	bne.n	8002ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002ad6:	4b18      	ldr	r3, [pc, #96]	; (8002b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ade:	4a18      	ldr	r2, [pc, #96]	; (8002b40 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae4:	613b      	str	r3, [r7, #16]
 8002ae6:	e007      	b.n	8002af8 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002ae8:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002af0:	4a14      	ldr	r2, [pc, #80]	; (8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002af8:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002afe:	099b      	lsrs	r3, r3, #6
 8002b00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	fb02 f303 	mul.w	r3, r2, r3
 8002b0a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b12:	0f1b      	lsrs	r3, r3, #28
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1e:	617b      	str	r3, [r7, #20]
          break;
 8002b20:	e002      	b.n	8002b28 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	617b      	str	r3, [r7, #20]
          break;
 8002b26:	bf00      	nop
        }
      }
      break;
 8002b28:	bf00      	nop
    }
  }
  return frequency;
 8002b2a:	697b      	ldr	r3, [r7, #20]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	371c      	adds	r7, #28
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	00bb8000 	.word	0x00bb8000
 8002b40:	01770000 	.word	0x01770000
 8002b44:	00f42400 	.word	0x00f42400

08002b48 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e022      	b.n	8002ba0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d105      	bne.n	8002b72 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f004 feab 	bl	80078c8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2203      	movs	r2, #3
 8002b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f814 	bl	8002ba8 <HAL_SD_InitCard>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e00a      	b.n	8002ba0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002ba8:	b5b0      	push	{r4, r5, r7, lr}
 8002baa:	b08e      	sub	sp, #56	; 0x38
 8002bac:	af04      	add	r7, sp, #16
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002bc4:	2376      	movs	r3, #118	; 0x76
 8002bc6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681d      	ldr	r5, [r3, #0]
 8002bcc:	466c      	mov	r4, sp
 8002bce:	f107 0314 	add.w	r3, r7, #20
 8002bd2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002bd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002bda:	f107 0308 	add.w	r3, r7, #8
 8002bde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002be0:	4628      	mov	r0, r5
 8002be2:	f001 f92d 	bl	8003e40 <SDIO_Init>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002bec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e031      	b.n	8002c5c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002bf8:	4b1a      	ldr	r3, [pc, #104]	; (8002c64 <HAL_SD_InitCard+0xbc>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f001 f965 	bl	8003ed2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002c08:	4b16      	ldr	r3, [pc, #88]	; (8002c64 <HAL_SD_InitCard+0xbc>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 ff00 	bl	8003a14 <SD_PowerON>
 8002c14:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00b      	beq.n	8002c34 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e013      	b.n	8002c5c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 fe1f 	bl	8003878 <SD_InitCard>
 8002c3a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00b      	beq.n	8002c5a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3728      	adds	r7, #40	; 0x28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bdb0      	pop	{r4, r5, r7, pc}
 8002c64:	422580a0 	.word	0x422580a0

08002c68 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b092      	sub	sp, #72	; 0x48
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
 8002c74:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002c76:	f7fd fc8d 	bl	8000594 <HAL_GetTick>
 8002c7a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d107      	bne.n	8002c9a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e1d9      	b.n	800304e <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	f040 81cc 	bne.w	8003040 <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002cae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	441a      	add	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d907      	bls.n	8002ccc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e1c0      	b.n	800304e <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2203      	movs	r2, #3
 8002cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d002      	beq.n	8002cea <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce6:	025b      	lsls	r3, r3, #9
 8002ce8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f001 f980 	bl	8003ff8 <SDMMC_CmdBlockLength>
 8002cf8:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8002cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00f      	beq.n	8002d20 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a9b      	ldr	r2, [pc, #620]	; (8002f74 <HAL_SD_ReadBlocks+0x30c>)
 8002d06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e196      	b.n	800304e <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002d20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d24:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	025b      	lsls	r3, r3, #9
 8002d2a:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002d2c:	2390      	movs	r3, #144	; 0x90
 8002d2e:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002d30:	2302      	movs	r3, #2
 8002d32:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002d34:	2300      	movs	r3, #0
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f107 0214 	add.w	r2, r7, #20
 8002d44:	4611      	mov	r1, r2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f001 f92a 	bl	8003fa0 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d90a      	bls.n	8002d68 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2202      	movs	r2, #2
 8002d56:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f001 f98e 	bl	8004080 <SDMMC_CmdReadMultiBlock>
 8002d64:	6478      	str	r0, [r7, #68]	; 0x44
 8002d66:	e009      	b.n	8002d7c <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d74:	4618      	mov	r0, r3
 8002d76:	f001 f961 	bl	800403c <SDMMC_CmdReadSingleBlock>
 8002d7a:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d012      	beq.n	8002da8 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a7b      	ldr	r2, [pc, #492]	; (8002f74 <HAL_SD_ReadBlocks+0x30c>)
 8002d88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d90:	431a      	orrs	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e152      	b.n	800304e <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002dac:	e061      	b.n	8002e72 <HAL_SD_ReadBlocks+0x20a>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d03c      	beq.n	8002e36 <HAL_SD_ReadBlocks+0x1ce>
 8002dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d039      	beq.n	8002e36 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	643b      	str	r3, [r7, #64]	; 0x40
 8002dc6:	e033      	b.n	8002e30 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f001 f862 	bl	8003e96 <SDIO_ReadFIFO>
 8002dd2:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dda:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dde:	3301      	adds	r3, #1
 8002de0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002de4:	3b01      	subs	r3, #1
 8002de6:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dea:	0a1b      	lsrs	r3, r3, #8
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df4:	3301      	adds	r3, #1
 8002df6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e00:	0c1b      	lsrs	r3, r3, #16
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e06:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e10:	3b01      	subs	r3, #1
 8002e12:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e16:	0e1b      	lsrs	r3, r3, #24
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e1c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e20:	3301      	adds	r3, #1
 8002e22:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e26:	3b01      	subs	r3, #1
 8002e28:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8002e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	643b      	str	r3, [r7, #64]	; 0x40
 8002e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e32:	2b07      	cmp	r3, #7
 8002e34:	d9c8      	bls.n	8002dc8 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002e36:	f7fd fbad 	bl	8000594 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d902      	bls.n	8002e4c <HAL_SD_ReadBlocks+0x1e4>
 8002e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d112      	bne.n	8002e72 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a48      	ldr	r2, [pc, #288]	; (8002f74 <HAL_SD_ReadBlocks+0x30c>)
 8002e52:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e58:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e0ed      	b.n	800304e <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e78:	f240 332a 	movw	r3, #810	; 0x32a
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d095      	beq.n	8002dae <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d022      	beq.n	8002ed6 <HAL_SD_ReadBlocks+0x26e>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d91f      	bls.n	8002ed6 <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	d01b      	beq.n	8002ed6 <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f001 f952 	bl	800414c <SDMMC_CmdStopTransfer>
 8002ea8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002eaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d012      	beq.n	8002ed6 <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a2f      	ldr	r2, [pc, #188]	; (8002f74 <HAL_SD_ReadBlocks+0x30c>)
 8002eb6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e0bb      	b.n	800304e <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002edc:	f003 0308 	and.w	r3, r3, #8
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d012      	beq.n	8002f0a <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a22      	ldr	r2, [pc, #136]	; (8002f74 <HAL_SD_ReadBlocks+0x30c>)
 8002eea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef0:	f043 0208 	orr.w	r2, r3, #8
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e0a1      	b.n	800304e <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d012      	beq.n	8002f3e <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a15      	ldr	r2, [pc, #84]	; (8002f74 <HAL_SD_ReadBlocks+0x30c>)
 8002f1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f24:	f043 0202 	orr.w	r2, r3, #2
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e087      	b.n	800304e <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f44:	f003 0320 	and.w	r3, r3, #32
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d064      	beq.n	8003016 <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a08      	ldr	r2, [pc, #32]	; (8002f74 <HAL_SD_ReadBlocks+0x30c>)
 8002f52:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f58:	f043 0220 	orr.w	r2, r3, #32
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e06d      	b.n	800304e <HAL_SD_ReadBlocks+0x3e6>
 8002f72:	bf00      	nop
 8002f74:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 ff8a 	bl	8003e96 <SDIO_ReadFIFO>
 8002f82:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8e:	3301      	adds	r3, #1
 8002f90:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f94:	3b01      	subs	r3, #1
 8002f96:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9a:	0a1b      	lsrs	r3, r3, #8
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002faa:	3b01      	subs	r3, #1
 8002fac:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb0:	0c1b      	lsrs	r3, r3, #16
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fba:	3301      	adds	r3, #1
 8002fbc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc6:	0e1b      	lsrs	r3, r3, #24
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fcc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002fda:	f7fd fadb 	bl	8000594 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d902      	bls.n	8002ff0 <HAL_SD_ReadBlocks+0x388>
 8002fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d112      	bne.n	8003016 <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a18      	ldr	r2, [pc, #96]	; (8003058 <HAL_SD_ReadBlocks+0x3f0>)
 8002ff6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e01b      	b.n	800304e <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d002      	beq.n	800302a <HAL_SD_ReadBlocks+0x3c2>
 8003024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1a6      	bne.n	8002f78 <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003032:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800303c:	2300      	movs	r3, #0
 800303e:	e006      	b.n	800304e <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003044:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
  }
}
 800304e:	4618      	mov	r0, r3
 8003050:	3748      	adds	r7, #72	; 0x48
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	004005ff 	.word	0x004005ff

0800305c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b092      	sub	sp, #72	; 0x48
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800306a:	f7fd fa93 	bl	8000594 <HAL_GetTick>
 800306e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d107      	bne.n	800308e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003082:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e184      	b.n	8003398 <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b01      	cmp	r3, #1
 8003098:	f040 8177 	bne.w	800338a <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80030a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	441a      	add	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d907      	bls.n	80030c0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e16b      	b.n	8003398 <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2203      	movs	r2, #3
 80030c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2200      	movs	r2, #0
 80030ce:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d002      	beq.n	80030de <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80030d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030da:	025b      	lsls	r3, r3, #9
 80030dc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 ff86 	bl	8003ff8 <SDMMC_CmdBlockLength>
 80030ec:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80030ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00f      	beq.n	8003114 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a9d      	ldr	r2, [pc, #628]	; (8003370 <HAL_SD_WriteBlocks+0x314>)
 80030fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003102:	431a      	orrs	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e141      	b.n	8003398 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003114:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003118:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	025b      	lsls	r3, r3, #9
 800311e:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003120:	2390      	movs	r3, #144	; 0x90
 8003122:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003124:	2300      	movs	r3, #0
 8003126:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003128:	2300      	movs	r3, #0
 800312a:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800312c:	2301      	movs	r3, #1
 800312e:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f107 0218 	add.w	r2, r7, #24
 8003138:	4611      	mov	r1, r2
 800313a:	4618      	mov	r0, r3
 800313c:	f000 ff30 	bl	8003fa0 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d90a      	bls.n	800315c <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2220      	movs	r2, #32
 800314a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003152:	4618      	mov	r0, r3
 8003154:	f000 ffd8 	bl	8004108 <SDMMC_CmdWriteMultiBlock>
 8003158:	6478      	str	r0, [r7, #68]	; 0x44
 800315a:	e009      	b.n	8003170 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2210      	movs	r2, #16
 8003160:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003168:	4618      	mov	r0, r3
 800316a:	f000 ffab 	bl	80040c4 <SDMMC_CmdWriteSingleBlock>
 800316e:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003172:	2b00      	cmp	r3, #0
 8003174:	d012      	beq.n	800319c <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a7d      	ldr	r2, [pc, #500]	; (8003370 <HAL_SD_WriteBlocks+0x314>)
 800317c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003184:	431a      	orrs	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0fd      	b.n	8003398 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80031a0:	e065      	b.n	800326e <HAL_SD_WriteBlocks+0x212>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d040      	beq.n	8003232 <HAL_SD_WriteBlocks+0x1d6>
 80031b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d03d      	beq.n	8003232 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80031b6:	2300      	movs	r3, #0
 80031b8:	643b      	str	r3, [r7, #64]	; 0x40
 80031ba:	e037      	b.n	800322c <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 80031bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80031c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031c4:	3301      	adds	r3, #1
 80031c6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80031c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ca:	3b01      	subs	r3, #1
 80031cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80031ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	021a      	lsls	r2, r3, #8
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80031da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031dc:	3301      	adds	r3, #1
 80031de:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80031e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031e2:	3b01      	subs	r3, #1
 80031e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80031e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	041a      	lsls	r2, r3, #16
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80031f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f4:	3301      	adds	r3, #1
 80031f6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80031f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031fa:	3b01      	subs	r3, #1
 80031fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80031fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	061a      	lsls	r2, r3, #24
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	4313      	orrs	r3, r2
 8003208:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800320a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320c:	3301      	adds	r3, #1
 800320e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003212:	3b01      	subs	r3, #1
 8003214:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f107 0214 	add.w	r2, r7, #20
 800321e:	4611      	mov	r1, r2
 8003220:	4618      	mov	r0, r3
 8003222:	f000 fe45 	bl	8003eb0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003228:	3301      	adds	r3, #1
 800322a:	643b      	str	r3, [r7, #64]	; 0x40
 800322c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800322e:	2b07      	cmp	r3, #7
 8003230:	d9c4      	bls.n	80031bc <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003232:	f7fd f9af 	bl	8000594 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800323e:	429a      	cmp	r2, r3
 8003240:	d902      	bls.n	8003248 <HAL_SD_WriteBlocks+0x1ec>
 8003242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003244:	2b00      	cmp	r3, #0
 8003246:	d112      	bne.n	800326e <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a48      	ldr	r2, [pc, #288]	; (8003370 <HAL_SD_WriteBlocks+0x314>)
 800324e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003256:	431a      	orrs	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e094      	b.n	8003398 <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003274:	f240 331a 	movw	r3, #794	; 0x31a
 8003278:	4013      	ands	r3, r2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d091      	beq.n	80031a2 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003288:	2b00      	cmp	r3, #0
 800328a:	d022      	beq.n	80032d2 <HAL_SD_WriteBlocks+0x276>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d91f      	bls.n	80032d2 <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003296:	2b03      	cmp	r3, #3
 8003298:	d01b      	beq.n	80032d2 <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 ff54 	bl	800414c <SDMMC_CmdStopTransfer>
 80032a4:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80032a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d012      	beq.n	80032d2 <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a2f      	ldr	r2, [pc, #188]	; (8003370 <HAL_SD_WriteBlocks+0x314>)
 80032b2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032ba:	431a      	orrs	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e062      	b.n	8003398 <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d8:	f003 0308 	and.w	r3, r3, #8
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d012      	beq.n	8003306 <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a22      	ldr	r2, [pc, #136]	; (8003370 <HAL_SD_WriteBlocks+0x314>)
 80032e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ec:	f043 0208 	orr.w	r2, r3, #8
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e048      	b.n	8003398 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d012      	beq.n	800333a <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a15      	ldr	r2, [pc, #84]	; (8003370 <HAL_SD_WriteBlocks+0x314>)
 800331a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003320:	f043 0202 	orr.w	r2, r3, #2
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e02e      	b.n	8003398 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003340:	f003 0310 	and.w	r3, r3, #16
 8003344:	2b00      	cmp	r3, #0
 8003346:	d015      	beq.n	8003374 <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a08      	ldr	r2, [pc, #32]	; (8003370 <HAL_SD_WriteBlocks+0x314>)
 800334e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003354:	f043 0210 	orr.w	r2, r3, #16
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e014      	b.n	8003398 <HAL_SD_WriteBlocks+0x33c>
 800336e:	bf00      	nop
 8003370:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f240 523a 	movw	r2, #1338	; 0x53a
 800337c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003386:	2300      	movs	r3, #0
 8003388:	e006      	b.n	8003398 <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
  }
}
 8003398:	4618      	mov	r0, r3
 800339a:	3748      	adds	r7, #72	; 0x48
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033ae:	0f9b      	lsrs	r3, r3, #30
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033ba:	0e9b      	lsrs	r3, r3, #26
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	f003 030f 	and.w	r3, r3, #15
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033cc:	0e1b      	lsrs	r3, r3, #24
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	f003 0303 	and.w	r3, r3, #3
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033de:	0c1b      	lsrs	r3, r3, #16
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033ea:	0a1b      	lsrs	r3, r3, #8
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003400:	0d1b      	lsrs	r3, r3, #20
 8003402:	b29a      	uxth	r2, r3
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800340c:	0c1b      	lsrs	r3, r3, #16
 800340e:	b2db      	uxtb	r3, r3
 8003410:	f003 030f 	and.w	r3, r3, #15
 8003414:	b2da      	uxtb	r2, r3
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800341e:	0bdb      	lsrs	r3, r3, #15
 8003420:	b2db      	uxtb	r3, r3
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	b2da      	uxtb	r2, r3
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003430:	0b9b      	lsrs	r3, r3, #14
 8003432:	b2db      	uxtb	r3, r3
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	b2da      	uxtb	r2, r3
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003442:	0b5b      	lsrs	r3, r3, #13
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	b2da      	uxtb	r2, r3
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003454:	0b1b      	lsrs	r3, r3, #12
 8003456:	b2db      	uxtb	r3, r3
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	b2da      	uxtb	r2, r3
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	2200      	movs	r2, #0
 8003466:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346c:	2b00      	cmp	r3, #0
 800346e:	d163      	bne.n	8003538 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003474:	009a      	lsls	r2, r3, #2
 8003476:	f640 73fc 	movw	r3, #4092	; 0xffc
 800347a:	4013      	ands	r3, r2
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003480:	0f92      	lsrs	r2, r2, #30
 8003482:	431a      	orrs	r2, r3
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800348c:	0edb      	lsrs	r3, r3, #27
 800348e:	b2db      	uxtb	r3, r3
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	b2da      	uxtb	r2, r3
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800349e:	0e1b      	lsrs	r3, r3, #24
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034b0:	0d5b      	lsrs	r3, r3, #21
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034c2:	0c9b      	lsrs	r3, r3, #18
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034d4:	0bdb      	lsrs	r3, r3, #15
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	7e1b      	ldrb	r3, [r3, #24]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	3302      	adds	r3, #2
 80034f8:	2201      	movs	r2, #1
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003502:	fb02 f203 	mul.w	r2, r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	7a1b      	ldrb	r3, [r3, #8]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	f003 030f 	and.w	r3, r3, #15
 8003514:	2201      	movs	r2, #1
 8003516:	409a      	lsls	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003524:	0a52      	lsrs	r2, r2, #9
 8003526:	fb02 f203 	mul.w	r2, r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003534:	661a      	str	r2, [r3, #96]	; 0x60
 8003536:	e031      	b.n	800359c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353c:	2b01      	cmp	r3, #1
 800353e:	d11d      	bne.n	800357c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003544:	041b      	lsls	r3, r3, #16
 8003546:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800354e:	0c1b      	lsrs	r3, r3, #16
 8003550:	431a      	orrs	r2, r3
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	3301      	adds	r3, #1
 800355c:	029a      	lsls	r2, r3, #10
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003570:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	661a      	str	r2, [r3, #96]	; 0x60
 800357a:	e00f      	b.n	800359c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a58      	ldr	r2, [pc, #352]	; (80036e4 <HAL_SD_GetCardCSD+0x344>)
 8003582:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003588:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e09d      	b.n	80036d8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035a0:	0b9b      	lsrs	r3, r3, #14
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	b2da      	uxtb	r2, r3
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035b2:	09db      	lsrs	r3, r3, #7
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d4:	0fdb      	lsrs	r3, r3, #31
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e0:	0f5b      	lsrs	r3, r3, #29
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f2:	0e9b      	lsrs	r3, r3, #26
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003604:	0d9b      	lsrs	r3, r3, #22
 8003606:	b2db      	uxtb	r3, r3
 8003608:	f003 030f 	and.w	r3, r3, #15
 800360c:	b2da      	uxtb	r2, r3
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003616:	0d5b      	lsrs	r3, r3, #21
 8003618:	b2db      	uxtb	r3, r3
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	b2da      	uxtb	r2, r3
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003632:	0c1b      	lsrs	r3, r3, #16
 8003634:	b2db      	uxtb	r3, r3
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	b2da      	uxtb	r2, r3
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003646:	0bdb      	lsrs	r3, r3, #15
 8003648:	b2db      	uxtb	r3, r3
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	b2da      	uxtb	r2, r3
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365a:	0b9b      	lsrs	r3, r3, #14
 800365c:	b2db      	uxtb	r3, r3
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	b2da      	uxtb	r2, r3
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366e:	0b5b      	lsrs	r3, r3, #13
 8003670:	b2db      	uxtb	r3, r3
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	b2da      	uxtb	r2, r3
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003682:	0b1b      	lsrs	r3, r3, #12
 8003684:	b2db      	uxtb	r3, r3
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	b2da      	uxtb	r2, r3
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003696:	0a9b      	lsrs	r3, r3, #10
 8003698:	b2db      	uxtb	r3, r3
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036aa:	0a1b      	lsrs	r3, r3, #8
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036be:	085b      	lsrs	r3, r3, #1
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	004005ff 	.word	0x004005ff

080036e8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003740:	b5b0      	push	{r4, r5, r7, lr}
 8003742:	b08e      	sub	sp, #56	; 0x38
 8003744:	af04      	add	r7, sp, #16
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2203      	movs	r2, #3
 800374e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	2b03      	cmp	r3, #3
 8003758:	d02e      	beq.n	80037b8 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003760:	d106      	bne.n	8003770 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003766:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	639a      	str	r2, [r3, #56]	; 0x38
 800376e:	e029      	b.n	80037c4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003776:	d10a      	bne.n	800378e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 fa01 	bl	8003b80 <SD_WideBus_Enable>
 800377e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	639a      	str	r2, [r3, #56]	; 0x38
 800378c:	e01a      	b.n	80037c4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10a      	bne.n	80037aa <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 fa3e 	bl	8003c16 <SD_WideBus_Disable>
 800379a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	639a      	str	r2, [r3, #56]	; 0x38
 80037a8:	e00c      	b.n	80037c4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	639a      	str	r2, [r3, #56]	; 0x38
 80037b6:	e005      	b.n	80037c4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d009      	beq.n	80037e0 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a18      	ldr	r2, [pc, #96]	; (8003834 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80037d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e024      	b.n	800382a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681d      	ldr	r5, [r3, #0]
 8003806:	466c      	mov	r4, sp
 8003808:	f107 0318 	add.w	r3, r7, #24
 800380c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003810:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003814:	f107 030c 	add.w	r3, r7, #12
 8003818:	cb0e      	ldmia	r3, {r1, r2, r3}
 800381a:	4628      	mov	r0, r5
 800381c:	f000 fb10 	bl	8003e40 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3728      	adds	r7, #40	; 0x28
 800382e:	46bd      	mov	sp, r7
 8003830:	bdb0      	pop	{r4, r5, r7, pc}
 8003832:	bf00      	nop
 8003834:	004005ff 	.word	0x004005ff

08003838 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003840:	2300      	movs	r3, #0
 8003842:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003844:	f107 030c 	add.w	r3, r7, #12
 8003848:	4619      	mov	r1, r3
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f970 	bl	8003b30 <SD_SendStatus>
 8003850:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	0a5b      	lsrs	r3, r3, #9
 8003868:	f003 030f 	and.w	r3, r3, #15
 800386c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800386e:	693b      	ldr	r3, [r7, #16]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003878:	b5b0      	push	{r4, r5, r7, lr}
 800387a:	b094      	sub	sp, #80	; 0x50
 800387c:	af04      	add	r7, sp, #16
 800387e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003880:	2301      	movs	r3, #1
 8003882:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f000 fb31 	bl	8003ef0 <SDIO_GetPowerState>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d102      	bne.n	800389a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003894:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003898:	e0b7      	b.n	8003a0a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	2b03      	cmp	r3, #3
 80038a0:	d02f      	beq.n	8003902 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 fd5a 	bl	8004360 <SDMMC_CmdSendCID>
 80038ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80038ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <SD_InitCard+0x40>
    {
      return errorstate;
 80038b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038b6:	e0a8      	b.n	8003a0a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2100      	movs	r1, #0
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 fb5b 	bl	8003f7a <SDIO_GetResponse>
 80038c4:	4602      	mov	r2, r0
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2104      	movs	r1, #4
 80038d0:	4618      	mov	r0, r3
 80038d2:	f000 fb52 	bl	8003f7a <SDIO_GetResponse>
 80038d6:	4602      	mov	r2, r0
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2108      	movs	r1, #8
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 fb49 	bl	8003f7a <SDIO_GetResponse>
 80038e8:	4602      	mov	r2, r0
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	210c      	movs	r1, #12
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 fb40 	bl	8003f7a <SDIO_GetResponse>
 80038fa:	4602      	mov	r2, r0
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003906:	2b03      	cmp	r3, #3
 8003908:	d00d      	beq.n	8003926 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f107 020e 	add.w	r2, r7, #14
 8003912:	4611      	mov	r1, r2
 8003914:	4618      	mov	r0, r3
 8003916:	f000 fd60 	bl	80043da <SDMMC_CmdSetRelAdd>
 800391a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800391c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <SD_InitCard+0xae>
    {
      return errorstate;
 8003922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003924:	e071      	b.n	8003a0a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392a:	2b03      	cmp	r3, #3
 800392c:	d036      	beq.n	800399c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800392e:	89fb      	ldrh	r3, [r7, #14]
 8003930:	461a      	mov	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800393e:	041b      	lsls	r3, r3, #16
 8003940:	4619      	mov	r1, r3
 8003942:	4610      	mov	r0, r2
 8003944:	f000 fd2a 	bl	800439c <SDMMC_CmdSendCSD>
 8003948:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800394a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003952:	e05a      	b.n	8003a0a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2100      	movs	r1, #0
 800395a:	4618      	mov	r0, r3
 800395c:	f000 fb0d 	bl	8003f7a <SDIO_GetResponse>
 8003960:	4602      	mov	r2, r0
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2104      	movs	r1, #4
 800396c:	4618      	mov	r0, r3
 800396e:	f000 fb04 	bl	8003f7a <SDIO_GetResponse>
 8003972:	4602      	mov	r2, r0
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2108      	movs	r1, #8
 800397e:	4618      	mov	r0, r3
 8003980:	f000 fafb 	bl	8003f7a <SDIO_GetResponse>
 8003984:	4602      	mov	r2, r0
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	210c      	movs	r1, #12
 8003990:	4618      	mov	r0, r3
 8003992:	f000 faf2 	bl	8003f7a <SDIO_GetResponse>
 8003996:	4602      	mov	r2, r0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2104      	movs	r1, #4
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 fae9 	bl	8003f7a <SDIO_GetResponse>
 80039a8:	4603      	mov	r3, r0
 80039aa:	0d1a      	lsrs	r2, r3, #20
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80039b0:	f107 0310 	add.w	r3, r7, #16
 80039b4:	4619      	mov	r1, r3
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff fcf2 	bl	80033a0 <HAL_SD_GetCardCSD>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80039c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80039c6:	e020      	b.n	8003a0a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6819      	ldr	r1, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d0:	041b      	lsls	r3, r3, #16
 80039d2:	f04f 0400 	mov.w	r4, #0
 80039d6:	461a      	mov	r2, r3
 80039d8:	4623      	mov	r3, r4
 80039da:	4608      	mov	r0, r1
 80039dc:	f000 fbd8 	bl	8004190 <SDMMC_CmdSelDesel>
 80039e0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80039e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <SD_InitCard+0x174>
  {
    return errorstate;
 80039e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ea:	e00e      	b.n	8003a0a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681d      	ldr	r5, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	466c      	mov	r4, sp
 80039f4:	f103 0210 	add.w	r2, r3, #16
 80039f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80039fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80039fe:	3304      	adds	r3, #4
 8003a00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a02:	4628      	mov	r0, r5
 8003a04:	f000 fa1c 	bl	8003e40 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3740      	adds	r7, #64	; 0x40
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003a14 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	2300      	movs	r3, #0
 8003a26:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 fbd2 	bl	80041d6 <SDMMC_CmdGoIdleState>
 8003a32:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <SD_PowerON+0x2a>
  {
    return errorstate;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	e072      	b.n	8003b24 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 fbe5 	bl	8004212 <SDMMC_CmdOperCond>
 8003a48:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00d      	beq.n	8003a6c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fbbb 	bl	80041d6 <SDMMC_CmdGoIdleState>
 8003a60:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d004      	beq.n	8003a72 <SD_PowerON+0x5e>
    {
      return errorstate;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	e05b      	b.n	8003b24 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d137      	bne.n	8003aea <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2100      	movs	r1, #0
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 fbe5 	bl	8004250 <SDMMC_CmdAppCommand>
 8003a86:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d02d      	beq.n	8003aea <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a8e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003a92:	e047      	b.n	8003b24 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2100      	movs	r1, #0
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 fbd8 	bl	8004250 <SDMMC_CmdAppCommand>
 8003aa0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <SD_PowerON+0x98>
    {
      return errorstate;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	e03b      	b.n	8003b24 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	491e      	ldr	r1, [pc, #120]	; (8003b2c <SD_PowerON+0x118>)
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 fbee 	bl	8004294 <SDMMC_CmdAppOperCommand>
 8003ab8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003ac0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003ac4:	e02e      	b.n	8003b24 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2100      	movs	r1, #0
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 fa54 	bl	8003f7a <SDIO_GetResponse>
 8003ad2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	0fdb      	lsrs	r3, r3, #31
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d101      	bne.n	8003ae0 <SD_PowerON+0xcc>
 8003adc:	2301      	movs	r3, #1
 8003ade:	e000      	b.n	8003ae2 <SD_PowerON+0xce>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	613b      	str	r3, [r7, #16]

    count++;
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d802      	bhi.n	8003afa <SD_PowerON+0xe6>
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0cc      	beq.n	8003a94 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d902      	bls.n	8003b0a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003b04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b08:	e00c      	b.n	8003b24 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	645a      	str	r2, [r3, #68]	; 0x44
 8003b1a:	e002      	b.n	8003b22 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3718      	adds	r7, #24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	c1100000 	.word	0xc1100000

08003b30 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d102      	bne.n	8003b46 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003b40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b44:	e018      	b.n	8003b78 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b4e:	041b      	lsls	r3, r3, #16
 8003b50:	4619      	mov	r1, r3
 8003b52:	4610      	mov	r0, r2
 8003b54:	f000 fc62 	bl	800441c <SDMMC_CmdSendStatus>
 8003b58:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	e009      	b.n	8003b78 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2100      	movs	r1, #0
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 fa05 	bl	8003f7a <SDIO_GetResponse>
 8003b70:	4602      	mov	r2, r0
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60fb      	str	r3, [r7, #12]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2100      	movs	r1, #0
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 f9ef 	bl	8003f7a <SDIO_GetResponse>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ba6:	d102      	bne.n	8003bae <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003ba8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003bac:	e02f      	b.n	8003c0e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003bae:	f107 030c 	add.w	r3, r7, #12
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f879 	bl	8003cac <SD_FindSCR>
 8003bba:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	e023      	b.n	8003c0e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d01c      	beq.n	8003c0a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd8:	041b      	lsls	r3, r3, #16
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4610      	mov	r0, r2
 8003bde:	f000 fb37 	bl	8004250 <SDMMC_CmdAppCommand>
 8003be2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	e00f      	b.n	8003c0e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2102      	movs	r1, #2
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 fb70 	bl	80042da <SDMMC_CmdBusWidth>
 8003bfa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	e003      	b.n	8003c0e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003c06:	2300      	movs	r3, #0
 8003c08:	e001      	b.n	8003c0e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003c0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b086      	sub	sp, #24
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	2300      	movs	r3, #0
 8003c24:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 f9a4 	bl	8003f7a <SDIO_GetResponse>
 8003c32:	4603      	mov	r3, r0
 8003c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c3c:	d102      	bne.n	8003c44 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003c3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c42:	e02f      	b.n	8003ca4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003c44:	f107 030c 	add.w	r3, r7, #12
 8003c48:	4619      	mov	r1, r3
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f82e 	bl	8003cac <SD_FindSCR>
 8003c50:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	e023      	b.n	8003ca4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d01c      	beq.n	8003ca0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c6e:	041b      	lsls	r3, r3, #16
 8003c70:	4619      	mov	r1, r3
 8003c72:	4610      	mov	r0, r2
 8003c74:	f000 faec 	bl	8004250 <SDMMC_CmdAppCommand>
 8003c78:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	e00f      	b.n	8003ca4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2100      	movs	r1, #0
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 fb25 	bl	80042da <SDMMC_CmdBusWidth>
 8003c90:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	e003      	b.n	8003ca4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	e001      	b.n	8003ca4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003ca0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3718      	adds	r7, #24
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003cac:	b590      	push	{r4, r7, lr}
 8003cae:	b08f      	sub	sp, #60	; 0x3c
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003cb6:	f7fc fc6d 	bl	8000594 <HAL_GetTick>
 8003cba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	60bb      	str	r3, [r7, #8]
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2108      	movs	r1, #8
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 f990 	bl	8003ff8 <SDMMC_CmdBlockLength>
 8003cd8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce2:	e0a9      	b.n	8003e38 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cec:	041b      	lsls	r3, r3, #16
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	f000 faad 	bl	8004250 <SDMMC_CmdAppCommand>
 8003cf6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <SD_FindSCR+0x56>
  {
    return errorstate;
 8003cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d00:	e09a      	b.n	8003e38 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003d02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d06:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003d08:	2308      	movs	r3, #8
 8003d0a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003d0c:	2330      	movs	r3, #48	; 0x30
 8003d0e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003d10:	2302      	movs	r3, #2
 8003d12:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f107 0210 	add.w	r2, r7, #16
 8003d24:	4611      	mov	r1, r2
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 f93a 	bl	8003fa0 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 faf4 	bl	800431e <SDMMC_CmdSendSCR>
 8003d36:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d022      	beq.n	8003d84 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8003d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d40:	e07a      	b.n	8003e38 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00e      	beq.n	8003d6e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6819      	ldr	r1, [r3, #0]
 8003d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	f107 0208 	add.w	r2, r7, #8
 8003d5c:	18d4      	adds	r4, r2, r3
 8003d5e:	4608      	mov	r0, r1
 8003d60:	f000 f899 	bl	8003e96 <SDIO_ReadFIFO>
 8003d64:	4603      	mov	r3, r0
 8003d66:	6023      	str	r3, [r4, #0]
      index++;
 8003d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003d6e:	f7fc fc11 	bl	8000594 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d7c:	d102      	bne.n	8003d84 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003d7e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003d82:	e059      	b.n	8003e38 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d8a:	f240 432a 	movw	r3, #1066	; 0x42a
 8003d8e:	4013      	ands	r3, r2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0d6      	beq.n	8003d42 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d005      	beq.n	8003dae <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2208      	movs	r2, #8
 8003da8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003daa:	2308      	movs	r3, #8
 8003dac:	e044      	b.n	8003e38 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d005      	beq.n	8003dc8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	e037      	b.n	8003e38 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d005      	beq.n	8003de2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003dde:	2320      	movs	r3, #32
 8003de0:	e02a      	b.n	8003e38 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f240 523a 	movw	r2, #1338	; 0x53a
 8003dea:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	061a      	lsls	r2, r3, #24
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	021b      	lsls	r3, r3, #8
 8003df4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003df8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	0a1b      	lsrs	r3, r3, #8
 8003dfe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003e02:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	0e1b      	lsrs	r3, r3, #24
 8003e08:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0c:	601a      	str	r2, [r3, #0]
    scr++;
 8003e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e10:	3304      	adds	r3, #4
 8003e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	061a      	lsls	r2, r3, #24
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	021b      	lsls	r3, r3, #8
 8003e1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003e20:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	0a1b      	lsrs	r3, r3, #8
 8003e26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003e2a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	0e1b      	lsrs	r3, r3, #24
 8003e30:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e34:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	373c      	adds	r7, #60	; 0x3c
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd90      	pop	{r4, r7, pc}

08003e40 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003e40:	b084      	sub	sp, #16
 8003e42:	b480      	push	{r7}
 8003e44:	b085      	sub	sp, #20
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
 8003e4a:	f107 001c 	add.w	r0, r7, #28
 8003e4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8003e52:	2300      	movs	r3, #0
 8003e54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8003e56:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003e58:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003e5a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003e5e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8003e62:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8003e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8003e66:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8003e6a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8003e7a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	431a      	orrs	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	b004      	add	sp, #16
 8003e94:	4770      	bx	lr

08003e96 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b082      	sub	sp, #8
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2203      	movs	r2, #3
 8003ede:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8003ee0:	2002      	movs	r0, #2
 8003ee2:	f7fc fb63 	bl	80005ac <HAL_Delay>
  
  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0303 	and.w	r3, r3, #3
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003f16:	2300      	movs	r3, #0
 8003f18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003f2a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8003f30:	431a      	orrs	r2, r3
                       Command->CPSM);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003f36:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003f46:	f023 030f 	bic.w	r3, r3, #15
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	b2db      	uxtb	r3, r3
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b085      	sub	sp, #20
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3314      	adds	r3, #20
 8003f88:	461a      	mov	r2, r3
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
}  
 8003f94:	4618      	mov	r0, r3
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003fc6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8003fcc:	431a      	orrs	r2, r3
                       Data->DPSM);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8003fd2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fde:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0

}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004006:	2310      	movs	r3, #16
 8004008:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800400a:	2340      	movs	r3, #64	; 0x40
 800400c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800400e:	2300      	movs	r3, #0
 8004010:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004016:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004018:	f107 0308 	add.w	r3, r7, #8
 800401c:	4619      	mov	r1, r3
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7ff ff74 	bl	8003f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004024:	f241 3288 	movw	r2, #5000	; 0x1388
 8004028:	2110      	movs	r1, #16
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 fa40 	bl	80044b0 <SDMMC_GetCmdResp1>
 8004030:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004032:	69fb      	ldr	r3, [r7, #28]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3720      	adds	r7, #32
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b088      	sub	sp, #32
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800404a:	2311      	movs	r3, #17
 800404c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800404e:	2340      	movs	r3, #64	; 0x40
 8004050:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004052:	2300      	movs	r3, #0
 8004054:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800405a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800405c:	f107 0308 	add.w	r3, r7, #8
 8004060:	4619      	mov	r1, r3
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff ff52 	bl	8003f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004068:	f241 3288 	movw	r2, #5000	; 0x1388
 800406c:	2111      	movs	r1, #17
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 fa1e 	bl	80044b0 <SDMMC_GetCmdResp1>
 8004074:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004076:	69fb      	ldr	r3, [r7, #28]
}
 8004078:	4618      	mov	r0, r3
 800407a:	3720      	adds	r7, #32
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800408e:	2312      	movs	r3, #18
 8004090:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004092:	2340      	movs	r3, #64	; 0x40
 8004094:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004096:	2300      	movs	r3, #0
 8004098:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800409a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800409e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040a0:	f107 0308 	add.w	r3, r7, #8
 80040a4:	4619      	mov	r1, r3
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff ff30 	bl	8003f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80040ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b0:	2112      	movs	r1, #18
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f9fc 	bl	80044b0 <SDMMC_GetCmdResp1>
 80040b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80040ba:	69fb      	ldr	r3, [r7, #28]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3720      	adds	r7, #32
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80040d2:	2318      	movs	r3, #24
 80040d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80040d6:	2340      	movs	r3, #64	; 0x40
 80040d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80040da:	2300      	movs	r3, #0
 80040dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80040de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80040e4:	f107 0308 	add.w	r3, r7, #8
 80040e8:	4619      	mov	r1, r3
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7ff ff0e 	bl	8003f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80040f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f4:	2118      	movs	r1, #24
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f9da 	bl	80044b0 <SDMMC_GetCmdResp1>
 80040fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80040fe:	69fb      	ldr	r3, [r7, #28]
}
 8004100:	4618      	mov	r0, r3
 8004102:	3720      	adds	r7, #32
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004116:	2319      	movs	r3, #25
 8004118:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800411a:	2340      	movs	r3, #64	; 0x40
 800411c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800411e:	2300      	movs	r3, #0
 8004120:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004126:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004128:	f107 0308 	add.w	r3, r7, #8
 800412c:	4619      	mov	r1, r3
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7ff feec 	bl	8003f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004134:	f241 3288 	movw	r2, #5000	; 0x1388
 8004138:	2119      	movs	r1, #25
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f9b8 	bl	80044b0 <SDMMC_GetCmdResp1>
 8004140:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004142:	69fb      	ldr	r3, [r7, #28]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3720      	adds	r7, #32
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004158:	230c      	movs	r3, #12
 800415a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800415c:	2340      	movs	r3, #64	; 0x40
 800415e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004160:	2300      	movs	r3, #0
 8004162:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004164:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004168:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800416a:	f107 0308 	add.w	r3, r7, #8
 800416e:	4619      	mov	r1, r3
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7ff fecb 	bl	8003f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004176:	4a05      	ldr	r2, [pc, #20]	; (800418c <SDMMC_CmdStopTransfer+0x40>)
 8004178:	210c      	movs	r1, #12
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f998 	bl	80044b0 <SDMMC_GetCmdResp1>
 8004180:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004182:	69fb      	ldr	r3, [r7, #28]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3720      	adds	r7, #32
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	05f5e100 	.word	0x05f5e100

08004190 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08a      	sub	sp, #40	; 0x28
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80041a0:	2307      	movs	r3, #7
 80041a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80041a4:	2340      	movs	r3, #64	; 0x40
 80041a6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80041a8:	2300      	movs	r3, #0
 80041aa:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041b0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041b2:	f107 0310 	add.w	r3, r7, #16
 80041b6:	4619      	mov	r1, r3
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f7ff fea7 	bl	8003f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80041be:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c2:	2107      	movs	r1, #7
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f973 	bl	80044b0 <SDMMC_GetCmdResp1>
 80041ca:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3728      	adds	r7, #40	; 0x28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b088      	sub	sp, #32
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80041de:	2300      	movs	r3, #0
 80041e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80041e2:	2300      	movs	r3, #0
 80041e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80041e6:	2300      	movs	r3, #0
 80041e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80041ea:	2300      	movs	r3, #0
 80041ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80041ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80041f4:	f107 0308 	add.w	r3, r7, #8
 80041f8:	4619      	mov	r1, r3
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7ff fe86 	bl	8003f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f92d 	bl	8004460 <SDMMC_GetCmdError>
 8004206:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004208:	69fb      	ldr	r3, [r7, #28]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3720      	adds	r7, #32
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b088      	sub	sp, #32
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800421a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800421e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004220:	2308      	movs	r3, #8
 8004222:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004224:	2340      	movs	r3, #64	; 0x40
 8004226:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004228:	2300      	movs	r3, #0
 800422a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800422c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004230:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004232:	f107 0308 	add.w	r3, r7, #8
 8004236:	4619      	mov	r1, r3
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7ff fe67 	bl	8003f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 fb16 	bl	8004870 <SDMMC_GetCmdResp7>
 8004244:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004246:	69fb      	ldr	r3, [r7, #28]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3720      	adds	r7, #32
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b088      	sub	sp, #32
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800425e:	2337      	movs	r3, #55	; 0x37
 8004260:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004262:	2340      	movs	r3, #64	; 0x40
 8004264:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004266:	2300      	movs	r3, #0
 8004268:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800426a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800426e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004270:	f107 0308 	add.w	r3, r7, #8
 8004274:	4619      	mov	r1, r3
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7ff fe48 	bl	8003f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800427c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004280:	2137      	movs	r1, #55	; 0x37
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f914 	bl	80044b0 <SDMMC_GetCmdResp1>
 8004288:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800428a:	69fb      	ldr	r3, [r7, #28]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3720      	adds	r7, #32
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b088      	sub	sp, #32
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80042aa:	2329      	movs	r3, #41	; 0x29
 80042ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80042ae:	2340      	movs	r3, #64	; 0x40
 80042b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80042b2:	2300      	movs	r3, #0
 80042b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80042bc:	f107 0308 	add.w	r3, r7, #8
 80042c0:	4619      	mov	r1, r3
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7ff fe22 	bl	8003f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 fa23 	bl	8004714 <SDMMC_GetCmdResp3>
 80042ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80042d0:	69fb      	ldr	r3, [r7, #28]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3720      	adds	r7, #32
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b088      	sub	sp, #32
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
 80042e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80042e8:	2306      	movs	r3, #6
 80042ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80042ec:	2340      	movs	r3, #64	; 0x40
 80042ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80042f0:	2300      	movs	r3, #0
 80042f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80042f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80042fa:	f107 0308 	add.w	r3, r7, #8
 80042fe:	4619      	mov	r1, r3
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f7ff fe03 	bl	8003f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004306:	f241 3288 	movw	r2, #5000	; 0x1388
 800430a:	2106      	movs	r1, #6
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 f8cf 	bl	80044b0 <SDMMC_GetCmdResp1>
 8004312:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004314:	69fb      	ldr	r3, [r7, #28]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3720      	adds	r7, #32
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b088      	sub	sp, #32
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004326:	2300      	movs	r3, #0
 8004328:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800432a:	2333      	movs	r3, #51	; 0x33
 800432c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800432e:	2340      	movs	r3, #64	; 0x40
 8004330:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004332:	2300      	movs	r3, #0
 8004334:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800433a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800433c:	f107 0308 	add.w	r3, r7, #8
 8004340:	4619      	mov	r1, r3
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff fde2 	bl	8003f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004348:	f241 3288 	movw	r2, #5000	; 0x1388
 800434c:	2133      	movs	r1, #51	; 0x33
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f8ae 	bl	80044b0 <SDMMC_GetCmdResp1>
 8004354:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004356:	69fb      	ldr	r3, [r7, #28]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3720      	adds	r7, #32
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b088      	sub	sp, #32
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800436c:	2302      	movs	r3, #2
 800436e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004370:	23c0      	movs	r3, #192	; 0xc0
 8004372:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004374:	2300      	movs	r3, #0
 8004376:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800437c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800437e:	f107 0308 	add.w	r3, r7, #8
 8004382:	4619      	mov	r1, r3
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7ff fdc1 	bl	8003f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f97c 	bl	8004688 <SDMMC_GetCmdResp2>
 8004390:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004392:	69fb      	ldr	r3, [r7, #28]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3720      	adds	r7, #32
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b088      	sub	sp, #32
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80043aa:	2309      	movs	r3, #9
 80043ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80043ae:	23c0      	movs	r3, #192	; 0xc0
 80043b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80043b2:	2300      	movs	r3, #0
 80043b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80043b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80043bc:	f107 0308 	add.w	r3, r7, #8
 80043c0:	4619      	mov	r1, r3
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7ff fda2 	bl	8003f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f95d 	bl	8004688 <SDMMC_GetCmdResp2>
 80043ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80043d0:	69fb      	ldr	r3, [r7, #28]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3720      	adds	r7, #32
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b088      	sub	sp, #32
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80043e8:	2303      	movs	r3, #3
 80043ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80043ec:	2340      	movs	r3, #64	; 0x40
 80043ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80043f0:	2300      	movs	r3, #0
 80043f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80043f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80043fa:	f107 0308 	add.w	r3, r7, #8
 80043fe:	4619      	mov	r1, r3
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7ff fd83 	bl	8003f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	2103      	movs	r1, #3
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f9bc 	bl	8004788 <SDMMC_GetCmdResp6>
 8004410:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004412:	69fb      	ldr	r3, [r7, #28]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3720      	adds	r7, #32
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b088      	sub	sp, #32
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800442a:	230d      	movs	r3, #13
 800442c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800442e:	2340      	movs	r3, #64	; 0x40
 8004430:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004432:	2300      	movs	r3, #0
 8004434:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800443a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800443c:	f107 0308 	add.w	r3, r7, #8
 8004440:	4619      	mov	r1, r3
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7ff fd62 	bl	8003f0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004448:	f241 3288 	movw	r2, #5000	; 0x1388
 800444c:	210d      	movs	r1, #13
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f82e 	bl	80044b0 <SDMMC_GetCmdResp1>
 8004454:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004456:	69fb      	ldr	r3, [r7, #28]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3720      	adds	r7, #32
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004460:	b490      	push	{r4, r7}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004468:	4b0f      	ldr	r3, [pc, #60]	; (80044a8 <SDMMC_GetCmdError+0x48>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a0f      	ldr	r2, [pc, #60]	; (80044ac <SDMMC_GetCmdError+0x4c>)
 800446e:	fba2 2303 	umull	r2, r3, r2, r3
 8004472:	0a5b      	lsrs	r3, r3, #9
 8004474:	f241 3288 	movw	r2, #5000	; 0x1388
 8004478:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800447c:	4623      	mov	r3, r4
 800447e:	1e5c      	subs	r4, r3, #1
 8004480:	2b00      	cmp	r3, #0
 8004482:	d102      	bne.n	800448a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004484:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004488:	e009      	b.n	800449e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004492:	2b00      	cmp	r3, #0
 8004494:	d0f2      	beq.n	800447c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	22c5      	movs	r2, #197	; 0xc5
 800449a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc90      	pop	{r4, r7}
 80044a6:	4770      	bx	lr
 80044a8:	20000008 	.word	0x20000008
 80044ac:	10624dd3 	.word	0x10624dd3

080044b0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80044b0:	b590      	push	{r4, r7, lr}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	460b      	mov	r3, r1
 80044ba:	607a      	str	r2, [r7, #4]
 80044bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80044be:	4b6f      	ldr	r3, [pc, #444]	; (800467c <SDMMC_GetCmdResp1+0x1cc>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a6f      	ldr	r2, [pc, #444]	; (8004680 <SDMMC_GetCmdResp1+0x1d0>)
 80044c4:	fba2 2303 	umull	r2, r3, r2, r3
 80044c8:	0a5b      	lsrs	r3, r3, #9
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80044d0:	4623      	mov	r3, r4
 80044d2:	1e5c      	subs	r4, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d102      	bne.n	80044de <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80044d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80044dc:	e0c9      	b.n	8004672 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0f0      	beq.n	80044d0 <SDMMC_GetCmdResp1+0x20>
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1eb      	bne.n	80044d0 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	d004      	beq.n	800450e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2204      	movs	r2, #4
 8004508:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800450a:	2304      	movs	r3, #4
 800450c:	e0b1      	b.n	8004672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d004      	beq.n	8004524 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2201      	movs	r2, #1
 800451e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004520:	2301      	movs	r3, #1
 8004522:	e0a6      	b.n	8004672 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	22c5      	movs	r2, #197	; 0xc5
 8004528:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f7ff fd18 	bl	8003f60 <SDIO_GetCommandResponse>
 8004530:	4603      	mov	r3, r0
 8004532:	461a      	mov	r2, r3
 8004534:	7afb      	ldrb	r3, [r7, #11]
 8004536:	4293      	cmp	r3, r2
 8004538:	d001      	beq.n	800453e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800453a:	2301      	movs	r3, #1
 800453c:	e099      	b.n	8004672 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800453e:	2100      	movs	r1, #0
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f7ff fd1a 	bl	8003f7a <SDIO_GetResponse>
 8004546:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	4b4e      	ldr	r3, [pc, #312]	; (8004684 <SDMMC_GetCmdResp1+0x1d4>)
 800454c:	4013      	ands	r3, r2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8004552:	2300      	movs	r3, #0
 8004554:	e08d      	b.n	8004672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	2b00      	cmp	r3, #0
 800455a:	da02      	bge.n	8004562 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800455c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004560:	e087      	b.n	8004672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800456c:	2340      	movs	r3, #64	; 0x40
 800456e:	e080      	b.n	8004672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800457a:	2380      	movs	r3, #128	; 0x80
 800457c:	e079      	b.n	8004672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004588:	f44f 7380 	mov.w	r3, #256	; 0x100
 800458c:	e071      	b.n	8004672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d002      	beq.n	800459e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004598:	f44f 7300 	mov.w	r3, #512	; 0x200
 800459c:	e069      	b.n	8004672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d002      	beq.n	80045ae <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80045a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045ac:	e061      	b.n	8004672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80045b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80045bc:	e059      	b.n	8004672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80045c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045cc:	e051      	b.n	8004672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80045d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045dc:	e049      	b.n	8004672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d002      	beq.n	80045ee <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80045e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80045ec:	e041      	b.n	8004672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d002      	beq.n	80045fe <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80045f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045fc:	e039      	b.n	8004672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d002      	beq.n	800460e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004608:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800460c:	e031      	b.n	8004672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d002      	beq.n	800461e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004618:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800461c:	e029      	b.n	8004672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004628:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800462c:	e021      	b.n	8004672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004638:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800463c:	e019      	b.n	8004672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004648:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800464c:	e011      	b.n	8004672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d002      	beq.n	800465e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004658:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800465c:	e009      	b.n	8004672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	f003 0308 	and.w	r3, r3, #8
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004668:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800466c:	e001      	b.n	8004672 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800466e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004672:	4618      	mov	r0, r3
 8004674:	371c      	adds	r7, #28
 8004676:	46bd      	mov	sp, r7
 8004678:	bd90      	pop	{r4, r7, pc}
 800467a:	bf00      	nop
 800467c:	20000008 	.word	0x20000008
 8004680:	10624dd3 	.word	0x10624dd3
 8004684:	fdffe008 	.word	0xfdffe008

08004688 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004688:	b490      	push	{r4, r7}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004690:	4b1e      	ldr	r3, [pc, #120]	; (800470c <SDMMC_GetCmdResp2+0x84>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a1e      	ldr	r2, [pc, #120]	; (8004710 <SDMMC_GetCmdResp2+0x88>)
 8004696:	fba2 2303 	umull	r2, r3, r2, r3
 800469a:	0a5b      	lsrs	r3, r3, #9
 800469c:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80046a4:	4623      	mov	r3, r4
 80046a6:	1e5c      	subs	r4, r3, #1
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d102      	bne.n	80046b2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80046ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80046b0:	e026      	b.n	8004700 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0f0      	beq.n	80046a4 <SDMMC_GetCmdResp2+0x1c>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1eb      	bne.n	80046a4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d004      	beq.n	80046e2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2204      	movs	r2, #4
 80046dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80046de:	2304      	movs	r3, #4
 80046e0:	e00e      	b.n	8004700 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d004      	beq.n	80046f8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e003      	b.n	8004700 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	22c5      	movs	r2, #197	; 0xc5
 80046fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bc90      	pop	{r4, r7}
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	20000008 	.word	0x20000008
 8004710:	10624dd3 	.word	0x10624dd3

08004714 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004714:	b490      	push	{r4, r7}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800471c:	4b18      	ldr	r3, [pc, #96]	; (8004780 <SDMMC_GetCmdResp3+0x6c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a18      	ldr	r2, [pc, #96]	; (8004784 <SDMMC_GetCmdResp3+0x70>)
 8004722:	fba2 2303 	umull	r2, r3, r2, r3
 8004726:	0a5b      	lsrs	r3, r3, #9
 8004728:	f241 3288 	movw	r2, #5000	; 0x1388
 800472c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004730:	4623      	mov	r3, r4
 8004732:	1e5c      	subs	r4, r3, #1
 8004734:	2b00      	cmp	r3, #0
 8004736:	d102      	bne.n	800473e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004738:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800473c:	e01b      	b.n	8004776 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004742:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0f0      	beq.n	8004730 <SDMMC_GetCmdResp3+0x1c>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1eb      	bne.n	8004730 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b00      	cmp	r3, #0
 8004762:	d004      	beq.n	800476e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2204      	movs	r2, #4
 8004768:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800476a:	2304      	movs	r3, #4
 800476c:	e003      	b.n	8004776 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	22c5      	movs	r2, #197	; 0xc5
 8004772:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bc90      	pop	{r4, r7}
 800477e:	4770      	bx	lr
 8004780:	20000008 	.word	0x20000008
 8004784:	10624dd3 	.word	0x10624dd3

08004788 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004788:	b590      	push	{r4, r7, lr}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	460b      	mov	r3, r1
 8004792:	607a      	str	r2, [r7, #4]
 8004794:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004796:	4b34      	ldr	r3, [pc, #208]	; (8004868 <SDMMC_GetCmdResp6+0xe0>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a34      	ldr	r2, [pc, #208]	; (800486c <SDMMC_GetCmdResp6+0xe4>)
 800479c:	fba2 2303 	umull	r2, r3, r2, r3
 80047a0:	0a5b      	lsrs	r3, r3, #9
 80047a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80047aa:	4623      	mov	r3, r4
 80047ac:	1e5c      	subs	r4, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d102      	bne.n	80047b8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80047b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80047b6:	e052      	b.n	800485e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047bc:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0f0      	beq.n	80047aa <SDMMC_GetCmdResp6+0x22>
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1eb      	bne.n	80047aa <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d004      	beq.n	80047e8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2204      	movs	r2, #4
 80047e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80047e4:	2304      	movs	r3, #4
 80047e6:	e03a      	b.n	800485e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d004      	beq.n	80047fe <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2201      	movs	r2, #1
 80047f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e02f      	b.n	800485e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f7ff fbae 	bl	8003f60 <SDIO_GetCommandResponse>
 8004804:	4603      	mov	r3, r0
 8004806:	461a      	mov	r2, r3
 8004808:	7afb      	ldrb	r3, [r7, #11]
 800480a:	4293      	cmp	r3, r2
 800480c:	d001      	beq.n	8004812 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800480e:	2301      	movs	r3, #1
 8004810:	e025      	b.n	800485e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	22c5      	movs	r2, #197	; 0xc5
 8004816:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004818:	2100      	movs	r1, #0
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f7ff fbad 	bl	8003f7a <SDIO_GetResponse>
 8004820:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d106      	bne.n	800483a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	0c1b      	lsrs	r3, r3, #16
 8004830:	b29a      	uxth	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004836:	2300      	movs	r3, #0
 8004838:	e011      	b.n	800485e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d002      	beq.n	800484a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004844:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004848:	e009      	b.n	800485e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004858:	e001      	b.n	800485e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800485a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800485e:	4618      	mov	r0, r3
 8004860:	371c      	adds	r7, #28
 8004862:	46bd      	mov	sp, r7
 8004864:	bd90      	pop	{r4, r7, pc}
 8004866:	bf00      	nop
 8004868:	20000008 	.word	0x20000008
 800486c:	10624dd3 	.word	0x10624dd3

08004870 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004870:	b490      	push	{r4, r7}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004878:	4b21      	ldr	r3, [pc, #132]	; (8004900 <SDMMC_GetCmdResp7+0x90>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a21      	ldr	r2, [pc, #132]	; (8004904 <SDMMC_GetCmdResp7+0x94>)
 800487e:	fba2 2303 	umull	r2, r3, r2, r3
 8004882:	0a5b      	lsrs	r3, r3, #9
 8004884:	f241 3288 	movw	r2, #5000	; 0x1388
 8004888:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800488c:	4623      	mov	r3, r4
 800488e:	1e5c      	subs	r4, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d102      	bne.n	800489a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004894:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004898:	e02c      	b.n	80048f4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800489e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d0f0      	beq.n	800488c <SDMMC_GetCmdResp7+0x1c>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1eb      	bne.n	800488c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d004      	beq.n	80048ca <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2204      	movs	r2, #4
 80048c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80048c6:	2304      	movs	r3, #4
 80048c8:	e014      	b.n	80048f4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d004      	beq.n	80048e0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80048dc:	2301      	movs	r3, #1
 80048de:	e009      	b.n	80048f4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d002      	beq.n	80048f2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2240      	movs	r2, #64	; 0x40
 80048f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80048f2:	2300      	movs	r3, #0
  
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bc90      	pop	{r4, r7}
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	20000008 	.word	0x20000008
 8004904:	10624dd3 	.word	0x10624dd3

08004908 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	4603      	mov	r3, r0
 8004910:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004912:	79fb      	ldrb	r3, [r7, #7]
 8004914:	4a08      	ldr	r2, [pc, #32]	; (8004938 <disk_status+0x30>)
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	79fa      	ldrb	r2, [r7, #7]
 8004920:	4905      	ldr	r1, [pc, #20]	; (8004938 <disk_status+0x30>)
 8004922:	440a      	add	r2, r1
 8004924:	7a12      	ldrb	r2, [r2, #8]
 8004926:	4610      	mov	r0, r2
 8004928:	4798      	blx	r3
 800492a:	4603      	mov	r3, r0
 800492c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800492e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	20000050 	.word	0x20000050

0800493c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	4603      	mov	r3, r0
 8004944:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800494a:	79fb      	ldrb	r3, [r7, #7]
 800494c:	4a0d      	ldr	r2, [pc, #52]	; (8004984 <disk_initialize+0x48>)
 800494e:	5cd3      	ldrb	r3, [r2, r3]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d111      	bne.n	8004978 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004954:	79fb      	ldrb	r3, [r7, #7]
 8004956:	4a0b      	ldr	r2, [pc, #44]	; (8004984 <disk_initialize+0x48>)
 8004958:	2101      	movs	r1, #1
 800495a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800495c:	79fb      	ldrb	r3, [r7, #7]
 800495e:	4a09      	ldr	r2, [pc, #36]	; (8004984 <disk_initialize+0x48>)
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4413      	add	r3, r2
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	79fa      	ldrb	r2, [r7, #7]
 800496a:	4906      	ldr	r1, [pc, #24]	; (8004984 <disk_initialize+0x48>)
 800496c:	440a      	add	r2, r1
 800496e:	7a12      	ldrb	r2, [r2, #8]
 8004970:	4610      	mov	r0, r2
 8004972:	4798      	blx	r3
 8004974:	4603      	mov	r3, r0
 8004976:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004978:	7bfb      	ldrb	r3, [r7, #15]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	20000050 	.word	0x20000050

08004988 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004988:	b590      	push	{r4, r7, lr}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	607a      	str	r2, [r7, #4]
 8004992:	603b      	str	r3, [r7, #0]
 8004994:	4603      	mov	r3, r0
 8004996:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004998:	7bfb      	ldrb	r3, [r7, #15]
 800499a:	4a0a      	ldr	r2, [pc, #40]	; (80049c4 <disk_read+0x3c>)
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	689c      	ldr	r4, [r3, #8]
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
 80049a6:	4a07      	ldr	r2, [pc, #28]	; (80049c4 <disk_read+0x3c>)
 80049a8:	4413      	add	r3, r2
 80049aa:	7a18      	ldrb	r0, [r3, #8]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	68b9      	ldr	r1, [r7, #8]
 80049b2:	47a0      	blx	r4
 80049b4:	4603      	mov	r3, r0
 80049b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80049b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	371c      	adds	r7, #28
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd90      	pop	{r4, r7, pc}
 80049c2:	bf00      	nop
 80049c4:	20000050 	.word	0x20000050

080049c8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80049c8:	b590      	push	{r4, r7, lr}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60b9      	str	r1, [r7, #8]
 80049d0:	607a      	str	r2, [r7, #4]
 80049d2:	603b      	str	r3, [r7, #0]
 80049d4:	4603      	mov	r3, r0
 80049d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
 80049da:	4a0a      	ldr	r2, [pc, #40]	; (8004a04 <disk_write+0x3c>)
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	68dc      	ldr	r4, [r3, #12]
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
 80049e6:	4a07      	ldr	r2, [pc, #28]	; (8004a04 <disk_write+0x3c>)
 80049e8:	4413      	add	r3, r2
 80049ea:	7a18      	ldrb	r0, [r3, #8]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	68b9      	ldr	r1, [r7, #8]
 80049f2:	47a0      	blx	r4
 80049f4:	4603      	mov	r3, r0
 80049f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80049f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	371c      	adds	r7, #28
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd90      	pop	{r4, r7, pc}
 8004a02:	bf00      	nop
 8004a04:	20000050 	.word	0x20000050

08004a08 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3301      	adds	r3, #1
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004a18:	89fb      	ldrh	r3, [r7, #14]
 8004a1a:	021b      	lsls	r3, r3, #8
 8004a1c:	b21a      	sxth	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	b21b      	sxth	r3, r3
 8004a24:	4313      	orrs	r3, r2
 8004a26:	b21b      	sxth	r3, r3
 8004a28:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004a2a:	89fb      	ldrh	r3, [r7, #14]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	3303      	adds	r3, #3
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	021b      	lsls	r3, r3, #8
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	3202      	adds	r2, #2
 8004a50:	7812      	ldrb	r2, [r2, #0]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	021b      	lsls	r3, r3, #8
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	3201      	adds	r2, #1
 8004a5e:	7812      	ldrb	r2, [r2, #0]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	021b      	lsls	r3, r3, #8
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	7812      	ldrb	r2, [r2, #0]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]
	return rv;
 8004a70:	68fb      	ldr	r3, [r7, #12]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
 8004a86:	460b      	mov	r3, r1
 8004a88:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	607a      	str	r2, [r7, #4]
 8004a90:	887a      	ldrh	r2, [r7, #2]
 8004a92:	b2d2      	uxtb	r2, r2
 8004a94:	701a      	strb	r2, [r3, #0]
 8004a96:	887b      	ldrh	r3, [r7, #2]
 8004a98:	0a1b      	lsrs	r3, r3, #8
 8004a9a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	1c5a      	adds	r2, r3, #1
 8004aa0:	607a      	str	r2, [r7, #4]
 8004aa2:	887a      	ldrh	r2, [r7, #2]
 8004aa4:	b2d2      	uxtb	r2, r2
 8004aa6:	701a      	strb	r2, [r3, #0]
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	1c5a      	adds	r2, r3, #1
 8004ac2:	607a      	str	r2, [r7, #4]
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	701a      	strb	r2, [r3, #0]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	0a1b      	lsrs	r3, r3, #8
 8004ace:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	607a      	str	r2, [r7, #4]
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	b2d2      	uxtb	r2, r2
 8004ada:	701a      	strb	r2, [r3, #0]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	0a1b      	lsrs	r3, r3, #8
 8004ae0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	1c5a      	adds	r2, r3, #1
 8004ae6:	607a      	str	r2, [r7, #4]
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	701a      	strb	r2, [r3, #0]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	0a1b      	lsrs	r3, r3, #8
 8004af2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	607a      	str	r2, [r7, #4]
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	b2d2      	uxtb	r2, r2
 8004afe:	701a      	strb	r2, [r3, #0]
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004b0c:	b480      	push	{r7}
 8004b0e:	b087      	sub	sp, #28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00d      	beq.n	8004b42 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	1c53      	adds	r3, r2, #1
 8004b2a:	613b      	str	r3, [r7, #16]
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	1c59      	adds	r1, r3, #1
 8004b30:	6179      	str	r1, [r7, #20]
 8004b32:	7812      	ldrb	r2, [r2, #0]
 8004b34:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	607b      	str	r3, [r7, #4]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1f1      	bne.n	8004b26 <mem_cpy+0x1a>
	}
}
 8004b42:	bf00      	nop
 8004b44:	371c      	adds	r7, #28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004b4e:	b480      	push	{r7}
 8004b50:	b087      	sub	sp, #28
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	60f8      	str	r0, [r7, #12]
 8004b56:	60b9      	str	r1, [r7, #8]
 8004b58:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	617a      	str	r2, [r7, #20]
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	b2d2      	uxtb	r2, r2
 8004b68:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	607b      	str	r3, [r7, #4]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1f3      	bne.n	8004b5e <mem_set+0x10>
}
 8004b76:	bf00      	nop
 8004b78:	371c      	adds	r7, #28
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004b82:	b480      	push	{r7}
 8004b84:	b089      	sub	sp, #36	; 0x24
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	60f8      	str	r0, [r7, #12]
 8004b8a:	60b9      	str	r1, [r7, #8]
 8004b8c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	61fb      	str	r3, [r7, #28]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004b96:	2300      	movs	r3, #0
 8004b98:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	61fa      	str	r2, [r7, #28]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	1c5a      	adds	r2, r3, #1
 8004ba8:	61ba      	str	r2, [r7, #24]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	1acb      	subs	r3, r1, r3
 8004bae:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	607b      	str	r3, [r7, #4]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d002      	beq.n	8004bc2 <mem_cmp+0x40>
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0eb      	beq.n	8004b9a <mem_cmp+0x18>

	return r;
 8004bc2:	697b      	ldr	r3, [r7, #20]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3724      	adds	r7, #36	; 0x24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004bda:	e002      	b.n	8004be2 <chk_chr+0x12>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	3301      	adds	r3, #1
 8004be0:	607b      	str	r3, [r7, #4]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d005      	beq.n	8004bf6 <chk_chr+0x26>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d1f2      	bne.n	8004bdc <chk_chr+0xc>
	return *str;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	781b      	ldrb	r3, [r3, #0]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
	...

08004c08 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004c12:	2300      	movs	r3, #0
 8004c14:	60bb      	str	r3, [r7, #8]
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	e029      	b.n	8004c70 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004c1c:	4a27      	ldr	r2, [pc, #156]	; (8004cbc <chk_lock+0xb4>)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	011b      	lsls	r3, r3, #4
 8004c22:	4413      	add	r3, r2
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d01d      	beq.n	8004c66 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004c2a:	4a24      	ldr	r2, [pc, #144]	; (8004cbc <chk_lock+0xb4>)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	011b      	lsls	r3, r3, #4
 8004c30:	4413      	add	r3, r2
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d116      	bne.n	8004c6a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004c3c:	4a1f      	ldr	r2, [pc, #124]	; (8004cbc <chk_lock+0xb4>)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	011b      	lsls	r3, r3, #4
 8004c42:	4413      	add	r3, r2
 8004c44:	3304      	adds	r3, #4
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d10c      	bne.n	8004c6a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004c50:	4a1a      	ldr	r2, [pc, #104]	; (8004cbc <chk_lock+0xb4>)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	4413      	add	r3, r2
 8004c58:	3308      	adds	r3, #8
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d102      	bne.n	8004c6a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004c64:	e007      	b.n	8004c76 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004c66:	2301      	movs	r3, #1
 8004c68:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d9d2      	bls.n	8004c1c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d109      	bne.n	8004c90 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d102      	bne.n	8004c88 <chk_lock+0x80>
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d101      	bne.n	8004c8c <chk_lock+0x84>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	e010      	b.n	8004cae <chk_lock+0xa6>
 8004c8c:	2312      	movs	r3, #18
 8004c8e:	e00e      	b.n	8004cae <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d108      	bne.n	8004ca8 <chk_lock+0xa0>
 8004c96:	4a09      	ldr	r2, [pc, #36]	; (8004cbc <chk_lock+0xb4>)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	011b      	lsls	r3, r3, #4
 8004c9c:	4413      	add	r3, r2
 8004c9e:	330c      	adds	r3, #12
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ca6:	d101      	bne.n	8004cac <chk_lock+0xa4>
 8004ca8:	2310      	movs	r3, #16
 8004caa:	e000      	b.n	8004cae <chk_lock+0xa6>
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	20000030 	.word	0x20000030

08004cc0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	607b      	str	r3, [r7, #4]
 8004cca:	e002      	b.n	8004cd2 <enq_lock+0x12>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	607b      	str	r3, [r7, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d806      	bhi.n	8004ce6 <enq_lock+0x26>
 8004cd8:	4a09      	ldr	r2, [pc, #36]	; (8004d00 <enq_lock+0x40>)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	011b      	lsls	r3, r3, #4
 8004cde:	4413      	add	r3, r2
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1f2      	bne.n	8004ccc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	bf14      	ite	ne
 8004cec:	2301      	movne	r3, #1
 8004cee:	2300      	moveq	r3, #0
 8004cf0:	b2db      	uxtb	r3, r3
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	20000030 	.word	0x20000030

08004d04 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004d0e:	2300      	movs	r3, #0
 8004d10:	60fb      	str	r3, [r7, #12]
 8004d12:	e01f      	b.n	8004d54 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004d14:	4a41      	ldr	r2, [pc, #260]	; (8004e1c <inc_lock+0x118>)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	011b      	lsls	r3, r3, #4
 8004d1a:	4413      	add	r3, r2
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d113      	bne.n	8004d4e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004d26:	4a3d      	ldr	r2, [pc, #244]	; (8004e1c <inc_lock+0x118>)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	011b      	lsls	r3, r3, #4
 8004d2c:	4413      	add	r3, r2
 8004d2e:	3304      	adds	r3, #4
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d109      	bne.n	8004d4e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004d3a:	4a38      	ldr	r2, [pc, #224]	; (8004e1c <inc_lock+0x118>)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	011b      	lsls	r3, r3, #4
 8004d40:	4413      	add	r3, r2
 8004d42:	3308      	adds	r3, #8
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d006      	beq.n	8004d5c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	3301      	adds	r3, #1
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d9dc      	bls.n	8004d14 <inc_lock+0x10>
 8004d5a:	e000      	b.n	8004d5e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004d5c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d132      	bne.n	8004dca <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	e002      	b.n	8004d70 <inc_lock+0x6c>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d806      	bhi.n	8004d84 <inc_lock+0x80>
 8004d76:	4a29      	ldr	r2, [pc, #164]	; (8004e1c <inc_lock+0x118>)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	011b      	lsls	r3, r3, #4
 8004d7c:	4413      	add	r3, r2
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1f2      	bne.n	8004d6a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d101      	bne.n	8004d8e <inc_lock+0x8a>
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	e040      	b.n	8004e10 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	4922      	ldr	r1, [pc, #136]	; (8004e1c <inc_lock+0x118>)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	440b      	add	r3, r1
 8004d9a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	491e      	ldr	r1, [pc, #120]	; (8004e1c <inc_lock+0x118>)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	011b      	lsls	r3, r3, #4
 8004da6:	440b      	add	r3, r1
 8004da8:	3304      	adds	r3, #4
 8004daa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	695a      	ldr	r2, [r3, #20]
 8004db0:	491a      	ldr	r1, [pc, #104]	; (8004e1c <inc_lock+0x118>)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	011b      	lsls	r3, r3, #4
 8004db6:	440b      	add	r3, r1
 8004db8:	3308      	adds	r3, #8
 8004dba:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004dbc:	4a17      	ldr	r2, [pc, #92]	; (8004e1c <inc_lock+0x118>)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	011b      	lsls	r3, r3, #4
 8004dc2:	4413      	add	r3, r2
 8004dc4:	330c      	adds	r3, #12
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d009      	beq.n	8004de4 <inc_lock+0xe0>
 8004dd0:	4a12      	ldr	r2, [pc, #72]	; (8004e1c <inc_lock+0x118>)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	4413      	add	r3, r2
 8004dd8:	330c      	adds	r3, #12
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <inc_lock+0xe0>
 8004de0:	2300      	movs	r3, #0
 8004de2:	e015      	b.n	8004e10 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d108      	bne.n	8004dfc <inc_lock+0xf8>
 8004dea:	4a0c      	ldr	r2, [pc, #48]	; (8004e1c <inc_lock+0x118>)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	011b      	lsls	r3, r3, #4
 8004df0:	4413      	add	r3, r2
 8004df2:	330c      	adds	r3, #12
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	3301      	adds	r3, #1
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	e001      	b.n	8004e00 <inc_lock+0xfc>
 8004dfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e00:	4906      	ldr	r1, [pc, #24]	; (8004e1c <inc_lock+0x118>)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	011b      	lsls	r3, r3, #4
 8004e06:	440b      	add	r3, r1
 8004e08:	330c      	adds	r3, #12
 8004e0a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	3301      	adds	r3, #1
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	20000030 	.word	0x20000030

08004e20 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60fb      	str	r3, [r7, #12]
 8004e2c:	e010      	b.n	8004e50 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004e2e:	4a0d      	ldr	r2, [pc, #52]	; (8004e64 <clear_lock+0x44>)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	4413      	add	r3, r2
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d105      	bne.n	8004e4a <clear_lock+0x2a>
 8004e3e:	4a09      	ldr	r2, [pc, #36]	; (8004e64 <clear_lock+0x44>)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	011b      	lsls	r3, r3, #4
 8004e44:	4413      	add	r3, r2
 8004e46:	2200      	movs	r2, #0
 8004e48:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d9eb      	bls.n	8004e2e <clear_lock+0xe>
	}
}
 8004e56:	bf00      	nop
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	20000030 	.word	0x20000030

08004e68 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004e70:	2300      	movs	r3, #0
 8004e72:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	78db      	ldrb	r3, [r3, #3]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d034      	beq.n	8004ee6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e80:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	7858      	ldrb	r0, [r3, #1]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	f7ff fd9a 	bl	80049c8 <disk_write>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d002      	beq.n	8004ea0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	73fb      	strb	r3, [r7, #15]
 8004e9e:	e022      	b.n	8004ee6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	1ad2      	subs	r2, r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d217      	bcs.n	8004ee6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	789b      	ldrb	r3, [r3, #2]
 8004eba:	613b      	str	r3, [r7, #16]
 8004ebc:	e010      	b.n	8004ee0 <sync_window+0x78>
					wsect += fs->fsize;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	7858      	ldrb	r0, [r3, #1]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	f7ff fd77 	bl	80049c8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	3b01      	subs	r3, #1
 8004ede:	613b      	str	r3, [r7, #16]
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d8eb      	bhi.n	8004ebe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004efa:	2300      	movs	r3, #0
 8004efc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d01b      	beq.n	8004f40 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7ff ffad 	bl	8004e68 <sync_window>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004f12:	7bfb      	ldrb	r3, [r7, #15]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d113      	bne.n	8004f40 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	7858      	ldrb	r0, [r3, #1]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004f22:	2301      	movs	r3, #1
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	f7ff fd2f 	bl	8004988 <disk_read>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d004      	beq.n	8004f3a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004f30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f34:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8004f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
 8004f52:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	3b02      	subs	r3, #2
 8004f58:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	3b02      	subs	r3, #2
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d301      	bcc.n	8004f6a <clust2sect+0x20>
 8004f66:	2300      	movs	r3, #0
 8004f68:	e008      	b.n	8004f7c <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	895b      	ldrh	r3, [r3, #10]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	fb03 f202 	mul.w	r2, r3, r2
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7a:	4413      	add	r3, r2
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d904      	bls.n	8004fa8 <get_fat+0x20>
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d302      	bcc.n	8004fae <get_fat+0x26>
		val = 1;	/* Internal error */
 8004fa8:	2301      	movs	r3, #1
 8004faa:	617b      	str	r3, [r7, #20]
 8004fac:	e08c      	b.n	80050c8 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004fae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fb2:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d045      	beq.n	8005048 <get_fat+0xc0>
 8004fbc:	2b03      	cmp	r3, #3
 8004fbe:	d05d      	beq.n	800507c <get_fat+0xf4>
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d177      	bne.n	80050b4 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	085b      	lsrs	r3, r3, #1
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4413      	add	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	6a1a      	ldr	r2, [r3, #32]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	0a5b      	lsrs	r3, r3, #9
 8004fda:	4413      	add	r3, r2
 8004fdc:	4619      	mov	r1, r3
 8004fde:	6938      	ldr	r0, [r7, #16]
 8004fe0:	f7ff ff86 	bl	8004ef0 <move_window>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d167      	bne.n	80050ba <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	60fa      	str	r2, [r7, #12]
 8004ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ffc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	6a1a      	ldr	r2, [r3, #32]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	0a5b      	lsrs	r3, r3, #9
 8005006:	4413      	add	r3, r2
 8005008:	4619      	mov	r1, r3
 800500a:	6938      	ldr	r0, [r7, #16]
 800500c:	f7ff ff70 	bl	8004ef0 <move_window>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d153      	bne.n	80050be <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	4413      	add	r3, r2
 8005020:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005024:	021b      	lsls	r3, r3, #8
 8005026:	461a      	mov	r2, r3
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	4313      	orrs	r3, r2
 800502c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b00      	cmp	r3, #0
 8005036:	d002      	beq.n	800503e <get_fat+0xb6>
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	091b      	lsrs	r3, r3, #4
 800503c:	e002      	b.n	8005044 <get_fat+0xbc>
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005044:	617b      	str	r3, [r7, #20]
			break;
 8005046:	e03f      	b.n	80050c8 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	6a1a      	ldr	r2, [r3, #32]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	0a1b      	lsrs	r3, r3, #8
 8005050:	4413      	add	r3, r2
 8005052:	4619      	mov	r1, r3
 8005054:	6938      	ldr	r0, [r7, #16]
 8005056:	f7ff ff4b 	bl	8004ef0 <move_window>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d130      	bne.n	80050c2 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800506e:	4413      	add	r3, r2
 8005070:	4618      	mov	r0, r3
 8005072:	f7ff fcc9 	bl	8004a08 <ld_word>
 8005076:	4603      	mov	r3, r0
 8005078:	617b      	str	r3, [r7, #20]
			break;
 800507a:	e025      	b.n	80050c8 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	6a1a      	ldr	r2, [r3, #32]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	09db      	lsrs	r3, r3, #7
 8005084:	4413      	add	r3, r2
 8005086:	4619      	mov	r1, r3
 8005088:	6938      	ldr	r0, [r7, #16]
 800508a:	f7ff ff31 	bl	8004ef0 <move_window>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d118      	bne.n	80050c6 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80050a2:	4413      	add	r3, r2
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7ff fcc7 	bl	8004a38 <ld_dword>
 80050aa:	4603      	mov	r3, r0
 80050ac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80050b0:	617b      	str	r3, [r7, #20]
			break;
 80050b2:	e009      	b.n	80050c8 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80050b4:	2301      	movs	r3, #1
 80050b6:	617b      	str	r3, [r7, #20]
 80050b8:	e006      	b.n	80050c8 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80050ba:	bf00      	nop
 80050bc:	e004      	b.n	80050c8 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80050be:	bf00      	nop
 80050c0:	e002      	b.n	80050c8 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80050c2:	bf00      	nop
 80050c4:	e000      	b.n	80050c8 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80050c6:	bf00      	nop
		}
	}

	return val;
 80050c8:	697b      	ldr	r3, [r7, #20]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80050d2:	b590      	push	{r4, r7, lr}
 80050d4:	b089      	sub	sp, #36	; 0x24
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	60f8      	str	r0, [r7, #12]
 80050da:	60b9      	str	r1, [r7, #8]
 80050dc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80050de:	2302      	movs	r3, #2
 80050e0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	f240 80d6 	bls.w	8005296 <put_fat+0x1c4>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	f080 80d0 	bcs.w	8005296 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d073      	beq.n	80051e6 <put_fat+0x114>
 80050fe:	2b03      	cmp	r3, #3
 8005100:	f000 8091 	beq.w	8005226 <put_fat+0x154>
 8005104:	2b01      	cmp	r3, #1
 8005106:	f040 80c6 	bne.w	8005296 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	61bb      	str	r3, [r7, #24]
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	085b      	lsrs	r3, r3, #1
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	4413      	add	r3, r2
 8005116:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6a1a      	ldr	r2, [r3, #32]
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	0a5b      	lsrs	r3, r3, #9
 8005120:	4413      	add	r3, r2
 8005122:	4619      	mov	r1, r3
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f7ff fee3 	bl	8004ef0 <move_window>
 800512a:	4603      	mov	r3, r0
 800512c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800512e:	7ffb      	ldrb	r3, [r7, #31]
 8005130:	2b00      	cmp	r3, #0
 8005132:	f040 80a9 	bne.w	8005288 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	1c59      	adds	r1, r3, #1
 8005140:	61b9      	str	r1, [r7, #24]
 8005142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005146:	4413      	add	r3, r2
 8005148:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00d      	beq.n	8005170 <put_fat+0x9e>
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	b25b      	sxtb	r3, r3
 800515a:	f003 030f 	and.w	r3, r3, #15
 800515e:	b25a      	sxtb	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	b2db      	uxtb	r3, r3
 8005164:	011b      	lsls	r3, r3, #4
 8005166:	b25b      	sxtb	r3, r3
 8005168:	4313      	orrs	r3, r2
 800516a:	b25b      	sxtb	r3, r3
 800516c:	b2db      	uxtb	r3, r3
 800516e:	e001      	b.n	8005174 <put_fat+0xa2>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	b2db      	uxtb	r3, r3
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2201      	movs	r2, #1
 800517c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6a1a      	ldr	r2, [r3, #32]
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	0a5b      	lsrs	r3, r3, #9
 8005186:	4413      	add	r3, r2
 8005188:	4619      	mov	r1, r3
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f7ff feb0 	bl	8004ef0 <move_window>
 8005190:	4603      	mov	r3, r0
 8005192:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005194:	7ffb      	ldrb	r3, [r7, #31]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d178      	bne.n	800528c <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051a6:	4413      	add	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d003      	beq.n	80051bc <put_fat+0xea>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	091b      	lsrs	r3, r3, #4
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	e00e      	b.n	80051da <put_fat+0x108>
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	b25b      	sxtb	r3, r3
 80051c2:	f023 030f 	bic.w	r3, r3, #15
 80051c6:	b25a      	sxtb	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	0a1b      	lsrs	r3, r3, #8
 80051cc:	b25b      	sxtb	r3, r3
 80051ce:	f003 030f 	and.w	r3, r3, #15
 80051d2:	b25b      	sxtb	r3, r3
 80051d4:	4313      	orrs	r3, r2
 80051d6:	b25b      	sxtb	r3, r3
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2201      	movs	r2, #1
 80051e2:	70da      	strb	r2, [r3, #3]
			break;
 80051e4:	e057      	b.n	8005296 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6a1a      	ldr	r2, [r3, #32]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	0a1b      	lsrs	r3, r3, #8
 80051ee:	4413      	add	r3, r2
 80051f0:	4619      	mov	r1, r3
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f7ff fe7c 	bl	8004ef0 <move_window>
 80051f8:	4603      	mov	r3, r0
 80051fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80051fc:	7ffb      	ldrb	r3, [r7, #31]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d146      	bne.n	8005290 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005210:	4413      	add	r3, r2
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	b292      	uxth	r2, r2
 8005216:	4611      	mov	r1, r2
 8005218:	4618      	mov	r0, r3
 800521a:	f7ff fc30 	bl	8004a7e <st_word>
			fs->wflag = 1;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2201      	movs	r2, #1
 8005222:	70da      	strb	r2, [r3, #3]
			break;
 8005224:	e037      	b.n	8005296 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6a1a      	ldr	r2, [r3, #32]
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	09db      	lsrs	r3, r3, #7
 800522e:	4413      	add	r3, r2
 8005230:	4619      	mov	r1, r3
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f7ff fe5c 	bl	8004ef0 <move_window>
 8005238:	4603      	mov	r3, r0
 800523a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800523c:	7ffb      	ldrb	r3, [r7, #31]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d128      	bne.n	8005294 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005256:	4413      	add	r3, r2
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff fbed 	bl	8004a38 <ld_dword>
 800525e:	4603      	mov	r3, r0
 8005260:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005264:	4323      	orrs	r3, r4
 8005266:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005276:	4413      	add	r3, r2
 8005278:	6879      	ldr	r1, [r7, #4]
 800527a:	4618      	mov	r0, r3
 800527c:	f7ff fc1a 	bl	8004ab4 <st_dword>
			fs->wflag = 1;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2201      	movs	r2, #1
 8005284:	70da      	strb	r2, [r3, #3]
			break;
 8005286:	e006      	b.n	8005296 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005288:	bf00      	nop
 800528a:	e004      	b.n	8005296 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800528c:	bf00      	nop
 800528e:	e002      	b.n	8005296 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005290:	bf00      	nop
 8005292:	e000      	b.n	8005296 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005294:	bf00      	nop
		}
	}
	return res;
 8005296:	7ffb      	ldrb	r3, [r7, #31]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3724      	adds	r7, #36	; 0x24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd90      	pop	{r4, r7, pc}

080052a0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b088      	sub	sp, #32
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80052ac:	2300      	movs	r3, #0
 80052ae:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d904      	bls.n	80052c6 <remove_chain+0x26>
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d301      	bcc.n	80052ca <remove_chain+0x2a>
 80052c6:	2302      	movs	r3, #2
 80052c8:	e04b      	b.n	8005362 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00c      	beq.n	80052ea <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80052d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052d4:	6879      	ldr	r1, [r7, #4]
 80052d6:	69b8      	ldr	r0, [r7, #24]
 80052d8:	f7ff fefb 	bl	80050d2 <put_fat>
 80052dc:	4603      	mov	r3, r0
 80052de:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80052e0:	7ffb      	ldrb	r3, [r7, #31]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <remove_chain+0x4a>
 80052e6:	7ffb      	ldrb	r3, [r7, #31]
 80052e8:	e03b      	b.n	8005362 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80052ea:	68b9      	ldr	r1, [r7, #8]
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f7ff fe4b 	bl	8004f88 <get_fat>
 80052f2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d031      	beq.n	800535e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d101      	bne.n	8005304 <remove_chain+0x64>
 8005300:	2302      	movs	r3, #2
 8005302:	e02e      	b.n	8005362 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800530a:	d101      	bne.n	8005310 <remove_chain+0x70>
 800530c:	2301      	movs	r3, #1
 800530e:	e028      	b.n	8005362 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005310:	2200      	movs	r2, #0
 8005312:	68b9      	ldr	r1, [r7, #8]
 8005314:	69b8      	ldr	r0, [r7, #24]
 8005316:	f7ff fedc 	bl	80050d2 <put_fat>
 800531a:	4603      	mov	r3, r0
 800531c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800531e:	7ffb      	ldrb	r3, [r7, #31]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <remove_chain+0x88>
 8005324:	7ffb      	ldrb	r3, [r7, #31]
 8005326:	e01c      	b.n	8005362 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	691a      	ldr	r2, [r3, #16]
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	3b02      	subs	r3, #2
 8005332:	429a      	cmp	r2, r3
 8005334:	d20b      	bcs.n	800534e <remove_chain+0xae>
			fs->free_clst++;
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	1c5a      	adds	r2, r3, #1
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	791b      	ldrb	r3, [r3, #4]
 8005344:	f043 0301 	orr.w	r3, r3, #1
 8005348:	b2da      	uxtb	r2, r3
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	429a      	cmp	r2, r3
 800535a:	d3c6      	bcc.n	80052ea <remove_chain+0x4a>
 800535c:	e000      	b.n	8005360 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800535e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3720      	adds	r7, #32
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b088      	sub	sp, #32
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
 8005372:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10d      	bne.n	800539c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d004      	beq.n	8005396 <create_chain+0x2c>
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	429a      	cmp	r2, r3
 8005394:	d31b      	bcc.n	80053ce <create_chain+0x64>
 8005396:	2301      	movs	r3, #1
 8005398:	61bb      	str	r3, [r7, #24]
 800539a:	e018      	b.n	80053ce <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800539c:	6839      	ldr	r1, [r7, #0]
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7ff fdf2 	bl	8004f88 <get_fat>
 80053a4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d801      	bhi.n	80053b0 <create_chain+0x46>
 80053ac:	2301      	movs	r3, #1
 80053ae:	e070      	b.n	8005492 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053b6:	d101      	bne.n	80053bc <create_chain+0x52>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	e06a      	b.n	8005492 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d201      	bcs.n	80053ca <create_chain+0x60>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	e063      	b.n	8005492 <create_chain+0x128>
		scl = clst;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	3301      	adds	r3, #1
 80053d6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	69fa      	ldr	r2, [r7, #28]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d307      	bcc.n	80053f2 <create_chain+0x88>
				ncl = 2;
 80053e2:	2302      	movs	r3, #2
 80053e4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80053e6:	69fa      	ldr	r2, [r7, #28]
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d901      	bls.n	80053f2 <create_chain+0x88>
 80053ee:	2300      	movs	r3, #0
 80053f0:	e04f      	b.n	8005492 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80053f2:	69f9      	ldr	r1, [r7, #28]
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f7ff fdc7 	bl	8004f88 <get_fat>
 80053fa:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00e      	beq.n	8005420 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d003      	beq.n	8005410 <create_chain+0xa6>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800540e:	d101      	bne.n	8005414 <create_chain+0xaa>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	e03e      	b.n	8005492 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005414:	69fa      	ldr	r2, [r7, #28]
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	429a      	cmp	r2, r3
 800541a:	d1da      	bne.n	80053d2 <create_chain+0x68>
 800541c:	2300      	movs	r3, #0
 800541e:	e038      	b.n	8005492 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005420:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005422:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005426:	69f9      	ldr	r1, [r7, #28]
 8005428:	6938      	ldr	r0, [r7, #16]
 800542a:	f7ff fe52 	bl	80050d2 <put_fat>
 800542e:	4603      	mov	r3, r0
 8005430:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005432:	7dfb      	ldrb	r3, [r7, #23]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d109      	bne.n	800544c <create_chain+0xe2>
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d006      	beq.n	800544c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800543e:	69fa      	ldr	r2, [r7, #28]
 8005440:	6839      	ldr	r1, [r7, #0]
 8005442:	6938      	ldr	r0, [r7, #16]
 8005444:	f7ff fe45 	bl	80050d2 <put_fat>
 8005448:	4603      	mov	r3, r0
 800544a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800544c:	7dfb      	ldrb	r3, [r7, #23]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d116      	bne.n	8005480 <create_chain+0x116>
		fs->last_clst = ncl;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	69fa      	ldr	r2, [r7, #28]
 8005456:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	691a      	ldr	r2, [r3, #16]
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	3b02      	subs	r3, #2
 8005462:	429a      	cmp	r2, r3
 8005464:	d804      	bhi.n	8005470 <create_chain+0x106>
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	1e5a      	subs	r2, r3, #1
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	791b      	ldrb	r3, [r3, #4]
 8005474:	f043 0301 	orr.w	r3, r3, #1
 8005478:	b2da      	uxtb	r2, r3
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	711a      	strb	r2, [r3, #4]
 800547e:	e007      	b.n	8005490 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005480:	7dfb      	ldrb	r3, [r7, #23]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d102      	bne.n	800548c <create_chain+0x122>
 8005486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800548a:	e000      	b.n	800548e <create_chain+0x124>
 800548c:	2301      	movs	r3, #1
 800548e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005490:	69fb      	ldr	r3, [r7, #28]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3720      	adds	r7, #32
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800549a:	b480      	push	{r7}
 800549c:	b087      	sub	sp, #28
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
 80054a2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ae:	3304      	adds	r3, #4
 80054b0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	0a5b      	lsrs	r3, r3, #9
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	8952      	ldrh	r2, [r2, #10]
 80054ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80054be:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	1d1a      	adds	r2, r3, #4
 80054c4:	613a      	str	r2, [r7, #16]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d101      	bne.n	80054d4 <clmt_clust+0x3a>
 80054d0:	2300      	movs	r3, #0
 80054d2:	e010      	b.n	80054f6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d307      	bcc.n	80054ec <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	617b      	str	r3, [r7, #20]
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	3304      	adds	r3, #4
 80054e8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80054ea:	e7e9      	b.n	80054c0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80054ec:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	4413      	add	r3, r2
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	371c      	adds	r7, #28
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b086      	sub	sp, #24
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
 800550a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005518:	d204      	bcs.n	8005524 <dir_sdi+0x22>
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	f003 031f 	and.w	r3, r3, #31
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005524:	2302      	movs	r3, #2
 8005526:	e063      	b.n	80055f0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d106      	bne.n	8005548 <dir_sdi+0x46>
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b02      	cmp	r3, #2
 8005540:	d902      	bls.n	8005548 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10c      	bne.n	8005568 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	095b      	lsrs	r3, r3, #5
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	8912      	ldrh	r2, [r2, #8]
 8005556:	4293      	cmp	r3, r2
 8005558:	d301      	bcc.n	800555e <dir_sdi+0x5c>
 800555a:	2302      	movs	r3, #2
 800555c:	e048      	b.n	80055f0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	61da      	str	r2, [r3, #28]
 8005566:	e029      	b.n	80055bc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	895b      	ldrh	r3, [r3, #10]
 800556c:	025b      	lsls	r3, r3, #9
 800556e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005570:	e019      	b.n	80055a6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6979      	ldr	r1, [r7, #20]
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff fd06 	bl	8004f88 <get_fat>
 800557c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005584:	d101      	bne.n	800558a <dir_sdi+0x88>
 8005586:	2301      	movs	r3, #1
 8005588:	e032      	b.n	80055f0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d904      	bls.n	800559a <dir_sdi+0x98>
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	429a      	cmp	r2, r3
 8005598:	d301      	bcc.n	800559e <dir_sdi+0x9c>
 800559a:	2302      	movs	r3, #2
 800559c:	e028      	b.n	80055f0 <dir_sdi+0xee>
			ofs -= csz;
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d2e1      	bcs.n	8005572 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80055ae:	6979      	ldr	r1, [r7, #20]
 80055b0:	6938      	ldr	r0, [r7, #16]
 80055b2:	f7ff fcca 	bl	8004f4a <clust2sect>
 80055b6:	4602      	mov	r2, r0
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <dir_sdi+0xcc>
 80055ca:	2302      	movs	r3, #2
 80055cc:	e010      	b.n	80055f0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69da      	ldr	r2, [r3, #28]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	0a5b      	lsrs	r3, r3, #9
 80055d6:	441a      	add	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055e8:	441a      	add	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3718      	adds	r7, #24
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b086      	sub	sp, #24
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	3320      	adds	r3, #32
 800560e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	69db      	ldr	r3, [r3, #28]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <dir_next+0x28>
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800561e:	d301      	bcc.n	8005624 <dir_next+0x2c>
 8005620:	2304      	movs	r3, #4
 8005622:	e0aa      	b.n	800577a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800562a:	2b00      	cmp	r3, #0
 800562c:	f040 8098 	bne.w	8005760 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	69db      	ldr	r3, [r3, #28]
 8005634:	1c5a      	adds	r2, r3, #1
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10b      	bne.n	800565a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	095b      	lsrs	r3, r3, #5
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	8912      	ldrh	r2, [r2, #8]
 800564a:	4293      	cmp	r3, r2
 800564c:	f0c0 8088 	bcc.w	8005760 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	61da      	str	r2, [r3, #28]
 8005656:	2304      	movs	r3, #4
 8005658:	e08f      	b.n	800577a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	0a5b      	lsrs	r3, r3, #9
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	8952      	ldrh	r2, [r2, #10]
 8005662:	3a01      	subs	r2, #1
 8005664:	4013      	ands	r3, r2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d17a      	bne.n	8005760 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	4619      	mov	r1, r3
 8005672:	4610      	mov	r0, r2
 8005674:	f7ff fc88 	bl	8004f88 <get_fat>
 8005678:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d801      	bhi.n	8005684 <dir_next+0x8c>
 8005680:	2302      	movs	r3, #2
 8005682:	e07a      	b.n	800577a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800568a:	d101      	bne.n	8005690 <dir_next+0x98>
 800568c:	2301      	movs	r3, #1
 800568e:	e074      	b.n	800577a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	429a      	cmp	r2, r3
 8005698:	d358      	bcc.n	800574c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d104      	bne.n	80056aa <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	61da      	str	r2, [r3, #28]
 80056a6:	2304      	movs	r3, #4
 80056a8:	e067      	b.n	800577a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	4619      	mov	r1, r3
 80056b2:	4610      	mov	r0, r2
 80056b4:	f7ff fe59 	bl	800536a <create_chain>
 80056b8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <dir_next+0xcc>
 80056c0:	2307      	movs	r3, #7
 80056c2:	e05a      	b.n	800577a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d101      	bne.n	80056ce <dir_next+0xd6>
 80056ca:	2302      	movs	r3, #2
 80056cc:	e055      	b.n	800577a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056d4:	d101      	bne.n	80056da <dir_next+0xe2>
 80056d6:	2301      	movs	r3, #1
 80056d8:	e04f      	b.n	800577a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f7ff fbc4 	bl	8004e68 <sync_window>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <dir_next+0xf2>
 80056e6:	2301      	movs	r3, #1
 80056e8:	e047      	b.n	800577a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	3330      	adds	r3, #48	; 0x30
 80056ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056f2:	2100      	movs	r1, #0
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7ff fa2a 	bl	8004b4e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80056fa:	2300      	movs	r3, #0
 80056fc:	613b      	str	r3, [r7, #16]
 80056fe:	6979      	ldr	r1, [r7, #20]
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f7ff fc22 	bl	8004f4a <clust2sect>
 8005706:	4602      	mov	r2, r0
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	62da      	str	r2, [r3, #44]	; 0x2c
 800570c:	e012      	b.n	8005734 <dir_next+0x13c>
						fs->wflag = 1;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2201      	movs	r2, #1
 8005712:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f7ff fba7 	bl	8004e68 <sync_window>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <dir_next+0x12c>
 8005720:	2301      	movs	r3, #1
 8005722:	e02a      	b.n	800577a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	3301      	adds	r3, #1
 8005728:	613b      	str	r3, [r7, #16]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	62da      	str	r2, [r3, #44]	; 0x2c
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	895b      	ldrh	r3, [r3, #10]
 8005738:	461a      	mov	r2, r3
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	4293      	cmp	r3, r2
 800573e:	d3e6      	bcc.n	800570e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	1ad2      	subs	r2, r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005752:	6979      	ldr	r1, [r7, #20]
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f7ff fbf8 	bl	8004f4a <clust2sect>
 800575a:	4602      	mov	r2, r0
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005772:	441a      	add	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3718      	adds	r7, #24
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b086      	sub	sp, #24
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
 800578a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005792:	2100      	movs	r1, #0
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7ff feb4 	bl	8005502 <dir_sdi>
 800579a:	4603      	mov	r3, r0
 800579c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800579e:	7dfb      	ldrb	r3, [r7, #23]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d12b      	bne.n	80057fc <dir_alloc+0x7a>
		n = 0;
 80057a4:	2300      	movs	r3, #0
 80057a6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	4619      	mov	r1, r3
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f7ff fb9e 	bl	8004ef0 <move_window>
 80057b4:	4603      	mov	r3, r0
 80057b6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80057b8:	7dfb      	ldrb	r3, [r7, #23]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d11d      	bne.n	80057fa <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	2be5      	cmp	r3, #229	; 0xe5
 80057c6:	d004      	beq.n	80057d2 <dir_alloc+0x50>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d107      	bne.n	80057e2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	3301      	adds	r3, #1
 80057d6:	613b      	str	r3, [r7, #16]
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d102      	bne.n	80057e6 <dir_alloc+0x64>
 80057e0:	e00c      	b.n	80057fc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80057e2:	2300      	movs	r3, #0
 80057e4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80057e6:	2101      	movs	r1, #1
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f7ff ff05 	bl	80055f8 <dir_next>
 80057ee:	4603      	mov	r3, r0
 80057f0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80057f2:	7dfb      	ldrb	r3, [r7, #23]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d0d7      	beq.n	80057a8 <dir_alloc+0x26>
 80057f8:	e000      	b.n	80057fc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80057fa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80057fc:	7dfb      	ldrb	r3, [r7, #23]
 80057fe:	2b04      	cmp	r3, #4
 8005800:	d101      	bne.n	8005806 <dir_alloc+0x84>
 8005802:	2307      	movs	r3, #7
 8005804:	75fb      	strb	r3, [r7, #23]
	return res;
 8005806:	7dfb      	ldrb	r3, [r7, #23]
}
 8005808:	4618      	mov	r0, r3
 800580a:	3718      	adds	r7, #24
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	331a      	adds	r3, #26
 800581e:	4618      	mov	r0, r3
 8005820:	f7ff f8f2 	bl	8004a08 <ld_word>
 8005824:	4603      	mov	r3, r0
 8005826:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b03      	cmp	r3, #3
 800582e:	d109      	bne.n	8005844 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	3314      	adds	r3, #20
 8005834:	4618      	mov	r0, r3
 8005836:	f7ff f8e7 	bl	8004a08 <ld_word>
 800583a:	4603      	mov	r3, r0
 800583c:	041b      	lsls	r3, r3, #16
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	4313      	orrs	r3, r2
 8005842:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005844:	68fb      	ldr	r3, [r7, #12]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b084      	sub	sp, #16
 8005852:	af00      	add	r7, sp, #0
 8005854:	60f8      	str	r0, [r7, #12]
 8005856:	60b9      	str	r1, [r7, #8]
 8005858:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	331a      	adds	r3, #26
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	b292      	uxth	r2, r2
 8005862:	4611      	mov	r1, r2
 8005864:	4618      	mov	r0, r3
 8005866:	f7ff f90a 	bl	8004a7e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	2b03      	cmp	r3, #3
 8005870:	d109      	bne.n	8005886 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	f103 0214 	add.w	r2, r3, #20
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	0c1b      	lsrs	r3, r3, #16
 800587c:	b29b      	uxth	r3, r3
 800587e:	4619      	mov	r1, r3
 8005880:	4610      	mov	r0, r2
 8005882:	f7ff f8fc 	bl	8004a7e <st_word>
	}
}
 8005886:	bf00      	nop
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b086      	sub	sp, #24
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800589c:	2100      	movs	r1, #0
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7ff fe2f 	bl	8005502 <dir_sdi>
 80058a4:	4603      	mov	r3, r0
 80058a6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80058a8:	7dfb      	ldrb	r3, [r7, #23]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d001      	beq.n	80058b2 <dir_find+0x24>
 80058ae:	7dfb      	ldrb	r3, [r7, #23]
 80058b0:	e03e      	b.n	8005930 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	4619      	mov	r1, r3
 80058b8:	6938      	ldr	r0, [r7, #16]
 80058ba:	f7ff fb19 	bl	8004ef0 <move_window>
 80058be:	4603      	mov	r3, r0
 80058c0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80058c2:	7dfb      	ldrb	r3, [r7, #23]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d12f      	bne.n	8005928 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80058d0:	7bfb      	ldrb	r3, [r7, #15]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d102      	bne.n	80058dc <dir_find+0x4e>
 80058d6:	2304      	movs	r3, #4
 80058d8:	75fb      	strb	r3, [r7, #23]
 80058da:	e028      	b.n	800592e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a1b      	ldr	r3, [r3, #32]
 80058e0:	330b      	adds	r3, #11
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	330b      	adds	r3, #11
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	f003 0308 	and.w	r3, r3, #8
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10a      	bne.n	8005914 <dir_find+0x86>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a18      	ldr	r0, [r3, #32]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	3324      	adds	r3, #36	; 0x24
 8005906:	220b      	movs	r2, #11
 8005908:	4619      	mov	r1, r3
 800590a:	f7ff f93a 	bl	8004b82 <mem_cmp>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00b      	beq.n	800592c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005914:	2100      	movs	r1, #0
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7ff fe6e 	bl	80055f8 <dir_next>
 800591c:	4603      	mov	r3, r0
 800591e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005920:	7dfb      	ldrb	r3, [r7, #23]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0c5      	beq.n	80058b2 <dir_find+0x24>
 8005926:	e002      	b.n	800592e <dir_find+0xa0>
		if (res != FR_OK) break;
 8005928:	bf00      	nop
 800592a:	e000      	b.n	800592e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800592c:	bf00      	nop

	return res;
 800592e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3718      	adds	r7, #24
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005946:	2101      	movs	r1, #1
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f7ff ff1a 	bl	8005782 <dir_alloc>
 800594e:	4603      	mov	r3, r0
 8005950:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005952:	7bfb      	ldrb	r3, [r7, #15]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d11c      	bne.n	8005992 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	69db      	ldr	r3, [r3, #28]
 800595c:	4619      	mov	r1, r3
 800595e:	68b8      	ldr	r0, [r7, #8]
 8005960:	f7ff fac6 	bl	8004ef0 <move_window>
 8005964:	4603      	mov	r3, r0
 8005966:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005968:	7bfb      	ldrb	r3, [r7, #15]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d111      	bne.n	8005992 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	2220      	movs	r2, #32
 8005974:	2100      	movs	r1, #0
 8005976:	4618      	mov	r0, r3
 8005978:	f7ff f8e9 	bl	8004b4e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a18      	ldr	r0, [r3, #32]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	3324      	adds	r3, #36	; 0x24
 8005984:	220b      	movs	r2, #11
 8005986:	4619      	mov	r1, r3
 8005988:	f7ff f8c0 	bl	8004b0c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2201      	movs	r2, #1
 8005990:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005992:	7bfb      	ldrb	r3, [r7, #15]
}
 8005994:	4618      	mov	r0, r3
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b088      	sub	sp, #32
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	60fb      	str	r3, [r7, #12]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	3324      	adds	r3, #36	; 0x24
 80059b0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80059b2:	220b      	movs	r2, #11
 80059b4:	2120      	movs	r1, #32
 80059b6:	68b8      	ldr	r0, [r7, #8]
 80059b8:	f7ff f8c9 	bl	8004b4e <mem_set>
	si = i = 0; ni = 8;
 80059bc:	2300      	movs	r3, #0
 80059be:	613b      	str	r3, [r7, #16]
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	2308      	movs	r3, #8
 80059c6:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	1c5a      	adds	r2, r3, #1
 80059cc:	617a      	str	r2, [r7, #20]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	4413      	add	r3, r2
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80059d6:	7ffb      	ldrb	r3, [r7, #31]
 80059d8:	2b20      	cmp	r3, #32
 80059da:	d94e      	bls.n	8005a7a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80059dc:	7ffb      	ldrb	r3, [r7, #31]
 80059de:	2b2f      	cmp	r3, #47	; 0x2f
 80059e0:	d006      	beq.n	80059f0 <create_name+0x54>
 80059e2:	7ffb      	ldrb	r3, [r7, #31]
 80059e4:	2b5c      	cmp	r3, #92	; 0x5c
 80059e6:	d110      	bne.n	8005a0a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80059e8:	e002      	b.n	80059f0 <create_name+0x54>
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	3301      	adds	r3, #1
 80059ee:	617b      	str	r3, [r7, #20]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	4413      	add	r3, r2
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	2b2f      	cmp	r3, #47	; 0x2f
 80059fa:	d0f6      	beq.n	80059ea <create_name+0x4e>
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	4413      	add	r3, r2
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b5c      	cmp	r3, #92	; 0x5c
 8005a06:	d0f0      	beq.n	80059ea <create_name+0x4e>
			break;
 8005a08:	e038      	b.n	8005a7c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005a0a:	7ffb      	ldrb	r3, [r7, #31]
 8005a0c:	2b2e      	cmp	r3, #46	; 0x2e
 8005a0e:	d003      	beq.n	8005a18 <create_name+0x7c>
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d30c      	bcc.n	8005a32 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	2b0b      	cmp	r3, #11
 8005a1c:	d002      	beq.n	8005a24 <create_name+0x88>
 8005a1e:	7ffb      	ldrb	r3, [r7, #31]
 8005a20:	2b2e      	cmp	r3, #46	; 0x2e
 8005a22:	d001      	beq.n	8005a28 <create_name+0x8c>
 8005a24:	2306      	movs	r3, #6
 8005a26:	e044      	b.n	8005ab2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005a28:	2308      	movs	r3, #8
 8005a2a:	613b      	str	r3, [r7, #16]
 8005a2c:	230b      	movs	r3, #11
 8005a2e:	61bb      	str	r3, [r7, #24]
			continue;
 8005a30:	e022      	b.n	8005a78 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005a32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	da04      	bge.n	8005a44 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005a3a:	7ffb      	ldrb	r3, [r7, #31]
 8005a3c:	3b80      	subs	r3, #128	; 0x80
 8005a3e:	4a1f      	ldr	r2, [pc, #124]	; (8005abc <create_name+0x120>)
 8005a40:	5cd3      	ldrb	r3, [r2, r3]
 8005a42:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005a44:	7ffb      	ldrb	r3, [r7, #31]
 8005a46:	4619      	mov	r1, r3
 8005a48:	481d      	ldr	r0, [pc, #116]	; (8005ac0 <create_name+0x124>)
 8005a4a:	f7ff f8c1 	bl	8004bd0 <chk_chr>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d001      	beq.n	8005a58 <create_name+0xbc>
 8005a54:	2306      	movs	r3, #6
 8005a56:	e02c      	b.n	8005ab2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005a58:	7ffb      	ldrb	r3, [r7, #31]
 8005a5a:	2b60      	cmp	r3, #96	; 0x60
 8005a5c:	d905      	bls.n	8005a6a <create_name+0xce>
 8005a5e:	7ffb      	ldrb	r3, [r7, #31]
 8005a60:	2b7a      	cmp	r3, #122	; 0x7a
 8005a62:	d802      	bhi.n	8005a6a <create_name+0xce>
 8005a64:	7ffb      	ldrb	r3, [r7, #31]
 8005a66:	3b20      	subs	r3, #32
 8005a68:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	613a      	str	r2, [r7, #16]
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	4413      	add	r3, r2
 8005a74:	7ffa      	ldrb	r2, [r7, #31]
 8005a76:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005a78:	e7a6      	b.n	80059c8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005a7a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	441a      	add	r2, r3
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <create_name+0xf4>
 8005a8c:	2306      	movs	r3, #6
 8005a8e:	e010      	b.n	8005ab2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	2be5      	cmp	r3, #229	; 0xe5
 8005a96:	d102      	bne.n	8005a9e <create_name+0x102>
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2205      	movs	r2, #5
 8005a9c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005a9e:	7ffb      	ldrb	r3, [r7, #31]
 8005aa0:	2b20      	cmp	r3, #32
 8005aa2:	d801      	bhi.n	8005aa8 <create_name+0x10c>
 8005aa4:	2204      	movs	r2, #4
 8005aa6:	e000      	b.n	8005aaa <create_name+0x10e>
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	330b      	adds	r3, #11
 8005aae:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005ab0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3720      	adds	r7, #32
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	08007b4c 	.word	0x08007b4c
 8005ac0:	08007af8 	.word	0x08007af8

08005ac4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005ad8:	e002      	b.n	8005ae0 <follow_path+0x1c>
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	3301      	adds	r3, #1
 8005ade:	603b      	str	r3, [r7, #0]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	2b2f      	cmp	r3, #47	; 0x2f
 8005ae6:	d0f8      	beq.n	8005ada <follow_path+0x16>
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	2b5c      	cmp	r3, #92	; 0x5c
 8005aee:	d0f4      	beq.n	8005ada <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	2200      	movs	r2, #0
 8005af4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	2b1f      	cmp	r3, #31
 8005afc:	d80a      	bhi.n	8005b14 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2280      	movs	r2, #128	; 0x80
 8005b02:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005b06:	2100      	movs	r1, #0
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f7ff fcfa 	bl	8005502 <dir_sdi>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	75fb      	strb	r3, [r7, #23]
 8005b12:	e043      	b.n	8005b9c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005b14:	463b      	mov	r3, r7
 8005b16:	4619      	mov	r1, r3
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f7ff ff3f 	bl	800599c <create_name>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005b22:	7dfb      	ldrb	r3, [r7, #23]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d134      	bne.n	8005b92 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f7ff feb0 	bl	800588e <dir_find>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005b38:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005b3a:	7dfb      	ldrb	r3, [r7, #23]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00a      	beq.n	8005b56 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005b40:	7dfb      	ldrb	r3, [r7, #23]
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	d127      	bne.n	8005b96 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005b46:	7afb      	ldrb	r3, [r7, #11]
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d122      	bne.n	8005b96 <follow_path+0xd2>
 8005b50:	2305      	movs	r3, #5
 8005b52:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005b54:	e01f      	b.n	8005b96 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005b56:	7afb      	ldrb	r3, [r7, #11]
 8005b58:	f003 0304 	and.w	r3, r3, #4
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d11c      	bne.n	8005b9a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	799b      	ldrb	r3, [r3, #6]
 8005b64:	f003 0310 	and.w	r3, r3, #16
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d102      	bne.n	8005b72 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005b6c:	2305      	movs	r3, #5
 8005b6e:	75fb      	strb	r3, [r7, #23]
 8005b70:	e014      	b.n	8005b9c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b80:	4413      	add	r3, r2
 8005b82:	4619      	mov	r1, r3
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f7ff fe43 	bl	8005810 <ld_clust>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005b90:	e7c0      	b.n	8005b14 <follow_path+0x50>
			if (res != FR_OK) break;
 8005b92:	bf00      	nop
 8005b94:	e002      	b.n	8005b9c <follow_path+0xd8>
				break;
 8005b96:	bf00      	nop
 8005b98:	e000      	b.n	8005b9c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005b9a:	bf00      	nop
			}
		}
	}

	return res;
 8005b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3718      	adds	r7, #24
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b087      	sub	sp, #28
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005bae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bb2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d031      	beq.n	8005c20 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	617b      	str	r3, [r7, #20]
 8005bc2:	e002      	b.n	8005bca <get_ldnumber+0x24>
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	617b      	str	r3, [r7, #20]
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	2b20      	cmp	r3, #32
 8005bd0:	d903      	bls.n	8005bda <get_ldnumber+0x34>
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	2b3a      	cmp	r3, #58	; 0x3a
 8005bd8:	d1f4      	bne.n	8005bc4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	2b3a      	cmp	r3, #58	; 0x3a
 8005be0:	d11c      	bne.n	8005c1c <get_ldnumber+0x76>
			tp = *path;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	60fa      	str	r2, [r7, #12]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	3b30      	subs	r3, #48	; 0x30
 8005bf2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2b09      	cmp	r3, #9
 8005bf8:	d80e      	bhi.n	8005c18 <get_ldnumber+0x72>
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d10a      	bne.n	8005c18 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d107      	bne.n	8005c18 <get_ldnumber+0x72>
					vol = (int)i;
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	617b      	str	r3, [r7, #20]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	e002      	b.n	8005c22 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005c20:	693b      	ldr	r3, [r7, #16]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	371c      	adds	r7, #28
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
	...

08005c30 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	70da      	strb	r2, [r3, #3]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c46:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005c48:	6839      	ldr	r1, [r7, #0]
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7ff f950 	bl	8004ef0 <move_window>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d001      	beq.n	8005c5a <check_fs+0x2a>
 8005c56:	2304      	movs	r3, #4
 8005c58:	e038      	b.n	8005ccc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	3330      	adds	r3, #48	; 0x30
 8005c5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7fe fed0 	bl	8004a08 <ld_word>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d001      	beq.n	8005c78 <check_fs+0x48>
 8005c74:	2303      	movs	r3, #3
 8005c76:	e029      	b.n	8005ccc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c7e:	2be9      	cmp	r3, #233	; 0xe9
 8005c80:	d009      	beq.n	8005c96 <check_fs+0x66>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c88:	2beb      	cmp	r3, #235	; 0xeb
 8005c8a:	d11e      	bne.n	8005cca <check_fs+0x9a>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005c92:	2b90      	cmp	r3, #144	; 0x90
 8005c94:	d119      	bne.n	8005cca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	3330      	adds	r3, #48	; 0x30
 8005c9a:	3336      	adds	r3, #54	; 0x36
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7fe fecb 	bl	8004a38 <ld_dword>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ca8:	4a0a      	ldr	r2, [pc, #40]	; (8005cd4 <check_fs+0xa4>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d101      	bne.n	8005cb2 <check_fs+0x82>
 8005cae:	2300      	movs	r3, #0
 8005cb0:	e00c      	b.n	8005ccc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	3330      	adds	r3, #48	; 0x30
 8005cb6:	3352      	adds	r3, #82	; 0x52
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7fe febd 	bl	8004a38 <ld_dword>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	4b05      	ldr	r3, [pc, #20]	; (8005cd8 <check_fs+0xa8>)
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d101      	bne.n	8005cca <check_fs+0x9a>
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	e000      	b.n	8005ccc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005cca:	2302      	movs	r3, #2
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3708      	adds	r7, #8
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	00544146 	.word	0x00544146
 8005cd8:	33544146 	.word	0x33544146

08005cdc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b096      	sub	sp, #88	; 0x58
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2200      	movs	r2, #0
 8005cee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f7ff ff58 	bl	8005ba6 <get_ldnumber>
 8005cf6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	da01      	bge.n	8005d02 <find_volume+0x26>
 8005cfe:	230b      	movs	r3, #11
 8005d00:	e22e      	b.n	8006160 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005d02:	4aa8      	ldr	r2, [pc, #672]	; (8005fa4 <find_volume+0x2c8>)
 8005d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d0a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <find_volume+0x3a>
 8005d12:	230c      	movs	r3, #12
 8005d14:	e224      	b.n	8006160 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d1a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005d1c:	79fb      	ldrb	r3, [r7, #7]
 8005d1e:	f023 0301 	bic.w	r3, r3, #1
 8005d22:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d01a      	beq.n	8005d62 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2e:	785b      	ldrb	r3, [r3, #1]
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7fe fde9 	bl	8004908 <disk_status>
 8005d36:	4603      	mov	r3, r0
 8005d38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005d3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10c      	bne.n	8005d62 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005d48:	79fb      	ldrb	r3, [r7, #7]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d007      	beq.n	8005d5e <find_volume+0x82>
 8005d4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d52:	f003 0304 	and.w	r3, r3, #4
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005d5a:	230a      	movs	r3, #10
 8005d5c:	e200      	b.n	8006160 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8005d5e:	2300      	movs	r3, #0
 8005d60:	e1fe      	b.n	8006160 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d64:	2200      	movs	r2, #0
 8005d66:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d6a:	b2da      	uxtb	r2, r3
 8005d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d72:	785b      	ldrb	r3, [r3, #1]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7fe fde1 	bl	800493c <disk_initialize>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005d80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d001      	beq.n	8005d90 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e1e7      	b.n	8006160 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005d90:	79fb      	ldrb	r3, [r7, #7]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d007      	beq.n	8005da6 <find_volume+0xca>
 8005d96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d9a:	f003 0304 	and.w	r3, r3, #4
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d001      	beq.n	8005da6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005da2:	230a      	movs	r3, #10
 8005da4:	e1dc      	b.n	8006160 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005da6:	2300      	movs	r3, #0
 8005da8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005daa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005dac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005dae:	f7ff ff3f 	bl	8005c30 <check_fs>
 8005db2:	4603      	mov	r3, r0
 8005db4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005db8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d14b      	bne.n	8005e58 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	643b      	str	r3, [r7, #64]	; 0x40
 8005dc4:	e01f      	b.n	8005e06 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dce:	011b      	lsls	r3, r3, #4
 8005dd0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005dd4:	4413      	add	r3, r2
 8005dd6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dda:	3304      	adds	r3, #4
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d006      	beq.n	8005df0 <find_volume+0x114>
 8005de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de4:	3308      	adds	r3, #8
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fe fe26 	bl	8004a38 <ld_dword>
 8005dec:	4602      	mov	r2, r0
 8005dee:	e000      	b.n	8005df2 <find_volume+0x116>
 8005df0:	2200      	movs	r2, #0
 8005df2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005dfa:	440b      	add	r3, r1
 8005dfc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e02:	3301      	adds	r3, #1
 8005e04:	643b      	str	r3, [r7, #64]	; 0x40
 8005e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e08:	2b03      	cmp	r3, #3
 8005e0a:	d9dc      	bls.n	8005dc6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d002      	beq.n	8005e1c <find_volume+0x140>
 8005e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005e24:	4413      	add	r3, r2
 8005e26:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005e2a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005e2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d005      	beq.n	8005e3e <find_volume+0x162>
 8005e32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005e36:	f7ff fefb 	bl	8005c30 <check_fs>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	e000      	b.n	8005e40 <find_volume+0x164>
 8005e3e:	2303      	movs	r3, #3
 8005e40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005e44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d905      	bls.n	8005e58 <find_volume+0x17c>
 8005e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e4e:	3301      	adds	r3, #1
 8005e50:	643b      	str	r3, [r7, #64]	; 0x40
 8005e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e54:	2b03      	cmp	r3, #3
 8005e56:	d9e1      	bls.n	8005e1c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005e58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e5c:	2b04      	cmp	r3, #4
 8005e5e:	d101      	bne.n	8005e64 <find_volume+0x188>
 8005e60:	2301      	movs	r3, #1
 8005e62:	e17d      	b.n	8006160 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005e64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d901      	bls.n	8005e70 <find_volume+0x194>
 8005e6c:	230d      	movs	r3, #13
 8005e6e:	e177      	b.n	8006160 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e72:	3330      	adds	r3, #48	; 0x30
 8005e74:	330b      	adds	r3, #11
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7fe fdc6 	bl	8004a08 <ld_word>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e82:	d001      	beq.n	8005e88 <find_volume+0x1ac>
 8005e84:	230d      	movs	r3, #13
 8005e86:	e16b      	b.n	8006160 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8a:	3330      	adds	r3, #48	; 0x30
 8005e8c:	3316      	adds	r3, #22
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fe fdba 	bl	8004a08 <ld_word>
 8005e94:	4603      	mov	r3, r0
 8005e96:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d106      	bne.n	8005eac <find_volume+0x1d0>
 8005e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea0:	3330      	adds	r3, #48	; 0x30
 8005ea2:	3324      	adds	r3, #36	; 0x24
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7fe fdc7 	bl	8004a38 <ld_dword>
 8005eaa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005eb0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8005eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eba:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ebe:	789b      	ldrb	r3, [r3, #2]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d005      	beq.n	8005ed0 <find_volume+0x1f4>
 8005ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec6:	789b      	ldrb	r3, [r3, #2]
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d001      	beq.n	8005ed0 <find_volume+0x1f4>
 8005ecc:	230d      	movs	r3, #13
 8005ece:	e147      	b.n	8006160 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed2:	789b      	ldrb	r3, [r3, #2]
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ed8:	fb02 f303 	mul.w	r3, r2, r3
 8005edc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eec:	895b      	ldrh	r3, [r3, #10]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d008      	beq.n	8005f04 <find_volume+0x228>
 8005ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef4:	895b      	ldrh	r3, [r3, #10]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efa:	895b      	ldrh	r3, [r3, #10]
 8005efc:	3b01      	subs	r3, #1
 8005efe:	4013      	ands	r3, r2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d001      	beq.n	8005f08 <find_volume+0x22c>
 8005f04:	230d      	movs	r3, #13
 8005f06:	e12b      	b.n	8006160 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0a:	3330      	adds	r3, #48	; 0x30
 8005f0c:	3311      	adds	r3, #17
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fe fd7a 	bl	8004a08 <ld_word>
 8005f14:	4603      	mov	r3, r0
 8005f16:	461a      	mov	r2, r3
 8005f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1e:	891b      	ldrh	r3, [r3, #8]
 8005f20:	f003 030f 	and.w	r3, r3, #15
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <find_volume+0x252>
 8005f2a:	230d      	movs	r3, #13
 8005f2c:	e118      	b.n	8006160 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f30:	3330      	adds	r3, #48	; 0x30
 8005f32:	3313      	adds	r3, #19
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7fe fd67 	bl	8004a08 <ld_word>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d106      	bne.n	8005f52 <find_volume+0x276>
 8005f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f46:	3330      	adds	r3, #48	; 0x30
 8005f48:	3320      	adds	r3, #32
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7fe fd74 	bl	8004a38 <ld_dword>
 8005f50:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f54:	3330      	adds	r3, #48	; 0x30
 8005f56:	330e      	adds	r3, #14
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7fe fd55 	bl	8004a08 <ld_word>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005f62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <find_volume+0x290>
 8005f68:	230d      	movs	r3, #13
 8005f6a:	e0f9      	b.n	8006160 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005f6c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f70:	4413      	add	r3, r2
 8005f72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f74:	8912      	ldrh	r2, [r2, #8]
 8005f76:	0912      	lsrs	r2, r2, #4
 8005f78:	b292      	uxth	r2, r2
 8005f7a:	4413      	add	r3, r2
 8005f7c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005f7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d201      	bcs.n	8005f8a <find_volume+0x2ae>
 8005f86:	230d      	movs	r3, #13
 8005f88:	e0ea      	b.n	8006160 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005f8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f92:	8952      	ldrh	r2, [r2, #10]
 8005f94:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f98:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d103      	bne.n	8005fa8 <find_volume+0x2cc>
 8005fa0:	230d      	movs	r3, #13
 8005fa2:	e0dd      	b.n	8006160 <find_volume+0x484>
 8005fa4:	20000028 	.word	0x20000028
		fmt = FS_FAT32;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d802      	bhi.n	8005fbe <find_volume+0x2e2>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d802      	bhi.n	8005fce <find_volume+0x2f2>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	1c9a      	adds	r2, r3, #2
 8005fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd4:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8005fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005fda:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005fdc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005fde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fe0:	441a      	add	r2, r3
 8005fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe4:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8005fe6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fea:	441a      	add	r2, r3
 8005fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fee:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8005ff0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ff4:	2b03      	cmp	r3, #3
 8005ff6:	d11e      	bne.n	8006036 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffa:	3330      	adds	r3, #48	; 0x30
 8005ffc:	332a      	adds	r3, #42	; 0x2a
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7fe fd02 	bl	8004a08 <ld_word>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <find_volume+0x332>
 800600a:	230d      	movs	r3, #13
 800600c:	e0a8      	b.n	8006160 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800600e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006010:	891b      	ldrh	r3, [r3, #8]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <find_volume+0x33e>
 8006016:	230d      	movs	r3, #13
 8006018:	e0a2      	b.n	8006160 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800601a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601c:	3330      	adds	r3, #48	; 0x30
 800601e:	332c      	adds	r3, #44	; 0x2c
 8006020:	4618      	mov	r0, r3
 8006022:	f7fe fd09 	bl	8004a38 <ld_dword>
 8006026:	4602      	mov	r2, r0
 8006028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800602c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	647b      	str	r3, [r7, #68]	; 0x44
 8006034:	e01f      	b.n	8006076 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006038:	891b      	ldrh	r3, [r3, #8]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <find_volume+0x366>
 800603e:	230d      	movs	r3, #13
 8006040:	e08e      	b.n	8006160 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006044:	6a1a      	ldr	r2, [r3, #32]
 8006046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006048:	441a      	add	r2, r3
 800604a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800604e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006052:	2b02      	cmp	r3, #2
 8006054:	d103      	bne.n	800605e <find_volume+0x382>
 8006056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	005b      	lsls	r3, r3, #1
 800605c:	e00a      	b.n	8006074 <find_volume+0x398>
 800605e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006060:	695a      	ldr	r2, [r3, #20]
 8006062:	4613      	mov	r3, r2
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	4413      	add	r3, r2
 8006068:	085a      	lsrs	r2, r3, #1
 800606a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006074:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006078:	699a      	ldr	r2, [r3, #24]
 800607a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800607c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006080:	0a5b      	lsrs	r3, r3, #9
 8006082:	429a      	cmp	r2, r3
 8006084:	d201      	bcs.n	800608a <find_volume+0x3ae>
 8006086:	230d      	movs	r3, #13
 8006088:	e06a      	b.n	8006160 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800608a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006090:	611a      	str	r2, [r3, #16]
 8006092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006094:	691a      	ldr	r2, [r3, #16]
 8006096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006098:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800609a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609c:	2280      	movs	r2, #128	; 0x80
 800609e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80060a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80060a4:	2b03      	cmp	r3, #3
 80060a6:	d149      	bne.n	800613c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80060a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060aa:	3330      	adds	r3, #48	; 0x30
 80060ac:	3330      	adds	r3, #48	; 0x30
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fe fcaa 	bl	8004a08 <ld_word>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d140      	bne.n	800613c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80060ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060bc:	3301      	adds	r3, #1
 80060be:	4619      	mov	r1, r3
 80060c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80060c2:	f7fe ff15 	bl	8004ef0 <move_window>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d137      	bne.n	800613c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80060cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ce:	2200      	movs	r2, #0
 80060d0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80060d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d4:	3330      	adds	r3, #48	; 0x30
 80060d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80060da:	4618      	mov	r0, r3
 80060dc:	f7fe fc94 	bl	8004a08 <ld_word>
 80060e0:	4603      	mov	r3, r0
 80060e2:	461a      	mov	r2, r3
 80060e4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d127      	bne.n	800613c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80060ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ee:	3330      	adds	r3, #48	; 0x30
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7fe fca1 	bl	8004a38 <ld_dword>
 80060f6:	4602      	mov	r2, r0
 80060f8:	4b1b      	ldr	r3, [pc, #108]	; (8006168 <find_volume+0x48c>)
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d11e      	bne.n	800613c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80060fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006100:	3330      	adds	r3, #48	; 0x30
 8006102:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006106:	4618      	mov	r0, r3
 8006108:	f7fe fc96 	bl	8004a38 <ld_dword>
 800610c:	4602      	mov	r2, r0
 800610e:	4b17      	ldr	r3, [pc, #92]	; (800616c <find_volume+0x490>)
 8006110:	429a      	cmp	r2, r3
 8006112:	d113      	bne.n	800613c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006116:	3330      	adds	r3, #48	; 0x30
 8006118:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800611c:	4618      	mov	r0, r3
 800611e:	f7fe fc8b 	bl	8004a38 <ld_dword>
 8006122:	4602      	mov	r2, r0
 8006124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006126:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612a:	3330      	adds	r3, #48	; 0x30
 800612c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006130:	4618      	mov	r0, r3
 8006132:	f7fe fc81 	bl	8004a38 <ld_dword>
 8006136:	4602      	mov	r2, r0
 8006138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613a:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800613c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006142:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006144:	4b0a      	ldr	r3, [pc, #40]	; (8006170 <find_volume+0x494>)
 8006146:	881b      	ldrh	r3, [r3, #0]
 8006148:	3301      	adds	r3, #1
 800614a:	b29a      	uxth	r2, r3
 800614c:	4b08      	ldr	r3, [pc, #32]	; (8006170 <find_volume+0x494>)
 800614e:	801a      	strh	r2, [r3, #0]
 8006150:	4b07      	ldr	r3, [pc, #28]	; (8006170 <find_volume+0x494>)
 8006152:	881a      	ldrh	r2, [r3, #0]
 8006154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006156:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006158:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800615a:	f7fe fe61 	bl	8004e20 <clear_lock>
#endif
	return FR_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3758      	adds	r7, #88	; 0x58
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	41615252 	.word	0x41615252
 800616c:	61417272 	.word	0x61417272
 8006170:	2000002c 	.word	0x2000002c

08006174 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800617e:	2309      	movs	r3, #9
 8006180:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d01c      	beq.n	80061c2 <validate+0x4e>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d018      	beq.n	80061c2 <validate+0x4e>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d013      	beq.n	80061c2 <validate+0x4e>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	889a      	ldrh	r2, [r3, #4]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	88db      	ldrh	r3, [r3, #6]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d10c      	bne.n	80061c2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	785b      	ldrb	r3, [r3, #1]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fe fbaa 	bl	8004908 <disk_status>
 80061b4:	4603      	mov	r3, r0
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d101      	bne.n	80061c2 <validate+0x4e>
			res = FR_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80061c2:	7bfb      	ldrb	r3, [r7, #15]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d102      	bne.n	80061ce <validate+0x5a>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	e000      	b.n	80061d0 <validate+0x5c>
 80061ce:	2300      	movs	r3, #0
 80061d0:	683a      	ldr	r2, [r7, #0]
 80061d2:	6013      	str	r3, [r2, #0]
	return res;
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
	...

080061e0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b088      	sub	sp, #32
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	4613      	mov	r3, r2
 80061ec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80061f2:	f107 0310 	add.w	r3, r7, #16
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7ff fcd5 	bl	8005ba6 <get_ldnumber>
 80061fc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	2b00      	cmp	r3, #0
 8006202:	da01      	bge.n	8006208 <f_mount+0x28>
 8006204:	230b      	movs	r3, #11
 8006206:	e02b      	b.n	8006260 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006208:	4a17      	ldr	r2, [pc, #92]	; (8006268 <f_mount+0x88>)
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006210:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d005      	beq.n	8006224 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006218:	69b8      	ldr	r0, [r7, #24]
 800621a:	f7fe fe01 	bl	8004e20 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	2200      	movs	r2, #0
 8006222:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d002      	beq.n	8006230 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	490d      	ldr	r1, [pc, #52]	; (8006268 <f_mount+0x88>)
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d002      	beq.n	8006246 <f_mount+0x66>
 8006240:	79fb      	ldrb	r3, [r7, #7]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d001      	beq.n	800624a <f_mount+0x6a>
 8006246:	2300      	movs	r3, #0
 8006248:	e00a      	b.n	8006260 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800624a:	f107 010c 	add.w	r1, r7, #12
 800624e:	f107 0308 	add.w	r3, r7, #8
 8006252:	2200      	movs	r2, #0
 8006254:	4618      	mov	r0, r3
 8006256:	f7ff fd41 	bl	8005cdc <find_volume>
 800625a:	4603      	mov	r3, r0
 800625c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800625e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3720      	adds	r7, #32
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	20000028 	.word	0x20000028

0800626c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b098      	sub	sp, #96	; 0x60
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	4613      	mov	r3, r2
 8006278:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d101      	bne.n	8006284 <f_open+0x18>
 8006280:	2309      	movs	r3, #9
 8006282:	e1ad      	b.n	80065e0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006284:	79fb      	ldrb	r3, [r7, #7]
 8006286:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800628a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800628c:	79fa      	ldrb	r2, [r7, #7]
 800628e:	f107 0110 	add.w	r1, r7, #16
 8006292:	f107 0308 	add.w	r3, r7, #8
 8006296:	4618      	mov	r0, r3
 8006298:	f7ff fd20 	bl	8005cdc <find_volume>
 800629c:	4603      	mov	r3, r0
 800629e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80062a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f040 8191 	bne.w	80065ce <f_open+0x362>
		dj.obj.fs = fs;
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	f107 0314 	add.w	r3, r7, #20
 80062b6:	4611      	mov	r1, r2
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7ff fc03 	bl	8005ac4 <follow_path>
 80062be:	4603      	mov	r3, r0
 80062c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80062c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d11a      	bne.n	8006302 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80062cc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80062d0:	b25b      	sxtb	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	da03      	bge.n	80062de <f_open+0x72>
				res = FR_INVALID_NAME;
 80062d6:	2306      	movs	r3, #6
 80062d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80062dc:	e011      	b.n	8006302 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80062de:	79fb      	ldrb	r3, [r7, #7]
 80062e0:	f023 0301 	bic.w	r3, r3, #1
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	bf14      	ite	ne
 80062e8:	2301      	movne	r3, #1
 80062ea:	2300      	moveq	r3, #0
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	461a      	mov	r2, r3
 80062f0:	f107 0314 	add.w	r3, r7, #20
 80062f4:	4611      	mov	r1, r2
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7fe fc86 	bl	8004c08 <chk_lock>
 80062fc:	4603      	mov	r3, r0
 80062fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006302:	79fb      	ldrb	r3, [r7, #7]
 8006304:	f003 031c 	and.w	r3, r3, #28
 8006308:	2b00      	cmp	r3, #0
 800630a:	d07f      	beq.n	800640c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800630c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006310:	2b00      	cmp	r3, #0
 8006312:	d017      	beq.n	8006344 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006314:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006318:	2b04      	cmp	r3, #4
 800631a:	d10e      	bne.n	800633a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800631c:	f7fe fcd0 	bl	8004cc0 <enq_lock>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d006      	beq.n	8006334 <f_open+0xc8>
 8006326:	f107 0314 	add.w	r3, r7, #20
 800632a:	4618      	mov	r0, r3
 800632c:	f7ff fb04 	bl	8005938 <dir_register>
 8006330:	4603      	mov	r3, r0
 8006332:	e000      	b.n	8006336 <f_open+0xca>
 8006334:	2312      	movs	r3, #18
 8006336:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800633a:	79fb      	ldrb	r3, [r7, #7]
 800633c:	f043 0308 	orr.w	r3, r3, #8
 8006340:	71fb      	strb	r3, [r7, #7]
 8006342:	e010      	b.n	8006366 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006344:	7ebb      	ldrb	r3, [r7, #26]
 8006346:	f003 0311 	and.w	r3, r3, #17
 800634a:	2b00      	cmp	r3, #0
 800634c:	d003      	beq.n	8006356 <f_open+0xea>
					res = FR_DENIED;
 800634e:	2307      	movs	r3, #7
 8006350:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006354:	e007      	b.n	8006366 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006356:	79fb      	ldrb	r3, [r7, #7]
 8006358:	f003 0304 	and.w	r3, r3, #4
 800635c:	2b00      	cmp	r3, #0
 800635e:	d002      	beq.n	8006366 <f_open+0xfa>
 8006360:	2308      	movs	r3, #8
 8006362:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006366:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800636a:	2b00      	cmp	r3, #0
 800636c:	d168      	bne.n	8006440 <f_open+0x1d4>
 800636e:	79fb      	ldrb	r3, [r7, #7]
 8006370:	f003 0308 	and.w	r3, r3, #8
 8006374:	2b00      	cmp	r3, #0
 8006376:	d063      	beq.n	8006440 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006378:	f000 fd7e 	bl	8006e78 <get_fattime>
 800637c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800637e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006380:	330e      	adds	r3, #14
 8006382:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006384:	4618      	mov	r0, r3
 8006386:	f7fe fb95 	bl	8004ab4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800638a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800638c:	3316      	adds	r3, #22
 800638e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006390:	4618      	mov	r0, r3
 8006392:	f7fe fb8f 	bl	8004ab4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006398:	330b      	adds	r3, #11
 800639a:	2220      	movs	r2, #32
 800639c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063a2:	4611      	mov	r1, r2
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7ff fa33 	bl	8005810 <ld_clust>
 80063aa:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80063b0:	2200      	movs	r2, #0
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7ff fa4b 	bl	800584e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80063b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ba:	331c      	adds	r3, #28
 80063bc:	2100      	movs	r1, #0
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fe fb78 	bl	8004ab4 <st_dword>
					fs->wflag = 1;
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	2201      	movs	r2, #1
 80063c8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80063ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d037      	beq.n	8006440 <f_open+0x1d4>
						dw = fs->winsect;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80063d6:	f107 0314 	add.w	r3, r7, #20
 80063da:	2200      	movs	r2, #0
 80063dc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fe ff5e 	bl	80052a0 <remove_chain>
 80063e4:	4603      	mov	r3, r0
 80063e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80063ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d126      	bne.n	8006440 <f_open+0x1d4>
							res = move_window(fs, dw);
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fe fd7a 	bl	8004ef0 <move_window>
 80063fc:	4603      	mov	r3, r0
 80063fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006406:	3a01      	subs	r2, #1
 8006408:	60da      	str	r2, [r3, #12]
 800640a:	e019      	b.n	8006440 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800640c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006410:	2b00      	cmp	r3, #0
 8006412:	d115      	bne.n	8006440 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006414:	7ebb      	ldrb	r3, [r7, #26]
 8006416:	f003 0310 	and.w	r3, r3, #16
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <f_open+0x1ba>
					res = FR_NO_FILE;
 800641e:	2304      	movs	r3, #4
 8006420:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006424:	e00c      	b.n	8006440 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006426:	79fb      	ldrb	r3, [r7, #7]
 8006428:	f003 0302 	and.w	r3, r3, #2
 800642c:	2b00      	cmp	r3, #0
 800642e:	d007      	beq.n	8006440 <f_open+0x1d4>
 8006430:	7ebb      	ldrb	r3, [r7, #26]
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d002      	beq.n	8006440 <f_open+0x1d4>
						res = FR_DENIED;
 800643a:	2307      	movs	r3, #7
 800643c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006440:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006444:	2b00      	cmp	r3, #0
 8006446:	d128      	bne.n	800649a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006448:	79fb      	ldrb	r3, [r7, #7]
 800644a:	f003 0308 	and.w	r3, r3, #8
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006452:	79fb      	ldrb	r3, [r7, #7]
 8006454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006458:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006462:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006468:	79fb      	ldrb	r3, [r7, #7]
 800646a:	f023 0301 	bic.w	r3, r3, #1
 800646e:	2b00      	cmp	r3, #0
 8006470:	bf14      	ite	ne
 8006472:	2301      	movne	r3, #1
 8006474:	2300      	moveq	r3, #0
 8006476:	b2db      	uxtb	r3, r3
 8006478:	461a      	mov	r2, r3
 800647a:	f107 0314 	add.w	r3, r7, #20
 800647e:	4611      	mov	r1, r2
 8006480:	4618      	mov	r0, r3
 8006482:	f7fe fc3f 	bl	8004d04 <inc_lock>
 8006486:	4602      	mov	r2, r0
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d102      	bne.n	800649a <f_open+0x22e>
 8006494:	2302      	movs	r3, #2
 8006496:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800649a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f040 8095 	bne.w	80065ce <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064a8:	4611      	mov	r1, r2
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7ff f9b0 	bl	8005810 <ld_clust>
 80064b0:	4602      	mov	r2, r0
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80064b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b8:	331c      	adds	r3, #28
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7fe fabc 	bl	8004a38 <ld_dword>
 80064c0:	4602      	mov	r2, r0
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	88da      	ldrh	r2, [r3, #6]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	79fa      	ldrb	r2, [r7, #7]
 80064de:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	3330      	adds	r3, #48	; 0x30
 80064f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064fa:	2100      	movs	r1, #0
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7fe fb26 	bl	8004b4e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006502:	79fb      	ldrb	r3, [r7, #7]
 8006504:	f003 0320 	and.w	r3, r3, #32
 8006508:	2b00      	cmp	r3, #0
 800650a:	d060      	beq.n	80065ce <f_open+0x362>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d05c      	beq.n	80065ce <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	68da      	ldr	r2, [r3, #12]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	895b      	ldrh	r3, [r3, #10]
 8006520:	025b      	lsls	r3, r3, #9
 8006522:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	657b      	str	r3, [r7, #84]	; 0x54
 8006530:	e016      	b.n	8006560 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006536:	4618      	mov	r0, r3
 8006538:	f7fe fd26 	bl	8004f88 <get_fat>
 800653c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800653e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006540:	2b01      	cmp	r3, #1
 8006542:	d802      	bhi.n	800654a <f_open+0x2de>
 8006544:	2302      	movs	r3, #2
 8006546:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800654a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800654c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006550:	d102      	bne.n	8006558 <f_open+0x2ec>
 8006552:	2301      	movs	r3, #1
 8006554:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006558:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800655a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	657b      	str	r3, [r7, #84]	; 0x54
 8006560:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006564:	2b00      	cmp	r3, #0
 8006566:	d103      	bne.n	8006570 <f_open+0x304>
 8006568:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800656a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800656c:	429a      	cmp	r2, r3
 800656e:	d8e0      	bhi.n	8006532 <f_open+0x2c6>
				}
				fp->clust = clst;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006574:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006576:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800657a:	2b00      	cmp	r3, #0
 800657c:	d127      	bne.n	80065ce <f_open+0x362>
 800657e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006584:	2b00      	cmp	r3, #0
 8006586:	d022      	beq.n	80065ce <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800658c:	4618      	mov	r0, r3
 800658e:	f7fe fcdc 	bl	8004f4a <clust2sect>
 8006592:	6478      	str	r0, [r7, #68]	; 0x44
 8006594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006596:	2b00      	cmp	r3, #0
 8006598:	d103      	bne.n	80065a2 <f_open+0x336>
						res = FR_INT_ERR;
 800659a:	2302      	movs	r3, #2
 800659c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80065a0:	e015      	b.n	80065ce <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80065a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065a4:	0a5a      	lsrs	r2, r3, #9
 80065a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065a8:	441a      	add	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	7858      	ldrb	r0, [r3, #1]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6a1a      	ldr	r2, [r3, #32]
 80065bc:	2301      	movs	r3, #1
 80065be:	f7fe f9e3 	bl	8004988 <disk_read>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d002      	beq.n	80065ce <f_open+0x362>
 80065c8:	2301      	movs	r3, #1
 80065ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80065ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d002      	beq.n	80065dc <f_open+0x370>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80065dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3760      	adds	r7, #96	; 0x60
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b08e      	sub	sp, #56	; 0x38
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
 80065f4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	2200      	movs	r2, #0
 80065fe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f107 0214 	add.w	r2, r7, #20
 8006606:	4611      	mov	r1, r2
 8006608:	4618      	mov	r0, r3
 800660a:	f7ff fdb3 	bl	8006174 <validate>
 800660e:	4603      	mov	r3, r0
 8006610:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006614:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006618:	2b00      	cmp	r3, #0
 800661a:	d107      	bne.n	800662c <f_read+0x44>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	7d5b      	ldrb	r3, [r3, #21]
 8006620:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006624:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006628:	2b00      	cmp	r3, #0
 800662a:	d002      	beq.n	8006632 <f_read+0x4a>
 800662c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006630:	e115      	b.n	800685e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	7d1b      	ldrb	r3, [r3, #20]
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <f_read+0x5a>
 800663e:	2307      	movs	r3, #7
 8006640:	e10d      	b.n	800685e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	68da      	ldr	r2, [r3, #12]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	429a      	cmp	r2, r3
 8006654:	f240 80fe 	bls.w	8006854 <f_read+0x26c>
 8006658:	6a3b      	ldr	r3, [r7, #32]
 800665a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800665c:	e0fa      	b.n	8006854 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006666:	2b00      	cmp	r3, #0
 8006668:	f040 80c6 	bne.w	80067f8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	0a5b      	lsrs	r3, r3, #9
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	8952      	ldrh	r2, [r2, #10]
 8006676:	3a01      	subs	r2, #1
 8006678:	4013      	ands	r3, r2
 800667a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d12f      	bne.n	80066e2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d103      	bne.n	8006692 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	633b      	str	r3, [r7, #48]	; 0x30
 8006690:	e013      	b.n	80066ba <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006696:	2b00      	cmp	r3, #0
 8006698:	d007      	beq.n	80066aa <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	4619      	mov	r1, r3
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f7fe fefa 	bl	800549a <clmt_clust>
 80066a6:	6338      	str	r0, [r7, #48]	; 0x30
 80066a8:	e007      	b.n	80066ba <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	69db      	ldr	r3, [r3, #28]
 80066b0:	4619      	mov	r1, r3
 80066b2:	4610      	mov	r0, r2
 80066b4:	f7fe fc68 	bl	8004f88 <get_fat>
 80066b8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80066ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d804      	bhi.n	80066ca <f_read+0xe2>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2202      	movs	r2, #2
 80066c4:	755a      	strb	r2, [r3, #21]
 80066c6:	2302      	movs	r3, #2
 80066c8:	e0c9      	b.n	800685e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80066ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066d0:	d104      	bne.n	80066dc <f_read+0xf4>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2201      	movs	r2, #1
 80066d6:	755a      	strb	r2, [r3, #21]
 80066d8:	2301      	movs	r3, #1
 80066da:	e0c0      	b.n	800685e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066e0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	4619      	mov	r1, r3
 80066ea:	4610      	mov	r0, r2
 80066ec:	f7fe fc2d 	bl	8004f4a <clust2sect>
 80066f0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d104      	bne.n	8006702 <f_read+0x11a>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2202      	movs	r2, #2
 80066fc:	755a      	strb	r2, [r3, #21]
 80066fe:	2302      	movs	r3, #2
 8006700:	e0ad      	b.n	800685e <f_read+0x276>
			sect += csect;
 8006702:	69ba      	ldr	r2, [r7, #24]
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	4413      	add	r3, r2
 8006708:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	0a5b      	lsrs	r3, r3, #9
 800670e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006712:	2b00      	cmp	r3, #0
 8006714:	d039      	beq.n	800678a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006716:	69fa      	ldr	r2, [r7, #28]
 8006718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671a:	4413      	add	r3, r2
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	8952      	ldrh	r2, [r2, #10]
 8006720:	4293      	cmp	r3, r2
 8006722:	d905      	bls.n	8006730 <f_read+0x148>
					cc = fs->csize - csect;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	895b      	ldrh	r3, [r3, #10]
 8006728:	461a      	mov	r2, r3
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	7858      	ldrb	r0, [r3, #1]
 8006734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006736:	69ba      	ldr	r2, [r7, #24]
 8006738:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800673a:	f7fe f925 	bl	8004988 <disk_read>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d004      	beq.n	800674e <f_read+0x166>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2201      	movs	r2, #1
 8006748:	755a      	strb	r2, [r3, #21]
 800674a:	2301      	movs	r3, #1
 800674c:	e087      	b.n	800685e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	7d1b      	ldrb	r3, [r3, #20]
 8006752:	b25b      	sxtb	r3, r3
 8006754:	2b00      	cmp	r3, #0
 8006756:	da14      	bge.n	8006782 <f_read+0x19a>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6a1a      	ldr	r2, [r3, #32]
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006762:	429a      	cmp	r2, r3
 8006764:	d90d      	bls.n	8006782 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6a1a      	ldr	r2, [r3, #32]
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	025b      	lsls	r3, r3, #9
 8006770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006772:	18d0      	adds	r0, r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	3330      	adds	r3, #48	; 0x30
 8006778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800677c:	4619      	mov	r1, r3
 800677e:	f7fe f9c5 	bl	8004b0c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006784:	025b      	lsls	r3, r3, #9
 8006786:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006788:	e050      	b.n	800682c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	69ba      	ldr	r2, [r7, #24]
 8006790:	429a      	cmp	r2, r3
 8006792:	d02e      	beq.n	80067f2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	7d1b      	ldrb	r3, [r3, #20]
 8006798:	b25b      	sxtb	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	da18      	bge.n	80067d0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	7858      	ldrb	r0, [r3, #1]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6a1a      	ldr	r2, [r3, #32]
 80067ac:	2301      	movs	r3, #1
 80067ae:	f7fe f90b 	bl	80049c8 <disk_write>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d004      	beq.n	80067c2 <f_read+0x1da>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2201      	movs	r2, #1
 80067bc:	755a      	strb	r2, [r3, #21]
 80067be:	2301      	movs	r3, #1
 80067c0:	e04d      	b.n	800685e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	7d1b      	ldrb	r3, [r3, #20]
 80067c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	7858      	ldrb	r0, [r3, #1]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80067da:	2301      	movs	r3, #1
 80067dc:	69ba      	ldr	r2, [r7, #24]
 80067de:	f7fe f8d3 	bl	8004988 <disk_read>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d004      	beq.n	80067f2 <f_read+0x20a>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2201      	movs	r2, #1
 80067ec:	755a      	strb	r2, [r3, #21]
 80067ee:	2301      	movs	r3, #1
 80067f0:	e035      	b.n	800685e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	69ba      	ldr	r2, [r7, #24]
 80067f6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006800:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006804:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	429a      	cmp	r2, r3
 800680c:	d901      	bls.n	8006812 <f_read+0x22a>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006820:	4413      	add	r3, r2
 8006822:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006824:	4619      	mov	r1, r3
 8006826:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006828:	f7fe f970 	bl	8004b0c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800682c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800682e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006830:	4413      	add	r3, r2
 8006832:	627b      	str	r3, [r7, #36]	; 0x24
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	699a      	ldr	r2, [r3, #24]
 8006838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683a:	441a      	add	r2, r3
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	619a      	str	r2, [r3, #24]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006846:	441a      	add	r2, r3
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	601a      	str	r2, [r3, #0]
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	f47f af01 	bne.w	800665e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3738      	adds	r7, #56	; 0x38
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b090      	sub	sp, #64	; 0x40
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
 800686e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f107 0208 	add.w	r2, r7, #8
 8006876:	4611      	mov	r1, r2
 8006878:	4618      	mov	r0, r3
 800687a:	f7ff fc7b 	bl	8006174 <validate>
 800687e:	4603      	mov	r3, r0
 8006880:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8006884:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006888:	2b00      	cmp	r3, #0
 800688a:	d103      	bne.n	8006894 <f_lseek+0x2e>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	7d5b      	ldrb	r3, [r3, #21]
 8006890:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8006894:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006898:	2b00      	cmp	r3, #0
 800689a:	d002      	beq.n	80068a2 <f_lseek+0x3c>
 800689c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80068a0:	e1e6      	b.n	8006c70 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 80d1 	beq.w	8006a4e <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068b2:	d15a      	bne.n	800696a <f_lseek+0x104>
			tbl = fp->cltbl;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b8:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80068ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068bc:	1d1a      	adds	r2, r3, #4
 80068be:	627a      	str	r2, [r7, #36]	; 0x24
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	617b      	str	r3, [r7, #20]
 80068c4:	2302      	movs	r3, #2
 80068c6:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80068ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d03a      	beq.n	800694a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80068d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d6:	613b      	str	r3, [r7, #16]
 80068d8:	2300      	movs	r3, #0
 80068da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068de:	3302      	adds	r3, #2
 80068e0:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80068e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e4:	60fb      	str	r3, [r7, #12]
 80068e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e8:	3301      	adds	r3, #1
 80068ea:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7fe fb49 	bl	8004f88 <get_fat>
 80068f6:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80068f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d804      	bhi.n	8006908 <f_lseek+0xa2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2202      	movs	r2, #2
 8006902:	755a      	strb	r2, [r3, #21]
 8006904:	2302      	movs	r3, #2
 8006906:	e1b3      	b.n	8006c70 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800690e:	d104      	bne.n	800691a <f_lseek+0xb4>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	755a      	strb	r2, [r3, #21]
 8006916:	2301      	movs	r3, #1
 8006918:	e1aa      	b.n	8006c70 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	3301      	adds	r3, #1
 800691e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006920:	429a      	cmp	r2, r3
 8006922:	d0de      	beq.n	80068e2 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8006924:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	429a      	cmp	r2, r3
 800692a:	d809      	bhi.n	8006940 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692e:	1d1a      	adds	r2, r3, #4
 8006930:	627a      	str	r2, [r7, #36]	; 0x24
 8006932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006934:	601a      	str	r2, [r3, #0]
 8006936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006938:	1d1a      	adds	r2, r3, #4
 800693a:	627a      	str	r2, [r7, #36]	; 0x24
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	695b      	ldr	r3, [r3, #20]
 8006944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006946:	429a      	cmp	r2, r3
 8006948:	d3c4      	bcc.n	80068d4 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006950:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8006952:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	429a      	cmp	r2, r3
 8006958:	d803      	bhi.n	8006962 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695c:	2200      	movs	r2, #0
 800695e:	601a      	str	r2, [r3, #0]
 8006960:	e184      	b.n	8006c6c <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8006962:	2311      	movs	r3, #17
 8006964:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006968:	e180      	b.n	8006c6c <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	683a      	ldr	r2, [r7, #0]
 8006970:	429a      	cmp	r2, r3
 8006972:	d902      	bls.n	800697a <f_lseek+0x114>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 8172 	beq.w	8006c6c <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	3b01      	subs	r3, #1
 800698c:	4619      	mov	r1, r3
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7fe fd83 	bl	800549a <clmt_clust>
 8006994:	4602      	mov	r2, r0
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	69db      	ldr	r3, [r3, #28]
 80069a0:	4619      	mov	r1, r3
 80069a2:	4610      	mov	r0, r2
 80069a4:	f7fe fad1 	bl	8004f4a <clust2sect>
 80069a8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d104      	bne.n	80069ba <f_lseek+0x154>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2202      	movs	r2, #2
 80069b4:	755a      	strb	r2, [r3, #21]
 80069b6:	2302      	movs	r3, #2
 80069b8:	e15a      	b.n	8006c70 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	3b01      	subs	r3, #1
 80069be:	0a5b      	lsrs	r3, r3, #9
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	8952      	ldrh	r2, [r2, #10]
 80069c4:	3a01      	subs	r2, #1
 80069c6:	4013      	ands	r3, r2
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	4413      	add	r3, r2
 80069cc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f000 8148 	beq.w	8006c6c <f_lseek+0x406>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a1b      	ldr	r3, [r3, #32]
 80069e0:	69ba      	ldr	r2, [r7, #24]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	f000 8142 	beq.w	8006c6c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	7d1b      	ldrb	r3, [r3, #20]
 80069ec:	b25b      	sxtb	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	da18      	bge.n	8006a24 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	7858      	ldrb	r0, [r3, #1]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a1a      	ldr	r2, [r3, #32]
 8006a00:	2301      	movs	r3, #1
 8006a02:	f7fd ffe1 	bl	80049c8 <disk_write>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d004      	beq.n	8006a16 <f_lseek+0x1b0>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	755a      	strb	r2, [r3, #21]
 8006a12:	2301      	movs	r3, #1
 8006a14:	e12c      	b.n	8006c70 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	7d1b      	ldrb	r3, [r3, #20]
 8006a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a1e:	b2da      	uxtb	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	7858      	ldrb	r0, [r3, #1]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006a2e:	2301      	movs	r3, #1
 8006a30:	69ba      	ldr	r2, [r7, #24]
 8006a32:	f7fd ffa9 	bl	8004988 <disk_read>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d004      	beq.n	8006a46 <f_lseek+0x1e0>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	755a      	strb	r2, [r3, #21]
 8006a42:	2301      	movs	r3, #1
 8006a44:	e114      	b.n	8006c70 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	69ba      	ldr	r2, [r7, #24]
 8006a4a:	621a      	str	r2, [r3, #32]
 8006a4c:	e10e      	b.n	8006c6c <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	683a      	ldr	r2, [r7, #0]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d908      	bls.n	8006a6a <f_lseek+0x204>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	7d1b      	ldrb	r3, [r3, #20]
 8006a5c:	f003 0302 	and.w	r3, r3, #2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d102      	bne.n	8006a6a <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8006a70:	2300      	movs	r3, #0
 8006a72:	637b      	str	r3, [r7, #52]	; 0x34
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a78:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 80a7 	beq.w	8006bd0 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	895b      	ldrh	r3, [r3, #10]
 8006a86:	025b      	lsls	r3, r3, #9
 8006a88:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d01b      	beq.n	8006ac8 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	1e5a      	subs	r2, r3, #1
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	1e59      	subs	r1, r3, #1
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d30f      	bcc.n	8006ac8 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8006aa8:	6a3b      	ldr	r3, [r7, #32]
 8006aaa:	1e5a      	subs	r2, r3, #1
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	425b      	negs	r3, r3
 8006ab0:	401a      	ands	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	683a      	ldr	r2, [r7, #0]
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	69db      	ldr	r3, [r3, #28]
 8006ac4:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ac6:	e022      	b.n	8006b0e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8006ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d119      	bne.n	8006b08 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7fe fc46 	bl	800536a <create_chain>
 8006ade:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d104      	bne.n	8006af0 <f_lseek+0x28a>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2202      	movs	r2, #2
 8006aea:	755a      	strb	r2, [r3, #21]
 8006aec:	2302      	movs	r3, #2
 8006aee:	e0bf      	b.n	8006c70 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006af6:	d104      	bne.n	8006b02 <f_lseek+0x29c>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	755a      	strb	r2, [r3, #21]
 8006afe:	2301      	movs	r3, #1
 8006b00:	e0b6      	b.n	8006c70 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b06:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b0c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8006b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d05d      	beq.n	8006bd0 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8006b14:	e03a      	b.n	8006b8c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8006b16:	683a      	ldr	r2, [r7, #0]
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	603b      	str	r3, [r7, #0]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	699a      	ldr	r2, [r3, #24]
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	441a      	add	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	7d1b      	ldrb	r3, [r3, #20]
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00b      	beq.n	8006b4e <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fe fc15 	bl	800536a <create_chain>
 8006b40:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8006b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d108      	bne.n	8006b5a <f_lseek+0x2f4>
							ofs = 0; break;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	603b      	str	r3, [r7, #0]
 8006b4c:	e022      	b.n	8006b94 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7fe fa18 	bl	8004f88 <get_fat>
 8006b58:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b60:	d104      	bne.n	8006b6c <f_lseek+0x306>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2201      	movs	r2, #1
 8006b66:	755a      	strb	r2, [r3, #21]
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e081      	b.n	8006c70 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8006b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d904      	bls.n	8006b7c <f_lseek+0x316>
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d304      	bcc.n	8006b86 <f_lseek+0x320>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2202      	movs	r2, #2
 8006b80:	755a      	strb	r2, [r3, #21]
 8006b82:	2302      	movs	r3, #2
 8006b84:	e074      	b.n	8006c70 <f_lseek+0x40a>
					fp->clust = clst;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b8a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d8c0      	bhi.n	8006b16 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	699a      	ldr	r2, [r3, #24]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	441a      	add	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d012      	beq.n	8006bd0 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7fe f9cb 	bl	8004f4a <clust2sect>
 8006bb4:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8006bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d104      	bne.n	8006bc6 <f_lseek+0x360>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	755a      	strb	r2, [r3, #21]
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	e054      	b.n	8006c70 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	0a5b      	lsrs	r3, r3, #9
 8006bca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bcc:	4413      	add	r3, r2
 8006bce:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	699a      	ldr	r2, [r3, #24]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d90a      	bls.n	8006bf2 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	699a      	ldr	r2, [r3, #24]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	7d1b      	ldrb	r3, [r3, #20]
 8006be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bec:	b2da      	uxtb	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d036      	beq.n	8006c6c <f_lseek+0x406>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d031      	beq.n	8006c6c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	7d1b      	ldrb	r3, [r3, #20]
 8006c0c:	b25b      	sxtb	r3, r3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	da18      	bge.n	8006c44 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	7858      	ldrb	r0, [r3, #1]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a1a      	ldr	r2, [r3, #32]
 8006c20:	2301      	movs	r3, #1
 8006c22:	f7fd fed1 	bl	80049c8 <disk_write>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d004      	beq.n	8006c36 <f_lseek+0x3d0>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	755a      	strb	r2, [r3, #21]
 8006c32:	2301      	movs	r3, #1
 8006c34:	e01c      	b.n	8006c70 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	7d1b      	ldrb	r3, [r3, #20]
 8006c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c3e:	b2da      	uxtb	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	7858      	ldrb	r0, [r3, #1]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006c4e:	2301      	movs	r3, #1
 8006c50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c52:	f7fd fe99 	bl	8004988 <disk_read>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d004      	beq.n	8006c66 <f_lseek+0x400>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	755a      	strb	r2, [r3, #21]
 8006c62:	2301      	movs	r3, #1
 8006c64:	e004      	b.n	8006c70 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c6a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8006c6c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3740      	adds	r7, #64	; 0x40
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b087      	sub	sp, #28
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	4613      	mov	r3, r2
 8006c84:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006c86:	2301      	movs	r3, #1
 8006c88:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006c8e:	4b1f      	ldr	r3, [pc, #124]	; (8006d0c <FATFS_LinkDriverEx+0x94>)
 8006c90:	7a5b      	ldrb	r3, [r3, #9]
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d131      	bne.n	8006cfc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006c98:	4b1c      	ldr	r3, [pc, #112]	; (8006d0c <FATFS_LinkDriverEx+0x94>)
 8006c9a:	7a5b      	ldrb	r3, [r3, #9]
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	4b1a      	ldr	r3, [pc, #104]	; (8006d0c <FATFS_LinkDriverEx+0x94>)
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006ca6:	4b19      	ldr	r3, [pc, #100]	; (8006d0c <FATFS_LinkDriverEx+0x94>)
 8006ca8:	7a5b      	ldrb	r3, [r3, #9]
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	4a17      	ldr	r2, [pc, #92]	; (8006d0c <FATFS_LinkDriverEx+0x94>)
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	4413      	add	r3, r2
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006cb6:	4b15      	ldr	r3, [pc, #84]	; (8006d0c <FATFS_LinkDriverEx+0x94>)
 8006cb8:	7a5b      	ldrb	r3, [r3, #9]
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	4b13      	ldr	r3, [pc, #76]	; (8006d0c <FATFS_LinkDriverEx+0x94>)
 8006cc0:	4413      	add	r3, r2
 8006cc2:	79fa      	ldrb	r2, [r7, #7]
 8006cc4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006cc6:	4b11      	ldr	r3, [pc, #68]	; (8006d0c <FATFS_LinkDriverEx+0x94>)
 8006cc8:	7a5b      	ldrb	r3, [r3, #9]
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	1c5a      	adds	r2, r3, #1
 8006cce:	b2d1      	uxtb	r1, r2
 8006cd0:	4a0e      	ldr	r2, [pc, #56]	; (8006d0c <FATFS_LinkDriverEx+0x94>)
 8006cd2:	7251      	strb	r1, [r2, #9]
 8006cd4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006cd6:	7dbb      	ldrb	r3, [r7, #22]
 8006cd8:	3330      	adds	r3, #48	; 0x30
 8006cda:	b2da      	uxtb	r2, r3
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	223a      	movs	r2, #58	; 0x3a
 8006ce6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	3302      	adds	r3, #2
 8006cec:	222f      	movs	r2, #47	; 0x2f
 8006cee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	3303      	adds	r3, #3
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	371c      	adds	r7, #28
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	20000050 	.word	0x20000050

08006d10 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	6839      	ldr	r1, [r7, #0]
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7ff ffaa 	bl	8006c78 <FATFS_LinkDriverEx>
 8006d24:	4603      	mov	r3, r0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3708      	adds	r7, #8
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
	...

08006d30 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006d36:	2300      	movs	r3, #0
 8006d38:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006d3a:	f000 f879 	bl	8006e30 <BSP_SD_IsDetected>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d001      	beq.n	8006d48 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e012      	b.n	8006d6e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006d48:	480b      	ldr	r0, [pc, #44]	; (8006d78 <BSP_SD_Init+0x48>)
 8006d4a:	f7fb fefd 	bl	8002b48 <HAL_SD_Init>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8006d52:	79fb      	ldrb	r3, [r7, #7]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d109      	bne.n	8006d6c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006d58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d5c:	4806      	ldr	r0, [pc, #24]	; (8006d78 <BSP_SD_Init+0x48>)
 8006d5e:	f7fc fcef 	bl	8003740 <HAL_SD_ConfigWideBusOperation>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d001      	beq.n	8006d6c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8006d6c:	79fb      	ldrb	r3, [r7, #7]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	2000452c 	.word	0x2000452c

08006d7c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b088      	sub	sp, #32
 8006d80:	af02      	add	r7, sp, #8
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
 8006d88:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	68ba      	ldr	r2, [r7, #8]
 8006d96:	68f9      	ldr	r1, [r7, #12]
 8006d98:	4806      	ldr	r0, [pc, #24]	; (8006db4 <BSP_SD_ReadBlocks+0x38>)
 8006d9a:	f7fb ff65 	bl	8002c68 <HAL_SD_ReadBlocks>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d001      	beq.n	8006da8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8006da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3718      	adds	r7, #24
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	2000452c 	.word	0x2000452c

08006db8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b088      	sub	sp, #32
 8006dbc:	af02      	add	r7, sp, #8
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
 8006dc4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	9300      	str	r3, [sp, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	68f9      	ldr	r1, [r7, #12]
 8006dd4:	4806      	ldr	r0, [pc, #24]	; (8006df0 <BSP_SD_WriteBlocks+0x38>)
 8006dd6:	f7fc f941 	bl	800305c <HAL_SD_WriteBlocks>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d001      	beq.n	8006de4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8006de4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3718      	adds	r7, #24
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	2000452c 	.word	0x2000452c

08006df4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006df8:	4805      	ldr	r0, [pc, #20]	; (8006e10 <BSP_SD_GetCardState+0x1c>)
 8006dfa:	f7fc fd1d 	bl	8003838 <HAL_SD_GetCardState>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b04      	cmp	r3, #4
 8006e02:	bf14      	ite	ne
 8006e04:	2301      	movne	r3, #1
 8006e06:	2300      	moveq	r3, #0
 8006e08:	b2db      	uxtb	r3, r3
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	2000452c 	.word	0x2000452c

08006e14 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006e1c:	6879      	ldr	r1, [r7, #4]
 8006e1e:	4803      	ldr	r0, [pc, #12]	; (8006e2c <BSP_SD_GetCardInfo+0x18>)
 8006e20:	f7fc fc62 	bl	80036e8 <HAL_SD_GetCardInfo>
}
 8006e24:	bf00      	nop
 8006e26:	3708      	adds	r7, #8
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	2000452c 	.word	0x2000452c

08006e30 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006e36:	2301      	movs	r3, #1
 8006e38:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8006e3a:	f000 f825 	bl	8006e88 <BSP_PlatformIsDetected>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d101      	bne.n	8006e48 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8006e44:	2300      	movs	r3, #0
 8006e46:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006e48:	79fb      	ldrb	r3, [r7, #7]
 8006e4a:	b2db      	uxtb	r3, r3
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3708      	adds	r7, #8
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006e58:	4904      	ldr	r1, [pc, #16]	; (8006e6c <MX_FATFS_Init+0x18>)
 8006e5a:	4805      	ldr	r0, [pc, #20]	; (8006e70 <MX_FATFS_Init+0x1c>)
 8006e5c:	f7ff ff58 	bl	8006d10 <FATFS_LinkDriver>
 8006e60:	4603      	mov	r3, r0
 8006e62:	461a      	mov	r2, r3
 8006e64:	4b03      	ldr	r3, [pc, #12]	; (8006e74 <MX_FATFS_Init+0x20>)
 8006e66:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8006e68:	bf00      	nop
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	20000070 	.word	0x20000070
 8006e70:	08007bcc 	.word	0x08007bcc
 8006e74:	2000006c 	.word	0x2000006c

08006e78 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006e7c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8006e92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006e96:	4806      	ldr	r0, [pc, #24]	; (8006eb0 <BSP_PlatformIsDetected+0x28>)
 8006e98:	f7fa f9c4 	bl	8001224 <HAL_GPIO_ReadPin>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d001      	beq.n	8006ea6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8006ea6:	79fb      	ldrb	r3, [r7, #7]
}  
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	40020000 	.word	0x40020000

08006eb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	af00      	add	r7, sp, #0
	  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006eb8:	f7f9 fb06 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006ebc:	f000 f878 	bl	8006fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006ec0:	f000 f992 	bl	80071e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8006ec4:	f000 f970 	bl	80071a8 <MX_DMA_Init>
  MX_I2C1_Init();
 8006ec8:	f000 f8f2 	bl	80070b0 <MX_I2C1_Init>
  MX_I2S2_Init();
 8006ecc:	f000 f91e 	bl	800710c <MX_I2S2_Init>
  MX_SDIO_SD_Init();
 8006ed0:	f000 f94a 	bl	8007168 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8006ed4:	f7ff ffbe 	bl	8006e54 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(300);
 8006ed8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006edc:	f7f9 fb66 	bl	80005ac <HAL_Delay>

//  char line[100]; /* Line buffer */

  fr = f_mount(&myFAT, (TCHAR const*)SDPath, 1);
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	4928      	ldr	r1, [pc, #160]	; (8006f84 <main+0xd0>)
 8006ee4:	4828      	ldr	r0, [pc, #160]	; (8006f88 <main+0xd4>)
 8006ee6:	f7ff f97b 	bl	80061e0 <f_mount>
 8006eea:	4603      	mov	r3, r0
 8006eec:	461a      	mov	r2, r3
 8006eee:	4b27      	ldr	r3, [pc, #156]	; (8006f8c <main+0xd8>)
 8006ef0:	701a      	strb	r2, [r3, #0]

  /*## Open and create a text file #################################*/
  HAL_Delay(300);
 8006ef2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006ef6:	f7f9 fb59 	bl	80005ac <HAL_Delay>

  fr = f_open(&fil, "001.wav", FA_READ);
 8006efa:	2201      	movs	r2, #1
 8006efc:	4924      	ldr	r1, [pc, #144]	; (8006f90 <main+0xdc>)
 8006efe:	4825      	ldr	r0, [pc, #148]	; (8006f94 <main+0xe0>)
 8006f00:	f7ff f9b4 	bl	800626c <f_open>
 8006f04:	4603      	mov	r3, r0
 8006f06:	461a      	mov	r2, r3
 8006f08:	4b20      	ldr	r3, [pc, #128]	; (8006f8c <main+0xd8>)
 8006f0a:	701a      	strb	r2, [r3, #0]
  if (fr) return (int)fr;
 8006f0c:	4b1f      	ldr	r3, [pc, #124]	; (8006f8c <main+0xd8>)
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d002      	beq.n	8006f1a <main+0x66>
 8006f14:	4b1d      	ldr	r3, [pc, #116]	; (8006f8c <main+0xd8>)
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	e031      	b.n	8006f7e <main+0xca>
  WaveDataLength = f_size(&fil);
 8006f1a:	4b1e      	ldr	r3, [pc, #120]	; (8006f94 <main+0xe0>)
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	4a1e      	ldr	r2, [pc, #120]	; (8006f98 <main+0xe4>)
 8006f20:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  HAL_Delay(1000);
	  if (HAL_GPIO_ReadPin(GPIOA, SENSOR_Pin) == GPIO_PIN_SET)
 8006f22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006f26:	481d      	ldr	r0, [pc, #116]	; (8006f9c <main+0xe8>)
 8006f28:	f7fa f97c 	bl	8001224 <HAL_GPIO_ReadPin>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d11e      	bne.n	8006f70 <main+0xbc>
	  {
		  HAL_GPIO_WritePin(GPIOA, LED_STATUS_Pin, GPIO_PIN_SET);
 8006f32:	2201      	movs	r2, #1
 8006f34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f38:	4818      	ldr	r0, [pc, #96]	; (8006f9c <main+0xe8>)
 8006f3a:	f7fa f98b 	bl	8001254 <HAL_GPIO_WritePin>
		  f_lseek(&fil, 0);
 8006f3e:	2100      	movs	r1, #0
 8006f40:	4814      	ldr	r0, [pc, #80]	; (8006f94 <main+0xe0>)
 8006f42:	f7ff fc90 	bl	8006866 <f_lseek>
		  f_read(&fil, &dma_buffer[0], AUDIO_BUFFER_SIZE, &br);
 8006f46:	4b16      	ldr	r3, [pc, #88]	; (8006fa0 <main+0xec>)
 8006f48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006f4c:	4915      	ldr	r1, [pc, #84]	; (8006fa4 <main+0xf0>)
 8006f4e:	4811      	ldr	r0, [pc, #68]	; (8006f94 <main+0xe0>)
 8006f50:	f7ff fb4a 	bl	80065e8 <f_read>
		  AudioRemSize = WaveDataLength - AUDIO_BUFFER_SIZE;
 8006f54:	4b10      	ldr	r3, [pc, #64]	; (8006f98 <main+0xe4>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8006f5c:	4a12      	ldr	r2, [pc, #72]	; (8006fa8 <main+0xf4>)
 8006f5e:	6013      	str	r3, [r2, #0]
//		  HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t*)&Audio_Buffer[0], AUDIO_BUFFER_SIZE);
		  StartAudioBuffers(&hi2s2);
 8006f60:	4812      	ldr	r0, [pc, #72]	; (8006fac <main+0xf8>)
 8006f62:	f000 fa49 	bl	80073f8 <StartAudioBuffers>
		  HAL_Delay(500);
 8006f66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006f6a:	f7f9 fb1f 	bl	80005ac <HAL_Delay>
 8006f6e:	e7d8      	b.n	8006f22 <main+0x6e>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOA, LED_STATUS_Pin, GPIO_PIN_RESET);
 8006f70:	2200      	movs	r2, #0
 8006f72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f76:	4809      	ldr	r0, [pc, #36]	; (8006f9c <main+0xe8>)
 8006f78:	f7fa f96c 	bl	8001254 <HAL_GPIO_WritePin>
	  if (HAL_GPIO_ReadPin(GPIOA, SENSOR_Pin) == GPIO_PIN_SET)
 8006f7c:	e7d1      	b.n	8006f22 <main+0x6e>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	20000070 	.word	0x20000070
 8006f88:	200045b0 	.word	0x200045b0
 8006f8c:	20004528 	.word	0x20004528
 8006f90:	08007b3c 	.word	0x08007b3c
 8006f94:	20004840 	.word	0x20004840
 8006f98:	2000005c 	.word	0x2000005c
 8006f9c:	40020000 	.word	0x40020000
 8006fa0:	20000064 	.word	0x20000064
 8006fa4:	20000528 	.word	0x20000528
 8006fa8:	20000060 	.word	0x20000060
 8006fac:	20004a70 	.word	0x20004a70

08006fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b098      	sub	sp, #96	; 0x60
 8006fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006fb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006fba:	2230      	movs	r2, #48	; 0x30
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f000 fd86 	bl	8007ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006fc4:	f107 031c 	add.w	r3, r7, #28
 8006fc8:	2200      	movs	r2, #0
 8006fca:	601a      	str	r2, [r3, #0]
 8006fcc:	605a      	str	r2, [r3, #4]
 8006fce:	609a      	str	r2, [r3, #8]
 8006fd0:	60da      	str	r2, [r3, #12]
 8006fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006fd4:	f107 030c 	add.w	r3, r7, #12
 8006fd8:	2200      	movs	r2, #0
 8006fda:	601a      	str	r2, [r3, #0]
 8006fdc:	605a      	str	r2, [r3, #4]
 8006fde:	609a      	str	r2, [r3, #8]
 8006fe0:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	60bb      	str	r3, [r7, #8]
 8006fe6:	4b30      	ldr	r3, [pc, #192]	; (80070a8 <SystemClock_Config+0xf8>)
 8006fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fea:	4a2f      	ldr	r2, [pc, #188]	; (80070a8 <SystemClock_Config+0xf8>)
 8006fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8006ff2:	4b2d      	ldr	r3, [pc, #180]	; (80070a8 <SystemClock_Config+0xf8>)
 8006ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ffa:	60bb      	str	r3, [r7, #8]
 8006ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ffe:	2300      	movs	r3, #0
 8007000:	607b      	str	r3, [r7, #4]
 8007002:	4b2a      	ldr	r3, [pc, #168]	; (80070ac <SystemClock_Config+0xfc>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a29      	ldr	r2, [pc, #164]	; (80070ac <SystemClock_Config+0xfc>)
 8007008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800700c:	6013      	str	r3, [r2, #0]
 800700e:	4b27      	ldr	r3, [pc, #156]	; (80070ac <SystemClock_Config+0xfc>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007016:	607b      	str	r3, [r7, #4]
 8007018:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800701a:	2301      	movs	r3, #1
 800701c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800701e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007022:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007024:	2302      	movs	r3, #2
 8007026:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007028:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800702c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800702e:	230c      	movs	r3, #12
 8007030:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 164;
 8007032:	23a4      	movs	r3, #164	; 0xa4
 8007034:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007036:	2302      	movs	r3, #2
 8007038:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800703a:	2307      	movs	r3, #7
 800703c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800703e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007042:	4618      	mov	r0, r3
 8007044:	f7fa ffea 	bl	800201c <HAL_RCC_OscConfig>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800704e:	f000 fa41 	bl	80074d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007052:	230f      	movs	r3, #15
 8007054:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007056:	2302      	movs	r3, #2
 8007058:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800705a:	2300      	movs	r3, #0
 800705c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800705e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007062:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007068:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800706a:	f107 031c 	add.w	r3, r7, #28
 800706e:	2105      	movs	r1, #5
 8007070:	4618      	mov	r0, r3
 8007072:	f7fb fa43 	bl	80024fc <HAL_RCC_ClockConfig>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d001      	beq.n	8007080 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800707c:	f000 fa2a 	bl	80074d4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8007080:	2301      	movs	r3, #1
 8007082:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 120;
 8007084:	2378      	movs	r3, #120	; 0x78
 8007086:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 5;
 8007088:	2305      	movs	r3, #5
 800708a:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800708c:	f107 030c 	add.w	r3, r7, #12
 8007090:	4618      	mov	r0, r3
 8007092:	f7fb fc1b 	bl	80028cc <HAL_RCCEx_PeriphCLKConfig>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d001      	beq.n	80070a0 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 800709c:	f000 fa1a 	bl	80074d4 <Error_Handler>
  }
}
 80070a0:	bf00      	nop
 80070a2:	3760      	adds	r7, #96	; 0x60
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	40023800 	.word	0x40023800
 80070ac:	40007000 	.word	0x40007000

080070b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80070b4:	4b12      	ldr	r3, [pc, #72]	; (8007100 <MX_I2C1_Init+0x50>)
 80070b6:	4a13      	ldr	r2, [pc, #76]	; (8007104 <MX_I2C1_Init+0x54>)
 80070b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80070ba:	4b11      	ldr	r3, [pc, #68]	; (8007100 <MX_I2C1_Init+0x50>)
 80070bc:	4a12      	ldr	r2, [pc, #72]	; (8007108 <MX_I2C1_Init+0x58>)
 80070be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80070c0:	4b0f      	ldr	r3, [pc, #60]	; (8007100 <MX_I2C1_Init+0x50>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80070c6:	4b0e      	ldr	r3, [pc, #56]	; (8007100 <MX_I2C1_Init+0x50>)
 80070c8:	2200      	movs	r2, #0
 80070ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80070cc:	4b0c      	ldr	r3, [pc, #48]	; (8007100 <MX_I2C1_Init+0x50>)
 80070ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80070d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80070d4:	4b0a      	ldr	r3, [pc, #40]	; (8007100 <MX_I2C1_Init+0x50>)
 80070d6:	2200      	movs	r2, #0
 80070d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80070da:	4b09      	ldr	r3, [pc, #36]	; (8007100 <MX_I2C1_Init+0x50>)
 80070dc:	2200      	movs	r2, #0
 80070de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80070e0:	4b07      	ldr	r3, [pc, #28]	; (8007100 <MX_I2C1_Init+0x50>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80070e6:	4b06      	ldr	r3, [pc, #24]	; (8007100 <MX_I2C1_Init+0x50>)
 80070e8:	2200      	movs	r2, #0
 80070ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80070ec:	4804      	ldr	r0, [pc, #16]	; (8007100 <MX_I2C1_Init+0x50>)
 80070ee:	f7fa f8cb 	bl	8001288 <HAL_I2C_Init>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d001      	beq.n	80070fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80070f8:	f000 f9ec 	bl	80074d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80070fc:	bf00      	nop
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	200004d4 	.word	0x200004d4
 8007104:	40005400 	.word	0x40005400
 8007108:	000186a0 	.word	0x000186a0

0800710c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8007110:	4b13      	ldr	r3, [pc, #76]	; (8007160 <MX_I2S2_Init+0x54>)
 8007112:	4a14      	ldr	r2, [pc, #80]	; (8007164 <MX_I2S2_Init+0x58>)
 8007114:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8007116:	4b12      	ldr	r3, [pc, #72]	; (8007160 <MX_I2S2_Init+0x54>)
 8007118:	f44f 7200 	mov.w	r2, #512	; 0x200
 800711c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800711e:	4b10      	ldr	r3, [pc, #64]	; (8007160 <MX_I2S2_Init+0x54>)
 8007120:	2200      	movs	r2, #0
 8007122:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8007124:	4b0e      	ldr	r3, [pc, #56]	; (8007160 <MX_I2S2_Init+0x54>)
 8007126:	2200      	movs	r2, #0
 8007128:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800712a:	4b0d      	ldr	r3, [pc, #52]	; (8007160 <MX_I2S2_Init+0x54>)
 800712c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007130:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8007132:	4b0b      	ldr	r3, [pc, #44]	; (8007160 <MX_I2S2_Init+0x54>)
 8007134:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8007138:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800713a:	4b09      	ldr	r3, [pc, #36]	; (8007160 <MX_I2S2_Init+0x54>)
 800713c:	2200      	movs	r2, #0
 800713e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8007140:	4b07      	ldr	r3, [pc, #28]	; (8007160 <MX_I2S2_Init+0x54>)
 8007142:	2200      	movs	r2, #0
 8007144:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8007146:	4b06      	ldr	r3, [pc, #24]	; (8007160 <MX_I2S2_Init+0x54>)
 8007148:	2200      	movs	r2, #0
 800714a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800714c:	4804      	ldr	r0, [pc, #16]	; (8007160 <MX_I2S2_Init+0x54>)
 800714e:	f7fa f9d3 	bl	80014f8 <HAL_I2S_Init>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d001      	beq.n	800715c <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8007158:	f000 f9bc 	bl	80074d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800715c:	bf00      	nop
 800715e:	bd80      	pop	{r7, pc}
 8007160:	20004a70 	.word	0x20004a70
 8007164:	40003800 	.word	0x40003800

08007168 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8007168:	b480      	push	{r7}
 800716a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800716c:	4b0c      	ldr	r3, [pc, #48]	; (80071a0 <MX_SDIO_SD_Init+0x38>)
 800716e:	4a0d      	ldr	r2, [pc, #52]	; (80071a4 <MX_SDIO_SD_Init+0x3c>)
 8007170:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8007172:	4b0b      	ldr	r3, [pc, #44]	; (80071a0 <MX_SDIO_SD_Init+0x38>)
 8007174:	2200      	movs	r2, #0
 8007176:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8007178:	4b09      	ldr	r3, [pc, #36]	; (80071a0 <MX_SDIO_SD_Init+0x38>)
 800717a:	2200      	movs	r2, #0
 800717c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800717e:	4b08      	ldr	r3, [pc, #32]	; (80071a0 <MX_SDIO_SD_Init+0x38>)
 8007180:	2200      	movs	r2, #0
 8007182:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8007184:	4b06      	ldr	r3, [pc, #24]	; (80071a0 <MX_SDIO_SD_Init+0x38>)
 8007186:	2200      	movs	r2, #0
 8007188:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800718a:	4b05      	ldr	r3, [pc, #20]	; (80071a0 <MX_SDIO_SD_Init+0x38>)
 800718c:	2200      	movs	r2, #0
 800718e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 32;
 8007190:	4b03      	ldr	r3, [pc, #12]	; (80071a0 <MX_SDIO_SD_Init+0x38>)
 8007192:	2220      	movs	r2, #32
 8007194:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8007196:	bf00      	nop
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	2000452c 	.word	0x2000452c
 80071a4:	40012c00 	.word	0x40012c00

080071a8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80071ae:	2300      	movs	r3, #0
 80071b0:	607b      	str	r3, [r7, #4]
 80071b2:	4b0c      	ldr	r3, [pc, #48]	; (80071e4 <MX_DMA_Init+0x3c>)
 80071b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b6:	4a0b      	ldr	r2, [pc, #44]	; (80071e4 <MX_DMA_Init+0x3c>)
 80071b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80071bc:	6313      	str	r3, [r2, #48]	; 0x30
 80071be:	4b09      	ldr	r3, [pc, #36]	; (80071e4 <MX_DMA_Init+0x3c>)
 80071c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071c6:	607b      	str	r3, [r7, #4]
 80071c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80071ca:	2200      	movs	r2, #0
 80071cc:	2100      	movs	r1, #0
 80071ce:	200f      	movs	r0, #15
 80071d0:	f7f9 fae9 	bl	80007a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80071d4:	200f      	movs	r0, #15
 80071d6:	f7f9 fb02 	bl	80007de <HAL_NVIC_EnableIRQ>

}
 80071da:	bf00      	nop
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	40023800 	.word	0x40023800

080071e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b08c      	sub	sp, #48	; 0x30
 80071ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071ee:	f107 031c 	add.w	r3, r7, #28
 80071f2:	2200      	movs	r2, #0
 80071f4:	601a      	str	r2, [r3, #0]
 80071f6:	605a      	str	r2, [r3, #4]
 80071f8:	609a      	str	r2, [r3, #8]
 80071fa:	60da      	str	r2, [r3, #12]
 80071fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80071fe:	2300      	movs	r3, #0
 8007200:	61bb      	str	r3, [r7, #24]
 8007202:	4b72      	ldr	r3, [pc, #456]	; (80073cc <MX_GPIO_Init+0x1e4>)
 8007204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007206:	4a71      	ldr	r2, [pc, #452]	; (80073cc <MX_GPIO_Init+0x1e4>)
 8007208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800720c:	6313      	str	r3, [r2, #48]	; 0x30
 800720e:	4b6f      	ldr	r3, [pc, #444]	; (80073cc <MX_GPIO_Init+0x1e4>)
 8007210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007216:	61bb      	str	r3, [r7, #24]
 8007218:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800721a:	2300      	movs	r3, #0
 800721c:	617b      	str	r3, [r7, #20]
 800721e:	4b6b      	ldr	r3, [pc, #428]	; (80073cc <MX_GPIO_Init+0x1e4>)
 8007220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007222:	4a6a      	ldr	r2, [pc, #424]	; (80073cc <MX_GPIO_Init+0x1e4>)
 8007224:	f043 0304 	orr.w	r3, r3, #4
 8007228:	6313      	str	r3, [r2, #48]	; 0x30
 800722a:	4b68      	ldr	r3, [pc, #416]	; (80073cc <MX_GPIO_Init+0x1e4>)
 800722c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722e:	f003 0304 	and.w	r3, r3, #4
 8007232:	617b      	str	r3, [r7, #20]
 8007234:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007236:	2300      	movs	r3, #0
 8007238:	613b      	str	r3, [r7, #16]
 800723a:	4b64      	ldr	r3, [pc, #400]	; (80073cc <MX_GPIO_Init+0x1e4>)
 800723c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723e:	4a63      	ldr	r2, [pc, #396]	; (80073cc <MX_GPIO_Init+0x1e4>)
 8007240:	f043 0301 	orr.w	r3, r3, #1
 8007244:	6313      	str	r3, [r2, #48]	; 0x30
 8007246:	4b61      	ldr	r3, [pc, #388]	; (80073cc <MX_GPIO_Init+0x1e4>)
 8007248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	613b      	str	r3, [r7, #16]
 8007250:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007252:	2300      	movs	r3, #0
 8007254:	60fb      	str	r3, [r7, #12]
 8007256:	4b5d      	ldr	r3, [pc, #372]	; (80073cc <MX_GPIO_Init+0x1e4>)
 8007258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725a:	4a5c      	ldr	r2, [pc, #368]	; (80073cc <MX_GPIO_Init+0x1e4>)
 800725c:	f043 0302 	orr.w	r3, r3, #2
 8007260:	6313      	str	r3, [r2, #48]	; 0x30
 8007262:	4b5a      	ldr	r3, [pc, #360]	; (80073cc <MX_GPIO_Init+0x1e4>)
 8007264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007266:	f003 0302 	and.w	r3, r3, #2
 800726a:	60fb      	str	r3, [r7, #12]
 800726c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800726e:	2300      	movs	r3, #0
 8007270:	60bb      	str	r3, [r7, #8]
 8007272:	4b56      	ldr	r3, [pc, #344]	; (80073cc <MX_GPIO_Init+0x1e4>)
 8007274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007276:	4a55      	ldr	r2, [pc, #340]	; (80073cc <MX_GPIO_Init+0x1e4>)
 8007278:	f043 0310 	orr.w	r3, r3, #16
 800727c:	6313      	str	r3, [r2, #48]	; 0x30
 800727e:	4b53      	ldr	r3, [pc, #332]	; (80073cc <MX_GPIO_Init+0x1e4>)
 8007280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007282:	f003 0310 	and.w	r3, r3, #16
 8007286:	60bb      	str	r3, [r7, #8]
 8007288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800728a:	2300      	movs	r3, #0
 800728c:	607b      	str	r3, [r7, #4]
 800728e:	4b4f      	ldr	r3, [pc, #316]	; (80073cc <MX_GPIO_Init+0x1e4>)
 8007290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007292:	4a4e      	ldr	r2, [pc, #312]	; (80073cc <MX_GPIO_Init+0x1e4>)
 8007294:	f043 0308 	orr.w	r3, r3, #8
 8007298:	6313      	str	r3, [r2, #48]	; 0x30
 800729a:	4b4c      	ldr	r3, [pc, #304]	; (80073cc <MX_GPIO_Init+0x1e4>)
 800729c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729e:	f003 0308 	and.w	r3, r3, #8
 80072a2:	607b      	str	r3, [r7, #4]
 80072a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MIDI_OUT_Pin|WS2812_Pin|LED_STATUS_Pin, GPIO_PIN_RESET);
 80072a6:	2200      	movs	r2, #0
 80072a8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80072ac:	4848      	ldr	r0, [pc, #288]	; (80073d0 <MX_GPIO_Init+0x1e8>)
 80072ae:	f7f9 ffd1 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_A_Pin|LCD_B_Pin, GPIO_PIN_RESET);
 80072b2:	2200      	movs	r2, #0
 80072b4:	2130      	movs	r1, #48	; 0x30
 80072b6:	4847      	ldr	r0, [pc, #284]	; (80073d4 <MX_GPIO_Init+0x1ec>)
 80072b8:	f7f9 ffcc 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_C_Pin|LCD_D_Pin|GPIO1_Pin|GPIO2_Pin, GPIO_PIN_RESET);
 80072bc:	2200      	movs	r2, #0
 80072be:	f24c 0103 	movw	r1, #49155	; 0xc003
 80072c2:	4845      	ldr	r0, [pc, #276]	; (80073d8 <MX_GPIO_Init+0x1f0>)
 80072c4:	f7f9 ffc6 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_E_Pin|LCD_F_Pin|LCD_G_Pin|LCD_DP_Pin 
 80072c8:	2200      	movs	r2, #0
 80072ca:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 80072ce:	4843      	ldr	r0, [pc, #268]	; (80073dc <MX_GPIO_Init+0x1f4>)
 80072d0:	f7f9 ffc0 	bl	8001254 <HAL_GPIO_WritePin>
                          |LCD_DIG1CC_Pin|LCD_DIG2CC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO3_Pin|GPIO4_Pin|GPIO5_Pin|GPIO6_Pin 
 80072d4:	2200      	movs	r2, #0
 80072d6:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
 80072da:	4841      	ldr	r0, [pc, #260]	; (80073e0 <MX_GPIO_Init+0x1f8>)
 80072dc:	f7f9 ffba 	bl	8001254 <HAL_GPIO_WritePin>
                          |GPIO7_Pin|GPIO8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : MIDI_OUT_Pin WS2812_Pin LED_STATUS_Pin */
  GPIO_InitStruct.Pin = MIDI_OUT_Pin|WS2812_Pin|LED_STATUS_Pin;
 80072e0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80072e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072e6:	2301      	movs	r3, #1
 80072e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072ea:	2300      	movs	r3, #0
 80072ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072ee:	2300      	movs	r3, #0
 80072f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072f2:	f107 031c 	add.w	r3, r7, #28
 80072f6:	4619      	mov	r1, r3
 80072f8:	4835      	ldr	r0, [pc, #212]	; (80073d0 <MX_GPIO_Init+0x1e8>)
 80072fa:	f7f9 fdf9 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_A_Pin LCD_B_Pin */
  GPIO_InitStruct.Pin = LCD_A_Pin|LCD_B_Pin;
 80072fe:	2330      	movs	r3, #48	; 0x30
 8007300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007302:	2301      	movs	r3, #1
 8007304:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007306:	2300      	movs	r3, #0
 8007308:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800730a:	2300      	movs	r3, #0
 800730c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800730e:	f107 031c 	add.w	r3, r7, #28
 8007312:	4619      	mov	r1, r3
 8007314:	482f      	ldr	r0, [pc, #188]	; (80073d4 <MX_GPIO_Init+0x1ec>)
 8007316:	f7f9 fdeb 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_C_Pin LCD_D_Pin GPIO1_Pin GPIO2_Pin */
  GPIO_InitStruct.Pin = LCD_C_Pin|LCD_D_Pin|GPIO1_Pin|GPIO2_Pin;
 800731a:	f24c 0303 	movw	r3, #49155	; 0xc003
 800731e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007320:	2301      	movs	r3, #1
 8007322:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007324:	2300      	movs	r3, #0
 8007326:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007328:	2300      	movs	r3, #0
 800732a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800732c:	f107 031c 	add.w	r3, r7, #28
 8007330:	4619      	mov	r1, r3
 8007332:	4829      	ldr	r0, [pc, #164]	; (80073d8 <MX_GPIO_Init+0x1f0>)
 8007334:	f7f9 fddc 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_E_Pin LCD_F_Pin LCD_G_Pin LCD_DP_Pin 
                           LCD_DIG1CC_Pin LCD_DIG2CC_Pin */
  GPIO_InitStruct.Pin = LCD_E_Pin|LCD_F_Pin|LCD_G_Pin|LCD_DP_Pin 
 8007338:	f44f 53fc 	mov.w	r3, #8064	; 0x1f80
 800733c:	61fb      	str	r3, [r7, #28]
                          |LCD_DIG1CC_Pin|LCD_DIG2CC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800733e:	2301      	movs	r3, #1
 8007340:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007342:	2300      	movs	r3, #0
 8007344:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007346:	2300      	movs	r3, #0
 8007348:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800734a:	f107 031c 	add.w	r3, r7, #28
 800734e:	4619      	mov	r1, r3
 8007350:	4822      	ldr	r0, [pc, #136]	; (80073dc <MX_GPIO_Init+0x1f4>)
 8007352:	f7f9 fdcd 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_PREV_Pin B_NEXT_Pin B_STOP_Pin */
  GPIO_InitStruct.Pin = B_PREV_Pin|B_NEXT_Pin|B_STOP_Pin;
 8007356:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800735a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800735c:	2300      	movs	r3, #0
 800735e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007360:	2301      	movs	r3, #1
 8007362:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007364:	f107 031c 	add.w	r3, r7, #28
 8007368:	4619      	mov	r1, r3
 800736a:	481c      	ldr	r0, [pc, #112]	; (80073dc <MX_GPIO_Init+0x1f4>)
 800736c:	f7f9 fdc0 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO3_Pin GPIO4_Pin GPIO5_Pin GPIO6_Pin 
                           GPIO7_Pin GPIO8_Pin */
  GPIO_InitStruct.Pin = GPIO3_Pin|GPIO4_Pin|GPIO5_Pin|GPIO6_Pin 
 8007370:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 8007374:	61fb      	str	r3, [r7, #28]
                          |GPIO7_Pin|GPIO8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007376:	2301      	movs	r3, #1
 8007378:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800737a:	2300      	movs	r3, #0
 800737c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800737e:	2300      	movs	r3, #0
 8007380:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007382:	f107 031c 	add.w	r3, r7, #28
 8007386:	4619      	mov	r1, r3
 8007388:	4815      	ldr	r0, [pc, #84]	; (80073e0 <MX_GPIO_Init+0x1f8>)
 800738a:	f7f9 fdb1 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CD_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin;
 800738e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007394:	2300      	movs	r3, #0
 8007396:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007398:	2300      	movs	r3, #0
 800739a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 800739c:	f107 031c 	add.w	r3, r7, #28
 80073a0:	4619      	mov	r1, r3
 80073a2:	480b      	ldr	r0, [pc, #44]	; (80073d0 <MX_GPIO_Init+0x1e8>)
 80073a4:	f7f9 fda4 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SENSOR_Pin */
  GPIO_InitStruct.Pin = SENSOR_Pin;
 80073a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80073ae:	2300      	movs	r3, #0
 80073b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80073b2:	2301      	movs	r3, #1
 80073b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SENSOR_GPIO_Port, &GPIO_InitStruct);
 80073b6:	f107 031c 	add.w	r3, r7, #28
 80073ba:	4619      	mov	r1, r3
 80073bc:	4804      	ldr	r0, [pc, #16]	; (80073d0 <MX_GPIO_Init+0x1e8>)
 80073be:	f7f9 fd97 	bl	8000ef0 <HAL_GPIO_Init>

}
 80073c2:	bf00      	nop
 80073c4:	3730      	adds	r7, #48	; 0x30
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	40023800 	.word	0x40023800
 80073d0:	40020000 	.word	0x40020000
 80073d4:	40020800 	.word	0x40020800
 80073d8:	40020400 	.word	0x40020400
 80073dc:	40021000 	.word	0x40021000
 80073e0:	40020c00 	.word	0x40020c00

080073e4 <DMA1_Stream5_IRQHandler>:

/* USER CODE BEGIN 4 */

void DMA1_Stream5_IRQHandler(void) // this function must be included to avoid DMA to crash!
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80073e8:	4802      	ldr	r0, [pc, #8]	; (80073f4 <DMA1_Stream5_IRQHandler+0x10>)
 80073ea:	f7f9 fb19 	bl	8000a20 <HAL_DMA_IRQHandler>
}
 80073ee:	bf00      	nop
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	200047e0 	.word	0x200047e0

080073f8 <StartAudioBuffers>:
//
//	  }
//}

void StartAudioBuffers (I2S_HandleTypeDef *hi2s)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  // clear buffer
//  memset (dma_buffer,0, sizeof (dma_buffer ));
  HAL_GPIO_WritePin(GPIOE, LCD_E_Pin, GPIO_PIN_SET);
 8007400:	2201      	movs	r2, #1
 8007402:	2180      	movs	r1, #128	; 0x80
 8007404:	4809      	ldr	r0, [pc, #36]	; (800742c <StartAudioBuffers+0x34>)
 8007406:	f7f9 ff25 	bl	8001254 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, LCD_DIG1CC_Pin, GPIO_PIN_SET);
 800740a:	2201      	movs	r2, #1
 800740c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007410:	4806      	ldr	r0, [pc, #24]	; (800742c <StartAudioBuffers+0x34>)
 8007412:	f7f9 ff1f 	bl	8001254 <HAL_GPIO_WritePin>
  // start circular dma
  HAL_I2S_Transmit_DMA (hi2s, (uint32_t *) dma_buffer, AUDIO_BUFFER_SIZE << 1);
 8007416:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800741a:	4905      	ldr	r1, [pc, #20]	; (8007430 <StartAudioBuffers+0x38>)
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f7fa f9ab 	bl	8001778 <HAL_I2S_Transmit_DMA>
}
 8007422:	bf00      	nop
 8007424:	3708      	adds	r7, #8
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	40021000 	.word	0x40021000
 8007430:	20000528 	.word	0x20000528

08007434 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  // second half finished, filling it up again while first  half is playing
//  FillBuffer  (&(dma_buffer [AUDIO_BUFFER_SIZE  >> 1]), AUDIO_BUFFER_SIZE >> 1);
    f_read(&fil,
 800743c:	4b0d      	ldr	r3, [pc, #52]	; (8007474 <HAL_I2S_TxCpltCallback+0x40>)
 800743e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007442:	490d      	ldr	r1, [pc, #52]	; (8007478 <HAL_I2S_TxCpltCallback+0x44>)
 8007444:	480d      	ldr	r0, [pc, #52]	; (800747c <HAL_I2S_TxCpltCallback+0x48>)
 8007446:	f7ff f8cf 	bl	80065e8 <f_read>
           &dma_buffer[AUDIO_BUFFER_SIZE/2],
           AUDIO_BUFFER_SIZE/2,
           (void *)&br);

    if(AudioRemSize > (AUDIO_BUFFER_SIZE / 2))
 800744a:	4b0d      	ldr	r3, [pc, #52]	; (8007480 <HAL_I2S_TxCpltCallback+0x4c>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007452:	d907      	bls.n	8007464 <HAL_I2S_TxCpltCallback+0x30>
    {
      AudioRemSize -= br;
 8007454:	4b0a      	ldr	r3, [pc, #40]	; (8007480 <HAL_I2S_TxCpltCallback+0x4c>)
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	4b06      	ldr	r3, [pc, #24]	; (8007474 <HAL_I2S_TxCpltCallback+0x40>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	4a08      	ldr	r2, [pc, #32]	; (8007480 <HAL_I2S_TxCpltCallback+0x4c>)
 8007460:	6013      	str	r3, [r2, #0]
      AudioRemSize = 0;
    }

//	HAL_GPIO_WritePin(GPIOE, LCD_G_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(GPIOE, LCD_F_Pin, GPIO_PIN_RESET);
}
 8007462:	e002      	b.n	800746a <HAL_I2S_TxCpltCallback+0x36>
      AudioRemSize = 0;
 8007464:	4b06      	ldr	r3, [pc, #24]	; (8007480 <HAL_I2S_TxCpltCallback+0x4c>)
 8007466:	2200      	movs	r2, #0
 8007468:	601a      	str	r2, [r3, #0]
}
 800746a:	bf00      	nop
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	20000064 	.word	0x20000064
 8007478:	20002528 	.word	0x20002528
 800747c:	20004840 	.word	0x20004840
 8007480:	20000060 	.word	0x20000060

08007484 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  // first half finished, filling it up again while second half is playing
    f_read(&fil,
 800748c:	4b0d      	ldr	r3, [pc, #52]	; (80074c4 <HAL_I2S_TxHalfCpltCallback+0x40>)
 800748e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007492:	490d      	ldr	r1, [pc, #52]	; (80074c8 <HAL_I2S_TxHalfCpltCallback+0x44>)
 8007494:	480d      	ldr	r0, [pc, #52]	; (80074cc <HAL_I2S_TxHalfCpltCallback+0x48>)
 8007496:	f7ff f8a7 	bl	80065e8 <f_read>
           &dma_buffer[0],
           AUDIO_BUFFER_SIZE/2,
           (void *)&br);

    if(AudioRemSize > (AUDIO_BUFFER_SIZE / 2))
 800749a:	4b0d      	ldr	r3, [pc, #52]	; (80074d0 <HAL_I2S_TxHalfCpltCallback+0x4c>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074a2:	d907      	bls.n	80074b4 <HAL_I2S_TxHalfCpltCallback+0x30>
    {
      AudioRemSize -= br;
 80074a4:	4b0a      	ldr	r3, [pc, #40]	; (80074d0 <HAL_I2S_TxHalfCpltCallback+0x4c>)
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	4b06      	ldr	r3, [pc, #24]	; (80074c4 <HAL_I2S_TxHalfCpltCallback+0x40>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	4a08      	ldr	r2, [pc, #32]	; (80074d0 <HAL_I2S_TxHalfCpltCallback+0x4c>)
 80074b0:	6013      	str	r3, [r2, #0]
    }

//	HAL_GPIO_WritePin(GPIOE, LCD_F_Pin, GPIO_PIN_SET);
//	HAL_GPIO_WritePin(GPIOE, LCD_G_Pin, GPIO_PIN_RESET);
//  FillBuffer  (&(dma_buffer [0]), AUDIO_BUFFER_SIZE >> 1);
}
 80074b2:	e002      	b.n	80074ba <HAL_I2S_TxHalfCpltCallback+0x36>
      AudioRemSize = 0;
 80074b4:	4b06      	ldr	r3, [pc, #24]	; (80074d0 <HAL_I2S_TxHalfCpltCallback+0x4c>)
 80074b6:	2200      	movs	r2, #0
 80074b8:	601a      	str	r2, [r3, #0]
}
 80074ba:	bf00      	nop
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	20000064 	.word	0x20000064
 80074c8:	20000528 	.word	0x20000528
 80074cc:	20004840 	.word	0x20004840
 80074d0:	20000060 	.word	0x20000060

080074d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80074d4:	b480      	push	{r7}
 80074d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80074d8:	bf00      	nop
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
	...

080074e4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	4603      	mov	r3, r0
 80074ec:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80074ee:	4b0b      	ldr	r3, [pc, #44]	; (800751c <SD_CheckStatus+0x38>)
 80074f0:	2201      	movs	r2, #1
 80074f2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80074f4:	f7ff fc7e 	bl	8006df4 <BSP_SD_GetCardState>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d107      	bne.n	800750e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80074fe:	4b07      	ldr	r3, [pc, #28]	; (800751c <SD_CheckStatus+0x38>)
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	b2db      	uxtb	r3, r3
 8007504:	f023 0301 	bic.w	r3, r3, #1
 8007508:	b2da      	uxtb	r2, r3
 800750a:	4b04      	ldr	r3, [pc, #16]	; (800751c <SD_CheckStatus+0x38>)
 800750c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800750e:	4b03      	ldr	r3, [pc, #12]	; (800751c <SD_CheckStatus+0x38>)
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	b2db      	uxtb	r3, r3
}
 8007514:	4618      	mov	r0, r3
 8007516:	3708      	adds	r7, #8
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	20000005 	.word	0x20000005

08007520 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	4603      	mov	r3, r0
 8007528:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 800752a:	4b0b      	ldr	r3, [pc, #44]	; (8007558 <SD_initialize+0x38>)
 800752c:	2201      	movs	r2, #1
 800752e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007530:	f7ff fbfe 	bl	8006d30 <BSP_SD_Init>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d107      	bne.n	800754a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800753a:	79fb      	ldrb	r3, [r7, #7]
 800753c:	4618      	mov	r0, r3
 800753e:	f7ff ffd1 	bl	80074e4 <SD_CheckStatus>
 8007542:	4603      	mov	r3, r0
 8007544:	461a      	mov	r2, r3
 8007546:	4b04      	ldr	r3, [pc, #16]	; (8007558 <SD_initialize+0x38>)
 8007548:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800754a:	4b03      	ldr	r3, [pc, #12]	; (8007558 <SD_initialize+0x38>)
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	b2db      	uxtb	r3, r3
}
 8007550:	4618      	mov	r0, r3
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	20000005 	.word	0x20000005

0800755c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	4603      	mov	r3, r0
 8007564:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007566:	79fb      	ldrb	r3, [r7, #7]
 8007568:	4618      	mov	r0, r3
 800756a:	f7ff ffbb 	bl	80074e4 <SD_CheckStatus>
 800756e:	4603      	mov	r3, r0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3708      	adds	r7, #8
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b086      	sub	sp, #24
 800757c:	af00      	add	r7, sp, #0
 800757e:	60b9      	str	r1, [r7, #8]
 8007580:	607a      	str	r2, [r7, #4]
 8007582:	603b      	str	r3, [r7, #0]
 8007584:	4603      	mov	r3, r0
 8007586:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800758c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007590:	683a      	ldr	r2, [r7, #0]
 8007592:	6879      	ldr	r1, [r7, #4]
 8007594:	68b8      	ldr	r0, [r7, #8]
 8007596:	f7ff fbf1 	bl	8006d7c <BSP_SD_ReadBlocks>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d107      	bne.n	80075b0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80075a0:	bf00      	nop
 80075a2:	f7ff fc27 	bl	8006df4 <BSP_SD_GetCardState>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1fa      	bne.n	80075a2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80075ac:	2300      	movs	r3, #0
 80075ae:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80075b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3718      	adds	r7, #24
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b086      	sub	sp, #24
 80075be:	af00      	add	r7, sp, #0
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
 80075c4:	603b      	str	r3, [r7, #0]
 80075c6:	4603      	mov	r3, r0
 80075c8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80075ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075d2:	683a      	ldr	r2, [r7, #0]
 80075d4:	6879      	ldr	r1, [r7, #4]
 80075d6:	68b8      	ldr	r0, [r7, #8]
 80075d8:	f7ff fbee 	bl	8006db8 <BSP_SD_WriteBlocks>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d107      	bne.n	80075f2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80075e2:	bf00      	nop
 80075e4:	f7ff fc06 	bl	8006df4 <BSP_SD_GetCardState>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1fa      	bne.n	80075e4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80075ee:	2300      	movs	r3, #0
 80075f0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80075f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3718      	adds	r7, #24
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b08c      	sub	sp, #48	; 0x30
 8007600:	af00      	add	r7, sp, #0
 8007602:	4603      	mov	r3, r0
 8007604:	603a      	str	r2, [r7, #0]
 8007606:	71fb      	strb	r3, [r7, #7]
 8007608:	460b      	mov	r3, r1
 800760a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007612:	4b25      	ldr	r3, [pc, #148]	; (80076a8 <SD_ioctl+0xac>)
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	b2db      	uxtb	r3, r3
 8007618:	f003 0301 	and.w	r3, r3, #1
 800761c:	2b00      	cmp	r3, #0
 800761e:	d001      	beq.n	8007624 <SD_ioctl+0x28>
 8007620:	2303      	movs	r3, #3
 8007622:	e03c      	b.n	800769e <SD_ioctl+0xa2>

  switch (cmd)
 8007624:	79bb      	ldrb	r3, [r7, #6]
 8007626:	2b03      	cmp	r3, #3
 8007628:	d834      	bhi.n	8007694 <SD_ioctl+0x98>
 800762a:	a201      	add	r2, pc, #4	; (adr r2, 8007630 <SD_ioctl+0x34>)
 800762c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007630:	08007641 	.word	0x08007641
 8007634:	08007649 	.word	0x08007649
 8007638:	08007661 	.word	0x08007661
 800763c:	0800767b 	.word	0x0800767b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007640:	2300      	movs	r3, #0
 8007642:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007646:	e028      	b.n	800769a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007648:	f107 030c 	add.w	r3, r7, #12
 800764c:	4618      	mov	r0, r3
 800764e:	f7ff fbe1 	bl	8006e14 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007658:	2300      	movs	r3, #0
 800765a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800765e:	e01c      	b.n	800769a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007660:	f107 030c 	add.w	r3, r7, #12
 8007664:	4618      	mov	r0, r3
 8007666:	f7ff fbd5 	bl	8006e14 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800766a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766c:	b29a      	uxth	r2, r3
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007678:	e00f      	b.n	800769a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800767a:	f107 030c 	add.w	r3, r7, #12
 800767e:	4618      	mov	r0, r3
 8007680:	f7ff fbc8 	bl	8006e14 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007686:	0a5a      	lsrs	r2, r3, #9
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800768c:	2300      	movs	r3, #0
 800768e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007692:	e002      	b.n	800769a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007694:	2304      	movs	r3, #4
 8007696:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800769a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3730      	adds	r7, #48	; 0x30
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	20000005 	.word	0x20000005

080076ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80076b2:	2300      	movs	r3, #0
 80076b4:	607b      	str	r3, [r7, #4]
 80076b6:	4b10      	ldr	r3, [pc, #64]	; (80076f8 <HAL_MspInit+0x4c>)
 80076b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ba:	4a0f      	ldr	r2, [pc, #60]	; (80076f8 <HAL_MspInit+0x4c>)
 80076bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076c0:	6453      	str	r3, [r2, #68]	; 0x44
 80076c2:	4b0d      	ldr	r3, [pc, #52]	; (80076f8 <HAL_MspInit+0x4c>)
 80076c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076ca:	607b      	str	r3, [r7, #4]
 80076cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80076ce:	2300      	movs	r3, #0
 80076d0:	603b      	str	r3, [r7, #0]
 80076d2:	4b09      	ldr	r3, [pc, #36]	; (80076f8 <HAL_MspInit+0x4c>)
 80076d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d6:	4a08      	ldr	r2, [pc, #32]	; (80076f8 <HAL_MspInit+0x4c>)
 80076d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076dc:	6413      	str	r3, [r2, #64]	; 0x40
 80076de:	4b06      	ldr	r3, [pc, #24]	; (80076f8 <HAL_MspInit+0x4c>)
 80076e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076e6:	603b      	str	r3, [r7, #0]
 80076e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80076ea:	bf00      	nop
 80076ec:	370c      	adds	r7, #12
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	40023800 	.word	0x40023800

080076fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b08a      	sub	sp, #40	; 0x28
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007704:	f107 0314 	add.w	r3, r7, #20
 8007708:	2200      	movs	r2, #0
 800770a:	601a      	str	r2, [r3, #0]
 800770c:	605a      	str	r2, [r3, #4]
 800770e:	609a      	str	r2, [r3, #8]
 8007710:	60da      	str	r2, [r3, #12]
 8007712:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a19      	ldr	r2, [pc, #100]	; (8007780 <HAL_I2C_MspInit+0x84>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d12b      	bne.n	8007776 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800771e:	2300      	movs	r3, #0
 8007720:	613b      	str	r3, [r7, #16]
 8007722:	4b18      	ldr	r3, [pc, #96]	; (8007784 <HAL_I2C_MspInit+0x88>)
 8007724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007726:	4a17      	ldr	r2, [pc, #92]	; (8007784 <HAL_I2C_MspInit+0x88>)
 8007728:	f043 0302 	orr.w	r3, r3, #2
 800772c:	6313      	str	r3, [r2, #48]	; 0x30
 800772e:	4b15      	ldr	r3, [pc, #84]	; (8007784 <HAL_I2C_MspInit+0x88>)
 8007730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007732:	f003 0302 	and.w	r3, r3, #2
 8007736:	613b      	str	r3, [r7, #16]
 8007738:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800773a:	23c0      	movs	r3, #192	; 0xc0
 800773c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800773e:	2312      	movs	r3, #18
 8007740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007742:	2301      	movs	r3, #1
 8007744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007746:	2303      	movs	r3, #3
 8007748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800774a:	2304      	movs	r3, #4
 800774c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800774e:	f107 0314 	add.w	r3, r7, #20
 8007752:	4619      	mov	r1, r3
 8007754:	480c      	ldr	r0, [pc, #48]	; (8007788 <HAL_I2C_MspInit+0x8c>)
 8007756:	f7f9 fbcb 	bl	8000ef0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800775a:	2300      	movs	r3, #0
 800775c:	60fb      	str	r3, [r7, #12]
 800775e:	4b09      	ldr	r3, [pc, #36]	; (8007784 <HAL_I2C_MspInit+0x88>)
 8007760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007762:	4a08      	ldr	r2, [pc, #32]	; (8007784 <HAL_I2C_MspInit+0x88>)
 8007764:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007768:	6413      	str	r3, [r2, #64]	; 0x40
 800776a:	4b06      	ldr	r3, [pc, #24]	; (8007784 <HAL_I2C_MspInit+0x88>)
 800776c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007772:	60fb      	str	r3, [r7, #12]
 8007774:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007776:	bf00      	nop
 8007778:	3728      	adds	r7, #40	; 0x28
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	40005400 	.word	0x40005400
 8007784:	40023800 	.word	0x40023800
 8007788:	40020400 	.word	0x40020400

0800778c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b08a      	sub	sp, #40	; 0x28
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007794:	f107 0314 	add.w	r3, r7, #20
 8007798:	2200      	movs	r2, #0
 800779a:	601a      	str	r2, [r3, #0]
 800779c:	605a      	str	r2, [r3, #4]
 800779e:	609a      	str	r2, [r3, #8]
 80077a0:	60da      	str	r2, [r3, #12]
 80077a2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a41      	ldr	r2, [pc, #260]	; (80078b0 <HAL_I2S_MspInit+0x124>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d17b      	bne.n	80078a6 <HAL_I2S_MspInit+0x11a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80077ae:	2300      	movs	r3, #0
 80077b0:	613b      	str	r3, [r7, #16]
 80077b2:	4b40      	ldr	r3, [pc, #256]	; (80078b4 <HAL_I2S_MspInit+0x128>)
 80077b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b6:	4a3f      	ldr	r2, [pc, #252]	; (80078b4 <HAL_I2S_MspInit+0x128>)
 80077b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077bc:	6413      	str	r3, [r2, #64]	; 0x40
 80077be:	4b3d      	ldr	r3, [pc, #244]	; (80078b4 <HAL_I2S_MspInit+0x128>)
 80077c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077c6:	613b      	str	r3, [r7, #16]
 80077c8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80077ca:	2300      	movs	r3, #0
 80077cc:	60fb      	str	r3, [r7, #12]
 80077ce:	4b39      	ldr	r3, [pc, #228]	; (80078b4 <HAL_I2S_MspInit+0x128>)
 80077d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d2:	4a38      	ldr	r2, [pc, #224]	; (80078b4 <HAL_I2S_MspInit+0x128>)
 80077d4:	f043 0304 	orr.w	r3, r3, #4
 80077d8:	6313      	str	r3, [r2, #48]	; 0x30
 80077da:	4b36      	ldr	r3, [pc, #216]	; (80078b4 <HAL_I2S_MspInit+0x128>)
 80077dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077de:	f003 0304 	and.w	r3, r3, #4
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80077e6:	2300      	movs	r3, #0
 80077e8:	60bb      	str	r3, [r7, #8]
 80077ea:	4b32      	ldr	r3, [pc, #200]	; (80078b4 <HAL_I2S_MspInit+0x128>)
 80077ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ee:	4a31      	ldr	r2, [pc, #196]	; (80078b4 <HAL_I2S_MspInit+0x128>)
 80077f0:	f043 0302 	orr.w	r3, r3, #2
 80077f4:	6313      	str	r3, [r2, #48]	; 0x30
 80077f6:	4b2f      	ldr	r3, [pc, #188]	; (80078b4 <HAL_I2S_MspInit+0x128>)
 80077f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fa:	f003 0302 	and.w	r3, r3, #2
 80077fe:	60bb      	str	r3, [r7, #8]
 8007800:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PC6     ------> I2S2_MCK
    PB9     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8007802:	2348      	movs	r3, #72	; 0x48
 8007804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007806:	2302      	movs	r3, #2
 8007808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800780a:	2300      	movs	r3, #0
 800780c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800780e:	2300      	movs	r3, #0
 8007810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007812:	2305      	movs	r3, #5
 8007814:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007816:	f107 0314 	add.w	r3, r7, #20
 800781a:	4619      	mov	r1, r3
 800781c:	4826      	ldr	r0, [pc, #152]	; (80078b8 <HAL_I2S_MspInit+0x12c>)
 800781e:	f7f9 fb67 	bl	8000ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8007822:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007828:	2302      	movs	r3, #2
 800782a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800782c:	2300      	movs	r3, #0
 800782e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007830:	2300      	movs	r3, #0
 8007832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007834:	2305      	movs	r3, #5
 8007836:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007838:	f107 0314 	add.w	r3, r7, #20
 800783c:	4619      	mov	r1, r3
 800783e:	481f      	ldr	r0, [pc, #124]	; (80078bc <HAL_I2S_MspInit+0x130>)
 8007840:	f7f9 fb56 	bl	8000ef0 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8007844:	4b1e      	ldr	r3, [pc, #120]	; (80078c0 <HAL_I2S_MspInit+0x134>)
 8007846:	4a1f      	ldr	r2, [pc, #124]	; (80078c4 <HAL_I2S_MspInit+0x138>)
 8007848:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800784a:	4b1d      	ldr	r3, [pc, #116]	; (80078c0 <HAL_I2S_MspInit+0x134>)
 800784c:	2200      	movs	r2, #0
 800784e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007850:	4b1b      	ldr	r3, [pc, #108]	; (80078c0 <HAL_I2S_MspInit+0x134>)
 8007852:	2240      	movs	r2, #64	; 0x40
 8007854:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007856:	4b1a      	ldr	r3, [pc, #104]	; (80078c0 <HAL_I2S_MspInit+0x134>)
 8007858:	2200      	movs	r2, #0
 800785a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800785c:	4b18      	ldr	r3, [pc, #96]	; (80078c0 <HAL_I2S_MspInit+0x134>)
 800785e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007862:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007864:	4b16      	ldr	r3, [pc, #88]	; (80078c0 <HAL_I2S_MspInit+0x134>)
 8007866:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800786a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800786c:	4b14      	ldr	r3, [pc, #80]	; (80078c0 <HAL_I2S_MspInit+0x134>)
 800786e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007872:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8007874:	4b12      	ldr	r3, [pc, #72]	; (80078c0 <HAL_I2S_MspInit+0x134>)
 8007876:	f44f 7280 	mov.w	r2, #256	; 0x100
 800787a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800787c:	4b10      	ldr	r3, [pc, #64]	; (80078c0 <HAL_I2S_MspInit+0x134>)
 800787e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007882:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007884:	4b0e      	ldr	r3, [pc, #56]	; (80078c0 <HAL_I2S_MspInit+0x134>)
 8007886:	2200      	movs	r2, #0
 8007888:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800788a:	480d      	ldr	r0, [pc, #52]	; (80078c0 <HAL_I2S_MspInit+0x134>)
 800788c:	f7f8 ffc2 	bl	8000814 <HAL_DMA_Init>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d001      	beq.n	800789a <HAL_I2S_MspInit+0x10e>
    {
      Error_Handler();
 8007896:	f7ff fe1d 	bl	80074d4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a08      	ldr	r2, [pc, #32]	; (80078c0 <HAL_I2S_MspInit+0x134>)
 800789e:	639a      	str	r2, [r3, #56]	; 0x38
 80078a0:	4a07      	ldr	r2, [pc, #28]	; (80078c0 <HAL_I2S_MspInit+0x134>)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80078a6:	bf00      	nop
 80078a8:	3728      	adds	r7, #40	; 0x28
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	40003800 	.word	0x40003800
 80078b4:	40023800 	.word	0x40023800
 80078b8:	40020800 	.word	0x40020800
 80078bc:	40020400 	.word	0x40020400
 80078c0:	200047e0 	.word	0x200047e0
 80078c4:	40026070 	.word	0x40026070

080078c8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b08a      	sub	sp, #40	; 0x28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078d0:	f107 0314 	add.w	r3, r7, #20
 80078d4:	2200      	movs	r2, #0
 80078d6:	601a      	str	r2, [r3, #0]
 80078d8:	605a      	str	r2, [r3, #4]
 80078da:	609a      	str	r2, [r3, #8]
 80078dc:	60da      	str	r2, [r3, #12]
 80078de:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a28      	ldr	r2, [pc, #160]	; (8007988 <HAL_SD_MspInit+0xc0>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d14a      	bne.n	8007980 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80078ea:	2300      	movs	r3, #0
 80078ec:	613b      	str	r3, [r7, #16]
 80078ee:	4b27      	ldr	r3, [pc, #156]	; (800798c <HAL_SD_MspInit+0xc4>)
 80078f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f2:	4a26      	ldr	r2, [pc, #152]	; (800798c <HAL_SD_MspInit+0xc4>)
 80078f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80078f8:	6453      	str	r3, [r2, #68]	; 0x44
 80078fa:	4b24      	ldr	r3, [pc, #144]	; (800798c <HAL_SD_MspInit+0xc4>)
 80078fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007902:	613b      	str	r3, [r7, #16]
 8007904:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007906:	2300      	movs	r3, #0
 8007908:	60fb      	str	r3, [r7, #12]
 800790a:	4b20      	ldr	r3, [pc, #128]	; (800798c <HAL_SD_MspInit+0xc4>)
 800790c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790e:	4a1f      	ldr	r2, [pc, #124]	; (800798c <HAL_SD_MspInit+0xc4>)
 8007910:	f043 0304 	orr.w	r3, r3, #4
 8007914:	6313      	str	r3, [r2, #48]	; 0x30
 8007916:	4b1d      	ldr	r3, [pc, #116]	; (800798c <HAL_SD_MspInit+0xc4>)
 8007918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791a:	f003 0304 	and.w	r3, r3, #4
 800791e:	60fb      	str	r3, [r7, #12]
 8007920:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007922:	2300      	movs	r3, #0
 8007924:	60bb      	str	r3, [r7, #8]
 8007926:	4b19      	ldr	r3, [pc, #100]	; (800798c <HAL_SD_MspInit+0xc4>)
 8007928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792a:	4a18      	ldr	r2, [pc, #96]	; (800798c <HAL_SD_MspInit+0xc4>)
 800792c:	f043 0308 	orr.w	r3, r3, #8
 8007930:	6313      	str	r3, [r2, #48]	; 0x30
 8007932:	4b16      	ldr	r3, [pc, #88]	; (800798c <HAL_SD_MspInit+0xc4>)
 8007934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007936:	f003 0308 	and.w	r3, r3, #8
 800793a:	60bb      	str	r3, [r7, #8]
 800793c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800793e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8007942:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007944:	2302      	movs	r3, #2
 8007946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007948:	2300      	movs	r3, #0
 800794a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800794c:	2303      	movs	r3, #3
 800794e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8007950:	230c      	movs	r3, #12
 8007952:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007954:	f107 0314 	add.w	r3, r7, #20
 8007958:	4619      	mov	r1, r3
 800795a:	480d      	ldr	r0, [pc, #52]	; (8007990 <HAL_SD_MspInit+0xc8>)
 800795c:	f7f9 fac8 	bl	8000ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007960:	2304      	movs	r3, #4
 8007962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007964:	2302      	movs	r3, #2
 8007966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007968:	2300      	movs	r3, #0
 800796a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800796c:	2303      	movs	r3, #3
 800796e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8007970:	230c      	movs	r3, #12
 8007972:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007974:	f107 0314 	add.w	r3, r7, #20
 8007978:	4619      	mov	r1, r3
 800797a:	4806      	ldr	r0, [pc, #24]	; (8007994 <HAL_SD_MspInit+0xcc>)
 800797c:	f7f9 fab8 	bl	8000ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8007980:	bf00      	nop
 8007982:	3728      	adds	r7, #40	; 0x28
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	40012c00 	.word	0x40012c00
 800798c:	40023800 	.word	0x40023800
 8007990:	40020800 	.word	0x40020800
 8007994:	40020c00 	.word	0x40020c00

08007998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007998:	b480      	push	{r7}
 800799a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800799c:	bf00      	nop
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr

080079a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80079a6:	b480      	push	{r7}
 80079a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80079aa:	e7fe      	b.n	80079aa <HardFault_Handler+0x4>

080079ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80079ac:	b480      	push	{r7}
 80079ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80079b0:	e7fe      	b.n	80079b0 <MemManage_Handler+0x4>

080079b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80079b2:	b480      	push	{r7}
 80079b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80079b6:	e7fe      	b.n	80079b6 <BusFault_Handler+0x4>

080079b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80079b8:	b480      	push	{r7}
 80079ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80079bc:	e7fe      	b.n	80079bc <UsageFault_Handler+0x4>

080079be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80079be:	b480      	push	{r7}
 80079c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80079c2:	bf00      	nop
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80079cc:	b480      	push	{r7}
 80079ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80079d0:	bf00      	nop
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr

080079da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80079da:	b480      	push	{r7}
 80079dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80079de:	bf00      	nop
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80079ec:	f7f8 fdbe 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80079f0:	bf00      	nop
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80079f8:	4802      	ldr	r0, [pc, #8]	; (8007a04 <DMA1_Stream4_IRQHandler+0x10>)
 80079fa:	f7f9 f811 	bl	8000a20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80079fe:	bf00      	nop
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	200047e0 	.word	0x200047e0

08007a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007a0c:	4b08      	ldr	r3, [pc, #32]	; (8007a30 <SystemInit+0x28>)
 8007a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a12:	4a07      	ldr	r2, [pc, #28]	; (8007a30 <SystemInit+0x28>)
 8007a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007a1c:	4b04      	ldr	r3, [pc, #16]	; (8007a30 <SystemInit+0x28>)
 8007a1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007a22:	609a      	str	r2, [r3, #8]
#endif
}
 8007a24:	bf00      	nop
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	e000ed00 	.word	0xe000ed00

08007a34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007a34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007a6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007a38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007a3a:	e003      	b.n	8007a44 <LoopCopyDataInit>

08007a3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007a3c:	4b0c      	ldr	r3, [pc, #48]	; (8007a70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007a3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007a40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007a42:	3104      	adds	r1, #4

08007a44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007a44:	480b      	ldr	r0, [pc, #44]	; (8007a74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007a46:	4b0c      	ldr	r3, [pc, #48]	; (8007a78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007a48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007a4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007a4c:	d3f6      	bcc.n	8007a3c <CopyDataInit>
  ldr  r2, =_sbss
 8007a4e:	4a0b      	ldr	r2, [pc, #44]	; (8007a7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007a50:	e002      	b.n	8007a58 <LoopFillZerobss>

08007a52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007a52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007a54:	f842 3b04 	str.w	r3, [r2], #4

08007a58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007a58:	4b09      	ldr	r3, [pc, #36]	; (8007a80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007a5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007a5c:	d3f9      	bcc.n	8007a52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007a5e:	f7ff ffd3 	bl	8007a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007a62:	f000 f811 	bl	8007a88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007a66:	f7ff fa25 	bl	8006eb4 <main>
  bx  lr    
 8007a6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007a6c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007a70:	08007c08 	.word	0x08007c08
  ldr  r0, =_sdata
 8007a74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007a78:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8007a7c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8007a80:	20004ab8 	.word	0x20004ab8

08007a84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007a84:	e7fe      	b.n	8007a84 <ADC_IRQHandler>
	...

08007a88 <__libc_init_array>:
 8007a88:	b570      	push	{r4, r5, r6, lr}
 8007a8a:	4e0d      	ldr	r6, [pc, #52]	; (8007ac0 <__libc_init_array+0x38>)
 8007a8c:	4c0d      	ldr	r4, [pc, #52]	; (8007ac4 <__libc_init_array+0x3c>)
 8007a8e:	1ba4      	subs	r4, r4, r6
 8007a90:	10a4      	asrs	r4, r4, #2
 8007a92:	2500      	movs	r5, #0
 8007a94:	42a5      	cmp	r5, r4
 8007a96:	d109      	bne.n	8007aac <__libc_init_array+0x24>
 8007a98:	4e0b      	ldr	r6, [pc, #44]	; (8007ac8 <__libc_init_array+0x40>)
 8007a9a:	4c0c      	ldr	r4, [pc, #48]	; (8007acc <__libc_init_array+0x44>)
 8007a9c:	f000 f820 	bl	8007ae0 <_init>
 8007aa0:	1ba4      	subs	r4, r4, r6
 8007aa2:	10a4      	asrs	r4, r4, #2
 8007aa4:	2500      	movs	r5, #0
 8007aa6:	42a5      	cmp	r5, r4
 8007aa8:	d105      	bne.n	8007ab6 <__libc_init_array+0x2e>
 8007aaa:	bd70      	pop	{r4, r5, r6, pc}
 8007aac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ab0:	4798      	blx	r3
 8007ab2:	3501      	adds	r5, #1
 8007ab4:	e7ee      	b.n	8007a94 <__libc_init_array+0xc>
 8007ab6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007aba:	4798      	blx	r3
 8007abc:	3501      	adds	r5, #1
 8007abe:	e7f2      	b.n	8007aa6 <__libc_init_array+0x1e>
 8007ac0:	08007c00 	.word	0x08007c00
 8007ac4:	08007c00 	.word	0x08007c00
 8007ac8:	08007c00 	.word	0x08007c00
 8007acc:	08007c04 	.word	0x08007c04

08007ad0 <memset>:
 8007ad0:	4402      	add	r2, r0
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d100      	bne.n	8007ada <memset+0xa>
 8007ad8:	4770      	bx	lr
 8007ada:	f803 1b01 	strb.w	r1, [r3], #1
 8007ade:	e7f9      	b.n	8007ad4 <memset+0x4>

08007ae0 <_init>:
 8007ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ae2:	bf00      	nop
 8007ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ae6:	bc08      	pop	{r3}
 8007ae8:	469e      	mov	lr, r3
 8007aea:	4770      	bx	lr

08007aec <_fini>:
 8007aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aee:	bf00      	nop
 8007af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007af2:	bc08      	pop	{r3}
 8007af4:	469e      	mov	lr, r3
 8007af6:	4770      	bx	lr
