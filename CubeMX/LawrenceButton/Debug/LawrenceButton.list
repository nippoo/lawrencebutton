
LawrenceButton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08009634  08009634  00019634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009774  08009774  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08009774  08009774  00019774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800977c  0800977c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800977c  0800977c  0001977c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009780  08009780  00019780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08009784  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f7a0  2000007c  08009800  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000f81c  08009800  0002f81c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018dce  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032cb  00000000  00000000  00038e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001550  00000000  00000000  0003c148  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013e0  00000000  00000000  0003d698  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000242ea  00000000  00000000  0003ea78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013348  00000000  00000000  00062d62  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d31db  00000000  00000000  000760aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00149285  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ccc  00000000  00000000  00149300  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800961c 	.word	0x0800961c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800961c 	.word	0x0800961c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000574:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <HAL_Init+0x40>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <HAL_Init+0x40>)
 800057a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800057e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <HAL_Init+0x40>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <HAL_Init+0x40>)
 8000586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800058a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <HAL_Init+0x40>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <HAL_Init+0x40>)
 8000592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000598:	2003      	movs	r0, #3
 800059a:	f000 f94d 	bl	8000838 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800059e:	2000      	movs	r0, #0
 80005a0:	f000 f808 	bl	80005b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a4:	f008 f950 	bl	8008848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40023c00 	.word	0x40023c00

080005b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <HAL_InitTick+0x54>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_InitTick+0x58>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	4619      	mov	r1, r3
 80005c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 f965 	bl	80008a2 <HAL_SYSTICK_Config>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005de:	2301      	movs	r3, #1
 80005e0:	e00e      	b.n	8000600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2b0f      	cmp	r3, #15
 80005e6:	d80a      	bhi.n	80005fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e8:	2200      	movs	r2, #0
 80005ea:	6879      	ldr	r1, [r7, #4]
 80005ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005f0:	f000 f92d 	bl	800084e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f4:	4a06      	ldr	r2, [pc, #24]	; (8000610 <HAL_InitTick+0x5c>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005fa:	2300      	movs	r3, #0
 80005fc:	e000      	b.n	8000600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
}
 8000600:	4618      	mov	r0, r3
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000014 	.word	0x20000014
 800060c:	20000004 	.word	0x20000004
 8000610:	20000000 	.word	0x20000000

08000614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_IncTick+0x20>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <HAL_IncTick+0x24>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4413      	add	r3, r2
 8000624:	4a04      	ldr	r2, [pc, #16]	; (8000638 <HAL_IncTick+0x24>)
 8000626:	6013      	str	r3, [r2, #0]
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	20000004 	.word	0x20000004
 8000638:	200068b0 	.word	0x200068b0

0800063c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return uwTick;
 8000640:	4b03      	ldr	r3, [pc, #12]	; (8000650 <HAL_GetTick+0x14>)
 8000642:	681b      	ldr	r3, [r3, #0]
}
 8000644:	4618      	mov	r0, r3
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	200068b0 	.word	0x200068b0

08000654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800065c:	f7ff ffee 	bl	800063c <HAL_GetTick>
 8000660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800066c:	d005      	beq.n	800067a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <HAL_Delay+0x40>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	461a      	mov	r2, r3
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	4413      	add	r3, r2
 8000678:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800067a:	bf00      	nop
 800067c:	f7ff ffde 	bl	800063c <HAL_GetTick>
 8000680:	4602      	mov	r2, r0
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	429a      	cmp	r2, r3
 800068a:	d8f7      	bhi.n	800067c <HAL_Delay+0x28>
  {
  }
}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000004 	.word	0x20000004

08000698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f003 0307 	and.w	r3, r3, #7
 80006a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <__NVIC_SetPriorityGrouping+0x44>)
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006b4:	4013      	ands	r3, r2
 80006b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ca:	4a04      	ldr	r2, [pc, #16]	; (80006dc <__NVIC_SetPriorityGrouping+0x44>)
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	60d3      	str	r3, [r2, #12]
}
 80006d0:	bf00      	nop
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <__NVIC_GetPriorityGrouping+0x18>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	0a1b      	lsrs	r3, r3, #8
 80006ea:	f003 0307 	and.w	r3, r3, #7
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070a:	2b00      	cmp	r3, #0
 800070c:	db0b      	blt.n	8000726 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	f003 021f 	and.w	r2, r3, #31
 8000714:	4907      	ldr	r1, [pc, #28]	; (8000734 <__NVIC_EnableIRQ+0x38>)
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	095b      	lsrs	r3, r3, #5
 800071c:	2001      	movs	r0, #1
 800071e:	fa00 f202 	lsl.w	r2, r0, r2
 8000722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000e100 	.word	0xe000e100

08000738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	6039      	str	r1, [r7, #0]
 8000742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000748:	2b00      	cmp	r3, #0
 800074a:	db0a      	blt.n	8000762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	b2da      	uxtb	r2, r3
 8000750:	490c      	ldr	r1, [pc, #48]	; (8000784 <__NVIC_SetPriority+0x4c>)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	0112      	lsls	r2, r2, #4
 8000758:	b2d2      	uxtb	r2, r2
 800075a:	440b      	add	r3, r1
 800075c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000760:	e00a      	b.n	8000778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4908      	ldr	r1, [pc, #32]	; (8000788 <__NVIC_SetPriority+0x50>)
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	f003 030f 	and.w	r3, r3, #15
 800076e:	3b04      	subs	r3, #4
 8000770:	0112      	lsls	r2, r2, #4
 8000772:	b2d2      	uxtb	r2, r2
 8000774:	440b      	add	r3, r1
 8000776:	761a      	strb	r2, [r3, #24]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000e100 	.word	0xe000e100
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800078c:	b480      	push	{r7}
 800078e:	b089      	sub	sp, #36	; 0x24
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	f1c3 0307 	rsb	r3, r3, #7
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	bf28      	it	cs
 80007aa:	2304      	movcs	r3, #4
 80007ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	3304      	adds	r3, #4
 80007b2:	2b06      	cmp	r3, #6
 80007b4:	d902      	bls.n	80007bc <NVIC_EncodePriority+0x30>
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3b03      	subs	r3, #3
 80007ba:	e000      	b.n	80007be <NVIC_EncodePriority+0x32>
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	43da      	mvns	r2, r3
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	401a      	ands	r2, r3
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	fa01 f303 	lsl.w	r3, r1, r3
 80007de:	43d9      	mvns	r1, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e4:	4313      	orrs	r3, r2
         );
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3724      	adds	r7, #36	; 0x24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
	...

080007f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3b01      	subs	r3, #1
 8000800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000804:	d301      	bcc.n	800080a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000806:	2301      	movs	r3, #1
 8000808:	e00f      	b.n	800082a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800080a:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <SysTick_Config+0x40>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3b01      	subs	r3, #1
 8000810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000812:	210f      	movs	r1, #15
 8000814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000818:	f7ff ff8e 	bl	8000738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <SysTick_Config+0x40>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000822:	4b04      	ldr	r3, [pc, #16]	; (8000834 <SysTick_Config+0x40>)
 8000824:	2207      	movs	r2, #7
 8000826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000828:	2300      	movs	r3, #0
}
 800082a:	4618      	mov	r0, r3
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	e000e010 	.word	0xe000e010

08000838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff ff29 	bl	8000698 <__NVIC_SetPriorityGrouping>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800084e:	b580      	push	{r7, lr}
 8000850:	b086      	sub	sp, #24
 8000852:	af00      	add	r7, sp, #0
 8000854:	4603      	mov	r3, r0
 8000856:	60b9      	str	r1, [r7, #8]
 8000858:	607a      	str	r2, [r7, #4]
 800085a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000860:	f7ff ff3e 	bl	80006e0 <__NVIC_GetPriorityGrouping>
 8000864:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	68b9      	ldr	r1, [r7, #8]
 800086a:	6978      	ldr	r0, [r7, #20]
 800086c:	f7ff ff8e 	bl	800078c <NVIC_EncodePriority>
 8000870:	4602      	mov	r2, r0
 8000872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000876:	4611      	mov	r1, r2
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ff5d 	bl	8000738 <__NVIC_SetPriority>
}
 800087e:	bf00      	nop
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
 800088c:	4603      	mov	r3, r0
 800088e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff31 	bl	80006fc <__NVIC_EnableIRQ>
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff ffa2 	bl	80007f4 <SysTick_Config>
 80008b0:	4603      	mov	r3, r0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80008c8:	f7ff feb8 	bl	800063c <HAL_GetTick>
 80008cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d101      	bne.n	80008d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80008d4:	2301      	movs	r3, #1
 80008d6:	e099      	b.n	8000a0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2200      	movs	r2, #0
 80008dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2202      	movs	r2, #2
 80008e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f022 0201 	bic.w	r2, r2, #1
 80008f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008f8:	e00f      	b.n	800091a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80008fa:	f7ff fe9f 	bl	800063c <HAL_GetTick>
 80008fe:	4602      	mov	r2, r0
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	1ad3      	subs	r3, r2, r3
 8000904:	2b05      	cmp	r3, #5
 8000906:	d908      	bls.n	800091a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2220      	movs	r2, #32
 800090c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2203      	movs	r2, #3
 8000912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000916:	2303      	movs	r3, #3
 8000918:	e078      	b.n	8000a0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	2b00      	cmp	r3, #0
 8000926:	d1e8      	bne.n	80008fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000930:	697a      	ldr	r2, [r7, #20]
 8000932:	4b38      	ldr	r3, [pc, #224]	; (8000a14 <HAL_DMA_Init+0x158>)
 8000934:	4013      	ands	r3, r2
 8000936:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	685a      	ldr	r2, [r3, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000946:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	691b      	ldr	r3, [r3, #16]
 800094c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000952:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800095e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6a1b      	ldr	r3, [r3, #32]
 8000964:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000966:	697a      	ldr	r2, [r7, #20]
 8000968:	4313      	orrs	r3, r2
 800096a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000970:	2b04      	cmp	r3, #4
 8000972:	d107      	bne.n	8000984 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097c:	4313      	orrs	r3, r2
 800097e:	697a      	ldr	r2, [r7, #20]
 8000980:	4313      	orrs	r3, r2
 8000982:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	697a      	ldr	r2, [r7, #20]
 800098a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	f023 0307 	bic.w	r3, r3, #7
 800099a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a0:	697a      	ldr	r2, [r7, #20]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	d117      	bne.n	80009de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b2:	697a      	ldr	r2, [r7, #20]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d00e      	beq.n	80009de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f000 fa6f 	bl	8000ea4 <DMA_CheckFifoParam>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d008      	beq.n	80009de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2240      	movs	r2, #64	; 0x40
 80009d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2201      	movs	r2, #1
 80009d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80009da:	2301      	movs	r3, #1
 80009dc:	e016      	b.n	8000a0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	697a      	ldr	r2, [r7, #20]
 80009e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f000 fa26 	bl	8000e38 <DMA_CalcBaseAndBitshift>
 80009ec:	4603      	mov	r3, r0
 80009ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009f4:	223f      	movs	r2, #63	; 0x3f
 80009f6:	409a      	lsls	r2, r3
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2200      	movs	r2, #0
 8000a00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2201      	movs	r2, #1
 8000a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000a0a:	2300      	movs	r3, #0
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3718      	adds	r7, #24
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	f010803f 	.word	0xf010803f

08000a18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
 8000a24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a26:	2300      	movs	r3, #0
 8000a28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d101      	bne.n	8000a3e <HAL_DMA_Start_IT+0x26>
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	e040      	b.n	8000ac0 <HAL_DMA_Start_IT+0xa8>
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	2201      	movs	r2, #1
 8000a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d12f      	bne.n	8000ab2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	2202      	movs	r2, #2
 8000a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	68b9      	ldr	r1, [r7, #8]
 8000a66:	68f8      	ldr	r0, [r7, #12]
 8000a68:	f000 f9b8 	bl	8000ddc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a70:	223f      	movs	r2, #63	; 0x3f
 8000a72:	409a      	lsls	r2, r3
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f042 0216 	orr.w	r2, r2, #22
 8000a86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d007      	beq.n	8000aa0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f042 0208 	orr.w	r2, r2, #8
 8000a9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f042 0201 	orr.w	r2, r2, #1
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	e005      	b.n	8000abe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000aba:	2302      	movs	r3, #2
 8000abc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000ad4:	4b92      	ldr	r3, [pc, #584]	; (8000d20 <HAL_DMA_IRQHandler+0x258>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a92      	ldr	r2, [pc, #584]	; (8000d24 <HAL_DMA_IRQHandler+0x25c>)
 8000ada:	fba2 2303 	umull	r2, r3, r2, r3
 8000ade:	0a9b      	lsrs	r3, r3, #10
 8000ae0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000af2:	2208      	movs	r2, #8
 8000af4:	409a      	lsls	r2, r3
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	4013      	ands	r3, r2
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d01a      	beq.n	8000b34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f003 0304 	and.w	r3, r3, #4
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d013      	beq.n	8000b34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f022 0204 	bic.w	r2, r2, #4
 8000b1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b20:	2208      	movs	r2, #8
 8000b22:	409a      	lsls	r2, r3
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b2c:	f043 0201 	orr.w	r2, r3, #1
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b38:	2201      	movs	r2, #1
 8000b3a:	409a      	lsls	r2, r3
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d012      	beq.n	8000b6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d00b      	beq.n	8000b6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b56:	2201      	movs	r2, #1
 8000b58:	409a      	lsls	r2, r3
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b62:	f043 0202 	orr.w	r2, r3, #2
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b6e:	2204      	movs	r2, #4
 8000b70:	409a      	lsls	r2, r3
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	4013      	ands	r3, r2
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d012      	beq.n	8000ba0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f003 0302 	and.w	r3, r3, #2
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d00b      	beq.n	8000ba0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b8c:	2204      	movs	r2, #4
 8000b8e:	409a      	lsls	r2, r3
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b98:	f043 0204 	orr.w	r2, r3, #4
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ba4:	2210      	movs	r2, #16
 8000ba6:	409a      	lsls	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4013      	ands	r3, r2
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d043      	beq.n	8000c38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f003 0308 	and.w	r3, r3, #8
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d03c      	beq.n	8000c38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc2:	2210      	movs	r2, #16
 8000bc4:	409a      	lsls	r2, r3
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d018      	beq.n	8000c0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d108      	bne.n	8000bf8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d024      	beq.n	8000c38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	4798      	blx	r3
 8000bf6:	e01f      	b.n	8000c38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d01b      	beq.n	8000c38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	4798      	blx	r3
 8000c08:	e016      	b.n	8000c38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d107      	bne.n	8000c28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f022 0208 	bic.w	r2, r2, #8
 8000c26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d003      	beq.n	8000c38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c3c:	2220      	movs	r2, #32
 8000c3e:	409a      	lsls	r2, r3
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4013      	ands	r3, r2
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	f000 808e 	beq.w	8000d66 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f003 0310 	and.w	r3, r3, #16
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	f000 8086 	beq.w	8000d66 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c5e:	2220      	movs	r2, #32
 8000c60:	409a      	lsls	r2, r3
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b05      	cmp	r3, #5
 8000c70:	d136      	bne.n	8000ce0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f022 0216 	bic.w	r2, r2, #22
 8000c80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	695a      	ldr	r2, [r3, #20]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d103      	bne.n	8000ca2 <HAL_DMA_IRQHandler+0x1da>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d007      	beq.n	8000cb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f022 0208 	bic.w	r2, r2, #8
 8000cb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cb6:	223f      	movs	r2, #63	; 0x3f
 8000cb8:	409a      	lsls	r2, r3
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d07d      	beq.n	8000dd2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	4798      	blx	r3
        }
        return;
 8000cde:	e078      	b.n	8000dd2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d01c      	beq.n	8000d28 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d108      	bne.n	8000d0e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d030      	beq.n	8000d66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	4798      	blx	r3
 8000d0c:	e02b      	b.n	8000d66 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d027      	beq.n	8000d66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	4798      	blx	r3
 8000d1e:	e022      	b.n	8000d66 <HAL_DMA_IRQHandler+0x29e>
 8000d20:	20000014 	.word	0x20000014
 8000d24:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d10f      	bne.n	8000d56 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f022 0210 	bic.w	r2, r2, #16
 8000d44:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2201      	movs	r2, #1
 8000d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d032      	beq.n	8000dd4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d022      	beq.n	8000dc0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2205      	movs	r2, #5
 8000d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f022 0201 	bic.w	r2, r2, #1
 8000d90:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	3301      	adds	r3, #1
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d307      	bcc.n	8000dae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d1f2      	bne.n	8000d92 <HAL_DMA_IRQHandler+0x2ca>
 8000dac:	e000      	b.n	8000db0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000dae:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d005      	beq.n	8000dd4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	4798      	blx	r3
 8000dd0:	e000      	b.n	8000dd4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000dd2:	bf00      	nop
    }
  }
}
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop

08000ddc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
 8000de8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000df8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	683a      	ldr	r2, [r7, #0]
 8000e00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	2b40      	cmp	r3, #64	; 0x40
 8000e08:	d108      	bne.n	8000e1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000e1a:	e007      	b.n	8000e2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	68ba      	ldr	r2, [r7, #8]
 8000e22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	60da      	str	r2, [r3, #12]
}
 8000e2c:	bf00      	nop
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	3b10      	subs	r3, #16
 8000e48:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <DMA_CalcBaseAndBitshift+0x64>)
 8000e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4e:	091b      	lsrs	r3, r3, #4
 8000e50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000e52:	4a13      	ldr	r2, [pc, #76]	; (8000ea0 <DMA_CalcBaseAndBitshift+0x68>)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4413      	add	r3, r2
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2b03      	cmp	r3, #3
 8000e64:	d909      	bls.n	8000e7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000e6e:	f023 0303 	bic.w	r3, r3, #3
 8000e72:	1d1a      	adds	r2, r3, #4
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	659a      	str	r2, [r3, #88]	; 0x58
 8000e78:	e007      	b.n	8000e8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000e82:	f023 0303 	bic.w	r3, r3, #3
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	aaaaaaab 	.word	0xaaaaaaab
 8000ea0:	0800968c 	.word	0x0800968c

08000ea4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eac:	2300      	movs	r3, #0
 8000eae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d11f      	bne.n	8000efe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	2b03      	cmp	r3, #3
 8000ec2:	d855      	bhi.n	8000f70 <DMA_CheckFifoParam+0xcc>
 8000ec4:	a201      	add	r2, pc, #4	; (adr r2, 8000ecc <DMA_CheckFifoParam+0x28>)
 8000ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eca:	bf00      	nop
 8000ecc:	08000edd 	.word	0x08000edd
 8000ed0:	08000eef 	.word	0x08000eef
 8000ed4:	08000edd 	.word	0x08000edd
 8000ed8:	08000f71 	.word	0x08000f71
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d045      	beq.n	8000f74 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000eec:	e042      	b.n	8000f74 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000ef6:	d13f      	bne.n	8000f78 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000efc:	e03c      	b.n	8000f78 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f06:	d121      	bne.n	8000f4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	2b03      	cmp	r3, #3
 8000f0c:	d836      	bhi.n	8000f7c <DMA_CheckFifoParam+0xd8>
 8000f0e:	a201      	add	r2, pc, #4	; (adr r2, 8000f14 <DMA_CheckFifoParam+0x70>)
 8000f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f14:	08000f25 	.word	0x08000f25
 8000f18:	08000f2b 	.word	0x08000f2b
 8000f1c:	08000f25 	.word	0x08000f25
 8000f20:	08000f3d 	.word	0x08000f3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	73fb      	strb	r3, [r7, #15]
      break;
 8000f28:	e02f      	b.n	8000f8a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d024      	beq.n	8000f80 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000f3a:	e021      	b.n	8000f80 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000f44:	d11e      	bne.n	8000f84 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000f4a:	e01b      	b.n	8000f84 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d902      	bls.n	8000f58 <DMA_CheckFifoParam+0xb4>
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d003      	beq.n	8000f5e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000f56:	e018      	b.n	8000f8a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8000f5c:	e015      	b.n	8000f8a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00e      	beq.n	8000f88 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	73fb      	strb	r3, [r7, #15]
      break;
 8000f6e:	e00b      	b.n	8000f88 <DMA_CheckFifoParam+0xe4>
      break;
 8000f70:	bf00      	nop
 8000f72:	e00a      	b.n	8000f8a <DMA_CheckFifoParam+0xe6>
      break;
 8000f74:	bf00      	nop
 8000f76:	e008      	b.n	8000f8a <DMA_CheckFifoParam+0xe6>
      break;
 8000f78:	bf00      	nop
 8000f7a:	e006      	b.n	8000f8a <DMA_CheckFifoParam+0xe6>
      break;
 8000f7c:	bf00      	nop
 8000f7e:	e004      	b.n	8000f8a <DMA_CheckFifoParam+0xe6>
      break;
 8000f80:	bf00      	nop
 8000f82:	e002      	b.n	8000f8a <DMA_CheckFifoParam+0xe6>
      break;   
 8000f84:	bf00      	nop
 8000f86:	e000      	b.n	8000f8a <DMA_CheckFifoParam+0xe6>
      break;
 8000f88:	bf00      	nop
    }
  } 
  
  return status; 
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b089      	sub	sp, #36	; 0x24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
 8000fb2:	e16b      	b.n	800128c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	697a      	ldr	r2, [r7, #20]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	f040 815a 	bne.w	8001286 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d00b      	beq.n	8000ff2 <HAL_GPIO_Init+0x5a>
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d007      	beq.n	8000ff2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fe6:	2b11      	cmp	r3, #17
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	2b12      	cmp	r3, #18
 8000ff0:	d130      	bne.n	8001054 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4013      	ands	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	68da      	ldr	r2, [r3, #12]
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001028:	2201      	movs	r2, #1
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	091b      	lsrs	r3, r3, #4
 800103e:	f003 0201 	and.w	r2, r3, #1
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	2b02      	cmp	r3, #2
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_Init+0xfc>
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b12      	cmp	r3, #18
 8001092:	d123      	bne.n	80010dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	08da      	lsrs	r2, r3, #3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3208      	adds	r2, #8
 800109c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	f003 0307 	and.w	r3, r3, #7
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	220f      	movs	r2, #15
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	691a      	ldr	r2, [r3, #16]
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	08da      	lsrs	r2, r3, #3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3208      	adds	r2, #8
 80010d6:	69b9      	ldr	r1, [r7, #24]
 80010d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	2203      	movs	r2, #3
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0203 	and.w	r2, r3, #3
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 80b4 	beq.w	8001286 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	4b5f      	ldr	r3, [pc, #380]	; (80012a0 <HAL_GPIO_Init+0x308>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	4a5e      	ldr	r2, [pc, #376]	; (80012a0 <HAL_GPIO_Init+0x308>)
 8001128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800112c:	6453      	str	r3, [r2, #68]	; 0x44
 800112e:	4b5c      	ldr	r3, [pc, #368]	; (80012a0 <HAL_GPIO_Init+0x308>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800113a:	4a5a      	ldr	r2, [pc, #360]	; (80012a4 <HAL_GPIO_Init+0x30c>)
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	089b      	lsrs	r3, r3, #2
 8001140:	3302      	adds	r3, #2
 8001142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001146:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f003 0303 	and.w	r3, r3, #3
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	220f      	movs	r2, #15
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a51      	ldr	r2, [pc, #324]	; (80012a8 <HAL_GPIO_Init+0x310>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d02b      	beq.n	80011be <HAL_GPIO_Init+0x226>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a50      	ldr	r2, [pc, #320]	; (80012ac <HAL_GPIO_Init+0x314>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d025      	beq.n	80011ba <HAL_GPIO_Init+0x222>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a4f      	ldr	r2, [pc, #316]	; (80012b0 <HAL_GPIO_Init+0x318>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d01f      	beq.n	80011b6 <HAL_GPIO_Init+0x21e>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a4e      	ldr	r2, [pc, #312]	; (80012b4 <HAL_GPIO_Init+0x31c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d019      	beq.n	80011b2 <HAL_GPIO_Init+0x21a>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a4d      	ldr	r2, [pc, #308]	; (80012b8 <HAL_GPIO_Init+0x320>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d013      	beq.n	80011ae <HAL_GPIO_Init+0x216>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a4c      	ldr	r2, [pc, #304]	; (80012bc <HAL_GPIO_Init+0x324>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d00d      	beq.n	80011aa <HAL_GPIO_Init+0x212>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a4b      	ldr	r2, [pc, #300]	; (80012c0 <HAL_GPIO_Init+0x328>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d007      	beq.n	80011a6 <HAL_GPIO_Init+0x20e>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4a      	ldr	r2, [pc, #296]	; (80012c4 <HAL_GPIO_Init+0x32c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d101      	bne.n	80011a2 <HAL_GPIO_Init+0x20a>
 800119e:	2307      	movs	r3, #7
 80011a0:	e00e      	b.n	80011c0 <HAL_GPIO_Init+0x228>
 80011a2:	2308      	movs	r3, #8
 80011a4:	e00c      	b.n	80011c0 <HAL_GPIO_Init+0x228>
 80011a6:	2306      	movs	r3, #6
 80011a8:	e00a      	b.n	80011c0 <HAL_GPIO_Init+0x228>
 80011aa:	2305      	movs	r3, #5
 80011ac:	e008      	b.n	80011c0 <HAL_GPIO_Init+0x228>
 80011ae:	2304      	movs	r3, #4
 80011b0:	e006      	b.n	80011c0 <HAL_GPIO_Init+0x228>
 80011b2:	2303      	movs	r3, #3
 80011b4:	e004      	b.n	80011c0 <HAL_GPIO_Init+0x228>
 80011b6:	2302      	movs	r3, #2
 80011b8:	e002      	b.n	80011c0 <HAL_GPIO_Init+0x228>
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <HAL_GPIO_Init+0x228>
 80011be:	2300      	movs	r3, #0
 80011c0:	69fa      	ldr	r2, [r7, #28]
 80011c2:	f002 0203 	and.w	r2, r2, #3
 80011c6:	0092      	lsls	r2, r2, #2
 80011c8:	4093      	lsls	r3, r2
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d0:	4934      	ldr	r1, [pc, #208]	; (80012a4 <HAL_GPIO_Init+0x30c>)
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	089b      	lsrs	r3, r3, #2
 80011d6:	3302      	adds	r3, #2
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011de:	4b3a      	ldr	r3, [pc, #232]	; (80012c8 <HAL_GPIO_Init+0x330>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001202:	4a31      	ldr	r2, [pc, #196]	; (80012c8 <HAL_GPIO_Init+0x330>)
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001208:	4b2f      	ldr	r3, [pc, #188]	; (80012c8 <HAL_GPIO_Init+0x330>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800122c:	4a26      	ldr	r2, [pc, #152]	; (80012c8 <HAL_GPIO_Init+0x330>)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001232:	4b25      	ldr	r3, [pc, #148]	; (80012c8 <HAL_GPIO_Init+0x330>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001256:	4a1c      	ldr	r2, [pc, #112]	; (80012c8 <HAL_GPIO_Init+0x330>)
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800125c:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <HAL_GPIO_Init+0x330>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001280:	4a11      	ldr	r2, [pc, #68]	; (80012c8 <HAL_GPIO_Init+0x330>)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3301      	adds	r3, #1
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	2b0f      	cmp	r3, #15
 8001290:	f67f ae90 	bls.w	8000fb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001294:	bf00      	nop
 8001296:	3724      	adds	r7, #36	; 0x24
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40013800 	.word	0x40013800
 80012a8:	40020000 	.word	0x40020000
 80012ac:	40020400 	.word	0x40020400
 80012b0:	40020800 	.word	0x40020800
 80012b4:	40020c00 	.word	0x40020c00
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40021400 	.word	0x40021400
 80012c0:	40021800 	.word	0x40021800
 80012c4:	40021c00 	.word	0x40021c00
 80012c8:	40013c00 	.word	0x40013c00

080012cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	691a      	ldr	r2, [r3, #16]
 80012dc:	887b      	ldrh	r3, [r7, #2]
 80012de:	4013      	ands	r3, r2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d002      	beq.n	80012ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012e4:	2301      	movs	r3, #1
 80012e6:	73fb      	strb	r3, [r7, #15]
 80012e8:	e001      	b.n	80012ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	807b      	strh	r3, [r7, #2]
 8001308:	4613      	mov	r3, r2
 800130a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800130c:	787b      	ldrb	r3, [r7, #1]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001312:	887a      	ldrh	r2, [r7, #2]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001318:	e003      	b.n	8001322 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800131a:	887b      	ldrh	r3, [r7, #2]
 800131c:	041a      	lsls	r2, r3, #16
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	619a      	str	r2, [r3, #24]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e11f      	b.n	8001582 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d106      	bne.n	800135c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f007 fa9e 	bl	8008898 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2224      	movs	r2, #36	; 0x24
 8001360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0201 	bic.w	r2, r2, #1
 8001372:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001382:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001392:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001394:	f001 fada 	bl	800294c <HAL_RCC_GetPCLK1Freq>
 8001398:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	4a7b      	ldr	r2, [pc, #492]	; (800158c <HAL_I2C_Init+0x25c>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d807      	bhi.n	80013b4 <HAL_I2C_Init+0x84>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4a7a      	ldr	r2, [pc, #488]	; (8001590 <HAL_I2C_Init+0x260>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	bf94      	ite	ls
 80013ac:	2301      	movls	r3, #1
 80013ae:	2300      	movhi	r3, #0
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	e006      	b.n	80013c2 <HAL_I2C_Init+0x92>
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4a77      	ldr	r2, [pc, #476]	; (8001594 <HAL_I2C_Init+0x264>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	bf94      	ite	ls
 80013bc:	2301      	movls	r3, #1
 80013be:	2300      	movhi	r3, #0
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e0db      	b.n	8001582 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4a72      	ldr	r2, [pc, #456]	; (8001598 <HAL_I2C_Init+0x268>)
 80013ce:	fba2 2303 	umull	r2, r3, r2, r3
 80013d2:	0c9b      	lsrs	r3, r3, #18
 80013d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	68ba      	ldr	r2, [r7, #8]
 80013e6:	430a      	orrs	r2, r1
 80013e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	4a64      	ldr	r2, [pc, #400]	; (800158c <HAL_I2C_Init+0x25c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d802      	bhi.n	8001404 <HAL_I2C_Init+0xd4>
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	3301      	adds	r3, #1
 8001402:	e009      	b.n	8001418 <HAL_I2C_Init+0xe8>
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800140a:	fb02 f303 	mul.w	r3, r2, r3
 800140e:	4a63      	ldr	r2, [pc, #396]	; (800159c <HAL_I2C_Init+0x26c>)
 8001410:	fba2 2303 	umull	r2, r3, r2, r3
 8001414:	099b      	lsrs	r3, r3, #6
 8001416:	3301      	adds	r3, #1
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	6812      	ldr	r2, [r2, #0]
 800141c:	430b      	orrs	r3, r1
 800141e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800142a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	4956      	ldr	r1, [pc, #344]	; (800158c <HAL_I2C_Init+0x25c>)
 8001434:	428b      	cmp	r3, r1
 8001436:	d80d      	bhi.n	8001454 <HAL_I2C_Init+0x124>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	1e59      	subs	r1, r3, #1
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	fbb1 f3f3 	udiv	r3, r1, r3
 8001446:	3301      	adds	r3, #1
 8001448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800144c:	2b04      	cmp	r3, #4
 800144e:	bf38      	it	cc
 8001450:	2304      	movcc	r3, #4
 8001452:	e04f      	b.n	80014f4 <HAL_I2C_Init+0x1c4>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d111      	bne.n	8001480 <HAL_I2C_Init+0x150>
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	1e58      	subs	r0, r3, #1
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6859      	ldr	r1, [r3, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	440b      	add	r3, r1
 800146a:	fbb0 f3f3 	udiv	r3, r0, r3
 800146e:	3301      	adds	r3, #1
 8001470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001474:	2b00      	cmp	r3, #0
 8001476:	bf0c      	ite	eq
 8001478:	2301      	moveq	r3, #1
 800147a:	2300      	movne	r3, #0
 800147c:	b2db      	uxtb	r3, r3
 800147e:	e012      	b.n	80014a6 <HAL_I2C_Init+0x176>
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	1e58      	subs	r0, r3, #1
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6859      	ldr	r1, [r3, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	0099      	lsls	r1, r3, #2
 8001490:	440b      	add	r3, r1
 8001492:	fbb0 f3f3 	udiv	r3, r0, r3
 8001496:	3301      	adds	r3, #1
 8001498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800149c:	2b00      	cmp	r3, #0
 800149e:	bf0c      	ite	eq
 80014a0:	2301      	moveq	r3, #1
 80014a2:	2300      	movne	r3, #0
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_I2C_Init+0x17e>
 80014aa:	2301      	movs	r3, #1
 80014ac:	e022      	b.n	80014f4 <HAL_I2C_Init+0x1c4>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10e      	bne.n	80014d4 <HAL_I2C_Init+0x1a4>
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	1e58      	subs	r0, r3, #1
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6859      	ldr	r1, [r3, #4]
 80014be:	460b      	mov	r3, r1
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	440b      	add	r3, r1
 80014c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80014c8:	3301      	adds	r3, #1
 80014ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014d2:	e00f      	b.n	80014f4 <HAL_I2C_Init+0x1c4>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	1e58      	subs	r0, r3, #1
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6859      	ldr	r1, [r3, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	440b      	add	r3, r1
 80014e2:	0099      	lsls	r1, r3, #2
 80014e4:	440b      	add	r3, r1
 80014e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ea:	3301      	adds	r3, #1
 80014ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	6809      	ldr	r1, [r1, #0]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69da      	ldr	r2, [r3, #28]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	431a      	orrs	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	430a      	orrs	r2, r1
 8001516:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001522:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	6911      	ldr	r1, [r2, #16]
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	68d2      	ldr	r2, [r2, #12]
 800152e:	4311      	orrs	r1, r2
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	6812      	ldr	r2, [r2, #0]
 8001534:	430b      	orrs	r3, r1
 8001536:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	695a      	ldr	r2, [r3, #20]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	431a      	orrs	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	430a      	orrs	r2, r1
 8001552:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 0201 	orr.w	r2, r2, #1
 8001562:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2220      	movs	r2, #32
 800156e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	000186a0 	.word	0x000186a0
 8001590:	001e847f 	.word	0x001e847f
 8001594:	003d08ff 	.word	0x003d08ff
 8001598:	431bde83 	.word	0x431bde83
 800159c:	10624dd3 	.word	0x10624dd3

080015a0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e128      	b.n	8001804 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d109      	bne.n	80015d2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a90      	ldr	r2, [pc, #576]	; (800180c <HAL_I2S_Init+0x26c>)
 80015ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f007 f9ab 	bl	8008928 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2202      	movs	r2, #2
 80015d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	69db      	ldr	r3, [r3, #28]
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80015e8:	f023 030f 	bic.w	r3, r3, #15
 80015ec:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2202      	movs	r2, #2
 80015f4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d060      	beq.n	80016c0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d102      	bne.n	800160c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001606:	2310      	movs	r3, #16
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	e001      	b.n	8001610 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800160c:	2320      	movs	r3, #32
 800160e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2b20      	cmp	r3, #32
 8001616:	d802      	bhi.n	800161e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800161e:	2001      	movs	r0, #1
 8001620:	f001 fa8a 	bl	8002b38 <HAL_RCCEx_GetPeriphCLKFreq>
 8001624:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800162e:	d125      	bne.n	800167c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d010      	beq.n	800165a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001642:	4613      	mov	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	461a      	mov	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	fbb2 f3f3 	udiv	r3, r2, r3
 8001654:	3305      	adds	r3, #5
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	e01f      	b.n	800169a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	fbb2 f2f3 	udiv	r2, r2, r3
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	461a      	mov	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	fbb2 f3f3 	udiv	r3, r2, r3
 8001676:	3305      	adds	r3, #5
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	e00e      	b.n	800169a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	fbb2 f2f3 	udiv	r2, r2, r3
 8001684:	4613      	mov	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	461a      	mov	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	fbb2 f3f3 	udiv	r3, r2, r3
 8001696:	3305      	adds	r3, #5
 8001698:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4a5c      	ldr	r2, [pc, #368]	; (8001810 <HAL_I2S_Init+0x270>)
 800169e:	fba2 2303 	umull	r2, r3, r2, r3
 80016a2:	08db      	lsrs	r3, r3, #3
 80016a4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	085b      	lsrs	r3, r3, #1
 80016b6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	61bb      	str	r3, [r7, #24]
 80016be:	e003      	b.n	80016c8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80016c0:	2302      	movs	r3, #2
 80016c2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d902      	bls.n	80016d4 <HAL_I2S_Init+0x134>
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	2bff      	cmp	r3, #255	; 0xff
 80016d2:	d907      	bls.n	80016e4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d8:	f043 0210 	orr.w	r2, r3, #16
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e08f      	b.n	8001804 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691a      	ldr	r2, [r3, #16]
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	ea42 0103 	orr.w	r1, r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	69fa      	ldr	r2, [r7, #28]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001702:	f023 030f 	bic.w	r3, r3, #15
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6851      	ldr	r1, [r2, #4]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6892      	ldr	r2, [r2, #8]
 800170e:	4311      	orrs	r1, r2
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	68d2      	ldr	r2, [r2, #12]
 8001714:	4311      	orrs	r1, r2
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6992      	ldr	r2, [r2, #24]
 800171a:	430a      	orrs	r2, r1
 800171c:	431a      	orrs	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001726:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d161      	bne.n	80017f4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a38      	ldr	r2, [pc, #224]	; (8001814 <HAL_I2S_Init+0x274>)
 8001734:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a37      	ldr	r2, [pc, #220]	; (8001818 <HAL_I2S_Init+0x278>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d101      	bne.n	8001744 <HAL_I2S_Init+0x1a4>
 8001740:	4b36      	ldr	r3, [pc, #216]	; (800181c <HAL_I2S_Init+0x27c>)
 8001742:	e001      	b.n	8001748 <HAL_I2S_Init+0x1a8>
 8001744:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	6812      	ldr	r2, [r2, #0]
 800174e:	4932      	ldr	r1, [pc, #200]	; (8001818 <HAL_I2S_Init+0x278>)
 8001750:	428a      	cmp	r2, r1
 8001752:	d101      	bne.n	8001758 <HAL_I2S_Init+0x1b8>
 8001754:	4a31      	ldr	r2, [pc, #196]	; (800181c <HAL_I2S_Init+0x27c>)
 8001756:	e001      	b.n	800175c <HAL_I2S_Init+0x1bc>
 8001758:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800175c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001760:	f023 030f 	bic.w	r3, r3, #15
 8001764:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a2b      	ldr	r2, [pc, #172]	; (8001818 <HAL_I2S_Init+0x278>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d101      	bne.n	8001774 <HAL_I2S_Init+0x1d4>
 8001770:	4b2a      	ldr	r3, [pc, #168]	; (800181c <HAL_I2S_Init+0x27c>)
 8001772:	e001      	b.n	8001778 <HAL_I2S_Init+0x1d8>
 8001774:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001778:	2202      	movs	r2, #2
 800177a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a25      	ldr	r2, [pc, #148]	; (8001818 <HAL_I2S_Init+0x278>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d101      	bne.n	800178a <HAL_I2S_Init+0x1ea>
 8001786:	4b25      	ldr	r3, [pc, #148]	; (800181c <HAL_I2S_Init+0x27c>)
 8001788:	e001      	b.n	800178e <HAL_I2S_Init+0x1ee>
 800178a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800178e:	69db      	ldr	r3, [r3, #28]
 8001790:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800179a:	d003      	beq.n	80017a4 <HAL_I2S_Init+0x204>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d103      	bne.n	80017ac <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80017a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	e001      	b.n	80017b0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80017ac:	2300      	movs	r3, #0
 80017ae:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	b299      	uxth	r1, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80017c6:	4303      	orrs	r3, r0
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	430b      	orrs	r3, r1
 80017cc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80017ce:	4313      	orrs	r3, r2
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	897b      	ldrh	r3, [r7, #10]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017dc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a0d      	ldr	r2, [pc, #52]	; (8001818 <HAL_I2S_Init+0x278>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d101      	bne.n	80017ec <HAL_I2S_Init+0x24c>
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <HAL_I2S_Init+0x27c>)
 80017ea:	e001      	b.n	80017f0 <HAL_I2S_Init+0x250>
 80017ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80017f0:	897a      	ldrh	r2, [r7, #10]
 80017f2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3720      	adds	r7, #32
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	08001afd 	.word	0x08001afd
 8001810:	cccccccd 	.word	0xcccccccd
 8001814:	08001c11 	.word	0x08001c11
 8001818:	40003800 	.word	0x40003800
 800181c:	40003400 	.word	0x40003400

08001820 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	4613      	mov	r3, r2
 800182c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d002      	beq.n	800183a <HAL_I2S_Transmit_DMA+0x1a>
 8001834:	88fb      	ldrh	r3, [r7, #6]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e08e      	b.n	800195c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b01      	cmp	r3, #1
 8001848:	d101      	bne.n	800184e <HAL_I2S_Transmit_DMA+0x2e>
 800184a:	2302      	movs	r3, #2
 800184c:	e086      	b.n	800195c <HAL_I2S_Transmit_DMA+0x13c>
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b01      	cmp	r3, #1
 8001860:	d005      	beq.n	800186e <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800186a:	2302      	movs	r3, #2
 800186c:	e076      	b.n	800195c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2203      	movs	r2, #3
 8001872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2200      	movs	r2, #0
 800187a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	2b03      	cmp	r3, #3
 8001892:	d002      	beq.n	800189a <HAL_I2S_Transmit_DMA+0x7a>
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	2b05      	cmp	r3, #5
 8001898:	d10a      	bne.n	80018b0 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 800189a:	88fb      	ldrh	r3, [r7, #6]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	b29a      	uxth	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80018a4:	88fb      	ldrh	r3, [r7, #6]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80018ae:	e005      	b.n	80018bc <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	88fa      	ldrh	r2, [r7, #6]
 80018b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	88fa      	ldrh	r2, [r7, #6]
 80018ba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c0:	4a28      	ldr	r2, [pc, #160]	; (8001964 <HAL_I2S_Transmit_DMA+0x144>)
 80018c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c8:	4a27      	ldr	r2, [pc, #156]	; (8001968 <HAL_I2S_Transmit_DMA+0x148>)
 80018ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d0:	4a26      	ldr	r2, [pc, #152]	; (800196c <HAL_I2S_Transmit_DMA+0x14c>)
 80018d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80018dc:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80018e4:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80018ec:	f7ff f894 	bl	8000a18 <HAL_DMA_Start_IT>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00f      	beq.n	8001916 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	f043 0208 	orr.w	r2, r3, #8
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e022      	b.n	800195c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	69db      	ldr	r3, [r3, #28]
 800191c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001920:	2b00      	cmp	r3, #0
 8001922:	d107      	bne.n	8001934 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	69da      	ldr	r2, [r3, #28]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001932:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d107      	bne.n	8001952 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f042 0202 	orr.w	r2, r2, #2
 8001950:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	080019db 	.word	0x080019db
 8001968:	08001999 	.word	0x08001999
 800196c:	080019f7 	.word	0x080019f7

08001970 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10e      	bne.n	80019cc <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0202 	bic.w	r2, r2, #2
 80019bc:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f006 fe03 	bl	80085d8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b084      	sub	sp, #16
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f006 fe19 	bl	8008620 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b084      	sub	sp, #16
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a02:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0203 	bic.w	r2, r2, #3
 8001a12:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2c:	f043 0208 	orr.w	r2, r3, #8
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f7ff ffa5 	bl	8001984 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	881a      	ldrh	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	1c9a      	adds	r2, r3, #2
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	3b01      	subs	r3, #1
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d10e      	bne.n	8001a96 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001a86:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f006 fda1 	bl	80085d8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68da      	ldr	r2, [r3, #12]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab0:	b292      	uxth	r2, r2
 8001ab2:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab8:	1c9a      	adds	r2, r3, #2
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10e      	bne.n	8001af4 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ae4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff ff3e 	bl	8001970 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	d13a      	bne.n	8001b8e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d109      	bne.n	8001b36 <I2S_IRQHandler+0x3a>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b2c:	2b40      	cmp	r3, #64	; 0x40
 8001b2e:	d102      	bne.n	8001b36 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ffb4 	bl	8001a9e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b3c:	2b40      	cmp	r3, #64	; 0x40
 8001b3e:	d126      	bne.n	8001b8e <I2S_IRQHandler+0x92>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 0320 	and.w	r3, r3, #32
 8001b4a:	2b20      	cmp	r3, #32
 8001b4c:	d11f      	bne.n	8001b8e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b5c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b80:	f043 0202 	orr.w	r2, r3, #2
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff fefb 	bl	8001984 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d136      	bne.n	8001c08 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d109      	bne.n	8001bb8 <I2S_IRQHandler+0xbc>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bae:	2b80      	cmp	r3, #128	; 0x80
 8001bb0:	d102      	bne.n	8001bb8 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ff45 	bl	8001a42 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	2b08      	cmp	r3, #8
 8001bc0:	d122      	bne.n	8001c08 <I2S_IRQHandler+0x10c>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0320 	and.w	r3, r3, #32
 8001bcc:	2b20      	cmp	r3, #32
 8001bce:	d11b      	bne.n	8001c08 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001bde:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	f043 0204 	orr.w	r2, r3, #4
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff febe 	bl	8001984 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001c08:	bf00      	nop
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4aa2      	ldr	r2, [pc, #648]	; (8001eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d101      	bne.n	8001c2e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001c2a:	4ba2      	ldr	r3, [pc, #648]	; (8001eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001c2c:	e001      	b.n	8001c32 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001c2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a9b      	ldr	r2, [pc, #620]	; (8001eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d101      	bne.n	8001c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001c48:	4b9a      	ldr	r3, [pc, #616]	; (8001eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001c4a:	e001      	b.n	8001c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001c4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c5c:	d004      	beq.n	8001c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f040 8099 	bne.w	8001d9a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d107      	bne.n	8001c82 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d002      	beq.n	8001c82 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f925 	bl	8001ecc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d107      	bne.n	8001c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d002      	beq.n	8001c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f9c8 	bl	800202c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca2:	2b40      	cmp	r3, #64	; 0x40
 8001ca4:	d13a      	bne.n	8001d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	f003 0320 	and.w	r3, r3, #32
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d035      	beq.n	8001d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a7e      	ldr	r2, [pc, #504]	; (8001eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d101      	bne.n	8001cbe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001cba:	4b7e      	ldr	r3, [pc, #504]	; (8001eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001cbc:	e001      	b.n	8001cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001cbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4979      	ldr	r1, [pc, #484]	; (8001eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001cca:	428b      	cmp	r3, r1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001cce:	4b79      	ldr	r3, [pc, #484]	; (8001eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001cd0:	e001      	b.n	8001cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001cd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cd6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cda:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001cea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	f043 0202 	orr.w	r2, r3, #2
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff fe34 	bl	8001984 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b08      	cmp	r3, #8
 8001d24:	f040 80be 	bne.w	8001ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f003 0320 	and.w	r3, r3, #32
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f000 80b8 	beq.w	8001ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d42:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a59      	ldr	r2, [pc, #356]	; (8001eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d101      	bne.n	8001d52 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001d4e:	4b59      	ldr	r3, [pc, #356]	; (8001eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001d50:	e001      	b.n	8001d56 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001d52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4954      	ldr	r1, [pc, #336]	; (8001eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001d5e:	428b      	cmp	r3, r1
 8001d60:	d101      	bne.n	8001d66 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001d62:	4b54      	ldr	r3, [pc, #336]	; (8001eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001d64:	e001      	b.n	8001d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001d66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d6e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001d70:	2300      	movs	r3, #0
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	f043 0204 	orr.w	r2, r3, #4
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff fdf6 	bl	8001984 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001d98:	e084      	b.n	8001ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d107      	bne.n	8001db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d002      	beq.n	8001db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f8be 	bl	8001f30 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d107      	bne.n	8001dce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f8fd 	bl	8001fc8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd4:	2b40      	cmp	r3, #64	; 0x40
 8001dd6:	d12f      	bne.n	8001e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	f003 0320 	and.w	r3, r3, #32
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d02a      	beq.n	8001e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001df0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a2e      	ldr	r2, [pc, #184]	; (8001eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d101      	bne.n	8001e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001dfc:	4b2d      	ldr	r3, [pc, #180]	; (8001eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001dfe:	e001      	b.n	8001e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001e00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4929      	ldr	r1, [pc, #164]	; (8001eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001e0c:	428b      	cmp	r3, r1
 8001e0e:	d101      	bne.n	8001e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001e10:	4b28      	ldr	r3, [pc, #160]	; (8001eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001e12:	e001      	b.n	8001e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001e14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e1c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	f043 0202 	orr.w	r2, r3, #2
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff fda6 	bl	8001984 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	d131      	bne.n	8001ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	f003 0320 	and.w	r3, r3, #32
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d02c      	beq.n	8001ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a17      	ldr	r2, [pc, #92]	; (8001eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d101      	bne.n	8001e5a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001e56:	4b17      	ldr	r3, [pc, #92]	; (8001eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001e58:	e001      	b.n	8001e5e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001e5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4912      	ldr	r1, [pc, #72]	; (8001eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001e66:	428b      	cmp	r3, r1
 8001e68:	d101      	bne.n	8001e6e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8001e6a:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001e6c:	e001      	b.n	8001e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8001e6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e72:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e76:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e86:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e94:	f043 0204 	orr.w	r2, r3, #4
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff fd71 	bl	8001984 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ea2:	e000      	b.n	8001ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001ea4:	bf00      	nop
}
 8001ea6:	bf00      	nop
 8001ea8:	3720      	adds	r7, #32
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40003800 	.word	0x40003800
 8001eb4:	40003400 	.word	0x40003400

08001eb8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	1c99      	adds	r1, r3, #2
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6251      	str	r1, [r2, #36]	; 0x24
 8001ede:	881a      	ldrh	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	3b01      	subs	r3, #1
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d113      	bne.n	8001f26 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f0c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d106      	bne.n	8001f26 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff ffc9 	bl	8001eb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	1c99      	adds	r1, r3, #2
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6251      	str	r1, [r2, #36]	; 0x24
 8001f42:	8819      	ldrh	r1, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a1d      	ldr	r2, [pc, #116]	; (8001fc0 <I2SEx_TxISR_I2SExt+0x90>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d101      	bne.n	8001f52 <I2SEx_TxISR_I2SExt+0x22>
 8001f4e:	4b1d      	ldr	r3, [pc, #116]	; (8001fc4 <I2SEx_TxISR_I2SExt+0x94>)
 8001f50:	e001      	b.n	8001f56 <I2SEx_TxISR_I2SExt+0x26>
 8001f52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f56:	460a      	mov	r2, r1
 8001f58:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	3b01      	subs	r3, #1
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d121      	bne.n	8001fb6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <I2SEx_TxISR_I2SExt+0x90>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d101      	bne.n	8001f80 <I2SEx_TxISR_I2SExt+0x50>
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <I2SEx_TxISR_I2SExt+0x94>)
 8001f7e:	e001      	b.n	8001f84 <I2SEx_TxISR_I2SExt+0x54>
 8001f80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	490d      	ldr	r1, [pc, #52]	; (8001fc0 <I2SEx_TxISR_I2SExt+0x90>)
 8001f8c:	428b      	cmp	r3, r1
 8001f8e:	d101      	bne.n	8001f94 <I2SEx_TxISR_I2SExt+0x64>
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <I2SEx_TxISR_I2SExt+0x94>)
 8001f92:	e001      	b.n	8001f98 <I2SEx_TxISR_I2SExt+0x68>
 8001f94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f9c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d106      	bne.n	8001fb6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7ff ff81 	bl	8001eb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40003800 	.word	0x40003800
 8001fc4:	40003400 	.word	0x40003400

08001fc8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68d8      	ldr	r0, [r3, #12]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fda:	1c99      	adds	r1, r3, #2
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001fe0:	b282      	uxth	r2, r0
 8001fe2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	3b01      	subs	r3, #1
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d113      	bne.n	8002024 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800200a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002010:	b29b      	uxth	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d106      	bne.n	8002024 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff ff4a 	bl	8001eb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002024:	bf00      	nop
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a20      	ldr	r2, [pc, #128]	; (80020bc <I2SEx_RxISR_I2SExt+0x90>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d101      	bne.n	8002042 <I2SEx_RxISR_I2SExt+0x16>
 800203e:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <I2SEx_RxISR_I2SExt+0x94>)
 8002040:	e001      	b.n	8002046 <I2SEx_RxISR_I2SExt+0x1a>
 8002042:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002046:	68d8      	ldr	r0, [r3, #12]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204c:	1c99      	adds	r1, r3, #2
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002052:	b282      	uxth	r2, r0
 8002054:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800205a:	b29b      	uxth	r3, r3
 800205c:	3b01      	subs	r3, #1
 800205e:	b29a      	uxth	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002068:	b29b      	uxth	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d121      	bne.n	80020b2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a12      	ldr	r2, [pc, #72]	; (80020bc <I2SEx_RxISR_I2SExt+0x90>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d101      	bne.n	800207c <I2SEx_RxISR_I2SExt+0x50>
 8002078:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <I2SEx_RxISR_I2SExt+0x94>)
 800207a:	e001      	b.n	8002080 <I2SEx_RxISR_I2SExt+0x54>
 800207c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	490d      	ldr	r1, [pc, #52]	; (80020bc <I2SEx_RxISR_I2SExt+0x90>)
 8002088:	428b      	cmp	r3, r1
 800208a:	d101      	bne.n	8002090 <I2SEx_RxISR_I2SExt+0x64>
 800208c:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <I2SEx_RxISR_I2SExt+0x94>)
 800208e:	e001      	b.n	8002094 <I2SEx_RxISR_I2SExt+0x68>
 8002090:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002094:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002098:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209e:	b29b      	uxth	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d106      	bne.n	80020b2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff ff03 	bl	8001eb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40003800 	.word	0x40003800
 80020c0:	40003400 	.word	0x40003400

080020c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e25b      	b.n	800258e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d075      	beq.n	80021ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020e2:	4ba3      	ldr	r3, [pc, #652]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d00c      	beq.n	8002108 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ee:	4ba0      	ldr	r3, [pc, #640]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d112      	bne.n	8002120 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020fa:	4b9d      	ldr	r3, [pc, #628]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002102:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002106:	d10b      	bne.n	8002120 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002108:	4b99      	ldr	r3, [pc, #612]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d05b      	beq.n	80021cc <HAL_RCC_OscConfig+0x108>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d157      	bne.n	80021cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e236      	b.n	800258e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002128:	d106      	bne.n	8002138 <HAL_RCC_OscConfig+0x74>
 800212a:	4b91      	ldr	r3, [pc, #580]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a90      	ldr	r2, [pc, #576]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e01d      	b.n	8002174 <HAL_RCC_OscConfig+0xb0>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002140:	d10c      	bne.n	800215c <HAL_RCC_OscConfig+0x98>
 8002142:	4b8b      	ldr	r3, [pc, #556]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a8a      	ldr	r2, [pc, #552]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	4b88      	ldr	r3, [pc, #544]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a87      	ldr	r2, [pc, #540]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e00b      	b.n	8002174 <HAL_RCC_OscConfig+0xb0>
 800215c:	4b84      	ldr	r3, [pc, #528]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a83      	ldr	r2, [pc, #524]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	4b81      	ldr	r3, [pc, #516]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a80      	ldr	r2, [pc, #512]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 800216e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d013      	beq.n	80021a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217c:	f7fe fa5e 	bl	800063c <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002184:	f7fe fa5a 	bl	800063c <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b64      	cmp	r3, #100	; 0x64
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e1fb      	b.n	800258e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002196:	4b76      	ldr	r3, [pc, #472]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0xc0>
 80021a2:	e014      	b.n	80021ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a4:	f7fe fa4a 	bl	800063c <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ac:	f7fe fa46 	bl	800063c <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b64      	cmp	r3, #100	; 0x64
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e1e7      	b.n	800258e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021be:	4b6c      	ldr	r3, [pc, #432]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0xe8>
 80021ca:	e000      	b.n	80021ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d063      	beq.n	80022a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021da:	4b65      	ldr	r3, [pc, #404]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00b      	beq.n	80021fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021e6:	4b62      	ldr	r3, [pc, #392]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d11c      	bne.n	800222c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021f2:	4b5f      	ldr	r3, [pc, #380]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d116      	bne.n	800222c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fe:	4b5c      	ldr	r3, [pc, #368]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d005      	beq.n	8002216 <HAL_RCC_OscConfig+0x152>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d001      	beq.n	8002216 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e1bb      	b.n	800258e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002216:	4b56      	ldr	r3, [pc, #344]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4952      	ldr	r1, [pc, #328]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222a:	e03a      	b.n	80022a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d020      	beq.n	8002276 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002234:	4b4f      	ldr	r3, [pc, #316]	; (8002374 <HAL_RCC_OscConfig+0x2b0>)
 8002236:	2201      	movs	r2, #1
 8002238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223a:	f7fe f9ff 	bl	800063c <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002242:	f7fe f9fb 	bl	800063c <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e19c      	b.n	800258e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002254:	4b46      	ldr	r3, [pc, #280]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002260:	4b43      	ldr	r3, [pc, #268]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	4940      	ldr	r1, [pc, #256]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002270:	4313      	orrs	r3, r2
 8002272:	600b      	str	r3, [r1, #0]
 8002274:	e015      	b.n	80022a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002276:	4b3f      	ldr	r3, [pc, #252]	; (8002374 <HAL_RCC_OscConfig+0x2b0>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7fe f9de 	bl	800063c <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002284:	f7fe f9da 	bl	800063c <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e17b      	b.n	800258e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002296:	4b36      	ldr	r3, [pc, #216]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d030      	beq.n	8002310 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d016      	beq.n	80022e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b6:	4b30      	ldr	r3, [pc, #192]	; (8002378 <HAL_RCC_OscConfig+0x2b4>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022bc:	f7fe f9be 	bl	800063c <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022c4:	f7fe f9ba 	bl	800063c <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e15b      	b.n	800258e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d6:	4b26      	ldr	r3, [pc, #152]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 80022d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0x200>
 80022e2:	e015      	b.n	8002310 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022e4:	4b24      	ldr	r3, [pc, #144]	; (8002378 <HAL_RCC_OscConfig+0x2b4>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ea:	f7fe f9a7 	bl	800063c <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022f2:	f7fe f9a3 	bl	800063c <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e144      	b.n	800258e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002304:	4b1a      	ldr	r3, [pc, #104]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1f0      	bne.n	80022f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 80a0 	beq.w	800245e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800231e:	2300      	movs	r3, #0
 8002320:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002322:	4b13      	ldr	r3, [pc, #76]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10f      	bne.n	800234e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	4a0e      	ldr	r2, [pc, #56]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800233c:	6413      	str	r3, [r2, #64]	; 0x40
 800233e:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002346:	60bb      	str	r3, [r7, #8]
 8002348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800234a:	2301      	movs	r3, #1
 800234c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234e:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_RCC_OscConfig+0x2b8>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002356:	2b00      	cmp	r3, #0
 8002358:	d121      	bne.n	800239e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800235a:	4b08      	ldr	r3, [pc, #32]	; (800237c <HAL_RCC_OscConfig+0x2b8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a07      	ldr	r2, [pc, #28]	; (800237c <HAL_RCC_OscConfig+0x2b8>)
 8002360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002366:	f7fe f969 	bl	800063c <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236c:	e011      	b.n	8002392 <HAL_RCC_OscConfig+0x2ce>
 800236e:	bf00      	nop
 8002370:	40023800 	.word	0x40023800
 8002374:	42470000 	.word	0x42470000
 8002378:	42470e80 	.word	0x42470e80
 800237c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002380:	f7fe f95c 	bl	800063c <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e0fd      	b.n	800258e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002392:	4b81      	ldr	r3, [pc, #516]	; (8002598 <HAL_RCC_OscConfig+0x4d4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d106      	bne.n	80023b4 <HAL_RCC_OscConfig+0x2f0>
 80023a6:	4b7d      	ldr	r3, [pc, #500]	; (800259c <HAL_RCC_OscConfig+0x4d8>)
 80023a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023aa:	4a7c      	ldr	r2, [pc, #496]	; (800259c <HAL_RCC_OscConfig+0x4d8>)
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	6713      	str	r3, [r2, #112]	; 0x70
 80023b2:	e01c      	b.n	80023ee <HAL_RCC_OscConfig+0x32a>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2b05      	cmp	r3, #5
 80023ba:	d10c      	bne.n	80023d6 <HAL_RCC_OscConfig+0x312>
 80023bc:	4b77      	ldr	r3, [pc, #476]	; (800259c <HAL_RCC_OscConfig+0x4d8>)
 80023be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c0:	4a76      	ldr	r2, [pc, #472]	; (800259c <HAL_RCC_OscConfig+0x4d8>)
 80023c2:	f043 0304 	orr.w	r3, r3, #4
 80023c6:	6713      	str	r3, [r2, #112]	; 0x70
 80023c8:	4b74      	ldr	r3, [pc, #464]	; (800259c <HAL_RCC_OscConfig+0x4d8>)
 80023ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023cc:	4a73      	ldr	r2, [pc, #460]	; (800259c <HAL_RCC_OscConfig+0x4d8>)
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	6713      	str	r3, [r2, #112]	; 0x70
 80023d4:	e00b      	b.n	80023ee <HAL_RCC_OscConfig+0x32a>
 80023d6:	4b71      	ldr	r3, [pc, #452]	; (800259c <HAL_RCC_OscConfig+0x4d8>)
 80023d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023da:	4a70      	ldr	r2, [pc, #448]	; (800259c <HAL_RCC_OscConfig+0x4d8>)
 80023dc:	f023 0301 	bic.w	r3, r3, #1
 80023e0:	6713      	str	r3, [r2, #112]	; 0x70
 80023e2:	4b6e      	ldr	r3, [pc, #440]	; (800259c <HAL_RCC_OscConfig+0x4d8>)
 80023e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e6:	4a6d      	ldr	r2, [pc, #436]	; (800259c <HAL_RCC_OscConfig+0x4d8>)
 80023e8:	f023 0304 	bic.w	r3, r3, #4
 80023ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d015      	beq.n	8002422 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f6:	f7fe f921 	bl	800063c <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023fc:	e00a      	b.n	8002414 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023fe:	f7fe f91d 	bl	800063c <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	f241 3288 	movw	r2, #5000	; 0x1388
 800240c:	4293      	cmp	r3, r2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e0bc      	b.n	800258e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002414:	4b61      	ldr	r3, [pc, #388]	; (800259c <HAL_RCC_OscConfig+0x4d8>)
 8002416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0ee      	beq.n	80023fe <HAL_RCC_OscConfig+0x33a>
 8002420:	e014      	b.n	800244c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002422:	f7fe f90b 	bl	800063c <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002428:	e00a      	b.n	8002440 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800242a:	f7fe f907 	bl	800063c <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f241 3288 	movw	r2, #5000	; 0x1388
 8002438:	4293      	cmp	r3, r2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e0a6      	b.n	800258e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002440:	4b56      	ldr	r3, [pc, #344]	; (800259c <HAL_RCC_OscConfig+0x4d8>)
 8002442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1ee      	bne.n	800242a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800244c:	7dfb      	ldrb	r3, [r7, #23]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d105      	bne.n	800245e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002452:	4b52      	ldr	r3, [pc, #328]	; (800259c <HAL_RCC_OscConfig+0x4d8>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	4a51      	ldr	r2, [pc, #324]	; (800259c <HAL_RCC_OscConfig+0x4d8>)
 8002458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800245c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 8092 	beq.w	800258c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002468:	4b4c      	ldr	r3, [pc, #304]	; (800259c <HAL_RCC_OscConfig+0x4d8>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 030c 	and.w	r3, r3, #12
 8002470:	2b08      	cmp	r3, #8
 8002472:	d05c      	beq.n	800252e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	2b02      	cmp	r3, #2
 800247a:	d141      	bne.n	8002500 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800247c:	4b48      	ldr	r3, [pc, #288]	; (80025a0 <HAL_RCC_OscConfig+0x4dc>)
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002482:	f7fe f8db 	bl	800063c <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800248a:	f7fe f8d7 	bl	800063c <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e078      	b.n	800258e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800249c:	4b3f      	ldr	r3, [pc, #252]	; (800259c <HAL_RCC_OscConfig+0x4d8>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1f0      	bne.n	800248a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69da      	ldr	r2, [r3, #28]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	431a      	orrs	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	019b      	lsls	r3, r3, #6
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024be:	085b      	lsrs	r3, r3, #1
 80024c0:	3b01      	subs	r3, #1
 80024c2:	041b      	lsls	r3, r3, #16
 80024c4:	431a      	orrs	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ca:	061b      	lsls	r3, r3, #24
 80024cc:	4933      	ldr	r1, [pc, #204]	; (800259c <HAL_RCC_OscConfig+0x4d8>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024d2:	4b33      	ldr	r3, [pc, #204]	; (80025a0 <HAL_RCC_OscConfig+0x4dc>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7fe f8b0 	bl	800063c <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e0:	f7fe f8ac 	bl	800063c <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e04d      	b.n	800258e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f2:	4b2a      	ldr	r3, [pc, #168]	; (800259c <HAL_RCC_OscConfig+0x4d8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x41c>
 80024fe:	e045      	b.n	800258c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002500:	4b27      	ldr	r3, [pc, #156]	; (80025a0 <HAL_RCC_OscConfig+0x4dc>)
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002506:	f7fe f899 	bl	800063c <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800250e:	f7fe f895 	bl	800063c <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e036      	b.n	800258e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002520:	4b1e      	ldr	r3, [pc, #120]	; (800259c <HAL_RCC_OscConfig+0x4d8>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1f0      	bne.n	800250e <HAL_RCC_OscConfig+0x44a>
 800252c:	e02e      	b.n	800258c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d101      	bne.n	800253a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e029      	b.n	800258e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800253a:	4b18      	ldr	r3, [pc, #96]	; (800259c <HAL_RCC_OscConfig+0x4d8>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	429a      	cmp	r2, r3
 800254c:	d11c      	bne.n	8002588 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002558:	429a      	cmp	r2, r3
 800255a:	d115      	bne.n	8002588 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002562:	4013      	ands	r3, r2
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002568:	4293      	cmp	r3, r2
 800256a:	d10d      	bne.n	8002588 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002576:	429a      	cmp	r2, r3
 8002578:	d106      	bne.n	8002588 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002584:	429a      	cmp	r2, r3
 8002586:	d001      	beq.n	800258c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e000      	b.n	800258e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40007000 	.word	0x40007000
 800259c:	40023800 	.word	0x40023800
 80025a0:	42470060 	.word	0x42470060

080025a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0cc      	b.n	8002752 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025b8:	4b68      	ldr	r3, [pc, #416]	; (800275c <HAL_RCC_ClockConfig+0x1b8>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d90c      	bls.n	80025e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c6:	4b65      	ldr	r3, [pc, #404]	; (800275c <HAL_RCC_ClockConfig+0x1b8>)
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ce:	4b63      	ldr	r3, [pc, #396]	; (800275c <HAL_RCC_ClockConfig+0x1b8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d001      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0b8      	b.n	8002752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d020      	beq.n	800262e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d005      	beq.n	8002604 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025f8:	4b59      	ldr	r3, [pc, #356]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	4a58      	ldr	r2, [pc, #352]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002602:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0308 	and.w	r3, r3, #8
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002610:	4b53      	ldr	r3, [pc, #332]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	4a52      	ldr	r2, [pc, #328]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800261a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800261c:	4b50      	ldr	r3, [pc, #320]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	494d      	ldr	r1, [pc, #308]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	4313      	orrs	r3, r2
 800262c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d044      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d107      	bne.n	8002652 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002642:	4b47      	ldr	r3, [pc, #284]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d119      	bne.n	8002682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e07f      	b.n	8002752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d003      	beq.n	8002662 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800265e:	2b03      	cmp	r3, #3
 8002660:	d107      	bne.n	8002672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002662:	4b3f      	ldr	r3, [pc, #252]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d109      	bne.n	8002682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e06f      	b.n	8002752 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002672:	4b3b      	ldr	r3, [pc, #236]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e067      	b.n	8002752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002682:	4b37      	ldr	r3, [pc, #220]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f023 0203 	bic.w	r2, r3, #3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	4934      	ldr	r1, [pc, #208]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002690:	4313      	orrs	r3, r2
 8002692:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002694:	f7fd ffd2 	bl	800063c <HAL_GetTick>
 8002698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269a:	e00a      	b.n	80026b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800269c:	f7fd ffce 	bl	800063c <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e04f      	b.n	8002752 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b2:	4b2b      	ldr	r3, [pc, #172]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 020c 	and.w	r2, r3, #12
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d1eb      	bne.n	800269c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026c4:	4b25      	ldr	r3, [pc, #148]	; (800275c <HAL_RCC_ClockConfig+0x1b8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 030f 	and.w	r3, r3, #15
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d20c      	bcs.n	80026ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d2:	4b22      	ldr	r3, [pc, #136]	; (800275c <HAL_RCC_ClockConfig+0x1b8>)
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026da:	4b20      	ldr	r3, [pc, #128]	; (800275c <HAL_RCC_ClockConfig+0x1b8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d001      	beq.n	80026ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e032      	b.n	8002752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026f8:	4b19      	ldr	r3, [pc, #100]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	4916      	ldr	r1, [pc, #88]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002706:	4313      	orrs	r3, r2
 8002708:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d009      	beq.n	800272a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002716:	4b12      	ldr	r3, [pc, #72]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	490e      	ldr	r1, [pc, #56]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	4313      	orrs	r3, r2
 8002728:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800272a:	f000 f821 	bl	8002770 <HAL_RCC_GetSysClockFreq>
 800272e:	4601      	mov	r1, r0
 8002730:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	091b      	lsrs	r3, r3, #4
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	4a0a      	ldr	r2, [pc, #40]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 800273c:	5cd3      	ldrb	r3, [r2, r3]
 800273e:	fa21 f303 	lsr.w	r3, r1, r3
 8002742:	4a09      	ldr	r2, [pc, #36]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002744:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002746:	4b09      	ldr	r3, [pc, #36]	; (800276c <HAL_RCC_ClockConfig+0x1c8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f7fd ff32 	bl	80005b4 <HAL_InitTick>

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40023c00 	.word	0x40023c00
 8002760:	40023800 	.word	0x40023800
 8002764:	08009728 	.word	0x08009728
 8002768:	20000014 	.word	0x20000014
 800276c:	20000000 	.word	0x20000000

08002770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002770:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8002774:	b084      	sub	sp, #16
 8002776:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	607b      	str	r3, [r7, #4]
 800277c:	2300      	movs	r3, #0
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	2300      	movs	r3, #0
 8002782:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002788:	4b67      	ldr	r3, [pc, #412]	; (8002928 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 030c 	and.w	r3, r3, #12
 8002790:	2b04      	cmp	r3, #4
 8002792:	d007      	beq.n	80027a4 <HAL_RCC_GetSysClockFreq+0x34>
 8002794:	2b08      	cmp	r3, #8
 8002796:	d008      	beq.n	80027aa <HAL_RCC_GetSysClockFreq+0x3a>
 8002798:	2b00      	cmp	r3, #0
 800279a:	f040 80bb 	bne.w	8002914 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800279e:	4b63      	ldr	r3, [pc, #396]	; (800292c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80027a0:	60bb      	str	r3, [r7, #8]
       break;
 80027a2:	e0ba      	b.n	800291a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027a4:	4b62      	ldr	r3, [pc, #392]	; (8002930 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80027a6:	60bb      	str	r3, [r7, #8]
      break;
 80027a8:	e0b7      	b.n	800291a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027aa:	4b5f      	ldr	r3, [pc, #380]	; (8002928 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027b2:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027b4:	4b5c      	ldr	r3, [pc, #368]	; (8002928 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d051      	beq.n	8002864 <HAL_RCC_GetSysClockFreq+0xf4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027c0:	4b59      	ldr	r3, [pc, #356]	; (8002928 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	099b      	lsrs	r3, r3, #6
 80027c6:	f04f 0400 	mov.w	r4, #0
 80027ca:	f240 11ff 	movw	r1, #511	; 0x1ff
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	ea03 0501 	and.w	r5, r3, r1
 80027d6:	ea04 0602 	and.w	r6, r4, r2
 80027da:	46ab      	mov	fp, r5
 80027dc:	46b4      	mov	ip, r6
 80027de:	eb1b 030b 	adds.w	r3, fp, fp
 80027e2:	eb4c 040c 	adc.w	r4, ip, ip
 80027e6:	469b      	mov	fp, r3
 80027e8:	46a4      	mov	ip, r4
 80027ea:	eb1b 0b05 	adds.w	fp, fp, r5
 80027ee:	eb4c 0c06 	adc.w	ip, ip, r6
 80027f2:	f04f 0100 	mov.w	r1, #0
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	ea4f 120c 	mov.w	r2, ip, lsl #4
 80027fe:	ea42 721b 	orr.w	r2, r2, fp, lsr #28
 8002802:	ea4f 110b 	mov.w	r1, fp, lsl #4
 8002806:	468b      	mov	fp, r1
 8002808:	4694      	mov	ip, r2
 800280a:	ebbb 0b05 	subs.w	fp, fp, r5
 800280e:	eb6c 0c06 	sbc.w	ip, ip, r6
 8002812:	f04f 0100 	mov.w	r1, #0
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 800281e:	ea42 725b 	orr.w	r2, r2, fp, lsr #29
 8002822:	ea4f 01cb 	mov.w	r1, fp, lsl #3
 8002826:	468b      	mov	fp, r1
 8002828:	4694      	mov	ip, r2
 800282a:	ebbb 0b05 	subs.w	fp, fp, r5
 800282e:	eb6c 0c06 	sbc.w	ip, ip, r6
 8002832:	f04f 0100 	mov.w	r1, #0
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	ea4f 420c 	mov.w	r2, ip, lsl #16
 800283e:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 8002842:	ea4f 410b 	mov.w	r1, fp, lsl #16
 8002846:	468b      	mov	fp, r1
 8002848:	4694      	mov	ip, r2
 800284a:	4658      	mov	r0, fp
 800284c:	4661      	mov	r1, ip
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f04f 0400 	mov.w	r4, #0
 8002854:	461a      	mov	r2, r3
 8002856:	4623      	mov	r3, r4
 8002858:	f7fd fd0a 	bl	8000270 <__aeabi_uldivmod>
 800285c:	4603      	mov	r3, r0
 800285e:	460c      	mov	r4, r1
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	e049      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002864:	4b30      	ldr	r3, [pc, #192]	; (8002928 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	099b      	lsrs	r3, r3, #6
 800286a:	f04f 0400 	mov.w	r4, #0
 800286e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	ea03 0501 	and.w	r5, r3, r1
 800287a:	ea04 0602 	and.w	r6, r4, r2
 800287e:	4629      	mov	r1, r5
 8002880:	4632      	mov	r2, r6
 8002882:	f04f 0300 	mov.w	r3, #0
 8002886:	f04f 0400 	mov.w	r4, #0
 800288a:	0154      	lsls	r4, r2, #5
 800288c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002890:	014b      	lsls	r3, r1, #5
 8002892:	4619      	mov	r1, r3
 8002894:	4622      	mov	r2, r4
 8002896:	1b49      	subs	r1, r1, r5
 8002898:	eb62 0206 	sbc.w	r2, r2, r6
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	f04f 0400 	mov.w	r4, #0
 80028a4:	0194      	lsls	r4, r2, #6
 80028a6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80028aa:	018b      	lsls	r3, r1, #6
 80028ac:	1a5b      	subs	r3, r3, r1
 80028ae:	eb64 0402 	sbc.w	r4, r4, r2
 80028b2:	f04f 0100 	mov.w	r1, #0
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	00e2      	lsls	r2, r4, #3
 80028bc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80028c0:	00d9      	lsls	r1, r3, #3
 80028c2:	460b      	mov	r3, r1
 80028c4:	4614      	mov	r4, r2
 80028c6:	195b      	adds	r3, r3, r5
 80028c8:	eb44 0406 	adc.w	r4, r4, r6
 80028cc:	f04f 0100 	mov.w	r1, #0
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	02a2      	lsls	r2, r4, #10
 80028d6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80028da:	0299      	lsls	r1, r3, #10
 80028dc:	460b      	mov	r3, r1
 80028de:	4614      	mov	r4, r2
 80028e0:	4618      	mov	r0, r3
 80028e2:	4621      	mov	r1, r4
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f04f 0400 	mov.w	r4, #0
 80028ea:	461a      	mov	r2, r3
 80028ec:	4623      	mov	r3, r4
 80028ee:	f7fd fcbf 	bl	8000270 <__aeabi_uldivmod>
 80028f2:	4603      	mov	r3, r0
 80028f4:	460c      	mov	r4, r1
 80028f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028f8:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	0c1b      	lsrs	r3, r3, #16
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	3301      	adds	r3, #1
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002910:	60bb      	str	r3, [r7, #8]
      break;
 8002912:	e002      	b.n	800291a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002914:	4b05      	ldr	r3, [pc, #20]	; (800292c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002916:	60bb      	str	r3, [r7, #8]
      break;
 8002918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800291a:	68bb      	ldr	r3, [r7, #8]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8002926:	bf00      	nop
 8002928:	40023800 	.word	0x40023800
 800292c:	00f42400 	.word	0x00f42400
 8002930:	01770000 	.word	0x01770000

08002934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002938:	4b03      	ldr	r3, [pc, #12]	; (8002948 <HAL_RCC_GetHCLKFreq+0x14>)
 800293a:	681b      	ldr	r3, [r3, #0]
}
 800293c:	4618      	mov	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	20000014 	.word	0x20000014

0800294c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002950:	f7ff fff0 	bl	8002934 <HAL_RCC_GetHCLKFreq>
 8002954:	4601      	mov	r1, r0
 8002956:	4b05      	ldr	r3, [pc, #20]	; (800296c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	0a9b      	lsrs	r3, r3, #10
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	4a03      	ldr	r2, [pc, #12]	; (8002970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002962:	5cd3      	ldrb	r3, [r2, r3]
 8002964:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002968:	4618      	mov	r0, r3
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40023800 	.word	0x40023800
 8002970:	08009738 	.word	0x08009738

08002974 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002980:	2300      	movs	r3, #0
 8002982:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d105      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002998:	2b00      	cmp	r3, #0
 800299a:	d035      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800299c:	4b62      	ldr	r3, [pc, #392]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029a2:	f7fd fe4b 	bl	800063c <HAL_GetTick>
 80029a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029a8:	e008      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80029aa:	f7fd fe47 	bl	800063c <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e0b0      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029bc:	4b5b      	ldr	r3, [pc, #364]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1f0      	bne.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	019a      	lsls	r2, r3, #6
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	071b      	lsls	r3, r3, #28
 80029d4:	4955      	ldr	r1, [pc, #340]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80029dc:	4b52      	ldr	r3, [pc, #328]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80029de:	2201      	movs	r2, #1
 80029e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029e2:	f7fd fe2b 	bl	800063c <HAL_GetTick>
 80029e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029e8:	e008      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80029ea:	f7fd fe27 	bl	800063c <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e090      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029fc:	4b4b      	ldr	r3, [pc, #300]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0f0      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 8083 	beq.w	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	4b44      	ldr	r3, [pc, #272]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	4a43      	ldr	r2, [pc, #268]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a24:	6413      	str	r3, [r2, #64]	; 0x40
 8002a26:	4b41      	ldr	r3, [pc, #260]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002a32:	4b3f      	ldr	r3, [pc, #252]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a3e      	ldr	r2, [pc, #248]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a3c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a3e:	f7fd fdfd 	bl	800063c <HAL_GetTick>
 8002a42:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002a44:	e008      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002a46:	f7fd fdf9 	bl	800063c <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e062      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002a58:	4b35      	ldr	r3, [pc, #212]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0f0      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a64:	4b31      	ldr	r3, [pc, #196]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a6c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d02f      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d028      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a82:	4b2a      	ldr	r3, [pc, #168]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a8a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a8c:	4b29      	ldr	r3, [pc, #164]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002a8e:	2201      	movs	r2, #1
 8002a90:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a92:	4b28      	ldr	r3, [pc, #160]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002a98:	4a24      	ldr	r2, [pc, #144]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a9e:	4b23      	ldr	r3, [pc, #140]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d114      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002aaa:	f7fd fdc7 	bl	800063c <HAL_GetTick>
 8002aae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab0:	e00a      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab2:	f7fd fdc3 	bl	800063c <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e02a      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac8:	4b18      	ldr	r3, [pc, #96]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0ee      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002adc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ae0:	d10d      	bne.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002ae2:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002af6:	490d      	ldr	r1, [pc, #52]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	608b      	str	r3, [r1, #8]
 8002afc:	e005      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002afe:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	4a0a      	ldr	r2, [pc, #40]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b04:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002b08:	6093      	str	r3, [r2, #8]
 8002b0a:	4b08      	ldr	r3, [pc, #32]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b16:	4905      	ldr	r1, [pc, #20]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	42470068 	.word	0x42470068
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	40007000 	.word	0x40007000
 8002b34:	42470e40 	.word	0x42470e40

08002b38 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b087      	sub	sp, #28
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d13d      	bne.n	8002bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002b56:	4b22      	ldr	r3, [pc, #136]	; (8002be0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b5e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d004      	beq.n	8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d12f      	bne.n	8002bca <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002b6a:	4b1e      	ldr	r3, [pc, #120]	; (8002be4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8002b6c:	617b      	str	r3, [r7, #20]
          break;
 8002b6e:	e02f      	b.n	8002bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002b70:	4b1b      	ldr	r3, [pc, #108]	; (8002be0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b7c:	d108      	bne.n	8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002b7e:	4b18      	ldr	r3, [pc, #96]	; (8002be0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b86:	4a18      	ldr	r2, [pc, #96]	; (8002be8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	e007      	b.n	8002ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002b90:	4b13      	ldr	r3, [pc, #76]	; (8002be0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b98:	4a14      	ldr	r2, [pc, #80]	; (8002bec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ba6:	099b      	lsrs	r3, r3, #6
 8002ba8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	fb02 f303 	mul.w	r3, r2, r3
 8002bb2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002bb4:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bba:	0f1b      	lsrs	r3, r3, #28
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc6:	617b      	str	r3, [r7, #20]
          break;
 8002bc8:	e002      	b.n	8002bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
          break;
 8002bce:	bf00      	nop
        }
      }
      break;
 8002bd0:	bf00      	nop
    }
  }
  return frequency;
 8002bd2:	697b      	ldr	r3, [r7, #20]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	371c      	adds	r7, #28
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	40023800 	.word	0x40023800
 8002be4:	00bb8000 	.word	0x00bb8000
 8002be8:	01770000 	.word	0x01770000
 8002bec:	00f42400 	.word	0x00f42400

08002bf0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e022      	b.n	8002c48 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d105      	bne.n	8002c1a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f005 ff23 	bl	8008a60 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f814 	bl	8002c50 <HAL_SD_InitCard>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e00a      	b.n	8002c48 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002c50:	b5b0      	push	{r4, r5, r7, lr}
 8002c52:	b08e      	sub	sp, #56	; 0x38
 8002c54:	af04      	add	r7, sp, #16
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002c60:	2300      	movs	r3, #0
 8002c62:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002c6c:	2376      	movs	r3, #118	; 0x76
 8002c6e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681d      	ldr	r5, [r3, #0]
 8002c74:	466c      	mov	r4, sp
 8002c76:	f107 0314 	add.w	r3, r7, #20
 8002c7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002c82:	f107 0308 	add.w	r3, r7, #8
 8002c86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c88:	4628      	mov	r0, r5
 8002c8a:	f002 f849 	bl	8004d20 <SDIO_Init>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002c94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e031      	b.n	8002d04 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002ca0:	4b1a      	ldr	r3, [pc, #104]	; (8002d0c <HAL_SD_InitCard+0xbc>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f002 f881 	bl	8004db2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002cb0:	4b16      	ldr	r3, [pc, #88]	; (8002d0c <HAL_SD_InitCard+0xbc>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 ff00 	bl	8003abc <SD_PowerON>
 8002cbc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00b      	beq.n	8002cdc <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e013      	b.n	8002d04 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 fe1f 	bl	8003920 <SD_InitCard>
 8002ce2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00b      	beq.n	8002d02 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3728      	adds	r7, #40	; 0x28
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bdb0      	pop	{r4, r5, r7, pc}
 8002d0c:	422580a0 	.word	0x422580a0

08002d10 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b092      	sub	sp, #72	; 0x48
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
 8002d1c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002d1e:	f7fd fc8d 	bl	800063c <HAL_GetTick>
 8002d22:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d107      	bne.n	8002d42 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d36:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e1d9      	b.n	80030f6 <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	f040 81cc 	bne.w	80030e8 <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002d56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	441a      	add	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d907      	bls.n	8002d74 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d68:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e1c0      	b.n	80030f6 <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2203      	movs	r2, #3
 8002d78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2200      	movs	r2, #0
 8002d82:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d002      	beq.n	8002d92 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8e:	025b      	lsls	r3, r3, #9
 8002d90:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f002 f89c 	bl	8004ed8 <SDMMC_CmdBlockLength>
 8002da0:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8002da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00f      	beq.n	8002dc8 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a9b      	ldr	r2, [pc, #620]	; (800301c <HAL_SD_ReadBlocks+0x30c>)
 8002dae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002db4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002db6:	431a      	orrs	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e196      	b.n	80030f6 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002dc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dcc:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	025b      	lsls	r3, r3, #9
 8002dd2:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002dd4:	2390      	movs	r3, #144	; 0x90
 8002dd6:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002de0:	2301      	movs	r3, #1
 8002de2:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f107 0214 	add.w	r2, r7, #20
 8002dec:	4611      	mov	r1, r2
 8002dee:	4618      	mov	r0, r3
 8002df0:	f002 f846 	bl	8004e80 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d90a      	bls.n	8002e10 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e06:	4618      	mov	r0, r3
 8002e08:	f002 f8aa 	bl	8004f60 <SDMMC_CmdReadMultiBlock>
 8002e0c:	6478      	str	r0, [r7, #68]	; 0x44
 8002e0e:	e009      	b.n	8002e24 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2201      	movs	r2, #1
 8002e14:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f002 f87d 	bl	8004f1c <SDMMC_CmdReadSingleBlock>
 8002e22:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d012      	beq.n	8002e50 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a7b      	ldr	r2, [pc, #492]	; (800301c <HAL_SD_ReadBlocks+0x30c>)
 8002e30:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e152      	b.n	80030f6 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002e54:	e061      	b.n	8002f1a <HAL_SD_ReadBlocks+0x20a>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d03c      	beq.n	8002ede <HAL_SD_ReadBlocks+0x1ce>
 8002e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d039      	beq.n	8002ede <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	643b      	str	r3, [r7, #64]	; 0x40
 8002e6e:	e033      	b.n	8002ed8 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f001 ff7e 	bl	8004d76 <SDIO_ReadFIFO>
 8002e7a:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e82:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e86:	3301      	adds	r3, #1
 8002e88:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e92:	0a1b      	lsrs	r3, r3, #8
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e98:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea8:	0c1b      	lsrs	r3, r3, #16
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eae:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebe:	0e1b      	lsrs	r3, r3, #24
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec8:	3301      	adds	r3, #1
 8002eca:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8002ed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	643b      	str	r3, [r7, #64]	; 0x40
 8002ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eda:	2b07      	cmp	r3, #7
 8002edc:	d9c8      	bls.n	8002e70 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002ede:	f7fd fbad 	bl	800063c <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d902      	bls.n	8002ef4 <HAL_SD_ReadBlocks+0x1e4>
 8002eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d112      	bne.n	8002f1a <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a48      	ldr	r2, [pc, #288]	; (800301c <HAL_SD_ReadBlocks+0x30c>)
 8002efa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f00:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e0ed      	b.n	80030f6 <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f20:	f240 332a 	movw	r3, #810	; 0x32a
 8002f24:	4013      	ands	r3, r2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d095      	beq.n	8002e56 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d022      	beq.n	8002f7e <HAL_SD_ReadBlocks+0x26e>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d91f      	bls.n	8002f7e <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d01b      	beq.n	8002f7e <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f002 f86e 	bl	800502c <SDMMC_CmdStopTransfer>
 8002f50:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d012      	beq.n	8002f7e <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a2f      	ldr	r2, [pc, #188]	; (800301c <HAL_SD_ReadBlocks+0x30c>)
 8002f5e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f66:	431a      	orrs	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e0bb      	b.n	80030f6 <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f84:	f003 0308 	and.w	r3, r3, #8
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d012      	beq.n	8002fb2 <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a22      	ldr	r2, [pc, #136]	; (800301c <HAL_SD_ReadBlocks+0x30c>)
 8002f92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f98:	f043 0208 	orr.w	r2, r3, #8
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e0a1      	b.n	80030f6 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d012      	beq.n	8002fe6 <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a15      	ldr	r2, [pc, #84]	; (800301c <HAL_SD_ReadBlocks+0x30c>)
 8002fc6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fcc:	f043 0202 	orr.w	r2, r3, #2
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e087      	b.n	80030f6 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fec:	f003 0320 	and.w	r3, r3, #32
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d064      	beq.n	80030be <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a08      	ldr	r2, [pc, #32]	; (800301c <HAL_SD_ReadBlocks+0x30c>)
 8002ffa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003000:	f043 0220 	orr.w	r2, r3, #32
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e06d      	b.n	80030f6 <HAL_SD_ReadBlocks+0x3e6>
 800301a:	bf00      	nop
 800301c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	f001 fea6 	bl	8004d76 <SDIO_ReadFIFO>
 800302a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800302c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302e:	b2da      	uxtb	r2, r3
 8003030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003032:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003036:	3301      	adds	r3, #1
 8003038:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800303a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800303c:	3b01      	subs	r3, #1
 800303e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003042:	0a1b      	lsrs	r3, r3, #8
 8003044:	b2da      	uxtb	r2, r3
 8003046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003048:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800304a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304c:	3301      	adds	r3, #1
 800304e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003052:	3b01      	subs	r3, #1
 8003054:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003058:	0c1b      	lsrs	r3, r3, #16
 800305a:	b2da      	uxtb	r2, r3
 800305c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003062:	3301      	adds	r3, #1
 8003064:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003068:	3b01      	subs	r3, #1
 800306a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306e:	0e1b      	lsrs	r3, r3, #24
 8003070:	b2da      	uxtb	r2, r3
 8003072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003074:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003078:	3301      	adds	r3, #1
 800307a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800307c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800307e:	3b01      	subs	r3, #1
 8003080:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003082:	f7fd fadb 	bl	800063c <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800308e:	429a      	cmp	r2, r3
 8003090:	d902      	bls.n	8003098 <HAL_SD_ReadBlocks+0x388>
 8003092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003094:	2b00      	cmp	r3, #0
 8003096:	d112      	bne.n	80030be <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a18      	ldr	r2, [pc, #96]	; (8003100 <HAL_SD_ReadBlocks+0x3f0>)
 800309e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e01b      	b.n	80030f6 <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d002      	beq.n	80030d2 <HAL_SD_ReadBlocks+0x3c2>
 80030cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1a6      	bne.n	8003020 <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f240 523a 	movw	r2, #1338	; 0x53a
 80030da:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80030e4:	2300      	movs	r3, #0
 80030e6:	e006      	b.n	80030f6 <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
  }
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3748      	adds	r7, #72	; 0x48
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	004005ff 	.word	0x004005ff

08003104 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b092      	sub	sp, #72	; 0x48
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
 8003110:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003112:	f7fd fa93 	bl	800063c <HAL_GetTick>
 8003116:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d107      	bne.n	8003136 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e184      	b.n	8003440 <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b01      	cmp	r3, #1
 8003140:	f040 8177 	bne.w	8003432 <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800314a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	441a      	add	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003154:	429a      	cmp	r2, r3
 8003156:	d907      	bls.n	8003168 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e16b      	b.n	8003440 <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2203      	movs	r2, #3
 800316c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2200      	movs	r2, #0
 8003176:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317c:	2b01      	cmp	r3, #1
 800317e:	d002      	beq.n	8003186 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003182:	025b      	lsls	r3, r3, #9
 8003184:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800318e:	4618      	mov	r0, r3
 8003190:	f001 fea2 	bl	8004ed8 <SDMMC_CmdBlockLength>
 8003194:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8003196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00f      	beq.n	80031bc <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a9d      	ldr	r2, [pc, #628]	; (8003418 <HAL_SD_WriteBlocks+0x314>)
 80031a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031aa:	431a      	orrs	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e141      	b.n	8003440 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80031bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031c0:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	025b      	lsls	r3, r3, #9
 80031c6:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80031c8:	2390      	movs	r3, #144	; 0x90
 80031ca:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80031cc:	2300      	movs	r3, #0
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80031d0:	2300      	movs	r3, #0
 80031d2:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80031d4:	2301      	movs	r3, #1
 80031d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f107 0218 	add.w	r2, r7, #24
 80031e0:	4611      	mov	r1, r2
 80031e2:	4618      	mov	r0, r3
 80031e4:	f001 fe4c 	bl	8004e80 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d90a      	bls.n	8003204 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2220      	movs	r2, #32
 80031f2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031fa:	4618      	mov	r0, r3
 80031fc:	f001 fef4 	bl	8004fe8 <SDMMC_CmdWriteMultiBlock>
 8003200:	6478      	str	r0, [r7, #68]	; 0x44
 8003202:	e009      	b.n	8003218 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2210      	movs	r2, #16
 8003208:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003210:	4618      	mov	r0, r3
 8003212:	f001 fec7 	bl	8004fa4 <SDMMC_CmdWriteSingleBlock>
 8003216:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800321a:	2b00      	cmp	r3, #0
 800321c:	d012      	beq.n	8003244 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a7d      	ldr	r2, [pc, #500]	; (8003418 <HAL_SD_WriteBlocks+0x314>)
 8003224:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800322a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800322c:	431a      	orrs	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e0fd      	b.n	8003440 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003248:	e065      	b.n	8003316 <HAL_SD_WriteBlocks+0x212>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d040      	beq.n	80032da <HAL_SD_WriteBlocks+0x1d6>
 8003258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800325a:	2b00      	cmp	r3, #0
 800325c:	d03d      	beq.n	80032da <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800325e:	2300      	movs	r3, #0
 8003260:	643b      	str	r3, [r7, #64]	; 0x40
 8003262:	e037      	b.n	80032d4 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8003264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800326a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800326c:	3301      	adds	r3, #1
 800326e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003272:	3b01      	subs	r3, #1
 8003274:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	021a      	lsls	r2, r3, #8
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	4313      	orrs	r3, r2
 8003280:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003284:	3301      	adds	r3, #1
 8003286:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800328a:	3b01      	subs	r3, #1
 800328c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800328e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	041a      	lsls	r2, r3, #16
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	4313      	orrs	r3, r2
 8003298:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800329a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329c:	3301      	adds	r3, #1
 800329e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80032a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032a2:	3b01      	subs	r3, #1
 80032a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80032a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	061a      	lsls	r2, r3, #24
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80032b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b4:	3301      	adds	r3, #1
 80032b6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80032b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ba:	3b01      	subs	r3, #1
 80032bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f107 0214 	add.w	r2, r7, #20
 80032c6:	4611      	mov	r1, r2
 80032c8:	4618      	mov	r0, r3
 80032ca:	f001 fd61 	bl	8004d90 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80032ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032d0:	3301      	adds	r3, #1
 80032d2:	643b      	str	r3, [r7, #64]	; 0x40
 80032d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032d6:	2b07      	cmp	r3, #7
 80032d8:	d9c4      	bls.n	8003264 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80032da:	f7fd f9af 	bl	800063c <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d902      	bls.n	80032f0 <HAL_SD_WriteBlocks+0x1ec>
 80032ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d112      	bne.n	8003316 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a48      	ldr	r2, [pc, #288]	; (8003418 <HAL_SD_WriteBlocks+0x314>)
 80032f6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032fe:	431a      	orrs	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e094      	b.n	8003440 <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800331c:	f240 331a 	movw	r3, #794	; 0x31a
 8003320:	4013      	ands	r3, r2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d091      	beq.n	800324a <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800332c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003330:	2b00      	cmp	r3, #0
 8003332:	d022      	beq.n	800337a <HAL_SD_WriteBlocks+0x276>
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d91f      	bls.n	800337a <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333e:	2b03      	cmp	r3, #3
 8003340:	d01b      	beq.n	800337a <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f001 fe70 	bl	800502c <SDMMC_CmdStopTransfer>
 800334c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800334e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003350:	2b00      	cmp	r3, #0
 8003352:	d012      	beq.n	800337a <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a2f      	ldr	r2, [pc, #188]	; (8003418 <HAL_SD_WriteBlocks+0x314>)
 800335a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003362:	431a      	orrs	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e062      	b.n	8003440 <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003380:	f003 0308 	and.w	r3, r3, #8
 8003384:	2b00      	cmp	r3, #0
 8003386:	d012      	beq.n	80033ae <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a22      	ldr	r2, [pc, #136]	; (8003418 <HAL_SD_WriteBlocks+0x314>)
 800338e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003394:	f043 0208 	orr.w	r2, r3, #8
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e048      	b.n	8003440 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d012      	beq.n	80033e2 <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a15      	ldr	r2, [pc, #84]	; (8003418 <HAL_SD_WriteBlocks+0x314>)
 80033c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c8:	f043 0202 	orr.w	r2, r3, #2
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e02e      	b.n	8003440 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d015      	beq.n	800341c <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a08      	ldr	r2, [pc, #32]	; (8003418 <HAL_SD_WriteBlocks+0x314>)
 80033f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fc:	f043 0210 	orr.w	r2, r3, #16
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e014      	b.n	8003440 <HAL_SD_WriteBlocks+0x33c>
 8003416:	bf00      	nop
 8003418:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f240 523a 	movw	r2, #1338	; 0x53a
 8003424:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800342e:	2300      	movs	r3, #0
 8003430:	e006      	b.n	8003440 <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003436:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
  }
}
 8003440:	4618      	mov	r0, r3
 8003442:	3748      	adds	r7, #72	; 0x48
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003456:	0f9b      	lsrs	r3, r3, #30
 8003458:	b2da      	uxtb	r2, r3
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003462:	0e9b      	lsrs	r3, r3, #26
 8003464:	b2db      	uxtb	r3, r3
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	b2da      	uxtb	r2, r3
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003474:	0e1b      	lsrs	r3, r3, #24
 8003476:	b2db      	uxtb	r3, r3
 8003478:	f003 0303 	and.w	r3, r3, #3
 800347c:	b2da      	uxtb	r2, r3
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003486:	0c1b      	lsrs	r3, r3, #16
 8003488:	b2da      	uxtb	r2, r3
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003492:	0a1b      	lsrs	r3, r3, #8
 8003494:	b2da      	uxtb	r2, r3
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034a8:	0d1b      	lsrs	r3, r3, #20
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034b4:	0c1b      	lsrs	r3, r3, #16
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	f003 030f 	and.w	r3, r3, #15
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034c6:	0bdb      	lsrs	r3, r3, #15
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034d8:	0b9b      	lsrs	r3, r3, #14
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034ea:	0b5b      	lsrs	r3, r3, #13
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034fc:	0b1b      	lsrs	r3, r3, #12
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	b2da      	uxtb	r2, r3
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2200      	movs	r2, #0
 800350e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003514:	2b00      	cmp	r3, #0
 8003516:	d163      	bne.n	80035e0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800351c:	009a      	lsls	r2, r3, #2
 800351e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003522:	4013      	ands	r3, r2
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003528:	0f92      	lsrs	r2, r2, #30
 800352a:	431a      	orrs	r2, r3
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003534:	0edb      	lsrs	r3, r3, #27
 8003536:	b2db      	uxtb	r3, r3
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	b2da      	uxtb	r2, r3
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003546:	0e1b      	lsrs	r3, r3, #24
 8003548:	b2db      	uxtb	r3, r3
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	b2da      	uxtb	r2, r3
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003558:	0d5b      	lsrs	r3, r3, #21
 800355a:	b2db      	uxtb	r3, r3
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	b2da      	uxtb	r2, r3
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800356a:	0c9b      	lsrs	r3, r3, #18
 800356c:	b2db      	uxtb	r3, r3
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	b2da      	uxtb	r2, r3
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800357c:	0bdb      	lsrs	r3, r3, #15
 800357e:	b2db      	uxtb	r3, r3
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	b2da      	uxtb	r2, r3
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	7e1b      	ldrb	r3, [r3, #24]
 8003598:	b2db      	uxtb	r3, r3
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	3302      	adds	r3, #2
 80035a0:	2201      	movs	r2, #1
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80035aa:	fb02 f203 	mul.w	r2, r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	7a1b      	ldrb	r3, [r3, #8]
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	f003 030f 	and.w	r3, r3, #15
 80035bc:	2201      	movs	r2, #1
 80035be:	409a      	lsls	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80035cc:	0a52      	lsrs	r2, r2, #9
 80035ce:	fb02 f203 	mul.w	r2, r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035dc:	661a      	str	r2, [r3, #96]	; 0x60
 80035de:	e031      	b.n	8003644 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d11d      	bne.n	8003624 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035ec:	041b      	lsls	r3, r3, #16
 80035ee:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035f6:	0c1b      	lsrs	r3, r3, #16
 80035f8:	431a      	orrs	r2, r3
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	3301      	adds	r3, #1
 8003604:	029a      	lsls	r2, r3, #10
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003618:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	661a      	str	r2, [r3, #96]	; 0x60
 8003622:	e00f      	b.n	8003644 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a58      	ldr	r2, [pc, #352]	; (800378c <HAL_SD_GetCardCSD+0x344>)
 800362a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003630:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e09d      	b.n	8003780 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003648:	0b9b      	lsrs	r3, r3, #14
 800364a:	b2db      	uxtb	r3, r3
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	b2da      	uxtb	r2, r3
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800365a:	09db      	lsrs	r3, r3, #7
 800365c:	b2db      	uxtb	r3, r3
 800365e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003662:	b2da      	uxtb	r2, r3
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800366c:	b2db      	uxtb	r3, r3
 800366e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003672:	b2da      	uxtb	r2, r3
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367c:	0fdb      	lsrs	r3, r3, #31
 800367e:	b2da      	uxtb	r2, r3
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003688:	0f5b      	lsrs	r3, r3, #29
 800368a:	b2db      	uxtb	r3, r3
 800368c:	f003 0303 	and.w	r3, r3, #3
 8003690:	b2da      	uxtb	r2, r3
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369a:	0e9b      	lsrs	r3, r3, #26
 800369c:	b2db      	uxtb	r3, r3
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ac:	0d9b      	lsrs	r3, r3, #22
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	f003 030f 	and.w	r3, r3, #15
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036be:	0d5b      	lsrs	r3, r3, #21
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036da:	0c1b      	lsrs	r3, r3, #16
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ee:	0bdb      	lsrs	r3, r3, #15
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003702:	0b9b      	lsrs	r3, r3, #14
 8003704:	b2db      	uxtb	r3, r3
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	b2da      	uxtb	r2, r3
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003716:	0b5b      	lsrs	r3, r3, #13
 8003718:	b2db      	uxtb	r3, r3
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	b2da      	uxtb	r2, r3
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372a:	0b1b      	lsrs	r3, r3, #12
 800372c:	b2db      	uxtb	r3, r3
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	b2da      	uxtb	r2, r3
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373e:	0a9b      	lsrs	r3, r3, #10
 8003740:	b2db      	uxtb	r3, r3
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	b2da      	uxtb	r2, r3
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003752:	0a1b      	lsrs	r3, r3, #8
 8003754:	b2db      	uxtb	r3, r3
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	b2da      	uxtb	r2, r3
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003766:	085b      	lsrs	r3, r3, #1
 8003768:	b2db      	uxtb	r3, r3
 800376a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800376e:	b2da      	uxtb	r2, r3
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	004005ff 	.word	0x004005ff

08003790 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80037e8:	b5b0      	push	{r4, r5, r7, lr}
 80037ea:	b08e      	sub	sp, #56	; 0x38
 80037ec:	af04      	add	r7, sp, #16
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2203      	movs	r2, #3
 80037f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	2b03      	cmp	r3, #3
 8003800:	d02e      	beq.n	8003860 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003808:	d106      	bne.n	8003818 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	639a      	str	r2, [r3, #56]	; 0x38
 8003816:	e029      	b.n	800386c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800381e:	d10a      	bne.n	8003836 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 fa01 	bl	8003c28 <SD_WideBus_Enable>
 8003826:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	639a      	str	r2, [r3, #56]	; 0x38
 8003834:	e01a      	b.n	800386c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10a      	bne.n	8003852 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 fa3e 	bl	8003cbe <SD_WideBus_Disable>
 8003842:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	639a      	str	r2, [r3, #56]	; 0x38
 8003850:	e00c      	b.n	800386c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003856:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	639a      	str	r2, [r3, #56]	; 0x38
 800385e:	e005      	b.n	800386c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003864:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003870:	2b00      	cmp	r3, #0
 8003872:	d009      	beq.n	8003888 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a18      	ldr	r2, [pc, #96]	; (80038dc <HAL_SD_ConfigWideBusOperation+0xf4>)
 800387a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e024      	b.n	80038d2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681d      	ldr	r5, [r3, #0]
 80038ae:	466c      	mov	r4, sp
 80038b0:	f107 0318 	add.w	r3, r7, #24
 80038b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80038b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80038bc:	f107 030c 	add.w	r3, r7, #12
 80038c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038c2:	4628      	mov	r0, r5
 80038c4:	f001 fa2c 	bl	8004d20 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3728      	adds	r7, #40	; 0x28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bdb0      	pop	{r4, r5, r7, pc}
 80038da:	bf00      	nop
 80038dc:	004005ff 	.word	0x004005ff

080038e0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80038e8:	2300      	movs	r3, #0
 80038ea:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80038ec:	f107 030c 	add.w	r3, r7, #12
 80038f0:	4619      	mov	r1, r3
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f970 	bl	8003bd8 <SD_SendStatus>
 80038f8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d005      	beq.n	800390c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	0a5b      	lsrs	r3, r3, #9
 8003910:	f003 030f 	and.w	r3, r3, #15
 8003914:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003916:	693b      	ldr	r3, [r7, #16]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3718      	adds	r7, #24
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003920:	b5b0      	push	{r4, r5, r7, lr}
 8003922:	b094      	sub	sp, #80	; 0x50
 8003924:	af04      	add	r7, sp, #16
 8003926:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003928:	2301      	movs	r3, #1
 800392a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f001 fa4d 	bl	8004dd0 <SDIO_GetPowerState>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d102      	bne.n	8003942 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800393c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003940:	e0b7      	b.n	8003ab2 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003946:	2b03      	cmp	r3, #3
 8003948:	d02f      	beq.n	80039aa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f001 fc76 	bl	8005240 <SDMMC_CmdSendCID>
 8003954:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <SD_InitCard+0x40>
    {
      return errorstate;
 800395c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800395e:	e0a8      	b.n	8003ab2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2100      	movs	r1, #0
 8003966:	4618      	mov	r0, r3
 8003968:	f001 fa77 	bl	8004e5a <SDIO_GetResponse>
 800396c:	4602      	mov	r2, r0
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2104      	movs	r1, #4
 8003978:	4618      	mov	r0, r3
 800397a:	f001 fa6e 	bl	8004e5a <SDIO_GetResponse>
 800397e:	4602      	mov	r2, r0
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2108      	movs	r1, #8
 800398a:	4618      	mov	r0, r3
 800398c:	f001 fa65 	bl	8004e5a <SDIO_GetResponse>
 8003990:	4602      	mov	r2, r0
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	210c      	movs	r1, #12
 800399c:	4618      	mov	r0, r3
 800399e:	f001 fa5c 	bl	8004e5a <SDIO_GetResponse>
 80039a2:	4602      	mov	r2, r0
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ae:	2b03      	cmp	r3, #3
 80039b0:	d00d      	beq.n	80039ce <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f107 020e 	add.w	r2, r7, #14
 80039ba:	4611      	mov	r1, r2
 80039bc:	4618      	mov	r0, r3
 80039be:	f001 fc7c 	bl	80052ba <SDMMC_CmdSetRelAdd>
 80039c2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80039c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <SD_InitCard+0xae>
    {
      return errorstate;
 80039ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039cc:	e071      	b.n	8003ab2 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d2:	2b03      	cmp	r3, #3
 80039d4:	d036      	beq.n	8003a44 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80039d6:	89fb      	ldrh	r3, [r7, #14]
 80039d8:	461a      	mov	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e6:	041b      	lsls	r3, r3, #16
 80039e8:	4619      	mov	r1, r3
 80039ea:	4610      	mov	r0, r2
 80039ec:	f001 fc46 	bl	800527c <SDMMC_CmdSendCSD>
 80039f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80039f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <SD_InitCard+0xdc>
    {
      return errorstate;
 80039f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039fa:	e05a      	b.n	8003ab2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2100      	movs	r1, #0
 8003a02:	4618      	mov	r0, r3
 8003a04:	f001 fa29 	bl	8004e5a <SDIO_GetResponse>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2104      	movs	r1, #4
 8003a14:	4618      	mov	r0, r3
 8003a16:	f001 fa20 	bl	8004e5a <SDIO_GetResponse>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2108      	movs	r1, #8
 8003a26:	4618      	mov	r0, r3
 8003a28:	f001 fa17 	bl	8004e5a <SDIO_GetResponse>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	210c      	movs	r1, #12
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f001 fa0e 	bl	8004e5a <SDIO_GetResponse>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2104      	movs	r1, #4
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f001 fa05 	bl	8004e5a <SDIO_GetResponse>
 8003a50:	4603      	mov	r3, r0
 8003a52:	0d1a      	lsrs	r2, r3, #20
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003a58:	f107 0310 	add.w	r3, r7, #16
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff fcf2 	bl	8003448 <HAL_SD_GetCardCSD>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003a6e:	e020      	b.n	8003ab2 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6819      	ldr	r1, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a78:	041b      	lsls	r3, r3, #16
 8003a7a:	f04f 0400 	mov.w	r4, #0
 8003a7e:	461a      	mov	r2, r3
 8003a80:	4623      	mov	r3, r4
 8003a82:	4608      	mov	r0, r1
 8003a84:	f001 faf4 	bl	8005070 <SDMMC_CmdSelDesel>
 8003a88:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <SD_InitCard+0x174>
  {
    return errorstate;
 8003a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a92:	e00e      	b.n	8003ab2 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681d      	ldr	r5, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	466c      	mov	r4, sp
 8003a9c:	f103 0210 	add.w	r2, r3, #16
 8003aa0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003aa2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003aaa:	4628      	mov	r0, r5
 8003aac:	f001 f938 	bl	8004d20 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3740      	adds	r7, #64	; 0x40
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003abc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	2300      	movs	r3, #0
 8003ace:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f001 faee 	bl	80050b6 <SDMMC_CmdGoIdleState>
 8003ada:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	e072      	b.n	8003bcc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f001 fb01 	bl	80050f2 <SDMMC_CmdOperCond>
 8003af0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00d      	beq.n	8003b14 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f001 fad7 	bl	80050b6 <SDMMC_CmdGoIdleState>
 8003b08:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d004      	beq.n	8003b1a <SD_PowerON+0x5e>
    {
      return errorstate;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	e05b      	b.n	8003bcc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d137      	bne.n	8003b92 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2100      	movs	r1, #0
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f001 fb01 	bl	8005130 <SDMMC_CmdAppCommand>
 8003b2e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d02d      	beq.n	8003b92 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b36:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003b3a:	e047      	b.n	8003bcc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2100      	movs	r1, #0
 8003b42:	4618      	mov	r0, r3
 8003b44:	f001 faf4 	bl	8005130 <SDMMC_CmdAppCommand>
 8003b48:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <SD_PowerON+0x98>
    {
      return errorstate;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	e03b      	b.n	8003bcc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	491e      	ldr	r1, [pc, #120]	; (8003bd4 <SD_PowerON+0x118>)
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f001 fb0a 	bl	8005174 <SDMMC_CmdAppOperCommand>
 8003b60:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003b68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003b6c:	e02e      	b.n	8003bcc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2100      	movs	r1, #0
 8003b74:	4618      	mov	r0, r3
 8003b76:	f001 f970 	bl	8004e5a <SDIO_GetResponse>
 8003b7a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	0fdb      	lsrs	r3, r3, #31
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d101      	bne.n	8003b88 <SD_PowerON+0xcc>
 8003b84:	2301      	movs	r3, #1
 8003b86:	e000      	b.n	8003b8a <SD_PowerON+0xce>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	613b      	str	r3, [r7, #16]

    count++;
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d802      	bhi.n	8003ba2 <SD_PowerON+0xe6>
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0cc      	beq.n	8003b3c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d902      	bls.n	8003bb2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003bac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bb0:	e00c      	b.n	8003bcc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	645a      	str	r2, [r3, #68]	; 0x44
 8003bc2:	e002      	b.n	8003bca <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	c1100000 	.word	0xc1100000

08003bd8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d102      	bne.n	8003bee <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003be8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bec:	e018      	b.n	8003c20 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf6:	041b      	lsls	r3, r3, #16
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	f001 fb7e 	bl	80052fc <SDMMC_CmdSendStatus>
 8003c00:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <SD_SendStatus+0x34>
  {
    return errorstate;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	e009      	b.n	8003c20 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2100      	movs	r1, #0
 8003c12:	4618      	mov	r0, r3
 8003c14:	f001 f921 	bl	8004e5a <SDIO_GetResponse>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003c30:	2300      	movs	r3, #0
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	2300      	movs	r3, #0
 8003c36:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f001 f90b 	bl	8004e5a <SDIO_GetResponse>
 8003c44:	4603      	mov	r3, r0
 8003c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c4e:	d102      	bne.n	8003c56 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003c50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c54:	e02f      	b.n	8003cb6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003c56:	f107 030c 	add.w	r3, r7, #12
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 f879 	bl	8003d54 <SD_FindSCR>
 8003c62:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	e023      	b.n	8003cb6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d01c      	beq.n	8003cb2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c80:	041b      	lsls	r3, r3, #16
 8003c82:	4619      	mov	r1, r3
 8003c84:	4610      	mov	r0, r2
 8003c86:	f001 fa53 	bl	8005130 <SDMMC_CmdAppCommand>
 8003c8a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	e00f      	b.n	8003cb6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2102      	movs	r1, #2
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f001 fa8c 	bl	80051ba <SDMMC_CmdBusWidth>
 8003ca2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	e003      	b.n	8003cb6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	e001      	b.n	8003cb6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003cb2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b086      	sub	sp, #24
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	2300      	movs	r3, #0
 8003ccc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f001 f8c0 	bl	8004e5a <SDIO_GetResponse>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ce4:	d102      	bne.n	8003cec <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003ce6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003cea:	e02f      	b.n	8003d4c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003cec:	f107 030c 	add.w	r3, r7, #12
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f82e 	bl	8003d54 <SD_FindSCR>
 8003cf8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	e023      	b.n	8003d4c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d01c      	beq.n	8003d48 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d16:	041b      	lsls	r3, r3, #16
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4610      	mov	r0, r2
 8003d1c:	f001 fa08 	bl	8005130 <SDMMC_CmdAppCommand>
 8003d20:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	e00f      	b.n	8003d4c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2100      	movs	r1, #0
 8003d32:	4618      	mov	r0, r3
 8003d34:	f001 fa41 	bl	80051ba <SDMMC_CmdBusWidth>
 8003d38:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	e003      	b.n	8003d4c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003d44:	2300      	movs	r3, #0
 8003d46:	e001      	b.n	8003d4c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003d48:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003d54:	b590      	push	{r4, r7, lr}
 8003d56:	b08f      	sub	sp, #60	; 0x3c
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003d5e:	f7fc fc6d 	bl	800063c <HAL_GetTick>
 8003d62:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60bb      	str	r3, [r7, #8]
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2108      	movs	r1, #8
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f001 f8ac 	bl	8004ed8 <SDMMC_CmdBlockLength>
 8003d80:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <SD_FindSCR+0x38>
  {
    return errorstate;
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	e0a9      	b.n	8003ee0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d94:	041b      	lsls	r3, r3, #16
 8003d96:	4619      	mov	r1, r3
 8003d98:	4610      	mov	r0, r2
 8003d9a:	f001 f9c9 	bl	8005130 <SDMMC_CmdAppCommand>
 8003d9e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <SD_FindSCR+0x56>
  {
    return errorstate;
 8003da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da8:	e09a      	b.n	8003ee0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003daa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003dae:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003db0:	2308      	movs	r3, #8
 8003db2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003db4:	2330      	movs	r3, #48	; 0x30
 8003db6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003db8:	2302      	movs	r3, #2
 8003dba:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f107 0210 	add.w	r2, r7, #16
 8003dcc:	4611      	mov	r1, r2
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f001 f856 	bl	8004e80 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f001 fa10 	bl	80051fe <SDMMC_CmdSendSCR>
 8003dde:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d022      	beq.n	8003e2c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8003de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de8:	e07a      	b.n	8003ee0 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00e      	beq.n	8003e16 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6819      	ldr	r1, [r3, #0]
 8003dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	f107 0208 	add.w	r2, r7, #8
 8003e04:	18d4      	adds	r4, r2, r3
 8003e06:	4608      	mov	r0, r1
 8003e08:	f000 ffb5 	bl	8004d76 <SDIO_ReadFIFO>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	6023      	str	r3, [r4, #0]
      index++;
 8003e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e12:	3301      	adds	r3, #1
 8003e14:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003e16:	f7fc fc11 	bl	800063c <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e24:	d102      	bne.n	8003e2c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003e26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003e2a:	e059      	b.n	8003ee0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e32:	f240 432a 	movw	r3, #1066	; 0x42a
 8003e36:	4013      	ands	r3, r2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0d6      	beq.n	8003dea <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d005      	beq.n	8003e56 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2208      	movs	r2, #8
 8003e50:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003e52:	2308      	movs	r3, #8
 8003e54:	e044      	b.n	8003ee0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d005      	beq.n	8003e70 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2202      	movs	r2, #2
 8003e6a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	e037      	b.n	8003ee0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d005      	beq.n	8003e8a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2220      	movs	r2, #32
 8003e84:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003e86:	2320      	movs	r3, #32
 8003e88:	e02a      	b.n	8003ee0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003e92:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	061a      	lsls	r2, r3, #24
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	021b      	lsls	r3, r3, #8
 8003e9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003ea0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	0a1b      	lsrs	r3, r3, #8
 8003ea6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003eaa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	0e1b      	lsrs	r3, r3, #24
 8003eb0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb4:	601a      	str	r2, [r3, #0]
    scr++;
 8003eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb8:	3304      	adds	r3, #4
 8003eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	061a      	lsls	r2, r3, #24
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	021b      	lsls	r3, r3, #8
 8003ec4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003ec8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	0a1b      	lsrs	r3, r3, #8
 8003ece:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003ed2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	0e1b      	lsrs	r3, r3, #24
 8003ed8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003edc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	373c      	adds	r7, #60	; 0x3c
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd90      	pop	{r4, r7, pc}

08003ee8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e01d      	b.n	8003f36 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d106      	bne.n	8003f14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f004 fe0e 	bl	8008b30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3304      	adds	r3, #4
 8003f24:	4619      	mov	r1, r3
 8003f26:	4610      	mov	r0, r2
 8003f28:	f000 fb6e 	bl	8004608 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b082      	sub	sp, #8
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e01d      	b.n	8003f8c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d106      	bne.n	8003f6a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 f815 	bl	8003f94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	3304      	adds	r3, #4
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	f000 fb43 	bl	8004608 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d101      	bne.n	8003fc6 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e0f3      	b.n	80041ae <HAL_TIM_PWM_Start_DMA+0x206>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d10b      	bne.n	8003fea <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d104      	bne.n	8003fe2 <HAL_TIM_PWM_Start_DMA+0x3a>
 8003fd8:	887b      	ldrh	r3, [r7, #2]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e0e5      	b.n	80041ae <HAL_TIM_PWM_Start_DMA+0x206>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2b0c      	cmp	r3, #12
 8003fee:	f200 80ad 	bhi.w	800414c <HAL_TIM_PWM_Start_DMA+0x1a4>
 8003ff2:	a201      	add	r2, pc, #4	; (adr r2, 8003ff8 <HAL_TIM_PWM_Start_DMA+0x50>)
 8003ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff8:	0800402d 	.word	0x0800402d
 8003ffc:	0800414d 	.word	0x0800414d
 8004000:	0800414d 	.word	0x0800414d
 8004004:	0800414d 	.word	0x0800414d
 8004008:	08004075 	.word	0x08004075
 800400c:	0800414d 	.word	0x0800414d
 8004010:	0800414d 	.word	0x0800414d
 8004014:	0800414d 	.word	0x0800414d
 8004018:	080040bd 	.word	0x080040bd
 800401c:	0800414d 	.word	0x0800414d
 8004020:	0800414d 	.word	0x0800414d
 8004024:	0800414d 	.word	0x0800414d
 8004028:	08004105 	.word	0x08004105
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	4a61      	ldr	r2, [pc, #388]	; (80041b8 <HAL_TIM_PWM_Start_DMA+0x210>)
 8004032:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	4a60      	ldr	r2, [pc, #384]	; (80041bc <HAL_TIM_PWM_Start_DMA+0x214>)
 800403a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	4a5f      	ldr	r2, [pc, #380]	; (80041c0 <HAL_TIM_PWM_Start_DMA+0x218>)
 8004042:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3334      	adds	r3, #52	; 0x34
 8004050:	461a      	mov	r2, r3
 8004052:	887b      	ldrh	r3, [r7, #2]
 8004054:	f7fc fce0 	bl	8000a18 <HAL_DMA_Start_IT>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e0a5      	b.n	80041ae <HAL_TIM_PWM_Start_DMA+0x206>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68da      	ldr	r2, [r3, #12]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004070:	60da      	str	r2, [r3, #12]
      break;
 8004072:	e06c      	b.n	800414e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004078:	4a4f      	ldr	r2, [pc, #316]	; (80041b8 <HAL_TIM_PWM_Start_DMA+0x210>)
 800407a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004080:	4a4e      	ldr	r2, [pc, #312]	; (80041bc <HAL_TIM_PWM_Start_DMA+0x214>)
 8004082:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004088:	4a4d      	ldr	r2, [pc, #308]	; (80041c0 <HAL_TIM_PWM_Start_DMA+0x218>)
 800408a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004090:	6879      	ldr	r1, [r7, #4]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3338      	adds	r3, #56	; 0x38
 8004098:	461a      	mov	r2, r3
 800409a:	887b      	ldrh	r3, [r7, #2]
 800409c:	f7fc fcbc 	bl	8000a18 <HAL_DMA_Start_IT>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e081      	b.n	80041ae <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68da      	ldr	r2, [r3, #12]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040b8:	60da      	str	r2, [r3, #12]
      break;
 80040ba:	e048      	b.n	800414e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c0:	4a3d      	ldr	r2, [pc, #244]	; (80041b8 <HAL_TIM_PWM_Start_DMA+0x210>)
 80040c2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	4a3c      	ldr	r2, [pc, #240]	; (80041bc <HAL_TIM_PWM_Start_DMA+0x214>)
 80040ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d0:	4a3b      	ldr	r2, [pc, #236]	; (80041c0 <HAL_TIM_PWM_Start_DMA+0x218>)
 80040d2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	333c      	adds	r3, #60	; 0x3c
 80040e0:	461a      	mov	r2, r3
 80040e2:	887b      	ldrh	r3, [r7, #2]
 80040e4:	f7fc fc98 	bl	8000a18 <HAL_DMA_Start_IT>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e05d      	b.n	80041ae <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68da      	ldr	r2, [r3, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004100:	60da      	str	r2, [r3, #12]
      break;
 8004102:	e024      	b.n	800414e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004108:	4a2b      	ldr	r2, [pc, #172]	; (80041b8 <HAL_TIM_PWM_Start_DMA+0x210>)
 800410a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004110:	4a2a      	ldr	r2, [pc, #168]	; (80041bc <HAL_TIM_PWM_Start_DMA+0x214>)
 8004112:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004118:	4a29      	ldr	r2, [pc, #164]	; (80041c0 <HAL_TIM_PWM_Start_DMA+0x218>)
 800411a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3340      	adds	r3, #64	; 0x40
 8004128:	461a      	mov	r2, r3
 800412a:	887b      	ldrh	r3, [r7, #2]
 800412c:	f7fc fc74 	bl	8000a18 <HAL_DMA_Start_IT>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e039      	b.n	80041ae <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004148:	60da      	str	r2, [r3, #12]
      break;
 800414a:	e000      	b.n	800414e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 800414c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2201      	movs	r2, #1
 8004154:	68b9      	ldr	r1, [r7, #8]
 8004156:	4618      	mov	r0, r3
 8004158:	f000 fd40 	bl	8004bdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a18      	ldr	r2, [pc, #96]	; (80041c4 <HAL_TIM_PWM_Start_DMA+0x21c>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d004      	beq.n	8004170 <HAL_TIM_PWM_Start_DMA+0x1c8>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a17      	ldr	r2, [pc, #92]	; (80041c8 <HAL_TIM_PWM_Start_DMA+0x220>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d101      	bne.n	8004174 <HAL_TIM_PWM_Start_DMA+0x1cc>
 8004170:	2301      	movs	r3, #1
 8004172:	e000      	b.n	8004176 <HAL_TIM_PWM_Start_DMA+0x1ce>
 8004174:	2300      	movs	r3, #0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d007      	beq.n	800418a <HAL_TIM_PWM_Start_DMA+0x1e2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004188:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2b06      	cmp	r3, #6
 800419a:	d007      	beq.n	80041ac <HAL_TIM_PWM_Start_DMA+0x204>
  {
    __HAL_TIM_ENABLE(htim);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0201 	orr.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	08004527 	.word	0x08004527
 80041bc:	08004597 	.word	0x08004597
 80041c0:	08004503 	.word	0x08004503
 80041c4:	40010000 	.word	0x40010000
 80041c8:	40010400 	.word	0x40010400

080041cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e0b4      	b.n	8004350 <HAL_TIM_PWM_ConfigChannel+0x184>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2202      	movs	r2, #2
 80041f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b0c      	cmp	r3, #12
 80041fa:	f200 809f 	bhi.w	800433c <HAL_TIM_PWM_ConfigChannel+0x170>
 80041fe:	a201      	add	r2, pc, #4	; (adr r2, 8004204 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004204:	08004239 	.word	0x08004239
 8004208:	0800433d 	.word	0x0800433d
 800420c:	0800433d 	.word	0x0800433d
 8004210:	0800433d 	.word	0x0800433d
 8004214:	08004279 	.word	0x08004279
 8004218:	0800433d 	.word	0x0800433d
 800421c:	0800433d 	.word	0x0800433d
 8004220:	0800433d 	.word	0x0800433d
 8004224:	080042bb 	.word	0x080042bb
 8004228:	0800433d 	.word	0x0800433d
 800422c:	0800433d 	.word	0x0800433d
 8004230:	0800433d 	.word	0x0800433d
 8004234:	080042fb 	.word	0x080042fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68b9      	ldr	r1, [r7, #8]
 800423e:	4618      	mov	r0, r3
 8004240:	f000 fa82 	bl	8004748 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	699a      	ldr	r2, [r3, #24]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0208 	orr.w	r2, r2, #8
 8004252:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699a      	ldr	r2, [r3, #24]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0204 	bic.w	r2, r2, #4
 8004262:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6999      	ldr	r1, [r3, #24]
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	691a      	ldr	r2, [r3, #16]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	619a      	str	r2, [r3, #24]
      break;
 8004276:	e062      	b.n	800433e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68b9      	ldr	r1, [r7, #8]
 800427e:	4618      	mov	r0, r3
 8004280:	f000 fad2 	bl	8004828 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699a      	ldr	r2, [r3, #24]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004292:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699a      	ldr	r2, [r3, #24]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6999      	ldr	r1, [r3, #24]
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	021a      	lsls	r2, r3, #8
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	619a      	str	r2, [r3, #24]
      break;
 80042b8:	e041      	b.n	800433e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68b9      	ldr	r1, [r7, #8]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f000 fb27 	bl	8004914 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	69da      	ldr	r2, [r3, #28]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f042 0208 	orr.w	r2, r2, #8
 80042d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69da      	ldr	r2, [r3, #28]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0204 	bic.w	r2, r2, #4
 80042e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	69d9      	ldr	r1, [r3, #28]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	61da      	str	r2, [r3, #28]
      break;
 80042f8:	e021      	b.n	800433e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68b9      	ldr	r1, [r7, #8]
 8004300:	4618      	mov	r0, r3
 8004302:	f000 fb7b 	bl	80049fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	69da      	ldr	r2, [r3, #28]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004314:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	69da      	ldr	r2, [r3, #28]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004324:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69d9      	ldr	r1, [r3, #28]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	021a      	lsls	r2, r3, #8
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	61da      	str	r2, [r3, #28]
      break;
 800433a:	e000      	b.n	800433e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800433c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004368:	2b01      	cmp	r3, #1
 800436a:	d101      	bne.n	8004370 <HAL_TIM_ConfigClockSource+0x18>
 800436c:	2302      	movs	r3, #2
 800436e:	e0a6      	b.n	80044be <HAL_TIM_ConfigClockSource+0x166>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800438e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004396:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b40      	cmp	r3, #64	; 0x40
 80043a6:	d067      	beq.n	8004478 <HAL_TIM_ConfigClockSource+0x120>
 80043a8:	2b40      	cmp	r3, #64	; 0x40
 80043aa:	d80b      	bhi.n	80043c4 <HAL_TIM_ConfigClockSource+0x6c>
 80043ac:	2b10      	cmp	r3, #16
 80043ae:	d073      	beq.n	8004498 <HAL_TIM_ConfigClockSource+0x140>
 80043b0:	2b10      	cmp	r3, #16
 80043b2:	d802      	bhi.n	80043ba <HAL_TIM_ConfigClockSource+0x62>
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d06f      	beq.n	8004498 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80043b8:	e078      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80043ba:	2b20      	cmp	r3, #32
 80043bc:	d06c      	beq.n	8004498 <HAL_TIM_ConfigClockSource+0x140>
 80043be:	2b30      	cmp	r3, #48	; 0x30
 80043c0:	d06a      	beq.n	8004498 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80043c2:	e073      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80043c4:	2b70      	cmp	r3, #112	; 0x70
 80043c6:	d00d      	beq.n	80043e4 <HAL_TIM_ConfigClockSource+0x8c>
 80043c8:	2b70      	cmp	r3, #112	; 0x70
 80043ca:	d804      	bhi.n	80043d6 <HAL_TIM_ConfigClockSource+0x7e>
 80043cc:	2b50      	cmp	r3, #80	; 0x50
 80043ce:	d033      	beq.n	8004438 <HAL_TIM_ConfigClockSource+0xe0>
 80043d0:	2b60      	cmp	r3, #96	; 0x60
 80043d2:	d041      	beq.n	8004458 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80043d4:	e06a      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80043d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043da:	d066      	beq.n	80044aa <HAL_TIM_ConfigClockSource+0x152>
 80043dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043e0:	d017      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80043e2:	e063      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6818      	ldr	r0, [r3, #0]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	6899      	ldr	r1, [r3, #8]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f000 fbd2 	bl	8004b9c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004406:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	609a      	str	r2, [r3, #8]
      break;
 8004410:	e04c      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6818      	ldr	r0, [r3, #0]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	6899      	ldr	r1, [r3, #8]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f000 fbbb 	bl	8004b9c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004434:	609a      	str	r2, [r3, #8]
      break;
 8004436:	e039      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6818      	ldr	r0, [r3, #0]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	6859      	ldr	r1, [r3, #4]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	461a      	mov	r2, r3
 8004446:	f000 fb2f 	bl	8004aa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2150      	movs	r1, #80	; 0x50
 8004450:	4618      	mov	r0, r3
 8004452:	f000 fb88 	bl	8004b66 <TIM_ITRx_SetConfig>
      break;
 8004456:	e029      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6818      	ldr	r0, [r3, #0]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	6859      	ldr	r1, [r3, #4]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	461a      	mov	r2, r3
 8004466:	f000 fb4e 	bl	8004b06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2160      	movs	r1, #96	; 0x60
 8004470:	4618      	mov	r0, r3
 8004472:	f000 fb78 	bl	8004b66 <TIM_ITRx_SetConfig>
      break;
 8004476:	e019      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6818      	ldr	r0, [r3, #0]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	6859      	ldr	r1, [r3, #4]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	461a      	mov	r2, r3
 8004486:	f000 fb0f 	bl	8004aa8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2140      	movs	r1, #64	; 0x40
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fb68 	bl	8004b66 <TIM_ITRx_SetConfig>
      break;
 8004496:	e009      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4619      	mov	r1, r3
 80044a2:	4610      	mov	r0, r2
 80044a4:	f000 fb5f 	bl	8004b66 <TIM_ITRx_SetConfig>
      break;
 80044a8:	e000      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x154>
      break;
 80044aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80044da:	b480      	push	{r7}
 80044dc:	b083      	sub	sp, #12
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80044e2:	bf00      	nop
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b083      	sub	sp, #12
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b084      	sub	sp, #16
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450e:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f7ff ffe8 	bl	80044ee <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 800451e:	bf00      	nop
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b084      	sub	sp, #16
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004532:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	429a      	cmp	r2, r3
 8004544:	d103      	bne.n	800454e <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2201      	movs	r2, #1
 800454a:	771a      	strb	r2, [r3, #28]
 800454c:	e019      	b.n	8004582 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	429a      	cmp	r2, r3
 8004556:	d103      	bne.n	8004560 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2202      	movs	r2, #2
 800455c:	771a      	strb	r2, [r3, #28]
 800455e:	e010      	b.n	8004582 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	429a      	cmp	r2, r3
 8004568:	d103      	bne.n	8004572 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2204      	movs	r2, #4
 800456e:	771a      	strb	r2, [r3, #28]
 8004570:	e007      	b.n	8004582 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	429a      	cmp	r2, r3
 800457a:	d102      	bne.n	8004582 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2208      	movs	r2, #8
 8004580:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f7ff ff9f 	bl	80044c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	771a      	strb	r2, [r3, #28]
}
 800458e:	bf00      	nop
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b084      	sub	sp, #16
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a2:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d103      	bne.n	80045be <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2201      	movs	r2, #1
 80045ba:	771a      	strb	r2, [r3, #28]
 80045bc:	e019      	b.n	80045f2 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d103      	bne.n	80045d0 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2202      	movs	r2, #2
 80045cc:	771a      	strb	r2, [r3, #28]
 80045ce:	e010      	b.n	80045f2 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d103      	bne.n	80045e2 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2204      	movs	r2, #4
 80045de:	771a      	strb	r2, [r3, #28]
 80045e0:	e007      	b.n	80045f2 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d102      	bne.n	80045f2 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2208      	movs	r2, #8
 80045f0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f7ff ff71 	bl	80044da <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	771a      	strb	r2, [r3, #28]
}
 80045fe:	bf00      	nop
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
	...

08004608 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a40      	ldr	r2, [pc, #256]	; (800471c <TIM_Base_SetConfig+0x114>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d013      	beq.n	8004648 <TIM_Base_SetConfig+0x40>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004626:	d00f      	beq.n	8004648 <TIM_Base_SetConfig+0x40>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a3d      	ldr	r2, [pc, #244]	; (8004720 <TIM_Base_SetConfig+0x118>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d00b      	beq.n	8004648 <TIM_Base_SetConfig+0x40>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a3c      	ldr	r2, [pc, #240]	; (8004724 <TIM_Base_SetConfig+0x11c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d007      	beq.n	8004648 <TIM_Base_SetConfig+0x40>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a3b      	ldr	r2, [pc, #236]	; (8004728 <TIM_Base_SetConfig+0x120>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d003      	beq.n	8004648 <TIM_Base_SetConfig+0x40>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a3a      	ldr	r2, [pc, #232]	; (800472c <TIM_Base_SetConfig+0x124>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d108      	bne.n	800465a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	4313      	orrs	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a2f      	ldr	r2, [pc, #188]	; (800471c <TIM_Base_SetConfig+0x114>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d02b      	beq.n	80046ba <TIM_Base_SetConfig+0xb2>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004668:	d027      	beq.n	80046ba <TIM_Base_SetConfig+0xb2>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a2c      	ldr	r2, [pc, #176]	; (8004720 <TIM_Base_SetConfig+0x118>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d023      	beq.n	80046ba <TIM_Base_SetConfig+0xb2>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a2b      	ldr	r2, [pc, #172]	; (8004724 <TIM_Base_SetConfig+0x11c>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d01f      	beq.n	80046ba <TIM_Base_SetConfig+0xb2>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a2a      	ldr	r2, [pc, #168]	; (8004728 <TIM_Base_SetConfig+0x120>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d01b      	beq.n	80046ba <TIM_Base_SetConfig+0xb2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a29      	ldr	r2, [pc, #164]	; (800472c <TIM_Base_SetConfig+0x124>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d017      	beq.n	80046ba <TIM_Base_SetConfig+0xb2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a28      	ldr	r2, [pc, #160]	; (8004730 <TIM_Base_SetConfig+0x128>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d013      	beq.n	80046ba <TIM_Base_SetConfig+0xb2>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a27      	ldr	r2, [pc, #156]	; (8004734 <TIM_Base_SetConfig+0x12c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d00f      	beq.n	80046ba <TIM_Base_SetConfig+0xb2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a26      	ldr	r2, [pc, #152]	; (8004738 <TIM_Base_SetConfig+0x130>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00b      	beq.n	80046ba <TIM_Base_SetConfig+0xb2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a25      	ldr	r2, [pc, #148]	; (800473c <TIM_Base_SetConfig+0x134>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d007      	beq.n	80046ba <TIM_Base_SetConfig+0xb2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a24      	ldr	r2, [pc, #144]	; (8004740 <TIM_Base_SetConfig+0x138>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d003      	beq.n	80046ba <TIM_Base_SetConfig+0xb2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a23      	ldr	r2, [pc, #140]	; (8004744 <TIM_Base_SetConfig+0x13c>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d108      	bne.n	80046cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a0a      	ldr	r2, [pc, #40]	; (800471c <TIM_Base_SetConfig+0x114>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d003      	beq.n	8004700 <TIM_Base_SetConfig+0xf8>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a0c      	ldr	r2, [pc, #48]	; (800472c <TIM_Base_SetConfig+0x124>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d103      	bne.n	8004708 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	691a      	ldr	r2, [r3, #16]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	615a      	str	r2, [r3, #20]
}
 800470e:	bf00      	nop
 8004710:	3714      	adds	r7, #20
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	40010000 	.word	0x40010000
 8004720:	40000400 	.word	0x40000400
 8004724:	40000800 	.word	0x40000800
 8004728:	40000c00 	.word	0x40000c00
 800472c:	40010400 	.word	0x40010400
 8004730:	40014000 	.word	0x40014000
 8004734:	40014400 	.word	0x40014400
 8004738:	40014800 	.word	0x40014800
 800473c:	40001800 	.word	0x40001800
 8004740:	40001c00 	.word	0x40001c00
 8004744:	40002000 	.word	0x40002000

08004748 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004748:	b480      	push	{r7}
 800474a:	b087      	sub	sp, #28
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	f023 0201 	bic.w	r2, r3, #1
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f023 0303 	bic.w	r3, r3, #3
 800477e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	4313      	orrs	r3, r2
 8004788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f023 0302 	bic.w	r3, r3, #2
 8004790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	4313      	orrs	r3, r2
 800479a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a20      	ldr	r2, [pc, #128]	; (8004820 <TIM_OC1_SetConfig+0xd8>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d003      	beq.n	80047ac <TIM_OC1_SetConfig+0x64>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a1f      	ldr	r2, [pc, #124]	; (8004824 <TIM_OC1_SetConfig+0xdc>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d10c      	bne.n	80047c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f023 0308 	bic.w	r3, r3, #8
 80047b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f023 0304 	bic.w	r3, r3, #4
 80047c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a15      	ldr	r2, [pc, #84]	; (8004820 <TIM_OC1_SetConfig+0xd8>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d003      	beq.n	80047d6 <TIM_OC1_SetConfig+0x8e>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a14      	ldr	r2, [pc, #80]	; (8004824 <TIM_OC1_SetConfig+0xdc>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d111      	bne.n	80047fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	621a      	str	r2, [r3, #32]
}
 8004814:	bf00      	nop
 8004816:	371c      	adds	r7, #28
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	40010000 	.word	0x40010000
 8004824:	40010400 	.word	0x40010400

08004828 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004828:	b480      	push	{r7}
 800482a:	b087      	sub	sp, #28
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	f023 0210 	bic.w	r2, r3, #16
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800485e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	021b      	lsls	r3, r3, #8
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	4313      	orrs	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	f023 0320 	bic.w	r3, r3, #32
 8004872:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	4313      	orrs	r3, r2
 800487e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a22      	ldr	r2, [pc, #136]	; (800490c <TIM_OC2_SetConfig+0xe4>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d003      	beq.n	8004890 <TIM_OC2_SetConfig+0x68>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a21      	ldr	r2, [pc, #132]	; (8004910 <TIM_OC2_SetConfig+0xe8>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d10d      	bne.n	80048ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004896:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	011b      	lsls	r3, r3, #4
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a17      	ldr	r2, [pc, #92]	; (800490c <TIM_OC2_SetConfig+0xe4>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d003      	beq.n	80048bc <TIM_OC2_SetConfig+0x94>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a16      	ldr	r2, [pc, #88]	; (8004910 <TIM_OC2_SetConfig+0xe8>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d113      	bne.n	80048e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	621a      	str	r2, [r3, #32]
}
 80048fe:	bf00      	nop
 8004900:	371c      	adds	r7, #28
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	40010000 	.word	0x40010000
 8004910:	40010400 	.word	0x40010400

08004914 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004914:	b480      	push	{r7}
 8004916:	b087      	sub	sp, #28
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f023 0303 	bic.w	r3, r3, #3
 800494a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800495c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	021b      	lsls	r3, r3, #8
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	4313      	orrs	r3, r2
 8004968:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a21      	ldr	r2, [pc, #132]	; (80049f4 <TIM_OC3_SetConfig+0xe0>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d003      	beq.n	800497a <TIM_OC3_SetConfig+0x66>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a20      	ldr	r2, [pc, #128]	; (80049f8 <TIM_OC3_SetConfig+0xe4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d10d      	bne.n	8004996 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004980:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	021b      	lsls	r3, r3, #8
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	4313      	orrs	r3, r2
 800498c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004994:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a16      	ldr	r2, [pc, #88]	; (80049f4 <TIM_OC3_SetConfig+0xe0>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d003      	beq.n	80049a6 <TIM_OC3_SetConfig+0x92>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a15      	ldr	r2, [pc, #84]	; (80049f8 <TIM_OC3_SetConfig+0xe4>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d113      	bne.n	80049ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	4313      	orrs	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	621a      	str	r2, [r3, #32]
}
 80049e8:	bf00      	nop
 80049ea:	371c      	adds	r7, #28
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	40010000 	.word	0x40010000
 80049f8:	40010400 	.word	0x40010400

080049fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	021b      	lsls	r3, r3, #8
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	031b      	lsls	r3, r3, #12
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a12      	ldr	r2, [pc, #72]	; (8004aa0 <TIM_OC4_SetConfig+0xa4>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d003      	beq.n	8004a64 <TIM_OC4_SetConfig+0x68>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a11      	ldr	r2, [pc, #68]	; (8004aa4 <TIM_OC4_SetConfig+0xa8>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d109      	bne.n	8004a78 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	019b      	lsls	r3, r3, #6
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	621a      	str	r2, [r3, #32]
}
 8004a92:	bf00      	nop
 8004a94:	371c      	adds	r7, #28
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	40010000 	.word	0x40010000
 8004aa4:	40010400 	.word	0x40010400

08004aa8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b087      	sub	sp, #28
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	f023 0201 	bic.w	r2, r3, #1
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f023 030a 	bic.w	r3, r3, #10
 8004ae4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	621a      	str	r2, [r3, #32]
}
 8004afa:	bf00      	nop
 8004afc:	371c      	adds	r7, #28
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b087      	sub	sp, #28
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	60f8      	str	r0, [r7, #12]
 8004b0e:	60b9      	str	r1, [r7, #8]
 8004b10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	f023 0210 	bic.w	r2, r3, #16
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	031b      	lsls	r3, r3, #12
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	011b      	lsls	r3, r3, #4
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	621a      	str	r2, [r3, #32]
}
 8004b5a:	bf00      	nop
 8004b5c:	371c      	adds	r7, #28
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b085      	sub	sp, #20
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f043 0307 	orr.w	r3, r3, #7
 8004b88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	609a      	str	r2, [r3, #8]
}
 8004b90:	bf00      	nop
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
 8004ba8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	021a      	lsls	r2, r3, #8
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	609a      	str	r2, [r3, #8]
}
 8004bd0:	bf00      	nop
 8004bd2:	371c      	adds	r7, #28
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	f003 031f 	and.w	r3, r3, #31
 8004bee:	2201      	movs	r2, #1
 8004bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6a1a      	ldr	r2, [r3, #32]
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	43db      	mvns	r3, r3
 8004bfe:	401a      	ands	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6a1a      	ldr	r2, [r3, #32]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f003 031f 	and.w	r3, r3, #31
 8004c0e:	6879      	ldr	r1, [r7, #4]
 8004c10:	fa01 f303 	lsl.w	r3, r1, r3
 8004c14:	431a      	orrs	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	621a      	str	r2, [r3, #32]
}
 8004c1a:	bf00      	nop
 8004c1c:	371c      	adds	r7, #28
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
	...

08004c28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	e05a      	b.n	8004cf6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a21      	ldr	r2, [pc, #132]	; (8004d04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d022      	beq.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c8c:	d01d      	beq.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a1d      	ldr	r2, [pc, #116]	; (8004d08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d018      	beq.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a1b      	ldr	r2, [pc, #108]	; (8004d0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d013      	beq.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a1a      	ldr	r2, [pc, #104]	; (8004d10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d00e      	beq.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a18      	ldr	r2, [pc, #96]	; (8004d14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d009      	beq.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a17      	ldr	r2, [pc, #92]	; (8004d18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d004      	beq.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a15      	ldr	r2, [pc, #84]	; (8004d1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d10c      	bne.n	8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	40010000 	.word	0x40010000
 8004d08:	40000400 	.word	0x40000400
 8004d0c:	40000800 	.word	0x40000800
 8004d10:	40000c00 	.word	0x40000c00
 8004d14:	40010400 	.word	0x40010400
 8004d18:	40014000 	.word	0x40014000
 8004d1c:	40001800 	.word	0x40001800

08004d20 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004d20:	b084      	sub	sp, #16
 8004d22:	b480      	push	{r7}
 8004d24:	b085      	sub	sp, #20
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	f107 001c 	add.w	r0, r7, #28
 8004d2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004d32:	2300      	movs	r3, #0
 8004d34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004d36:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004d38:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004d3a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004d3e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004d42:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004d46:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004d4a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004d5a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	431a      	orrs	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	b004      	add	sp, #16
 8004d74:	4770      	bx	lr

08004d76 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b083      	sub	sp, #12
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b082      	sub	sp, #8
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2203      	movs	r2, #3
 8004dbe:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004dc0:	2002      	movs	r0, #2
 8004dc2:	f7fb fc47 	bl	8000654 <HAL_Delay>
  
  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0303 	and.w	r3, r3, #3
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004df6:	2300      	movs	r3, #0
 8004df8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004e0a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004e10:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004e16:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004e26:	f023 030f 	bic.w	r3, r3, #15
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3714      	adds	r7, #20
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	b2db      	uxtb	r3, r3
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b085      	sub	sp, #20
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
 8004e62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	3314      	adds	r3, #20
 8004e68:	461a      	mov	r2, r3
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
}  
 8004e74:	4618      	mov	r0, r3
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004ea6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004eac:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004eb2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebe:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0

}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b088      	sub	sp, #32
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004ee6:	2310      	movs	r3, #16
 8004ee8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004eea:	2340      	movs	r3, #64	; 0x40
 8004eec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ef6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ef8:	f107 0308 	add.w	r3, r7, #8
 8004efc:	4619      	mov	r1, r3
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7ff ff74 	bl	8004dec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f08:	2110      	movs	r1, #16
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fa40 	bl	8005390 <SDMMC_GetCmdResp1>
 8004f10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f12:	69fb      	ldr	r3, [r7, #28]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3720      	adds	r7, #32
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b088      	sub	sp, #32
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004f2a:	2311      	movs	r3, #17
 8004f2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f2e:	2340      	movs	r3, #64	; 0x40
 8004f30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f32:	2300      	movs	r3, #0
 8004f34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f3a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f3c:	f107 0308 	add.w	r3, r7, #8
 8004f40:	4619      	mov	r1, r3
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7ff ff52 	bl	8004dec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f4c:	2111      	movs	r1, #17
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 fa1e 	bl	8005390 <SDMMC_GetCmdResp1>
 8004f54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f56:	69fb      	ldr	r3, [r7, #28]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3720      	adds	r7, #32
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b088      	sub	sp, #32
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004f6e:	2312      	movs	r3, #18
 8004f70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f72:	2340      	movs	r3, #64	; 0x40
 8004f74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f76:	2300      	movs	r3, #0
 8004f78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f80:	f107 0308 	add.w	r3, r7, #8
 8004f84:	4619      	mov	r1, r3
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7ff ff30 	bl	8004dec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f90:	2112      	movs	r1, #18
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f9fc 	bl	8005390 <SDMMC_GetCmdResp1>
 8004f98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f9a:	69fb      	ldr	r3, [r7, #28]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3720      	adds	r7, #32
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b088      	sub	sp, #32
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004fb2:	2318      	movs	r3, #24
 8004fb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004fb6:	2340      	movs	r3, #64	; 0x40
 8004fb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fc2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fc4:	f107 0308 	add.w	r3, r7, #8
 8004fc8:	4619      	mov	r1, r3
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7ff ff0e 	bl	8004dec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fd4:	2118      	movs	r1, #24
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f9da 	bl	8005390 <SDMMC_GetCmdResp1>
 8004fdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fde:	69fb      	ldr	r3, [r7, #28]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3720      	adds	r7, #32
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b088      	sub	sp, #32
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004ff6:	2319      	movs	r3, #25
 8004ff8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ffa:	2340      	movs	r3, #64	; 0x40
 8004ffc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ffe:	2300      	movs	r3, #0
 8005000:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005002:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005006:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005008:	f107 0308 	add.w	r3, r7, #8
 800500c:	4619      	mov	r1, r3
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7ff feec 	bl	8004dec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005014:	f241 3288 	movw	r2, #5000	; 0x1388
 8005018:	2119      	movs	r1, #25
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f9b8 	bl	8005390 <SDMMC_GetCmdResp1>
 8005020:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005022:	69fb      	ldr	r3, [r7, #28]
}
 8005024:	4618      	mov	r0, r3
 8005026:	3720      	adds	r7, #32
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b088      	sub	sp, #32
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005034:	2300      	movs	r3, #0
 8005036:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005038:	230c      	movs	r3, #12
 800503a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800503c:	2340      	movs	r3, #64	; 0x40
 800503e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005040:	2300      	movs	r3, #0
 8005042:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005044:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005048:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800504a:	f107 0308 	add.w	r3, r7, #8
 800504e:	4619      	mov	r1, r3
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f7ff fecb 	bl	8004dec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005056:	4a05      	ldr	r2, [pc, #20]	; (800506c <SDMMC_CmdStopTransfer+0x40>)
 8005058:	210c      	movs	r1, #12
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f998 	bl	8005390 <SDMMC_GetCmdResp1>
 8005060:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005062:	69fb      	ldr	r3, [r7, #28]
}
 8005064:	4618      	mov	r0, r3
 8005066:	3720      	adds	r7, #32
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	05f5e100 	.word	0x05f5e100

08005070 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b08a      	sub	sp, #40	; 0x28
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005080:	2307      	movs	r3, #7
 8005082:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005084:	2340      	movs	r3, #64	; 0x40
 8005086:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005088:	2300      	movs	r3, #0
 800508a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800508c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005090:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005092:	f107 0310 	add.w	r3, r7, #16
 8005096:	4619      	mov	r1, r3
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f7ff fea7 	bl	8004dec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800509e:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a2:	2107      	movs	r1, #7
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f000 f973 	bl	8005390 <SDMMC_GetCmdResp1>
 80050aa:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3728      	adds	r7, #40	; 0x28
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b088      	sub	sp, #32
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80050c2:	2300      	movs	r3, #0
 80050c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80050c6:	2300      	movs	r3, #0
 80050c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050ca:	2300      	movs	r3, #0
 80050cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050d4:	f107 0308 	add.w	r3, r7, #8
 80050d8:	4619      	mov	r1, r3
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7ff fe86 	bl	8004dec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f92d 	bl	8005340 <SDMMC_GetCmdError>
 80050e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050e8:	69fb      	ldr	r3, [r7, #28]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3720      	adds	r7, #32
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b088      	sub	sp, #32
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80050fa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80050fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005100:	2308      	movs	r3, #8
 8005102:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005104:	2340      	movs	r3, #64	; 0x40
 8005106:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005108:	2300      	movs	r3, #0
 800510a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800510c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005110:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005112:	f107 0308 	add.w	r3, r7, #8
 8005116:	4619      	mov	r1, r3
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7ff fe67 	bl	8004dec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 fb16 	bl	8005750 <SDMMC_GetCmdResp7>
 8005124:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005126:	69fb      	ldr	r3, [r7, #28]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3720      	adds	r7, #32
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b088      	sub	sp, #32
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800513e:	2337      	movs	r3, #55	; 0x37
 8005140:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005142:	2340      	movs	r3, #64	; 0x40
 8005144:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005146:	2300      	movs	r3, #0
 8005148:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800514a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800514e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005150:	f107 0308 	add.w	r3, r7, #8
 8005154:	4619      	mov	r1, r3
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7ff fe48 	bl	8004dec <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800515c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005160:	2137      	movs	r1, #55	; 0x37
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f914 	bl	8005390 <SDMMC_GetCmdResp1>
 8005168:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800516a:	69fb      	ldr	r3, [r7, #28]
}
 800516c:	4618      	mov	r0, r3
 800516e:	3720      	adds	r7, #32
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b088      	sub	sp, #32
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005184:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005188:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800518a:	2329      	movs	r3, #41	; 0x29
 800518c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800518e:	2340      	movs	r3, #64	; 0x40
 8005190:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005192:	2300      	movs	r3, #0
 8005194:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005196:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800519a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800519c:	f107 0308 	add.w	r3, r7, #8
 80051a0:	4619      	mov	r1, r3
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7ff fe22 	bl	8004dec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 fa23 	bl	80055f4 <SDMMC_GetCmdResp3>
 80051ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051b0:	69fb      	ldr	r3, [r7, #28]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3720      	adds	r7, #32
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b088      	sub	sp, #32
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
 80051c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80051c8:	2306      	movs	r3, #6
 80051ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051cc:	2340      	movs	r3, #64	; 0x40
 80051ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051d0:	2300      	movs	r3, #0
 80051d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051da:	f107 0308 	add.w	r3, r7, #8
 80051de:	4619      	mov	r1, r3
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f7ff fe03 	bl	8004dec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80051e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ea:	2106      	movs	r1, #6
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f8cf 	bl	8005390 <SDMMC_GetCmdResp1>
 80051f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051f4:	69fb      	ldr	r3, [r7, #28]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3720      	adds	r7, #32
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b088      	sub	sp, #32
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005206:	2300      	movs	r3, #0
 8005208:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800520a:	2333      	movs	r3, #51	; 0x33
 800520c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800520e:	2340      	movs	r3, #64	; 0x40
 8005210:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005212:	2300      	movs	r3, #0
 8005214:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005216:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800521a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800521c:	f107 0308 	add.w	r3, r7, #8
 8005220:	4619      	mov	r1, r3
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7ff fde2 	bl	8004dec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005228:	f241 3288 	movw	r2, #5000	; 0x1388
 800522c:	2133      	movs	r1, #51	; 0x33
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f8ae 	bl	8005390 <SDMMC_GetCmdResp1>
 8005234:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005236:	69fb      	ldr	r3, [r7, #28]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3720      	adds	r7, #32
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b088      	sub	sp, #32
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800524c:	2302      	movs	r3, #2
 800524e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005250:	23c0      	movs	r3, #192	; 0xc0
 8005252:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005254:	2300      	movs	r3, #0
 8005256:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800525c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800525e:	f107 0308 	add.w	r3, r7, #8
 8005262:	4619      	mov	r1, r3
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7ff fdc1 	bl	8004dec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f97c 	bl	8005568 <SDMMC_GetCmdResp2>
 8005270:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005272:	69fb      	ldr	r3, [r7, #28]
}
 8005274:	4618      	mov	r0, r3
 8005276:	3720      	adds	r7, #32
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b088      	sub	sp, #32
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800528a:	2309      	movs	r3, #9
 800528c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800528e:	23c0      	movs	r3, #192	; 0xc0
 8005290:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005292:	2300      	movs	r3, #0
 8005294:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800529a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800529c:	f107 0308 	add.w	r3, r7, #8
 80052a0:	4619      	mov	r1, r3
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7ff fda2 	bl	8004dec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f95d 	bl	8005568 <SDMMC_GetCmdResp2>
 80052ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052b0:	69fb      	ldr	r3, [r7, #28]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3720      	adds	r7, #32
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b088      	sub	sp, #32
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
 80052c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80052c4:	2300      	movs	r3, #0
 80052c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80052c8:	2303      	movs	r3, #3
 80052ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052cc:	2340      	movs	r3, #64	; 0x40
 80052ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052d0:	2300      	movs	r3, #0
 80052d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052da:	f107 0308 	add.w	r3, r7, #8
 80052de:	4619      	mov	r1, r3
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7ff fd83 	bl	8004dec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	2103      	movs	r1, #3
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f9bc 	bl	8005668 <SDMMC_GetCmdResp6>
 80052f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052f2:	69fb      	ldr	r3, [r7, #28]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3720      	adds	r7, #32
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800530a:	230d      	movs	r3, #13
 800530c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800530e:	2340      	movs	r3, #64	; 0x40
 8005310:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005312:	2300      	movs	r3, #0
 8005314:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800531a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800531c:	f107 0308 	add.w	r3, r7, #8
 8005320:	4619      	mov	r1, r3
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7ff fd62 	bl	8004dec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005328:	f241 3288 	movw	r2, #5000	; 0x1388
 800532c:	210d      	movs	r1, #13
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f82e 	bl	8005390 <SDMMC_GetCmdResp1>
 8005334:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005336:	69fb      	ldr	r3, [r7, #28]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3720      	adds	r7, #32
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005340:	b490      	push	{r4, r7}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005348:	4b0f      	ldr	r3, [pc, #60]	; (8005388 <SDMMC_GetCmdError+0x48>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a0f      	ldr	r2, [pc, #60]	; (800538c <SDMMC_GetCmdError+0x4c>)
 800534e:	fba2 2303 	umull	r2, r3, r2, r3
 8005352:	0a5b      	lsrs	r3, r3, #9
 8005354:	f241 3288 	movw	r2, #5000	; 0x1388
 8005358:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800535c:	4623      	mov	r3, r4
 800535e:	1e5c      	subs	r4, r3, #1
 8005360:	2b00      	cmp	r3, #0
 8005362:	d102      	bne.n	800536a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005364:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005368:	e009      	b.n	800537e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800536e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0f2      	beq.n	800535c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	22c5      	movs	r2, #197	; 0xc5
 800537a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bc90      	pop	{r4, r7}
 8005386:	4770      	bx	lr
 8005388:	20000014 	.word	0x20000014
 800538c:	10624dd3 	.word	0x10624dd3

08005390 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005390:	b590      	push	{r4, r7, lr}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	460b      	mov	r3, r1
 800539a:	607a      	str	r2, [r7, #4]
 800539c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800539e:	4b6f      	ldr	r3, [pc, #444]	; (800555c <SDMMC_GetCmdResp1+0x1cc>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a6f      	ldr	r2, [pc, #444]	; (8005560 <SDMMC_GetCmdResp1+0x1d0>)
 80053a4:	fba2 2303 	umull	r2, r3, r2, r3
 80053a8:	0a5b      	lsrs	r3, r3, #9
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80053b0:	4623      	mov	r3, r4
 80053b2:	1e5c      	subs	r4, r3, #1
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d102      	bne.n	80053be <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80053b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80053bc:	e0c9      	b.n	8005552 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d0f0      	beq.n	80053b0 <SDMMC_GetCmdResp1+0x20>
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1eb      	bne.n	80053b0 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d004      	beq.n	80053ee <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2204      	movs	r2, #4
 80053e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80053ea:	2304      	movs	r3, #4
 80053ec:	e0b1      	b.n	8005552 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d004      	beq.n	8005404 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2201      	movs	r2, #1
 80053fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005400:	2301      	movs	r3, #1
 8005402:	e0a6      	b.n	8005552 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	22c5      	movs	r2, #197	; 0xc5
 8005408:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f7ff fd18 	bl	8004e40 <SDIO_GetCommandResponse>
 8005410:	4603      	mov	r3, r0
 8005412:	461a      	mov	r2, r3
 8005414:	7afb      	ldrb	r3, [r7, #11]
 8005416:	4293      	cmp	r3, r2
 8005418:	d001      	beq.n	800541e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800541a:	2301      	movs	r3, #1
 800541c:	e099      	b.n	8005552 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800541e:	2100      	movs	r1, #0
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f7ff fd1a 	bl	8004e5a <SDIO_GetResponse>
 8005426:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	4b4e      	ldr	r3, [pc, #312]	; (8005564 <SDMMC_GetCmdResp1+0x1d4>)
 800542c:	4013      	ands	r3, r2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8005432:	2300      	movs	r3, #0
 8005434:	e08d      	b.n	8005552 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	da02      	bge.n	8005442 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800543c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005440:	e087      	b.n	8005552 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d001      	beq.n	8005450 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800544c:	2340      	movs	r3, #64	; 0x40
 800544e:	e080      	b.n	8005552 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d001      	beq.n	800545e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800545a:	2380      	movs	r3, #128	; 0x80
 800545c:	e079      	b.n	8005552 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005468:	f44f 7380 	mov.w	r3, #256	; 0x100
 800546c:	e071      	b.n	8005552 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005478:	f44f 7300 	mov.w	r3, #512	; 0x200
 800547c:	e069      	b.n	8005552 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800548c:	e061      	b.n	8005552 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005498:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800549c:	e059      	b.n	8005552 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d002      	beq.n	80054ae <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80054a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054ac:	e051      	b.n	8005552 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80054b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054bc:	e049      	b.n	8005552 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d002      	beq.n	80054ce <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80054c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80054cc:	e041      	b.n	8005552 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d002      	beq.n	80054de <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80054d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054dc:	e039      	b.n	8005552 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80054e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80054ec:	e031      	b.n	8005552 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d002      	beq.n	80054fe <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80054f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80054fc:	e029      	b.n	8005552 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d002      	beq.n	800550e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005508:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800550c:	e021      	b.n	8005552 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d002      	beq.n	800551e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005518:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800551c:	e019      	b.n	8005552 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005528:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800552c:	e011      	b.n	8005552 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d002      	beq.n	800553e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005538:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800553c:	e009      	b.n	8005552 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	f003 0308 	and.w	r3, r3, #8
 8005544:	2b00      	cmp	r3, #0
 8005546:	d002      	beq.n	800554e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005548:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800554c:	e001      	b.n	8005552 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800554e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005552:	4618      	mov	r0, r3
 8005554:	371c      	adds	r7, #28
 8005556:	46bd      	mov	sp, r7
 8005558:	bd90      	pop	{r4, r7, pc}
 800555a:	bf00      	nop
 800555c:	20000014 	.word	0x20000014
 8005560:	10624dd3 	.word	0x10624dd3
 8005564:	fdffe008 	.word	0xfdffe008

08005568 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005568:	b490      	push	{r4, r7}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005570:	4b1e      	ldr	r3, [pc, #120]	; (80055ec <SDMMC_GetCmdResp2+0x84>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a1e      	ldr	r2, [pc, #120]	; (80055f0 <SDMMC_GetCmdResp2+0x88>)
 8005576:	fba2 2303 	umull	r2, r3, r2, r3
 800557a:	0a5b      	lsrs	r3, r3, #9
 800557c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005580:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005584:	4623      	mov	r3, r4
 8005586:	1e5c      	subs	r4, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	d102      	bne.n	8005592 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800558c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005590:	e026      	b.n	80055e0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005596:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d0f0      	beq.n	8005584 <SDMMC_GetCmdResp2+0x1c>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1eb      	bne.n	8005584 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d004      	beq.n	80055c2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2204      	movs	r2, #4
 80055bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80055be:	2304      	movs	r3, #4
 80055c0:	e00e      	b.n	80055e0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d004      	beq.n	80055d8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e003      	b.n	80055e0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	22c5      	movs	r2, #197	; 0xc5
 80055dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bc90      	pop	{r4, r7}
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	20000014 	.word	0x20000014
 80055f0:	10624dd3 	.word	0x10624dd3

080055f4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80055f4:	b490      	push	{r4, r7}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80055fc:	4b18      	ldr	r3, [pc, #96]	; (8005660 <SDMMC_GetCmdResp3+0x6c>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a18      	ldr	r2, [pc, #96]	; (8005664 <SDMMC_GetCmdResp3+0x70>)
 8005602:	fba2 2303 	umull	r2, r3, r2, r3
 8005606:	0a5b      	lsrs	r3, r3, #9
 8005608:	f241 3288 	movw	r2, #5000	; 0x1388
 800560c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005610:	4623      	mov	r3, r4
 8005612:	1e5c      	subs	r4, r3, #1
 8005614:	2b00      	cmp	r3, #0
 8005616:	d102      	bne.n	800561e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005618:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800561c:	e01b      	b.n	8005656 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005622:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800562a:	2b00      	cmp	r3, #0
 800562c:	d0f0      	beq.n	8005610 <SDMMC_GetCmdResp3+0x1c>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1eb      	bne.n	8005610 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b00      	cmp	r3, #0
 8005642:	d004      	beq.n	800564e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2204      	movs	r2, #4
 8005648:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800564a:	2304      	movs	r3, #4
 800564c:	e003      	b.n	8005656 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	22c5      	movs	r2, #197	; 0xc5
 8005652:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bc90      	pop	{r4, r7}
 800565e:	4770      	bx	lr
 8005660:	20000014 	.word	0x20000014
 8005664:	10624dd3 	.word	0x10624dd3

08005668 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005668:	b590      	push	{r4, r7, lr}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	460b      	mov	r3, r1
 8005672:	607a      	str	r2, [r7, #4]
 8005674:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005676:	4b34      	ldr	r3, [pc, #208]	; (8005748 <SDMMC_GetCmdResp6+0xe0>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a34      	ldr	r2, [pc, #208]	; (800574c <SDMMC_GetCmdResp6+0xe4>)
 800567c:	fba2 2303 	umull	r2, r3, r2, r3
 8005680:	0a5b      	lsrs	r3, r3, #9
 8005682:	f241 3288 	movw	r2, #5000	; 0x1388
 8005686:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800568a:	4623      	mov	r3, r4
 800568c:	1e5c      	subs	r4, r3, #1
 800568e:	2b00      	cmp	r3, #0
 8005690:	d102      	bne.n	8005698 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005692:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005696:	e052      	b.n	800573e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800569c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d0f0      	beq.n	800568a <SDMMC_GetCmdResp6+0x22>
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1eb      	bne.n	800568a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b6:	f003 0304 	and.w	r3, r3, #4
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d004      	beq.n	80056c8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2204      	movs	r2, #4
 80056c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80056c4:	2304      	movs	r3, #4
 80056c6:	e03a      	b.n	800573e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d004      	beq.n	80056de <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2201      	movs	r2, #1
 80056d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80056da:	2301      	movs	r3, #1
 80056dc:	e02f      	b.n	800573e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f7ff fbae 	bl	8004e40 <SDIO_GetCommandResponse>
 80056e4:	4603      	mov	r3, r0
 80056e6:	461a      	mov	r2, r3
 80056e8:	7afb      	ldrb	r3, [r7, #11]
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d001      	beq.n	80056f2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e025      	b.n	800573e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	22c5      	movs	r2, #197	; 0xc5
 80056f6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80056f8:	2100      	movs	r1, #0
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f7ff fbad 	bl	8004e5a <SDIO_GetResponse>
 8005700:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d106      	bne.n	800571a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	0c1b      	lsrs	r3, r3, #16
 8005710:	b29a      	uxth	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005716:	2300      	movs	r3, #0
 8005718:	e011      	b.n	800573e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005724:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005728:	e009      	b.n	800573e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d002      	beq.n	800573a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005738:	e001      	b.n	800573e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800573a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800573e:	4618      	mov	r0, r3
 8005740:	371c      	adds	r7, #28
 8005742:	46bd      	mov	sp, r7
 8005744:	bd90      	pop	{r4, r7, pc}
 8005746:	bf00      	nop
 8005748:	20000014 	.word	0x20000014
 800574c:	10624dd3 	.word	0x10624dd3

08005750 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005750:	b490      	push	{r4, r7}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005758:	4b21      	ldr	r3, [pc, #132]	; (80057e0 <SDMMC_GetCmdResp7+0x90>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a21      	ldr	r2, [pc, #132]	; (80057e4 <SDMMC_GetCmdResp7+0x94>)
 800575e:	fba2 2303 	umull	r2, r3, r2, r3
 8005762:	0a5b      	lsrs	r3, r3, #9
 8005764:	f241 3288 	movw	r2, #5000	; 0x1388
 8005768:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800576c:	4623      	mov	r3, r4
 800576e:	1e5c      	subs	r4, r3, #1
 8005770:	2b00      	cmp	r3, #0
 8005772:	d102      	bne.n	800577a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005774:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005778:	e02c      	b.n	80057d4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800577e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0f0      	beq.n	800576c <SDMMC_GetCmdResp7+0x1c>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1eb      	bne.n	800576c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b00      	cmp	r3, #0
 800579e:	d004      	beq.n	80057aa <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2204      	movs	r2, #4
 80057a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80057a6:	2304      	movs	r3, #4
 80057a8:	e014      	b.n	80057d4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d004      	beq.n	80057c0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80057bc:	2301      	movs	r3, #1
 80057be:	e009      	b.n	80057d4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d002      	beq.n	80057d2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2240      	movs	r2, #64	; 0x40
 80057d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80057d2:	2300      	movs	r3, #0
  
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bc90      	pop	{r4, r7}
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	20000014 	.word	0x20000014
 80057e4:	10624dd3 	.word	0x10624dd3

080057e8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	4603      	mov	r3, r0
 80057f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80057f2:	79fb      	ldrb	r3, [r7, #7]
 80057f4:	4a08      	ldr	r2, [pc, #32]	; (8005818 <disk_status+0x30>)
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	79fa      	ldrb	r2, [r7, #7]
 8005800:	4905      	ldr	r1, [pc, #20]	; (8005818 <disk_status+0x30>)
 8005802:	440a      	add	r2, r1
 8005804:	7a12      	ldrb	r2, [r2, #8]
 8005806:	4610      	mov	r0, r2
 8005808:	4798      	blx	r3
 800580a:	4603      	mov	r3, r0
 800580c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800580e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005810:	4618      	mov	r0, r3
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	200000c0 	.word	0x200000c0

0800581c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	4603      	mov	r3, r0
 8005824:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800582a:	79fb      	ldrb	r3, [r7, #7]
 800582c:	4a0d      	ldr	r2, [pc, #52]	; (8005864 <disk_initialize+0x48>)
 800582e:	5cd3      	ldrb	r3, [r2, r3]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d111      	bne.n	8005858 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005834:	79fb      	ldrb	r3, [r7, #7]
 8005836:	4a0b      	ldr	r2, [pc, #44]	; (8005864 <disk_initialize+0x48>)
 8005838:	2101      	movs	r1, #1
 800583a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800583c:	79fb      	ldrb	r3, [r7, #7]
 800583e:	4a09      	ldr	r2, [pc, #36]	; (8005864 <disk_initialize+0x48>)
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4413      	add	r3, r2
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	79fa      	ldrb	r2, [r7, #7]
 800584a:	4906      	ldr	r1, [pc, #24]	; (8005864 <disk_initialize+0x48>)
 800584c:	440a      	add	r2, r1
 800584e:	7a12      	ldrb	r2, [r2, #8]
 8005850:	4610      	mov	r0, r2
 8005852:	4798      	blx	r3
 8005854:	4603      	mov	r3, r0
 8005856:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005858:	7bfb      	ldrb	r3, [r7, #15]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	200000c0 	.word	0x200000c0

08005868 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005868:	b590      	push	{r4, r7, lr}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	60b9      	str	r1, [r7, #8]
 8005870:	607a      	str	r2, [r7, #4]
 8005872:	603b      	str	r3, [r7, #0]
 8005874:	4603      	mov	r3, r0
 8005876:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005878:	7bfb      	ldrb	r3, [r7, #15]
 800587a:	4a0a      	ldr	r2, [pc, #40]	; (80058a4 <disk_read+0x3c>)
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	689c      	ldr	r4, [r3, #8]
 8005884:	7bfb      	ldrb	r3, [r7, #15]
 8005886:	4a07      	ldr	r2, [pc, #28]	; (80058a4 <disk_read+0x3c>)
 8005888:	4413      	add	r3, r2
 800588a:	7a18      	ldrb	r0, [r3, #8]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	68b9      	ldr	r1, [r7, #8]
 8005892:	47a0      	blx	r4
 8005894:	4603      	mov	r3, r0
 8005896:	75fb      	strb	r3, [r7, #23]
  return res;
 8005898:	7dfb      	ldrb	r3, [r7, #23]
}
 800589a:	4618      	mov	r0, r3
 800589c:	371c      	adds	r7, #28
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd90      	pop	{r4, r7, pc}
 80058a2:	bf00      	nop
 80058a4:	200000c0 	.word	0x200000c0

080058a8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80058a8:	b590      	push	{r4, r7, lr}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60b9      	str	r1, [r7, #8]
 80058b0:	607a      	str	r2, [r7, #4]
 80058b2:	603b      	str	r3, [r7, #0]
 80058b4:	4603      	mov	r3, r0
 80058b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80058b8:	7bfb      	ldrb	r3, [r7, #15]
 80058ba:	4a0a      	ldr	r2, [pc, #40]	; (80058e4 <disk_write+0x3c>)
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	68dc      	ldr	r4, [r3, #12]
 80058c4:	7bfb      	ldrb	r3, [r7, #15]
 80058c6:	4a07      	ldr	r2, [pc, #28]	; (80058e4 <disk_write+0x3c>)
 80058c8:	4413      	add	r3, r2
 80058ca:	7a18      	ldrb	r0, [r3, #8]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	68b9      	ldr	r1, [r7, #8]
 80058d2:	47a0      	blx	r4
 80058d4:	4603      	mov	r3, r0
 80058d6:	75fb      	strb	r3, [r7, #23]
  return res;
 80058d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	371c      	adds	r7, #28
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd90      	pop	{r4, r7, pc}
 80058e2:	bf00      	nop
 80058e4:	200000c0 	.word	0x200000c0

080058e8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	3301      	adds	r3, #1
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80058f8:	89fb      	ldrh	r3, [r7, #14]
 80058fa:	021b      	lsls	r3, r3, #8
 80058fc:	b21a      	sxth	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	b21b      	sxth	r3, r3
 8005904:	4313      	orrs	r3, r2
 8005906:	b21b      	sxth	r3, r3
 8005908:	81fb      	strh	r3, [r7, #14]
	return rv;
 800590a:	89fb      	ldrh	r3, [r7, #14]
}
 800590c:	4618      	mov	r0, r3
 800590e:	3714      	adds	r7, #20
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	3303      	adds	r3, #3
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	021b      	lsls	r3, r3, #8
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	3202      	adds	r2, #2
 8005930:	7812      	ldrb	r2, [r2, #0]
 8005932:	4313      	orrs	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	021b      	lsls	r3, r3, #8
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	3201      	adds	r2, #1
 800593e:	7812      	ldrb	r2, [r2, #0]
 8005940:	4313      	orrs	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	021b      	lsls	r3, r3, #8
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	7812      	ldrb	r2, [r2, #0]
 800594c:	4313      	orrs	r3, r2
 800594e:	60fb      	str	r3, [r7, #12]
	return rv;
 8005950:	68fb      	ldr	r3, [r7, #12]
}
 8005952:	4618      	mov	r0, r3
 8005954:	3714      	adds	r7, #20
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800595e:	b480      	push	{r7}
 8005960:	b083      	sub	sp, #12
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
 8005966:	460b      	mov	r3, r1
 8005968:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	607a      	str	r2, [r7, #4]
 8005970:	887a      	ldrh	r2, [r7, #2]
 8005972:	b2d2      	uxtb	r2, r2
 8005974:	701a      	strb	r2, [r3, #0]
 8005976:	887b      	ldrh	r3, [r7, #2]
 8005978:	0a1b      	lsrs	r3, r3, #8
 800597a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	1c5a      	adds	r2, r3, #1
 8005980:	607a      	str	r2, [r7, #4]
 8005982:	887a      	ldrh	r2, [r7, #2]
 8005984:	b2d2      	uxtb	r2, r2
 8005986:	701a      	strb	r2, [r3, #0]
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	1c5a      	adds	r2, r3, #1
 80059a2:	607a      	str	r2, [r7, #4]
 80059a4:	683a      	ldr	r2, [r7, #0]
 80059a6:	b2d2      	uxtb	r2, r2
 80059a8:	701a      	strb	r2, [r3, #0]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	0a1b      	lsrs	r3, r3, #8
 80059ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	1c5a      	adds	r2, r3, #1
 80059b4:	607a      	str	r2, [r7, #4]
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	b2d2      	uxtb	r2, r2
 80059ba:	701a      	strb	r2, [r3, #0]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	0a1b      	lsrs	r3, r3, #8
 80059c0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	1c5a      	adds	r2, r3, #1
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	683a      	ldr	r2, [r7, #0]
 80059ca:	b2d2      	uxtb	r2, r2
 80059cc:	701a      	strb	r2, [r3, #0]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	0a1b      	lsrs	r3, r3, #8
 80059d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	1c5a      	adds	r2, r3, #1
 80059d8:	607a      	str	r2, [r7, #4]
 80059da:	683a      	ldr	r2, [r7, #0]
 80059dc:	b2d2      	uxtb	r2, r2
 80059de:	701a      	strb	r2, [r3, #0]
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80059ec:	b480      	push	{r7}
 80059ee:	b087      	sub	sp, #28
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00d      	beq.n	8005a22 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	1c53      	adds	r3, r2, #1
 8005a0a:	613b      	str	r3, [r7, #16]
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	1c59      	adds	r1, r3, #1
 8005a10:	6179      	str	r1, [r7, #20]
 8005a12:	7812      	ldrb	r2, [r2, #0]
 8005a14:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	607b      	str	r3, [r7, #4]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1f1      	bne.n	8005a06 <mem_cpy+0x1a>
	}
}
 8005a22:	bf00      	nop
 8005a24:	371c      	adds	r7, #28
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005a2e:	b480      	push	{r7}
 8005a30:	b087      	sub	sp, #28
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	60f8      	str	r0, [r7, #12]
 8005a36:	60b9      	str	r1, [r7, #8]
 8005a38:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	617a      	str	r2, [r7, #20]
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	607b      	str	r3, [r7, #4]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1f3      	bne.n	8005a3e <mem_set+0x10>
}
 8005a56:	bf00      	nop
 8005a58:	371c      	adds	r7, #28
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005a62:	b480      	push	{r7}
 8005a64:	b089      	sub	sp, #36	; 0x24
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	60f8      	str	r0, [r7, #12]
 8005a6a:	60b9      	str	r1, [r7, #8]
 8005a6c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	61fb      	str	r3, [r7, #28]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005a76:	2300      	movs	r3, #0
 8005a78:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	1c5a      	adds	r2, r3, #1
 8005a7e:	61fa      	str	r2, [r7, #28]
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	4619      	mov	r1, r3
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	1c5a      	adds	r2, r3, #1
 8005a88:	61ba      	str	r2, [r7, #24]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	1acb      	subs	r3, r1, r3
 8005a8e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	3b01      	subs	r3, #1
 8005a94:	607b      	str	r3, [r7, #4]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d002      	beq.n	8005aa2 <mem_cmp+0x40>
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d0eb      	beq.n	8005a7a <mem_cmp+0x18>

	return r;
 8005aa2:	697b      	ldr	r3, [r7, #20]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3724      	adds	r7, #36	; 0x24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005aba:	e002      	b.n	8005ac2 <chk_chr+0x12>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	607b      	str	r3, [r7, #4]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d005      	beq.n	8005ad6 <chk_chr+0x26>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d1f2      	bne.n	8005abc <chk_chr+0xc>
	return *str;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
	...

08005ae8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005af2:	2300      	movs	r3, #0
 8005af4:	60bb      	str	r3, [r7, #8]
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	60fb      	str	r3, [r7, #12]
 8005afa:	e029      	b.n	8005b50 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005afc:	4a27      	ldr	r2, [pc, #156]	; (8005b9c <chk_lock+0xb4>)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	011b      	lsls	r3, r3, #4
 8005b02:	4413      	add	r3, r2
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d01d      	beq.n	8005b46 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005b0a:	4a24      	ldr	r2, [pc, #144]	; (8005b9c <chk_lock+0xb4>)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	011b      	lsls	r3, r3, #4
 8005b10:	4413      	add	r3, r2
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d116      	bne.n	8005b4a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005b1c:	4a1f      	ldr	r2, [pc, #124]	; (8005b9c <chk_lock+0xb4>)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	011b      	lsls	r3, r3, #4
 8005b22:	4413      	add	r3, r2
 8005b24:	3304      	adds	r3, #4
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d10c      	bne.n	8005b4a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005b30:	4a1a      	ldr	r2, [pc, #104]	; (8005b9c <chk_lock+0xb4>)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	011b      	lsls	r3, r3, #4
 8005b36:	4413      	add	r3, r2
 8005b38:	3308      	adds	r3, #8
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d102      	bne.n	8005b4a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005b44:	e007      	b.n	8005b56 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005b46:	2301      	movs	r3, #1
 8005b48:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	60fb      	str	r3, [r7, #12]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d9d2      	bls.n	8005afc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d109      	bne.n	8005b70 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d102      	bne.n	8005b68 <chk_lock+0x80>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d101      	bne.n	8005b6c <chk_lock+0x84>
 8005b68:	2300      	movs	r3, #0
 8005b6a:	e010      	b.n	8005b8e <chk_lock+0xa6>
 8005b6c:	2312      	movs	r3, #18
 8005b6e:	e00e      	b.n	8005b8e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d108      	bne.n	8005b88 <chk_lock+0xa0>
 8005b76:	4a09      	ldr	r2, [pc, #36]	; (8005b9c <chk_lock+0xb4>)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	4413      	add	r3, r2
 8005b7e:	330c      	adds	r3, #12
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b86:	d101      	bne.n	8005b8c <chk_lock+0xa4>
 8005b88:	2310      	movs	r3, #16
 8005b8a:	e000      	b.n	8005b8e <chk_lock+0xa6>
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3714      	adds	r7, #20
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	200000a0 	.word	0x200000a0

08005ba0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	607b      	str	r3, [r7, #4]
 8005baa:	e002      	b.n	8005bb2 <enq_lock+0x12>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	607b      	str	r3, [r7, #4]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d806      	bhi.n	8005bc6 <enq_lock+0x26>
 8005bb8:	4a09      	ldr	r2, [pc, #36]	; (8005be0 <enq_lock+0x40>)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	011b      	lsls	r3, r3, #4
 8005bbe:	4413      	add	r3, r2
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1f2      	bne.n	8005bac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	bf14      	ite	ne
 8005bcc:	2301      	movne	r3, #1
 8005bce:	2300      	moveq	r3, #0
 8005bd0:	b2db      	uxtb	r3, r3
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	200000a0 	.word	0x200000a0

08005be4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	e01f      	b.n	8005c34 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005bf4:	4a41      	ldr	r2, [pc, #260]	; (8005cfc <inc_lock+0x118>)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	011b      	lsls	r3, r3, #4
 8005bfa:	4413      	add	r3, r2
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d113      	bne.n	8005c2e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005c06:	4a3d      	ldr	r2, [pc, #244]	; (8005cfc <inc_lock+0x118>)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	011b      	lsls	r3, r3, #4
 8005c0c:	4413      	add	r3, r2
 8005c0e:	3304      	adds	r3, #4
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d109      	bne.n	8005c2e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005c1a:	4a38      	ldr	r2, [pc, #224]	; (8005cfc <inc_lock+0x118>)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	011b      	lsls	r3, r3, #4
 8005c20:	4413      	add	r3, r2
 8005c22:	3308      	adds	r3, #8
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d006      	beq.n	8005c3c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	3301      	adds	r3, #1
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d9dc      	bls.n	8005bf4 <inc_lock+0x10>
 8005c3a:	e000      	b.n	8005c3e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005c3c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d132      	bne.n	8005caa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005c44:	2300      	movs	r3, #0
 8005c46:	60fb      	str	r3, [r7, #12]
 8005c48:	e002      	b.n	8005c50 <inc_lock+0x6c>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d806      	bhi.n	8005c64 <inc_lock+0x80>
 8005c56:	4a29      	ldr	r2, [pc, #164]	; (8005cfc <inc_lock+0x118>)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	011b      	lsls	r3, r3, #4
 8005c5c:	4413      	add	r3, r2
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1f2      	bne.n	8005c4a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d101      	bne.n	8005c6e <inc_lock+0x8a>
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	e040      	b.n	8005cf0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	4922      	ldr	r1, [pc, #136]	; (8005cfc <inc_lock+0x118>)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	011b      	lsls	r3, r3, #4
 8005c78:	440b      	add	r3, r1
 8005c7a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689a      	ldr	r2, [r3, #8]
 8005c80:	491e      	ldr	r1, [pc, #120]	; (8005cfc <inc_lock+0x118>)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	011b      	lsls	r3, r3, #4
 8005c86:	440b      	add	r3, r1
 8005c88:	3304      	adds	r3, #4
 8005c8a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	695a      	ldr	r2, [r3, #20]
 8005c90:	491a      	ldr	r1, [pc, #104]	; (8005cfc <inc_lock+0x118>)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	440b      	add	r3, r1
 8005c98:	3308      	adds	r3, #8
 8005c9a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005c9c:	4a17      	ldr	r2, [pc, #92]	; (8005cfc <inc_lock+0x118>)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	011b      	lsls	r3, r3, #4
 8005ca2:	4413      	add	r3, r2
 8005ca4:	330c      	adds	r3, #12
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d009      	beq.n	8005cc4 <inc_lock+0xe0>
 8005cb0:	4a12      	ldr	r2, [pc, #72]	; (8005cfc <inc_lock+0x118>)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	011b      	lsls	r3, r3, #4
 8005cb6:	4413      	add	r3, r2
 8005cb8:	330c      	adds	r3, #12
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <inc_lock+0xe0>
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	e015      	b.n	8005cf0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d108      	bne.n	8005cdc <inc_lock+0xf8>
 8005cca:	4a0c      	ldr	r2, [pc, #48]	; (8005cfc <inc_lock+0x118>)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	011b      	lsls	r3, r3, #4
 8005cd0:	4413      	add	r3, r2
 8005cd2:	330c      	adds	r3, #12
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	e001      	b.n	8005ce0 <inc_lock+0xfc>
 8005cdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ce0:	4906      	ldr	r1, [pc, #24]	; (8005cfc <inc_lock+0x118>)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	011b      	lsls	r3, r3, #4
 8005ce6:	440b      	add	r3, r1
 8005ce8:	330c      	adds	r3, #12
 8005cea:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	3301      	adds	r3, #1
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3714      	adds	r7, #20
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	200000a0 	.word	0x200000a0

08005d00 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005d08:	2300      	movs	r3, #0
 8005d0a:	60fb      	str	r3, [r7, #12]
 8005d0c:	e010      	b.n	8005d30 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005d0e:	4a0d      	ldr	r2, [pc, #52]	; (8005d44 <clear_lock+0x44>)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	011b      	lsls	r3, r3, #4
 8005d14:	4413      	add	r3, r2
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d105      	bne.n	8005d2a <clear_lock+0x2a>
 8005d1e:	4a09      	ldr	r2, [pc, #36]	; (8005d44 <clear_lock+0x44>)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	011b      	lsls	r3, r3, #4
 8005d24:	4413      	add	r3, r2
 8005d26:	2200      	movs	r2, #0
 8005d28:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	60fb      	str	r3, [r7, #12]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d9eb      	bls.n	8005d0e <clear_lock+0xe>
	}
}
 8005d36:	bf00      	nop
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	200000a0 	.word	0x200000a0

08005d48 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005d50:	2300      	movs	r3, #0
 8005d52:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	78db      	ldrb	r3, [r3, #3]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d034      	beq.n	8005dc6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d60:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	7858      	ldrb	r0, [r3, #1]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	f7ff fd9a 	bl	80058a8 <disk_write>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d002      	beq.n	8005d80 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	73fb      	strb	r3, [r7, #15]
 8005d7e:	e022      	b.n	8005dc6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	1ad2      	subs	r2, r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d217      	bcs.n	8005dc6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	789b      	ldrb	r3, [r3, #2]
 8005d9a:	613b      	str	r3, [r7, #16]
 8005d9c:	e010      	b.n	8005dc0 <sync_window+0x78>
					wsect += fs->fsize;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	4413      	add	r3, r2
 8005da6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	7858      	ldrb	r0, [r3, #1]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005db2:	2301      	movs	r3, #1
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	f7ff fd77 	bl	80058a8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	613b      	str	r3, [r7, #16]
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d8eb      	bhi.n	8005d9e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3718      	adds	r7, #24
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d01b      	beq.n	8005e20 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7ff ffad 	bl	8005d48 <sync_window>
 8005dee:	4603      	mov	r3, r0
 8005df0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005df2:	7bfb      	ldrb	r3, [r7, #15]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d113      	bne.n	8005e20 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	7858      	ldrb	r0, [r3, #1]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005e02:	2301      	movs	r3, #1
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	f7ff fd2f 	bl	8005868 <disk_read>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d004      	beq.n	8005e1a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005e10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e14:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	683a      	ldr	r2, [r7, #0]
 8005e1e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8005e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b083      	sub	sp, #12
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	3b02      	subs	r3, #2
 8005e38:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	3b02      	subs	r3, #2
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d301      	bcc.n	8005e4a <clust2sect+0x20>
 8005e46:	2300      	movs	r3, #0
 8005e48:	e008      	b.n	8005e5c <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	895b      	ldrh	r3, [r3, #10]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	fb03 f202 	mul.w	r2, r3, r2
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5a:	4413      	add	r3, r2
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b086      	sub	sp, #24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d904      	bls.n	8005e88 <get_fat+0x20>
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d302      	bcc.n	8005e8e <get_fat+0x26>
		val = 1;	/* Internal error */
 8005e88:	2301      	movs	r3, #1
 8005e8a:	617b      	str	r3, [r7, #20]
 8005e8c:	e08c      	b.n	8005fa8 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005e8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e92:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d045      	beq.n	8005f28 <get_fat+0xc0>
 8005e9c:	2b03      	cmp	r3, #3
 8005e9e:	d05d      	beq.n	8005f5c <get_fat+0xf4>
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d177      	bne.n	8005f94 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	60fb      	str	r3, [r7, #12]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	085b      	lsrs	r3, r3, #1
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	4413      	add	r3, r2
 8005eb0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	6a1a      	ldr	r2, [r3, #32]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	0a5b      	lsrs	r3, r3, #9
 8005eba:	4413      	add	r3, r2
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	6938      	ldr	r0, [r7, #16]
 8005ec0:	f7ff ff86 	bl	8005dd0 <move_window>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d167      	bne.n	8005f9a <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	1c5a      	adds	r2, r3, #1
 8005ece:	60fa      	str	r2, [r7, #12]
 8005ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005edc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	6a1a      	ldr	r2, [r3, #32]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	0a5b      	lsrs	r3, r3, #9
 8005ee6:	4413      	add	r3, r2
 8005ee8:	4619      	mov	r1, r3
 8005eea:	6938      	ldr	r0, [r7, #16]
 8005eec:	f7ff ff70 	bl	8005dd0 <move_window>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d153      	bne.n	8005f9e <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	4413      	add	r3, r2
 8005f00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f04:	021b      	lsls	r3, r3, #8
 8005f06:	461a      	mov	r2, r3
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d002      	beq.n	8005f1e <get_fat+0xb6>
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	091b      	lsrs	r3, r3, #4
 8005f1c:	e002      	b.n	8005f24 <get_fat+0xbc>
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f24:	617b      	str	r3, [r7, #20]
			break;
 8005f26:	e03f      	b.n	8005fa8 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	6a1a      	ldr	r2, [r3, #32]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	0a1b      	lsrs	r3, r3, #8
 8005f30:	4413      	add	r3, r2
 8005f32:	4619      	mov	r1, r3
 8005f34:	6938      	ldr	r0, [r7, #16]
 8005f36:	f7ff ff4b 	bl	8005dd0 <move_window>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d130      	bne.n	8005fa2 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	005b      	lsls	r3, r3, #1
 8005f4a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005f4e:	4413      	add	r3, r2
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7ff fcc9 	bl	80058e8 <ld_word>
 8005f56:	4603      	mov	r3, r0
 8005f58:	617b      	str	r3, [r7, #20]
			break;
 8005f5a:	e025      	b.n	8005fa8 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	6a1a      	ldr	r2, [r3, #32]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	09db      	lsrs	r3, r3, #7
 8005f64:	4413      	add	r3, r2
 8005f66:	4619      	mov	r1, r3
 8005f68:	6938      	ldr	r0, [r7, #16]
 8005f6a:	f7ff ff31 	bl	8005dd0 <move_window>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d118      	bne.n	8005fa6 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005f82:	4413      	add	r3, r2
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7ff fcc7 	bl	8005918 <ld_dword>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005f90:	617b      	str	r3, [r7, #20]
			break;
 8005f92:	e009      	b.n	8005fa8 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005f94:	2301      	movs	r3, #1
 8005f96:	617b      	str	r3, [r7, #20]
 8005f98:	e006      	b.n	8005fa8 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f9a:	bf00      	nop
 8005f9c:	e004      	b.n	8005fa8 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005f9e:	bf00      	nop
 8005fa0:	e002      	b.n	8005fa8 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005fa2:	bf00      	nop
 8005fa4:	e000      	b.n	8005fa8 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005fa6:	bf00      	nop
		}
	}

	return val;
 8005fa8:	697b      	ldr	r3, [r7, #20]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3718      	adds	r7, #24
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005fb2:	b590      	push	{r4, r7, lr}
 8005fb4:	b089      	sub	sp, #36	; 0x24
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	60f8      	str	r0, [r7, #12]
 8005fba:	60b9      	str	r1, [r7, #8]
 8005fbc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	f240 80d6 	bls.w	8006176 <put_fat+0x1c4>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	68ba      	ldr	r2, [r7, #8]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	f080 80d0 	bcs.w	8006176 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d073      	beq.n	80060c6 <put_fat+0x114>
 8005fde:	2b03      	cmp	r3, #3
 8005fe0:	f000 8091 	beq.w	8006106 <put_fat+0x154>
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	f040 80c6 	bne.w	8006176 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	61bb      	str	r3, [r7, #24]
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	085b      	lsrs	r3, r3, #1
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6a1a      	ldr	r2, [r3, #32]
 8005ffc:	69bb      	ldr	r3, [r7, #24]
 8005ffe:	0a5b      	lsrs	r3, r3, #9
 8006000:	4413      	add	r3, r2
 8006002:	4619      	mov	r1, r3
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f7ff fee3 	bl	8005dd0 <move_window>
 800600a:	4603      	mov	r3, r0
 800600c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800600e:	7ffb      	ldrb	r3, [r7, #31]
 8006010:	2b00      	cmp	r3, #0
 8006012:	f040 80a9 	bne.w	8006168 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	1c59      	adds	r1, r3, #1
 8006020:	61b9      	str	r1, [r7, #24]
 8006022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006026:	4413      	add	r3, r2
 8006028:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00d      	beq.n	8006050 <put_fat+0x9e>
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	b25b      	sxtb	r3, r3
 800603a:	f003 030f 	and.w	r3, r3, #15
 800603e:	b25a      	sxtb	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	b2db      	uxtb	r3, r3
 8006044:	011b      	lsls	r3, r3, #4
 8006046:	b25b      	sxtb	r3, r3
 8006048:	4313      	orrs	r3, r2
 800604a:	b25b      	sxtb	r3, r3
 800604c:	b2db      	uxtb	r3, r3
 800604e:	e001      	b.n	8006054 <put_fat+0xa2>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	b2db      	uxtb	r3, r3
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2201      	movs	r2, #1
 800605c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6a1a      	ldr	r2, [r3, #32]
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	0a5b      	lsrs	r3, r3, #9
 8006066:	4413      	add	r3, r2
 8006068:	4619      	mov	r1, r3
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f7ff feb0 	bl	8005dd0 <move_window>
 8006070:	4603      	mov	r3, r0
 8006072:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006074:	7ffb      	ldrb	r3, [r7, #31]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d178      	bne.n	800616c <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006086:	4413      	add	r3, r2
 8006088:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	2b00      	cmp	r3, #0
 8006092:	d003      	beq.n	800609c <put_fat+0xea>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	091b      	lsrs	r3, r3, #4
 8006098:	b2db      	uxtb	r3, r3
 800609a:	e00e      	b.n	80060ba <put_fat+0x108>
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	b25b      	sxtb	r3, r3
 80060a2:	f023 030f 	bic.w	r3, r3, #15
 80060a6:	b25a      	sxtb	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	0a1b      	lsrs	r3, r3, #8
 80060ac:	b25b      	sxtb	r3, r3
 80060ae:	f003 030f 	and.w	r3, r3, #15
 80060b2:	b25b      	sxtb	r3, r3
 80060b4:	4313      	orrs	r3, r2
 80060b6:	b25b      	sxtb	r3, r3
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2201      	movs	r2, #1
 80060c2:	70da      	strb	r2, [r3, #3]
			break;
 80060c4:	e057      	b.n	8006176 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6a1a      	ldr	r2, [r3, #32]
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	0a1b      	lsrs	r3, r3, #8
 80060ce:	4413      	add	r3, r2
 80060d0:	4619      	mov	r1, r3
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f7ff fe7c 	bl	8005dd0 <move_window>
 80060d8:	4603      	mov	r3, r0
 80060da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80060dc:	7ffb      	ldrb	r3, [r7, #31]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d146      	bne.n	8006170 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	005b      	lsls	r3, r3, #1
 80060ec:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80060f0:	4413      	add	r3, r2
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	b292      	uxth	r2, r2
 80060f6:	4611      	mov	r1, r2
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7ff fc30 	bl	800595e <st_word>
			fs->wflag = 1;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2201      	movs	r2, #1
 8006102:	70da      	strb	r2, [r3, #3]
			break;
 8006104:	e037      	b.n	8006176 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6a1a      	ldr	r2, [r3, #32]
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	09db      	lsrs	r3, r3, #7
 800610e:	4413      	add	r3, r2
 8006110:	4619      	mov	r1, r3
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f7ff fe5c 	bl	8005dd0 <move_window>
 8006118:	4603      	mov	r3, r0
 800611a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800611c:	7ffb      	ldrb	r3, [r7, #31]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d128      	bne.n	8006174 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006136:	4413      	add	r3, r2
 8006138:	4618      	mov	r0, r3
 800613a:	f7ff fbed 	bl	8005918 <ld_dword>
 800613e:	4603      	mov	r3, r0
 8006140:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006144:	4323      	orrs	r3, r4
 8006146:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006156:	4413      	add	r3, r2
 8006158:	6879      	ldr	r1, [r7, #4]
 800615a:	4618      	mov	r0, r3
 800615c:	f7ff fc1a 	bl	8005994 <st_dword>
			fs->wflag = 1;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2201      	movs	r2, #1
 8006164:	70da      	strb	r2, [r3, #3]
			break;
 8006166:	e006      	b.n	8006176 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006168:	bf00      	nop
 800616a:	e004      	b.n	8006176 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800616c:	bf00      	nop
 800616e:	e002      	b.n	8006176 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006170:	bf00      	nop
 8006172:	e000      	b.n	8006176 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006174:	bf00      	nop
		}
	}
	return res;
 8006176:	7ffb      	ldrb	r3, [r7, #31]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3724      	adds	r7, #36	; 0x24
 800617c:	46bd      	mov	sp, r7
 800617e:	bd90      	pop	{r4, r7, pc}

08006180 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b088      	sub	sp, #32
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800618c:	2300      	movs	r3, #0
 800618e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d904      	bls.n	80061a6 <remove_chain+0x26>
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d301      	bcc.n	80061aa <remove_chain+0x2a>
 80061a6:	2302      	movs	r3, #2
 80061a8:	e04b      	b.n	8006242 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00c      	beq.n	80061ca <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80061b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061b4:	6879      	ldr	r1, [r7, #4]
 80061b6:	69b8      	ldr	r0, [r7, #24]
 80061b8:	f7ff fefb 	bl	8005fb2 <put_fat>
 80061bc:	4603      	mov	r3, r0
 80061be:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80061c0:	7ffb      	ldrb	r3, [r7, #31]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <remove_chain+0x4a>
 80061c6:	7ffb      	ldrb	r3, [r7, #31]
 80061c8:	e03b      	b.n	8006242 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80061ca:	68b9      	ldr	r1, [r7, #8]
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f7ff fe4b 	bl	8005e68 <get_fat>
 80061d2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d031      	beq.n	800623e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d101      	bne.n	80061e4 <remove_chain+0x64>
 80061e0:	2302      	movs	r3, #2
 80061e2:	e02e      	b.n	8006242 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061ea:	d101      	bne.n	80061f0 <remove_chain+0x70>
 80061ec:	2301      	movs	r3, #1
 80061ee:	e028      	b.n	8006242 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80061f0:	2200      	movs	r2, #0
 80061f2:	68b9      	ldr	r1, [r7, #8]
 80061f4:	69b8      	ldr	r0, [r7, #24]
 80061f6:	f7ff fedc 	bl	8005fb2 <put_fat>
 80061fa:	4603      	mov	r3, r0
 80061fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80061fe:	7ffb      	ldrb	r3, [r7, #31]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <remove_chain+0x88>
 8006204:	7ffb      	ldrb	r3, [r7, #31]
 8006206:	e01c      	b.n	8006242 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	691a      	ldr	r2, [r3, #16]
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	3b02      	subs	r3, #2
 8006212:	429a      	cmp	r2, r3
 8006214:	d20b      	bcs.n	800622e <remove_chain+0xae>
			fs->free_clst++;
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	1c5a      	adds	r2, r3, #1
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	791b      	ldrb	r3, [r3, #4]
 8006224:	f043 0301 	orr.w	r3, r3, #1
 8006228:	b2da      	uxtb	r2, r3
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	429a      	cmp	r2, r3
 800623a:	d3c6      	bcc.n	80061ca <remove_chain+0x4a>
 800623c:	e000      	b.n	8006240 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800623e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3720      	adds	r7, #32
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b088      	sub	sp, #32
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10d      	bne.n	800627c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d004      	beq.n	8006276 <create_chain+0x2c>
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	69ba      	ldr	r2, [r7, #24]
 8006272:	429a      	cmp	r2, r3
 8006274:	d31b      	bcc.n	80062ae <create_chain+0x64>
 8006276:	2301      	movs	r3, #1
 8006278:	61bb      	str	r3, [r7, #24]
 800627a:	e018      	b.n	80062ae <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800627c:	6839      	ldr	r1, [r7, #0]
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7ff fdf2 	bl	8005e68 <get_fat>
 8006284:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d801      	bhi.n	8006290 <create_chain+0x46>
 800628c:	2301      	movs	r3, #1
 800628e:	e070      	b.n	8006372 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006296:	d101      	bne.n	800629c <create_chain+0x52>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	e06a      	b.n	8006372 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d201      	bcs.n	80062aa <create_chain+0x60>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	e063      	b.n	8006372 <create_chain+0x128>
		scl = clst;
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	3301      	adds	r3, #1
 80062b6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	69fa      	ldr	r2, [r7, #28]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d307      	bcc.n	80062d2 <create_chain+0x88>
				ncl = 2;
 80062c2:	2302      	movs	r3, #2
 80062c4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80062c6:	69fa      	ldr	r2, [r7, #28]
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d901      	bls.n	80062d2 <create_chain+0x88>
 80062ce:	2300      	movs	r3, #0
 80062d0:	e04f      	b.n	8006372 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80062d2:	69f9      	ldr	r1, [r7, #28]
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f7ff fdc7 	bl	8005e68 <get_fat>
 80062da:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00e      	beq.n	8006300 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d003      	beq.n	80062f0 <create_chain+0xa6>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062ee:	d101      	bne.n	80062f4 <create_chain+0xaa>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	e03e      	b.n	8006372 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80062f4:	69fa      	ldr	r2, [r7, #28]
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d1da      	bne.n	80062b2 <create_chain+0x68>
 80062fc:	2300      	movs	r3, #0
 80062fe:	e038      	b.n	8006372 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006300:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006302:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006306:	69f9      	ldr	r1, [r7, #28]
 8006308:	6938      	ldr	r0, [r7, #16]
 800630a:	f7ff fe52 	bl	8005fb2 <put_fat>
 800630e:	4603      	mov	r3, r0
 8006310:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006312:	7dfb      	ldrb	r3, [r7, #23]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d109      	bne.n	800632c <create_chain+0xe2>
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d006      	beq.n	800632c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800631e:	69fa      	ldr	r2, [r7, #28]
 8006320:	6839      	ldr	r1, [r7, #0]
 8006322:	6938      	ldr	r0, [r7, #16]
 8006324:	f7ff fe45 	bl	8005fb2 <put_fat>
 8006328:	4603      	mov	r3, r0
 800632a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800632c:	7dfb      	ldrb	r3, [r7, #23]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d116      	bne.n	8006360 <create_chain+0x116>
		fs->last_clst = ncl;
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	69fa      	ldr	r2, [r7, #28]
 8006336:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	691a      	ldr	r2, [r3, #16]
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	3b02      	subs	r3, #2
 8006342:	429a      	cmp	r2, r3
 8006344:	d804      	bhi.n	8006350 <create_chain+0x106>
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	1e5a      	subs	r2, r3, #1
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	791b      	ldrb	r3, [r3, #4]
 8006354:	f043 0301 	orr.w	r3, r3, #1
 8006358:	b2da      	uxtb	r2, r3
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	711a      	strb	r2, [r3, #4]
 800635e:	e007      	b.n	8006370 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006360:	7dfb      	ldrb	r3, [r7, #23]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d102      	bne.n	800636c <create_chain+0x122>
 8006366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800636a:	e000      	b.n	800636e <create_chain+0x124>
 800636c:	2301      	movs	r3, #1
 800636e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006370:	69fb      	ldr	r3, [r7, #28]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3720      	adds	r7, #32
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800637a:	b480      	push	{r7}
 800637c:	b087      	sub	sp, #28
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
 8006382:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638e:	3304      	adds	r3, #4
 8006390:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	0a5b      	lsrs	r3, r3, #9
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	8952      	ldrh	r2, [r2, #10]
 800639a:	fbb3 f3f2 	udiv	r3, r3, r2
 800639e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	1d1a      	adds	r2, r3, #4
 80063a4:	613a      	str	r2, [r7, #16]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d101      	bne.n	80063b4 <clmt_clust+0x3a>
 80063b0:	2300      	movs	r3, #0
 80063b2:	e010      	b.n	80063d6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d307      	bcc.n	80063cc <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	617b      	str	r3, [r7, #20]
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	3304      	adds	r3, #4
 80063c8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80063ca:	e7e9      	b.n	80063a0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80063cc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	4413      	add	r3, r2
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	371c      	adds	r7, #28
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b086      	sub	sp, #24
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063f8:	d204      	bcs.n	8006404 <dir_sdi+0x22>
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	f003 031f 	and.w	r3, r3, #31
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006404:	2302      	movs	r3, #2
 8006406:	e063      	b.n	80064d0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d106      	bne.n	8006428 <dir_sdi+0x46>
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	2b02      	cmp	r3, #2
 8006420:	d902      	bls.n	8006428 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006426:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10c      	bne.n	8006448 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	095b      	lsrs	r3, r3, #5
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	8912      	ldrh	r2, [r2, #8]
 8006436:	4293      	cmp	r3, r2
 8006438:	d301      	bcc.n	800643e <dir_sdi+0x5c>
 800643a:	2302      	movs	r3, #2
 800643c:	e048      	b.n	80064d0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	61da      	str	r2, [r3, #28]
 8006446:	e029      	b.n	800649c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	895b      	ldrh	r3, [r3, #10]
 800644c:	025b      	lsls	r3, r3, #9
 800644e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006450:	e019      	b.n	8006486 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6979      	ldr	r1, [r7, #20]
 8006456:	4618      	mov	r0, r3
 8006458:	f7ff fd06 	bl	8005e68 <get_fat>
 800645c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006464:	d101      	bne.n	800646a <dir_sdi+0x88>
 8006466:	2301      	movs	r3, #1
 8006468:	e032      	b.n	80064d0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d904      	bls.n	800647a <dir_sdi+0x98>
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	429a      	cmp	r2, r3
 8006478:	d301      	bcc.n	800647e <dir_sdi+0x9c>
 800647a:	2302      	movs	r3, #2
 800647c:	e028      	b.n	80064d0 <dir_sdi+0xee>
			ofs -= csz;
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	429a      	cmp	r2, r3
 800648c:	d2e1      	bcs.n	8006452 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800648e:	6979      	ldr	r1, [r7, #20]
 8006490:	6938      	ldr	r0, [r7, #16]
 8006492:	f7ff fcca 	bl	8005e2a <clust2sect>
 8006496:	4602      	mov	r2, r0
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d101      	bne.n	80064ae <dir_sdi+0xcc>
 80064aa:	2302      	movs	r3, #2
 80064ac:	e010      	b.n	80064d0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	69da      	ldr	r2, [r3, #28]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	0a5b      	lsrs	r3, r3, #9
 80064b6:	441a      	add	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064c8:	441a      	add	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3718      	adds	r7, #24
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	3320      	adds	r3, #32
 80064ee:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	69db      	ldr	r3, [r3, #28]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d003      	beq.n	8006500 <dir_next+0x28>
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064fe:	d301      	bcc.n	8006504 <dir_next+0x2c>
 8006500:	2304      	movs	r3, #4
 8006502:	e0aa      	b.n	800665a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800650a:	2b00      	cmp	r3, #0
 800650c:	f040 8098 	bne.w	8006640 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	1c5a      	adds	r2, r3, #1
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10b      	bne.n	800653a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	095b      	lsrs	r3, r3, #5
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	8912      	ldrh	r2, [r2, #8]
 800652a:	4293      	cmp	r3, r2
 800652c:	f0c0 8088 	bcc.w	8006640 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	61da      	str	r2, [r3, #28]
 8006536:	2304      	movs	r3, #4
 8006538:	e08f      	b.n	800665a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	0a5b      	lsrs	r3, r3, #9
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	8952      	ldrh	r2, [r2, #10]
 8006542:	3a01      	subs	r2, #1
 8006544:	4013      	ands	r3, r2
 8006546:	2b00      	cmp	r3, #0
 8006548:	d17a      	bne.n	8006640 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	4619      	mov	r1, r3
 8006552:	4610      	mov	r0, r2
 8006554:	f7ff fc88 	bl	8005e68 <get_fat>
 8006558:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d801      	bhi.n	8006564 <dir_next+0x8c>
 8006560:	2302      	movs	r3, #2
 8006562:	e07a      	b.n	800665a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800656a:	d101      	bne.n	8006570 <dir_next+0x98>
 800656c:	2301      	movs	r3, #1
 800656e:	e074      	b.n	800665a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	429a      	cmp	r2, r3
 8006578:	d358      	bcc.n	800662c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d104      	bne.n	800658a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	61da      	str	r2, [r3, #28]
 8006586:	2304      	movs	r3, #4
 8006588:	e067      	b.n	800665a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	4619      	mov	r1, r3
 8006592:	4610      	mov	r0, r2
 8006594:	f7ff fe59 	bl	800624a <create_chain>
 8006598:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d101      	bne.n	80065a4 <dir_next+0xcc>
 80065a0:	2307      	movs	r3, #7
 80065a2:	e05a      	b.n	800665a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d101      	bne.n	80065ae <dir_next+0xd6>
 80065aa:	2302      	movs	r3, #2
 80065ac:	e055      	b.n	800665a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065b4:	d101      	bne.n	80065ba <dir_next+0xe2>
 80065b6:	2301      	movs	r3, #1
 80065b8:	e04f      	b.n	800665a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f7ff fbc4 	bl	8005d48 <sync_window>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d001      	beq.n	80065ca <dir_next+0xf2>
 80065c6:	2301      	movs	r3, #1
 80065c8:	e047      	b.n	800665a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	3330      	adds	r3, #48	; 0x30
 80065ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065d2:	2100      	movs	r1, #0
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7ff fa2a 	bl	8005a2e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80065da:	2300      	movs	r3, #0
 80065dc:	613b      	str	r3, [r7, #16]
 80065de:	6979      	ldr	r1, [r7, #20]
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f7ff fc22 	bl	8005e2a <clust2sect>
 80065e6:	4602      	mov	r2, r0
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80065ec:	e012      	b.n	8006614 <dir_next+0x13c>
						fs->wflag = 1;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2201      	movs	r2, #1
 80065f2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f7ff fba7 	bl	8005d48 <sync_window>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <dir_next+0x12c>
 8006600:	2301      	movs	r3, #1
 8006602:	e02a      	b.n	800665a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	3301      	adds	r3, #1
 8006608:	613b      	str	r3, [r7, #16]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660e:	1c5a      	adds	r2, r3, #1
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	62da      	str	r2, [r3, #44]	; 0x2c
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	895b      	ldrh	r3, [r3, #10]
 8006618:	461a      	mov	r2, r3
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	4293      	cmp	r3, r2
 800661e:	d3e6      	bcc.n	80065ee <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	1ad2      	subs	r2, r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006632:	6979      	ldr	r1, [r7, #20]
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f7ff fbf8 	bl	8005e2a <clust2sect>
 800663a:	4602      	mov	r2, r0
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006652:	441a      	add	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3718      	adds	r7, #24
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b086      	sub	sp, #24
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
 800666a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006672:	2100      	movs	r1, #0
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f7ff feb4 	bl	80063e2 <dir_sdi>
 800667a:	4603      	mov	r3, r0
 800667c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800667e:	7dfb      	ldrb	r3, [r7, #23]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d12b      	bne.n	80066dc <dir_alloc+0x7a>
		n = 0;
 8006684:	2300      	movs	r3, #0
 8006686:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	69db      	ldr	r3, [r3, #28]
 800668c:	4619      	mov	r1, r3
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f7ff fb9e 	bl	8005dd0 <move_window>
 8006694:	4603      	mov	r3, r0
 8006696:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006698:	7dfb      	ldrb	r3, [r7, #23]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d11d      	bne.n	80066da <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	2be5      	cmp	r3, #229	; 0xe5
 80066a6:	d004      	beq.n	80066b2 <dir_alloc+0x50>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a1b      	ldr	r3, [r3, #32]
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d107      	bne.n	80066c2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	3301      	adds	r3, #1
 80066b6:	613b      	str	r3, [r7, #16]
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d102      	bne.n	80066c6 <dir_alloc+0x64>
 80066c0:	e00c      	b.n	80066dc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80066c2:	2300      	movs	r3, #0
 80066c4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80066c6:	2101      	movs	r1, #1
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f7ff ff05 	bl	80064d8 <dir_next>
 80066ce:	4603      	mov	r3, r0
 80066d0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80066d2:	7dfb      	ldrb	r3, [r7, #23]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d0d7      	beq.n	8006688 <dir_alloc+0x26>
 80066d8:	e000      	b.n	80066dc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80066da:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80066dc:	7dfb      	ldrb	r3, [r7, #23]
 80066de:	2b04      	cmp	r3, #4
 80066e0:	d101      	bne.n	80066e6 <dir_alloc+0x84>
 80066e2:	2307      	movs	r3, #7
 80066e4:	75fb      	strb	r3, [r7, #23]
	return res;
 80066e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3718      	adds	r7, #24
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	331a      	adds	r3, #26
 80066fe:	4618      	mov	r0, r3
 8006700:	f7ff f8f2 	bl	80058e8 <ld_word>
 8006704:	4603      	mov	r3, r0
 8006706:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	2b03      	cmp	r3, #3
 800670e:	d109      	bne.n	8006724 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	3314      	adds	r3, #20
 8006714:	4618      	mov	r0, r3
 8006716:	f7ff f8e7 	bl	80058e8 <ld_word>
 800671a:	4603      	mov	r3, r0
 800671c:	041b      	lsls	r3, r3, #16
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	4313      	orrs	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006724:	68fb      	ldr	r3, [r7, #12]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b084      	sub	sp, #16
 8006732:	af00      	add	r7, sp, #0
 8006734:	60f8      	str	r0, [r7, #12]
 8006736:	60b9      	str	r1, [r7, #8]
 8006738:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	331a      	adds	r3, #26
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	b292      	uxth	r2, r2
 8006742:	4611      	mov	r1, r2
 8006744:	4618      	mov	r0, r3
 8006746:	f7ff f90a 	bl	800595e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	2b03      	cmp	r3, #3
 8006750:	d109      	bne.n	8006766 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	f103 0214 	add.w	r2, r3, #20
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	0c1b      	lsrs	r3, r3, #16
 800675c:	b29b      	uxth	r3, r3
 800675e:	4619      	mov	r1, r3
 8006760:	4610      	mov	r0, r2
 8006762:	f7ff f8fc 	bl	800595e <st_word>
	}
}
 8006766:	bf00      	nop
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b086      	sub	sp, #24
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800677c:	2100      	movs	r1, #0
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7ff fe2f 	bl	80063e2 <dir_sdi>
 8006784:	4603      	mov	r3, r0
 8006786:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006788:	7dfb      	ldrb	r3, [r7, #23]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <dir_find+0x24>
 800678e:	7dfb      	ldrb	r3, [r7, #23]
 8006790:	e03e      	b.n	8006810 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	4619      	mov	r1, r3
 8006798:	6938      	ldr	r0, [r7, #16]
 800679a:	f7ff fb19 	bl	8005dd0 <move_window>
 800679e:	4603      	mov	r3, r0
 80067a0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80067a2:	7dfb      	ldrb	r3, [r7, #23]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d12f      	bne.n	8006808 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80067b0:	7bfb      	ldrb	r3, [r7, #15]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d102      	bne.n	80067bc <dir_find+0x4e>
 80067b6:	2304      	movs	r3, #4
 80067b8:	75fb      	strb	r3, [r7, #23]
 80067ba:	e028      	b.n	800680e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	330b      	adds	r3, #11
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	330b      	adds	r3, #11
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	f003 0308 	and.w	r3, r3, #8
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10a      	bne.n	80067f4 <dir_find+0x86>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a18      	ldr	r0, [r3, #32]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	3324      	adds	r3, #36	; 0x24
 80067e6:	220b      	movs	r2, #11
 80067e8:	4619      	mov	r1, r3
 80067ea:	f7ff f93a 	bl	8005a62 <mem_cmp>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00b      	beq.n	800680c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80067f4:	2100      	movs	r1, #0
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7ff fe6e 	bl	80064d8 <dir_next>
 80067fc:	4603      	mov	r3, r0
 80067fe:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006800:	7dfb      	ldrb	r3, [r7, #23]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d0c5      	beq.n	8006792 <dir_find+0x24>
 8006806:	e002      	b.n	800680e <dir_find+0xa0>
		if (res != FR_OK) break;
 8006808:	bf00      	nop
 800680a:	e000      	b.n	800680e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800680c:	bf00      	nop

	return res;
 800680e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006810:	4618      	mov	r0, r3
 8006812:	3718      	adds	r7, #24
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006826:	2101      	movs	r1, #1
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f7ff ff1a 	bl	8006662 <dir_alloc>
 800682e:	4603      	mov	r3, r0
 8006830:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006832:	7bfb      	ldrb	r3, [r7, #15]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d11c      	bne.n	8006872 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	69db      	ldr	r3, [r3, #28]
 800683c:	4619      	mov	r1, r3
 800683e:	68b8      	ldr	r0, [r7, #8]
 8006840:	f7ff fac6 	bl	8005dd0 <move_window>
 8006844:	4603      	mov	r3, r0
 8006846:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006848:	7bfb      	ldrb	r3, [r7, #15]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d111      	bne.n	8006872 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	2220      	movs	r2, #32
 8006854:	2100      	movs	r1, #0
 8006856:	4618      	mov	r0, r3
 8006858:	f7ff f8e9 	bl	8005a2e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a18      	ldr	r0, [r3, #32]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	3324      	adds	r3, #36	; 0x24
 8006864:	220b      	movs	r2, #11
 8006866:	4619      	mov	r1, r3
 8006868:	f7ff f8c0 	bl	80059ec <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2201      	movs	r2, #1
 8006870:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006872:	7bfb      	ldrb	r3, [r7, #15]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	2200      	movs	r2, #0
 800688a:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d04e      	beq.n	8006932 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8006894:	2300      	movs	r3, #0
 8006896:	613b      	str	r3, [r7, #16]
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800689c:	e021      	b.n	80068e2 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a1a      	ldr	r2, [r3, #32]
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	1c59      	adds	r1, r3, #1
 80068a6:	6179      	str	r1, [r7, #20]
 80068a8:	4413      	add	r3, r2
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
 80068b0:	2b20      	cmp	r3, #32
 80068b2:	d100      	bne.n	80068b6 <get_fileinfo+0x3a>
 80068b4:	e015      	b.n	80068e2 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
 80068b8:	2b05      	cmp	r3, #5
 80068ba:	d101      	bne.n	80068c0 <get_fileinfo+0x44>
 80068bc:	23e5      	movs	r3, #229	; 0xe5
 80068be:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	2b09      	cmp	r3, #9
 80068c4:	d106      	bne.n	80068d4 <get_fileinfo+0x58>
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	1c5a      	adds	r2, r3, #1
 80068ca:	613a      	str	r2, [r7, #16]
 80068cc:	683a      	ldr	r2, [r7, #0]
 80068ce:	4413      	add	r3, r2
 80068d0:	222e      	movs	r2, #46	; 0x2e
 80068d2:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	1c5a      	adds	r2, r3, #1
 80068d8:	613a      	str	r2, [r7, #16]
 80068da:	683a      	ldr	r2, [r7, #0]
 80068dc:	4413      	add	r3, r2
 80068de:	7bfa      	ldrb	r2, [r7, #15]
 80068e0:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	2b0a      	cmp	r3, #10
 80068e6:	d9da      	bls.n	800689e <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	4413      	add	r3, r2
 80068ee:	3309      	adds	r3, #9
 80068f0:	2200      	movs	r2, #0
 80068f2:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a1b      	ldr	r3, [r3, #32]
 80068f8:	7ada      	ldrb	r2, [r3, #11]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	331c      	adds	r3, #28
 8006904:	4618      	mov	r0, r3
 8006906:	f7ff f807 	bl	8005918 <ld_dword>
 800690a:	4602      	mov	r2, r0
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	3316      	adds	r3, #22
 8006916:	4618      	mov	r0, r3
 8006918:	f7fe fffe 	bl	8005918 <ld_dword>
 800691c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	b29a      	uxth	r2, r3
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	80da      	strh	r2, [r3, #6]
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	0c1b      	lsrs	r3, r3, #16
 800692a:	b29a      	uxth	r2, r3
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	809a      	strh	r2, [r3, #4]
 8006930:	e000      	b.n	8006934 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006932:	bf00      	nop
}
 8006934:	3718      	adds	r7, #24
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
	...

0800693c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b088      	sub	sp, #32
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	60fb      	str	r3, [r7, #12]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	3324      	adds	r3, #36	; 0x24
 8006950:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006952:	220b      	movs	r2, #11
 8006954:	2120      	movs	r1, #32
 8006956:	68b8      	ldr	r0, [r7, #8]
 8006958:	f7ff f869 	bl	8005a2e <mem_set>
	si = i = 0; ni = 8;
 800695c:	2300      	movs	r3, #0
 800695e:	613b      	str	r3, [r7, #16]
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	617b      	str	r3, [r7, #20]
 8006964:	2308      	movs	r3, #8
 8006966:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	1c5a      	adds	r2, r3, #1
 800696c:	617a      	str	r2, [r7, #20]
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	4413      	add	r3, r2
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006976:	7ffb      	ldrb	r3, [r7, #31]
 8006978:	2b20      	cmp	r3, #32
 800697a:	d94e      	bls.n	8006a1a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800697c:	7ffb      	ldrb	r3, [r7, #31]
 800697e:	2b2f      	cmp	r3, #47	; 0x2f
 8006980:	d006      	beq.n	8006990 <create_name+0x54>
 8006982:	7ffb      	ldrb	r3, [r7, #31]
 8006984:	2b5c      	cmp	r3, #92	; 0x5c
 8006986:	d110      	bne.n	80069aa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006988:	e002      	b.n	8006990 <create_name+0x54>
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	3301      	adds	r3, #1
 800698e:	617b      	str	r3, [r7, #20]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	4413      	add	r3, r2
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	2b2f      	cmp	r3, #47	; 0x2f
 800699a:	d0f6      	beq.n	800698a <create_name+0x4e>
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	4413      	add	r3, r2
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	2b5c      	cmp	r3, #92	; 0x5c
 80069a6:	d0f0      	beq.n	800698a <create_name+0x4e>
			break;
 80069a8:	e038      	b.n	8006a1c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80069aa:	7ffb      	ldrb	r3, [r7, #31]
 80069ac:	2b2e      	cmp	r3, #46	; 0x2e
 80069ae:	d003      	beq.n	80069b8 <create_name+0x7c>
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d30c      	bcc.n	80069d2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	2b0b      	cmp	r3, #11
 80069bc:	d002      	beq.n	80069c4 <create_name+0x88>
 80069be:	7ffb      	ldrb	r3, [r7, #31]
 80069c0:	2b2e      	cmp	r3, #46	; 0x2e
 80069c2:	d001      	beq.n	80069c8 <create_name+0x8c>
 80069c4:	2306      	movs	r3, #6
 80069c6:	e044      	b.n	8006a52 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80069c8:	2308      	movs	r3, #8
 80069ca:	613b      	str	r3, [r7, #16]
 80069cc:	230b      	movs	r3, #11
 80069ce:	61bb      	str	r3, [r7, #24]
			continue;
 80069d0:	e022      	b.n	8006a18 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80069d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	da04      	bge.n	80069e4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80069da:	7ffb      	ldrb	r3, [r7, #31]
 80069dc:	3b80      	subs	r3, #128	; 0x80
 80069de:	4a1f      	ldr	r2, [pc, #124]	; (8006a5c <create_name+0x120>)
 80069e0:	5cd3      	ldrb	r3, [r2, r3]
 80069e2:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80069e4:	7ffb      	ldrb	r3, [r7, #31]
 80069e6:	4619      	mov	r1, r3
 80069e8:	481d      	ldr	r0, [pc, #116]	; (8006a60 <create_name+0x124>)
 80069ea:	f7ff f861 	bl	8005ab0 <chk_chr>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d001      	beq.n	80069f8 <create_name+0xbc>
 80069f4:	2306      	movs	r3, #6
 80069f6:	e02c      	b.n	8006a52 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80069f8:	7ffb      	ldrb	r3, [r7, #31]
 80069fa:	2b60      	cmp	r3, #96	; 0x60
 80069fc:	d905      	bls.n	8006a0a <create_name+0xce>
 80069fe:	7ffb      	ldrb	r3, [r7, #31]
 8006a00:	2b7a      	cmp	r3, #122	; 0x7a
 8006a02:	d802      	bhi.n	8006a0a <create_name+0xce>
 8006a04:	7ffb      	ldrb	r3, [r7, #31]
 8006a06:	3b20      	subs	r3, #32
 8006a08:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	1c5a      	adds	r2, r3, #1
 8006a0e:	613a      	str	r2, [r7, #16]
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	4413      	add	r3, r2
 8006a14:	7ffa      	ldrb	r2, [r7, #31]
 8006a16:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006a18:	e7a6      	b.n	8006968 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006a1a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	441a      	add	r2, r3
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d101      	bne.n	8006a30 <create_name+0xf4>
 8006a2c:	2306      	movs	r3, #6
 8006a2e:	e010      	b.n	8006a52 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	2be5      	cmp	r3, #229	; 0xe5
 8006a36:	d102      	bne.n	8006a3e <create_name+0x102>
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2205      	movs	r2, #5
 8006a3c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006a3e:	7ffb      	ldrb	r3, [r7, #31]
 8006a40:	2b20      	cmp	r3, #32
 8006a42:	d801      	bhi.n	8006a48 <create_name+0x10c>
 8006a44:	2204      	movs	r2, #4
 8006a46:	e000      	b.n	8006a4a <create_name+0x10e>
 8006a48:	2200      	movs	r2, #0
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	330b      	adds	r3, #11
 8006a4e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006a50:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3720      	adds	r7, #32
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	08009694 	.word	0x08009694
 8006a60:	08009634 	.word	0x08009634

08006a64 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006a78:	e002      	b.n	8006a80 <follow_path+0x1c>
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	603b      	str	r3, [r7, #0]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	2b2f      	cmp	r3, #47	; 0x2f
 8006a86:	d0f8      	beq.n	8006a7a <follow_path+0x16>
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	2b5c      	cmp	r3, #92	; 0x5c
 8006a8e:	d0f4      	beq.n	8006a7a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	2200      	movs	r2, #0
 8006a94:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	2b1f      	cmp	r3, #31
 8006a9c:	d80a      	bhi.n	8006ab4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2280      	movs	r2, #128	; 0x80
 8006aa2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f7ff fc9a 	bl	80063e2 <dir_sdi>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	75fb      	strb	r3, [r7, #23]
 8006ab2:	e043      	b.n	8006b3c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006ab4:	463b      	mov	r3, r7
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f7ff ff3f 	bl	800693c <create_name>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006ac2:	7dfb      	ldrb	r3, [r7, #23]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d134      	bne.n	8006b32 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f7ff fe50 	bl	800676e <dir_find>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006ad8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006ada:	7dfb      	ldrb	r3, [r7, #23]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00a      	beq.n	8006af6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006ae0:	7dfb      	ldrb	r3, [r7, #23]
 8006ae2:	2b04      	cmp	r3, #4
 8006ae4:	d127      	bne.n	8006b36 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006ae6:	7afb      	ldrb	r3, [r7, #11]
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d122      	bne.n	8006b36 <follow_path+0xd2>
 8006af0:	2305      	movs	r3, #5
 8006af2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006af4:	e01f      	b.n	8006b36 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006af6:	7afb      	ldrb	r3, [r7, #11]
 8006af8:	f003 0304 	and.w	r3, r3, #4
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d11c      	bne.n	8006b3a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	799b      	ldrb	r3, [r3, #6]
 8006b04:	f003 0310 	and.w	r3, r3, #16
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d102      	bne.n	8006b12 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006b0c:	2305      	movs	r3, #5
 8006b0e:	75fb      	strb	r3, [r7, #23]
 8006b10:	e014      	b.n	8006b3c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b20:	4413      	add	r3, r2
 8006b22:	4619      	mov	r1, r3
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f7ff fde3 	bl	80066f0 <ld_clust>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006b30:	e7c0      	b.n	8006ab4 <follow_path+0x50>
			if (res != FR_OK) break;
 8006b32:	bf00      	nop
 8006b34:	e002      	b.n	8006b3c <follow_path+0xd8>
				break;
 8006b36:	bf00      	nop
 8006b38:	e000      	b.n	8006b3c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006b3a:	bf00      	nop
			}
		}
	}

	return res;
 8006b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3718      	adds	r7, #24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b087      	sub	sp, #28
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006b4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b52:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d031      	beq.n	8006bc0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	617b      	str	r3, [r7, #20]
 8006b62:	e002      	b.n	8006b6a <get_ldnumber+0x24>
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	3301      	adds	r3, #1
 8006b68:	617b      	str	r3, [r7, #20]
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	2b20      	cmp	r3, #32
 8006b70:	d903      	bls.n	8006b7a <get_ldnumber+0x34>
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	2b3a      	cmp	r3, #58	; 0x3a
 8006b78:	d1f4      	bne.n	8006b64 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	2b3a      	cmp	r3, #58	; 0x3a
 8006b80:	d11c      	bne.n	8006bbc <get_ldnumber+0x76>
			tp = *path;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	1c5a      	adds	r2, r3, #1
 8006b8c:	60fa      	str	r2, [r7, #12]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	3b30      	subs	r3, #48	; 0x30
 8006b92:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	2b09      	cmp	r3, #9
 8006b98:	d80e      	bhi.n	8006bb8 <get_ldnumber+0x72>
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d10a      	bne.n	8006bb8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d107      	bne.n	8006bb8 <get_ldnumber+0x72>
					vol = (int)i;
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	617b      	str	r3, [r7, #20]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	e002      	b.n	8006bc2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006bc0:	693b      	ldr	r3, [r7, #16]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	371c      	adds	r7, #28
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
	...

08006bd0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	70da      	strb	r2, [r3, #3]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006be6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006be8:	6839      	ldr	r1, [r7, #0]
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f7ff f8f0 	bl	8005dd0 <move_window>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <check_fs+0x2a>
 8006bf6:	2304      	movs	r3, #4
 8006bf8:	e038      	b.n	8006c6c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	3330      	adds	r3, #48	; 0x30
 8006bfe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7fe fe70 	bl	80058e8 <ld_word>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d001      	beq.n	8006c18 <check_fs+0x48>
 8006c14:	2303      	movs	r3, #3
 8006c16:	e029      	b.n	8006c6c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c1e:	2be9      	cmp	r3, #233	; 0xe9
 8006c20:	d009      	beq.n	8006c36 <check_fs+0x66>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c28:	2beb      	cmp	r3, #235	; 0xeb
 8006c2a:	d11e      	bne.n	8006c6a <check_fs+0x9a>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006c32:	2b90      	cmp	r3, #144	; 0x90
 8006c34:	d119      	bne.n	8006c6a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	3330      	adds	r3, #48	; 0x30
 8006c3a:	3336      	adds	r3, #54	; 0x36
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7fe fe6b 	bl	8005918 <ld_dword>
 8006c42:	4603      	mov	r3, r0
 8006c44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006c48:	4a0a      	ldr	r2, [pc, #40]	; (8006c74 <check_fs+0xa4>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d101      	bne.n	8006c52 <check_fs+0x82>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	e00c      	b.n	8006c6c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	3330      	adds	r3, #48	; 0x30
 8006c56:	3352      	adds	r3, #82	; 0x52
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7fe fe5d 	bl	8005918 <ld_dword>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	4b05      	ldr	r3, [pc, #20]	; (8006c78 <check_fs+0xa8>)
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d101      	bne.n	8006c6a <check_fs+0x9a>
 8006c66:	2300      	movs	r3, #0
 8006c68:	e000      	b.n	8006c6c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006c6a:	2302      	movs	r3, #2
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	00544146 	.word	0x00544146
 8006c78:	33544146 	.word	0x33544146

08006c7c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b096      	sub	sp, #88	; 0x58
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	4613      	mov	r3, r2
 8006c88:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f7ff ff58 	bl	8006b46 <get_ldnumber>
 8006c96:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	da01      	bge.n	8006ca2 <find_volume+0x26>
 8006c9e:	230b      	movs	r3, #11
 8006ca0:	e22e      	b.n	8007100 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006ca2:	4aa8      	ldr	r2, [pc, #672]	; (8006f44 <find_volume+0x2c8>)
 8006ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006caa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <find_volume+0x3a>
 8006cb2:	230c      	movs	r3, #12
 8006cb4:	e224      	b.n	8007100 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006cbc:	79fb      	ldrb	r3, [r7, #7]
 8006cbe:	f023 0301 	bic.w	r3, r3, #1
 8006cc2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d01a      	beq.n	8006d02 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cce:	785b      	ldrb	r3, [r3, #1]
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7fe fd89 	bl	80057e8 <disk_status>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006cdc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ce0:	f003 0301 	and.w	r3, r3, #1
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10c      	bne.n	8006d02 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006ce8:	79fb      	ldrb	r3, [r7, #7]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d007      	beq.n	8006cfe <find_volume+0x82>
 8006cee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006cf2:	f003 0304 	and.w	r3, r3, #4
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d001      	beq.n	8006cfe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006cfa:	230a      	movs	r3, #10
 8006cfc:	e200      	b.n	8007100 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8006cfe:	2300      	movs	r3, #0
 8006d00:	e1fe      	b.n	8007100 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d04:	2200      	movs	r2, #0
 8006d06:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d12:	785b      	ldrb	r3, [r3, #1]
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7fe fd81 	bl	800581c <disk_initialize>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006d20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d001      	beq.n	8006d30 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e1e7      	b.n	8007100 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006d30:	79fb      	ldrb	r3, [r7, #7]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d007      	beq.n	8006d46 <find_volume+0xca>
 8006d36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d3a:	f003 0304 	and.w	r3, r3, #4
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d001      	beq.n	8006d46 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006d42:	230a      	movs	r3, #10
 8006d44:	e1dc      	b.n	8007100 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006d46:	2300      	movs	r3, #0
 8006d48:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006d4a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d4e:	f7ff ff3f 	bl	8006bd0 <check_fs>
 8006d52:	4603      	mov	r3, r0
 8006d54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006d58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d14b      	bne.n	8006df8 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006d60:	2300      	movs	r3, #0
 8006d62:	643b      	str	r3, [r7, #64]	; 0x40
 8006d64:	e01f      	b.n	8006da6 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d68:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d6e:	011b      	lsls	r3, r3, #4
 8006d70:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006d74:	4413      	add	r3, r2
 8006d76:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7a:	3304      	adds	r3, #4
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d006      	beq.n	8006d90 <find_volume+0x114>
 8006d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d84:	3308      	adds	r3, #8
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7fe fdc6 	bl	8005918 <ld_dword>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	e000      	b.n	8006d92 <find_volume+0x116>
 8006d90:	2200      	movs	r2, #0
 8006d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006d9a:	440b      	add	r3, r1
 8006d9c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006da2:	3301      	adds	r3, #1
 8006da4:	643b      	str	r3, [r7, #64]	; 0x40
 8006da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006da8:	2b03      	cmp	r3, #3
 8006daa:	d9dc      	bls.n	8006d66 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006dac:	2300      	movs	r3, #0
 8006dae:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d002      	beq.n	8006dbc <find_volume+0x140>
 8006db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006db8:	3b01      	subs	r3, #1
 8006dba:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006dca:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d005      	beq.n	8006dde <find_volume+0x162>
 8006dd2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006dd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006dd6:	f7ff fefb 	bl	8006bd0 <check_fs>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	e000      	b.n	8006de0 <find_volume+0x164>
 8006dde:	2303      	movs	r3, #3
 8006de0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006de4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d905      	bls.n	8006df8 <find_volume+0x17c>
 8006dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dee:	3301      	adds	r3, #1
 8006df0:	643b      	str	r3, [r7, #64]	; 0x40
 8006df2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006df4:	2b03      	cmp	r3, #3
 8006df6:	d9e1      	bls.n	8006dbc <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006df8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006dfc:	2b04      	cmp	r3, #4
 8006dfe:	d101      	bne.n	8006e04 <find_volume+0x188>
 8006e00:	2301      	movs	r3, #1
 8006e02:	e17d      	b.n	8007100 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006e04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d901      	bls.n	8006e10 <find_volume+0x194>
 8006e0c:	230d      	movs	r3, #13
 8006e0e:	e177      	b.n	8007100 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e12:	3330      	adds	r3, #48	; 0x30
 8006e14:	330b      	adds	r3, #11
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7fe fd66 	bl	80058e8 <ld_word>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e22:	d001      	beq.n	8006e28 <find_volume+0x1ac>
 8006e24:	230d      	movs	r3, #13
 8006e26:	e16b      	b.n	8007100 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2a:	3330      	adds	r3, #48	; 0x30
 8006e2c:	3316      	adds	r3, #22
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fe fd5a 	bl	80058e8 <ld_word>
 8006e34:	4603      	mov	r3, r0
 8006e36:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006e38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d106      	bne.n	8006e4c <find_volume+0x1d0>
 8006e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e40:	3330      	adds	r3, #48	; 0x30
 8006e42:	3324      	adds	r3, #36	; 0x24
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7fe fd67 	bl	8005918 <ld_dword>
 8006e4a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e50:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e54:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5e:	789b      	ldrb	r3, [r3, #2]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d005      	beq.n	8006e70 <find_volume+0x1f4>
 8006e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e66:	789b      	ldrb	r3, [r3, #2]
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d001      	beq.n	8006e70 <find_volume+0x1f4>
 8006e6c:	230d      	movs	r3, #13
 8006e6e:	e147      	b.n	8007100 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e72:	789b      	ldrb	r3, [r3, #2]
 8006e74:	461a      	mov	r2, r3
 8006e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e78:	fb02 f303 	mul.w	r3, r2, r3
 8006e7c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e88:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8c:	895b      	ldrh	r3, [r3, #10]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d008      	beq.n	8006ea4 <find_volume+0x228>
 8006e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e94:	895b      	ldrh	r3, [r3, #10]
 8006e96:	461a      	mov	r2, r3
 8006e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9a:	895b      	ldrh	r3, [r3, #10]
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d001      	beq.n	8006ea8 <find_volume+0x22c>
 8006ea4:	230d      	movs	r3, #13
 8006ea6:	e12b      	b.n	8007100 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eaa:	3330      	adds	r3, #48	; 0x30
 8006eac:	3311      	adds	r3, #17
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7fe fd1a 	bl	80058e8 <ld_word>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ebe:	891b      	ldrh	r3, [r3, #8]
 8006ec0:	f003 030f 	and.w	r3, r3, #15
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <find_volume+0x252>
 8006eca:	230d      	movs	r3, #13
 8006ecc:	e118      	b.n	8007100 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed0:	3330      	adds	r3, #48	; 0x30
 8006ed2:	3313      	adds	r3, #19
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7fe fd07 	bl	80058e8 <ld_word>
 8006eda:	4603      	mov	r3, r0
 8006edc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d106      	bne.n	8006ef2 <find_volume+0x276>
 8006ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee6:	3330      	adds	r3, #48	; 0x30
 8006ee8:	3320      	adds	r3, #32
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7fe fd14 	bl	8005918 <ld_dword>
 8006ef0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef4:	3330      	adds	r3, #48	; 0x30
 8006ef6:	330e      	adds	r3, #14
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7fe fcf5 	bl	80058e8 <ld_word>
 8006efe:	4603      	mov	r3, r0
 8006f00:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006f02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d101      	bne.n	8006f0c <find_volume+0x290>
 8006f08:	230d      	movs	r3, #13
 8006f0a:	e0f9      	b.n	8007100 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006f0c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f10:	4413      	add	r3, r2
 8006f12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f14:	8912      	ldrh	r2, [r2, #8]
 8006f16:	0912      	lsrs	r2, r2, #4
 8006f18:	b292      	uxth	r2, r2
 8006f1a:	4413      	add	r3, r2
 8006f1c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006f1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d201      	bcs.n	8006f2a <find_volume+0x2ae>
 8006f26:	230d      	movs	r3, #13
 8006f28:	e0ea      	b.n	8007100 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006f2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f32:	8952      	ldrh	r2, [r2, #10]
 8006f34:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f38:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d103      	bne.n	8006f48 <find_volume+0x2cc>
 8006f40:	230d      	movs	r3, #13
 8006f42:	e0dd      	b.n	8007100 <find_volume+0x484>
 8006f44:	20000098 	.word	0x20000098
		fmt = FS_FAT32;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d802      	bhi.n	8006f5e <find_volume+0x2e2>
 8006f58:	2302      	movs	r3, #2
 8006f5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d802      	bhi.n	8006f6e <find_volume+0x2f2>
 8006f68:	2301      	movs	r3, #1
 8006f6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f70:	1c9a      	adds	r2, r3, #2
 8006f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f74:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006f7a:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006f7c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f80:	441a      	add	r2, r3
 8006f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f84:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006f86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8a:	441a      	add	r2, r3
 8006f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8e:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8006f90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f94:	2b03      	cmp	r3, #3
 8006f96:	d11e      	bne.n	8006fd6 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9a:	3330      	adds	r3, #48	; 0x30
 8006f9c:	332a      	adds	r3, #42	; 0x2a
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7fe fca2 	bl	80058e8 <ld_word>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d001      	beq.n	8006fae <find_volume+0x332>
 8006faa:	230d      	movs	r3, #13
 8006fac:	e0a8      	b.n	8007100 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb0:	891b      	ldrh	r3, [r3, #8]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d001      	beq.n	8006fba <find_volume+0x33e>
 8006fb6:	230d      	movs	r3, #13
 8006fb8:	e0a2      	b.n	8007100 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbc:	3330      	adds	r3, #48	; 0x30
 8006fbe:	332c      	adds	r3, #44	; 0x2c
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7fe fca9 	bl	8005918 <ld_dword>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fca:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fce:	695b      	ldr	r3, [r3, #20]
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	647b      	str	r3, [r7, #68]	; 0x44
 8006fd4:	e01f      	b.n	8007016 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd8:	891b      	ldrh	r3, [r3, #8]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d101      	bne.n	8006fe2 <find_volume+0x366>
 8006fde:	230d      	movs	r3, #13
 8006fe0:	e08e      	b.n	8007100 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe4:	6a1a      	ldr	r2, [r3, #32]
 8006fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fe8:	441a      	add	r2, r3
 8006fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fec:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006fee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d103      	bne.n	8006ffe <find_volume+0x382>
 8006ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	005b      	lsls	r3, r3, #1
 8006ffc:	e00a      	b.n	8007014 <find_volume+0x398>
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007000:	695a      	ldr	r2, [r3, #20]
 8007002:	4613      	mov	r3, r2
 8007004:	005b      	lsls	r3, r3, #1
 8007006:	4413      	add	r3, r2
 8007008:	085a      	lsrs	r2, r3, #1
 800700a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007014:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007018:	699a      	ldr	r2, [r3, #24]
 800701a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800701c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007020:	0a5b      	lsrs	r3, r3, #9
 8007022:	429a      	cmp	r2, r3
 8007024:	d201      	bcs.n	800702a <find_volume+0x3ae>
 8007026:	230d      	movs	r3, #13
 8007028:	e06a      	b.n	8007100 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800702a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007030:	611a      	str	r2, [r3, #16]
 8007032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007034:	691a      	ldr	r2, [r3, #16]
 8007036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007038:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800703a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703c:	2280      	movs	r2, #128	; 0x80
 800703e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007040:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007044:	2b03      	cmp	r3, #3
 8007046:	d149      	bne.n	80070dc <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704a:	3330      	adds	r3, #48	; 0x30
 800704c:	3330      	adds	r3, #48	; 0x30
 800704e:	4618      	mov	r0, r3
 8007050:	f7fe fc4a 	bl	80058e8 <ld_word>
 8007054:	4603      	mov	r3, r0
 8007056:	2b01      	cmp	r3, #1
 8007058:	d140      	bne.n	80070dc <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800705a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800705c:	3301      	adds	r3, #1
 800705e:	4619      	mov	r1, r3
 8007060:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007062:	f7fe feb5 	bl	8005dd0 <move_window>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d137      	bne.n	80070dc <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800706c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706e:	2200      	movs	r2, #0
 8007070:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007074:	3330      	adds	r3, #48	; 0x30
 8007076:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800707a:	4618      	mov	r0, r3
 800707c:	f7fe fc34 	bl	80058e8 <ld_word>
 8007080:	4603      	mov	r3, r0
 8007082:	461a      	mov	r2, r3
 8007084:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007088:	429a      	cmp	r2, r3
 800708a:	d127      	bne.n	80070dc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800708c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708e:	3330      	adds	r3, #48	; 0x30
 8007090:	4618      	mov	r0, r3
 8007092:	f7fe fc41 	bl	8005918 <ld_dword>
 8007096:	4602      	mov	r2, r0
 8007098:	4b1b      	ldr	r3, [pc, #108]	; (8007108 <find_volume+0x48c>)
 800709a:	429a      	cmp	r2, r3
 800709c:	d11e      	bne.n	80070dc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800709e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a0:	3330      	adds	r3, #48	; 0x30
 80070a2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7fe fc36 	bl	8005918 <ld_dword>
 80070ac:	4602      	mov	r2, r0
 80070ae:	4b17      	ldr	r3, [pc, #92]	; (800710c <find_volume+0x490>)
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d113      	bne.n	80070dc <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80070b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b6:	3330      	adds	r3, #48	; 0x30
 80070b8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80070bc:	4618      	mov	r0, r3
 80070be:	f7fe fc2b 	bl	8005918 <ld_dword>
 80070c2:	4602      	mov	r2, r0
 80070c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c6:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80070c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ca:	3330      	adds	r3, #48	; 0x30
 80070cc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7fe fc21 	bl	8005918 <ld_dword>
 80070d6:	4602      	mov	r2, r0
 80070d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070da:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80070dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070de:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80070e2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80070e4:	4b0a      	ldr	r3, [pc, #40]	; (8007110 <find_volume+0x494>)
 80070e6:	881b      	ldrh	r3, [r3, #0]
 80070e8:	3301      	adds	r3, #1
 80070ea:	b29a      	uxth	r2, r3
 80070ec:	4b08      	ldr	r3, [pc, #32]	; (8007110 <find_volume+0x494>)
 80070ee:	801a      	strh	r2, [r3, #0]
 80070f0:	4b07      	ldr	r3, [pc, #28]	; (8007110 <find_volume+0x494>)
 80070f2:	881a      	ldrh	r2, [r3, #0]
 80070f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80070f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80070fa:	f7fe fe01 	bl	8005d00 <clear_lock>
#endif
	return FR_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3758      	adds	r7, #88	; 0x58
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	41615252 	.word	0x41615252
 800710c:	61417272 	.word	0x61417272
 8007110:	2000009c 	.word	0x2000009c

08007114 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800711e:	2309      	movs	r3, #9
 8007120:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d01c      	beq.n	8007162 <validate+0x4e>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d018      	beq.n	8007162 <validate+0x4e>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d013      	beq.n	8007162 <validate+0x4e>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	889a      	ldrh	r2, [r3, #4]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	88db      	ldrh	r3, [r3, #6]
 8007144:	429a      	cmp	r2, r3
 8007146:	d10c      	bne.n	8007162 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	785b      	ldrb	r3, [r3, #1]
 800714e:	4618      	mov	r0, r3
 8007150:	f7fe fb4a 	bl	80057e8 <disk_status>
 8007154:	4603      	mov	r3, r0
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	2b00      	cmp	r3, #0
 800715c:	d101      	bne.n	8007162 <validate+0x4e>
			res = FR_OK;
 800715e:	2300      	movs	r3, #0
 8007160:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007162:	7bfb      	ldrb	r3, [r7, #15]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d102      	bne.n	800716e <validate+0x5a>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	e000      	b.n	8007170 <validate+0x5c>
 800716e:	2300      	movs	r3, #0
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	6013      	str	r3, [r2, #0]
	return res;
 8007174:	7bfb      	ldrb	r3, [r7, #15]
}
 8007176:	4618      	mov	r0, r3
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
	...

08007180 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b088      	sub	sp, #32
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	4613      	mov	r3, r2
 800718c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007192:	f107 0310 	add.w	r3, r7, #16
 8007196:	4618      	mov	r0, r3
 8007198:	f7ff fcd5 	bl	8006b46 <get_ldnumber>
 800719c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	da01      	bge.n	80071a8 <f_mount+0x28>
 80071a4:	230b      	movs	r3, #11
 80071a6:	e02b      	b.n	8007200 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80071a8:	4a17      	ldr	r2, [pc, #92]	; (8007208 <f_mount+0x88>)
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071b0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d005      	beq.n	80071c4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80071b8:	69b8      	ldr	r0, [r7, #24]
 80071ba:	f7fe fda1 	bl	8005d00 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	2200      	movs	r2, #0
 80071c2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d002      	beq.n	80071d0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	490d      	ldr	r1, [pc, #52]	; (8007208 <f_mount+0x88>)
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d002      	beq.n	80071e6 <f_mount+0x66>
 80071e0:	79fb      	ldrb	r3, [r7, #7]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d001      	beq.n	80071ea <f_mount+0x6a>
 80071e6:	2300      	movs	r3, #0
 80071e8:	e00a      	b.n	8007200 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80071ea:	f107 010c 	add.w	r1, r7, #12
 80071ee:	f107 0308 	add.w	r3, r7, #8
 80071f2:	2200      	movs	r2, #0
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7ff fd41 	bl	8006c7c <find_volume>
 80071fa:	4603      	mov	r3, r0
 80071fc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80071fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007200:	4618      	mov	r0, r3
 8007202:	3720      	adds	r7, #32
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	20000098 	.word	0x20000098

0800720c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b098      	sub	sp, #96	; 0x60
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	4613      	mov	r3, r2
 8007218:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d101      	bne.n	8007224 <f_open+0x18>
 8007220:	2309      	movs	r3, #9
 8007222:	e1ad      	b.n	8007580 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007224:	79fb      	ldrb	r3, [r7, #7]
 8007226:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800722a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800722c:	79fa      	ldrb	r2, [r7, #7]
 800722e:	f107 0110 	add.w	r1, r7, #16
 8007232:	f107 0308 	add.w	r3, r7, #8
 8007236:	4618      	mov	r0, r3
 8007238:	f7ff fd20 	bl	8006c7c <find_volume>
 800723c:	4603      	mov	r3, r0
 800723e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8007242:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007246:	2b00      	cmp	r3, #0
 8007248:	f040 8191 	bne.w	800756e <f_open+0x362>
		dj.obj.fs = fs;
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007250:	68ba      	ldr	r2, [r7, #8]
 8007252:	f107 0314 	add.w	r3, r7, #20
 8007256:	4611      	mov	r1, r2
 8007258:	4618      	mov	r0, r3
 800725a:	f7ff fc03 	bl	8006a64 <follow_path>
 800725e:	4603      	mov	r3, r0
 8007260:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007264:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007268:	2b00      	cmp	r3, #0
 800726a:	d11a      	bne.n	80072a2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800726c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007270:	b25b      	sxtb	r3, r3
 8007272:	2b00      	cmp	r3, #0
 8007274:	da03      	bge.n	800727e <f_open+0x72>
				res = FR_INVALID_NAME;
 8007276:	2306      	movs	r3, #6
 8007278:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800727c:	e011      	b.n	80072a2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800727e:	79fb      	ldrb	r3, [r7, #7]
 8007280:	f023 0301 	bic.w	r3, r3, #1
 8007284:	2b00      	cmp	r3, #0
 8007286:	bf14      	ite	ne
 8007288:	2301      	movne	r3, #1
 800728a:	2300      	moveq	r3, #0
 800728c:	b2db      	uxtb	r3, r3
 800728e:	461a      	mov	r2, r3
 8007290:	f107 0314 	add.w	r3, r7, #20
 8007294:	4611      	mov	r1, r2
 8007296:	4618      	mov	r0, r3
 8007298:	f7fe fc26 	bl	8005ae8 <chk_lock>
 800729c:	4603      	mov	r3, r0
 800729e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80072a2:	79fb      	ldrb	r3, [r7, #7]
 80072a4:	f003 031c 	and.w	r3, r3, #28
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d07f      	beq.n	80073ac <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80072ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d017      	beq.n	80072e4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80072b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072b8:	2b04      	cmp	r3, #4
 80072ba:	d10e      	bne.n	80072da <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80072bc:	f7fe fc70 	bl	8005ba0 <enq_lock>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d006      	beq.n	80072d4 <f_open+0xc8>
 80072c6:	f107 0314 	add.w	r3, r7, #20
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7ff faa4 	bl	8006818 <dir_register>
 80072d0:	4603      	mov	r3, r0
 80072d2:	e000      	b.n	80072d6 <f_open+0xca>
 80072d4:	2312      	movs	r3, #18
 80072d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80072da:	79fb      	ldrb	r3, [r7, #7]
 80072dc:	f043 0308 	orr.w	r3, r3, #8
 80072e0:	71fb      	strb	r3, [r7, #7]
 80072e2:	e010      	b.n	8007306 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80072e4:	7ebb      	ldrb	r3, [r7, #26]
 80072e6:	f003 0311 	and.w	r3, r3, #17
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d003      	beq.n	80072f6 <f_open+0xea>
					res = FR_DENIED;
 80072ee:	2307      	movs	r3, #7
 80072f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80072f4:	e007      	b.n	8007306 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80072f6:	79fb      	ldrb	r3, [r7, #7]
 80072f8:	f003 0304 	and.w	r3, r3, #4
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d002      	beq.n	8007306 <f_open+0xfa>
 8007300:	2308      	movs	r3, #8
 8007302:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007306:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800730a:	2b00      	cmp	r3, #0
 800730c:	d168      	bne.n	80073e0 <f_open+0x1d4>
 800730e:	79fb      	ldrb	r3, [r7, #7]
 8007310:	f003 0308 	and.w	r3, r3, #8
 8007314:	2b00      	cmp	r3, #0
 8007316:	d063      	beq.n	80073e0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8007318:	f000 fdb8 	bl	8007e8c <get_fattime>
 800731c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800731e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007320:	330e      	adds	r3, #14
 8007322:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007324:	4618      	mov	r0, r3
 8007326:	f7fe fb35 	bl	8005994 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800732a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800732c:	3316      	adds	r3, #22
 800732e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007330:	4618      	mov	r0, r3
 8007332:	f7fe fb2f 	bl	8005994 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007338:	330b      	adds	r3, #11
 800733a:	2220      	movs	r2, #32
 800733c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007342:	4611      	mov	r1, r2
 8007344:	4618      	mov	r0, r3
 8007346:	f7ff f9d3 	bl	80066f0 <ld_clust>
 800734a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007350:	2200      	movs	r2, #0
 8007352:	4618      	mov	r0, r3
 8007354:	f7ff f9eb 	bl	800672e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800735a:	331c      	adds	r3, #28
 800735c:	2100      	movs	r1, #0
 800735e:	4618      	mov	r0, r3
 8007360:	f7fe fb18 	bl	8005994 <st_dword>
					fs->wflag = 1;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	2201      	movs	r2, #1
 8007368:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800736a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800736c:	2b00      	cmp	r3, #0
 800736e:	d037      	beq.n	80073e0 <f_open+0x1d4>
						dw = fs->winsect;
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007374:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007376:	f107 0314 	add.w	r3, r7, #20
 800737a:	2200      	movs	r2, #0
 800737c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800737e:	4618      	mov	r0, r3
 8007380:	f7fe fefe 	bl	8006180 <remove_chain>
 8007384:	4603      	mov	r3, r0
 8007386:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800738a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800738e:	2b00      	cmp	r3, #0
 8007390:	d126      	bne.n	80073e0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007396:	4618      	mov	r0, r3
 8007398:	f7fe fd1a 	bl	8005dd0 <move_window>
 800739c:	4603      	mov	r3, r0
 800739e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073a6:	3a01      	subs	r2, #1
 80073a8:	60da      	str	r2, [r3, #12]
 80073aa:	e019      	b.n	80073e0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80073ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d115      	bne.n	80073e0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80073b4:	7ebb      	ldrb	r3, [r7, #26]
 80073b6:	f003 0310 	and.w	r3, r3, #16
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d003      	beq.n	80073c6 <f_open+0x1ba>
					res = FR_NO_FILE;
 80073be:	2304      	movs	r3, #4
 80073c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80073c4:	e00c      	b.n	80073e0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80073c6:	79fb      	ldrb	r3, [r7, #7]
 80073c8:	f003 0302 	and.w	r3, r3, #2
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d007      	beq.n	80073e0 <f_open+0x1d4>
 80073d0:	7ebb      	ldrb	r3, [r7, #26]
 80073d2:	f003 0301 	and.w	r3, r3, #1
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d002      	beq.n	80073e0 <f_open+0x1d4>
						res = FR_DENIED;
 80073da:	2307      	movs	r3, #7
 80073dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80073e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d128      	bne.n	800743a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80073e8:	79fb      	ldrb	r3, [r7, #7]
 80073ea:	f003 0308 	and.w	r3, r3, #8
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d003      	beq.n	80073fa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80073f2:	79fb      	ldrb	r3, [r7, #7]
 80073f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073f8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007408:	79fb      	ldrb	r3, [r7, #7]
 800740a:	f023 0301 	bic.w	r3, r3, #1
 800740e:	2b00      	cmp	r3, #0
 8007410:	bf14      	ite	ne
 8007412:	2301      	movne	r3, #1
 8007414:	2300      	moveq	r3, #0
 8007416:	b2db      	uxtb	r3, r3
 8007418:	461a      	mov	r2, r3
 800741a:	f107 0314 	add.w	r3, r7, #20
 800741e:	4611      	mov	r1, r2
 8007420:	4618      	mov	r0, r3
 8007422:	f7fe fbdf 	bl	8005be4 <inc_lock>
 8007426:	4602      	mov	r2, r0
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d102      	bne.n	800743a <f_open+0x22e>
 8007434:	2302      	movs	r3, #2
 8007436:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800743a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800743e:	2b00      	cmp	r3, #0
 8007440:	f040 8095 	bne.w	800756e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007448:	4611      	mov	r1, r2
 800744a:	4618      	mov	r0, r3
 800744c:	f7ff f950 	bl	80066f0 <ld_clust>
 8007450:	4602      	mov	r2, r0
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007458:	331c      	adds	r3, #28
 800745a:	4618      	mov	r0, r3
 800745c:	f7fe fa5c 	bl	8005918 <ld_dword>
 8007460:	4602      	mov	r2, r0
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800746c:	693a      	ldr	r2, [r7, #16]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	88da      	ldrh	r2, [r3, #6]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	79fa      	ldrb	r2, [r7, #7]
 800747e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	3330      	adds	r3, #48	; 0x30
 8007496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800749a:	2100      	movs	r1, #0
 800749c:	4618      	mov	r0, r3
 800749e:	f7fe fac6 	bl	8005a2e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80074a2:	79fb      	ldrb	r3, [r7, #7]
 80074a4:	f003 0320 	and.w	r3, r3, #32
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d060      	beq.n	800756e <f_open+0x362>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d05c      	beq.n	800756e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	68da      	ldr	r2, [r3, #12]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	895b      	ldrh	r3, [r3, #10]
 80074c0:	025b      	lsls	r3, r3, #9
 80074c2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	657b      	str	r3, [r7, #84]	; 0x54
 80074d0:	e016      	b.n	8007500 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fe fcc6 	bl	8005e68 <get_fat>
 80074dc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80074de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d802      	bhi.n	80074ea <f_open+0x2de>
 80074e4:	2302      	movs	r3, #2
 80074e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80074ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80074ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074f0:	d102      	bne.n	80074f8 <f_open+0x2ec>
 80074f2:	2301      	movs	r3, #1
 80074f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80074f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80074fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	657b      	str	r3, [r7, #84]	; 0x54
 8007500:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007504:	2b00      	cmp	r3, #0
 8007506:	d103      	bne.n	8007510 <f_open+0x304>
 8007508:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800750a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800750c:	429a      	cmp	r2, r3
 800750e:	d8e0      	bhi.n	80074d2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007514:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007516:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800751a:	2b00      	cmp	r3, #0
 800751c:	d127      	bne.n	800756e <f_open+0x362>
 800751e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007524:	2b00      	cmp	r3, #0
 8007526:	d022      	beq.n	800756e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800752c:	4618      	mov	r0, r3
 800752e:	f7fe fc7c 	bl	8005e2a <clust2sect>
 8007532:	6478      	str	r0, [r7, #68]	; 0x44
 8007534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007536:	2b00      	cmp	r3, #0
 8007538:	d103      	bne.n	8007542 <f_open+0x336>
						res = FR_INT_ERR;
 800753a:	2302      	movs	r3, #2
 800753c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007540:	e015      	b.n	800756e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007544:	0a5a      	lsrs	r2, r3, #9
 8007546:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007548:	441a      	add	r2, r3
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	7858      	ldrb	r0, [r3, #1]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6a1a      	ldr	r2, [r3, #32]
 800755c:	2301      	movs	r3, #1
 800755e:	f7fe f983 	bl	8005868 <disk_read>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d002      	beq.n	800756e <f_open+0x362>
 8007568:	2301      	movs	r3, #1
 800756a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800756e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007572:	2b00      	cmp	r3, #0
 8007574:	d002      	beq.n	800757c <f_open+0x370>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800757c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007580:	4618      	mov	r0, r3
 8007582:	3760      	adds	r7, #96	; 0x60
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b08e      	sub	sp, #56	; 0x38
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
 8007594:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	2200      	movs	r2, #0
 800759e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f107 0214 	add.w	r2, r7, #20
 80075a6:	4611      	mov	r1, r2
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7ff fdb3 	bl	8007114 <validate>
 80075ae:	4603      	mov	r3, r0
 80075b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80075b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d107      	bne.n	80075cc <f_read+0x44>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	7d5b      	ldrb	r3, [r3, #21]
 80075c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80075c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d002      	beq.n	80075d2 <f_read+0x4a>
 80075cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80075d0:	e115      	b.n	80077fe <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	7d1b      	ldrb	r3, [r3, #20]
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d101      	bne.n	80075e2 <f_read+0x5a>
 80075de:	2307      	movs	r3, #7
 80075e0:	e10d      	b.n	80077fe <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	68da      	ldr	r2, [r3, #12]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	6a3b      	ldr	r3, [r7, #32]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	f240 80fe 	bls.w	80077f4 <f_read+0x26c>
 80075f8:	6a3b      	ldr	r3, [r7, #32]
 80075fa:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80075fc:	e0fa      	b.n	80077f4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007606:	2b00      	cmp	r3, #0
 8007608:	f040 80c6 	bne.w	8007798 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	0a5b      	lsrs	r3, r3, #9
 8007612:	697a      	ldr	r2, [r7, #20]
 8007614:	8952      	ldrh	r2, [r2, #10]
 8007616:	3a01      	subs	r2, #1
 8007618:	4013      	ands	r3, r2
 800761a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d12f      	bne.n	8007682 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d103      	bne.n	8007632 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	633b      	str	r3, [r7, #48]	; 0x30
 8007630:	e013      	b.n	800765a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007636:	2b00      	cmp	r3, #0
 8007638:	d007      	beq.n	800764a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	4619      	mov	r1, r3
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f7fe fe9a 	bl	800637a <clmt_clust>
 8007646:	6338      	str	r0, [r7, #48]	; 0x30
 8007648:	e007      	b.n	800765a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	69db      	ldr	r3, [r3, #28]
 8007650:	4619      	mov	r1, r3
 8007652:	4610      	mov	r0, r2
 8007654:	f7fe fc08 	bl	8005e68 <get_fat>
 8007658:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800765a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765c:	2b01      	cmp	r3, #1
 800765e:	d804      	bhi.n	800766a <f_read+0xe2>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2202      	movs	r2, #2
 8007664:	755a      	strb	r2, [r3, #21]
 8007666:	2302      	movs	r3, #2
 8007668:	e0c9      	b.n	80077fe <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800766a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007670:	d104      	bne.n	800767c <f_read+0xf4>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2201      	movs	r2, #1
 8007676:	755a      	strb	r2, [r3, #21]
 8007678:	2301      	movs	r3, #1
 800767a:	e0c0      	b.n	80077fe <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007680:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	69db      	ldr	r3, [r3, #28]
 8007688:	4619      	mov	r1, r3
 800768a:	4610      	mov	r0, r2
 800768c:	f7fe fbcd 	bl	8005e2a <clust2sect>
 8007690:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d104      	bne.n	80076a2 <f_read+0x11a>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2202      	movs	r2, #2
 800769c:	755a      	strb	r2, [r3, #21]
 800769e:	2302      	movs	r3, #2
 80076a0:	e0ad      	b.n	80077fe <f_read+0x276>
			sect += csect;
 80076a2:	69ba      	ldr	r2, [r7, #24]
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	4413      	add	r3, r2
 80076a8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	0a5b      	lsrs	r3, r3, #9
 80076ae:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80076b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d039      	beq.n	800772a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80076b6:	69fa      	ldr	r2, [r7, #28]
 80076b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ba:	4413      	add	r3, r2
 80076bc:	697a      	ldr	r2, [r7, #20]
 80076be:	8952      	ldrh	r2, [r2, #10]
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d905      	bls.n	80076d0 <f_read+0x148>
					cc = fs->csize - csect;
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	895b      	ldrh	r3, [r3, #10]
 80076c8:	461a      	mov	r2, r3
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	7858      	ldrb	r0, [r3, #1]
 80076d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d6:	69ba      	ldr	r2, [r7, #24]
 80076d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076da:	f7fe f8c5 	bl	8005868 <disk_read>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d004      	beq.n	80076ee <f_read+0x166>
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2201      	movs	r2, #1
 80076e8:	755a      	strb	r2, [r3, #21]
 80076ea:	2301      	movs	r3, #1
 80076ec:	e087      	b.n	80077fe <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	7d1b      	ldrb	r3, [r3, #20]
 80076f2:	b25b      	sxtb	r3, r3
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	da14      	bge.n	8007722 <f_read+0x19a>
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6a1a      	ldr	r2, [r3, #32]
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	1ad3      	subs	r3, r2, r3
 8007700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007702:	429a      	cmp	r2, r3
 8007704:	d90d      	bls.n	8007722 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6a1a      	ldr	r2, [r3, #32]
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	025b      	lsls	r3, r3, #9
 8007710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007712:	18d0      	adds	r0, r2, r3
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	3330      	adds	r3, #48	; 0x30
 8007718:	f44f 7200 	mov.w	r2, #512	; 0x200
 800771c:	4619      	mov	r1, r3
 800771e:	f7fe f965 	bl	80059ec <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007724:	025b      	lsls	r3, r3, #9
 8007726:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007728:	e050      	b.n	80077cc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6a1b      	ldr	r3, [r3, #32]
 800772e:	69ba      	ldr	r2, [r7, #24]
 8007730:	429a      	cmp	r2, r3
 8007732:	d02e      	beq.n	8007792 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	7d1b      	ldrb	r3, [r3, #20]
 8007738:	b25b      	sxtb	r3, r3
 800773a:	2b00      	cmp	r3, #0
 800773c:	da18      	bge.n	8007770 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	7858      	ldrb	r0, [r3, #1]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6a1a      	ldr	r2, [r3, #32]
 800774c:	2301      	movs	r3, #1
 800774e:	f7fe f8ab 	bl	80058a8 <disk_write>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d004      	beq.n	8007762 <f_read+0x1da>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2201      	movs	r2, #1
 800775c:	755a      	strb	r2, [r3, #21]
 800775e:	2301      	movs	r3, #1
 8007760:	e04d      	b.n	80077fe <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	7d1b      	ldrb	r3, [r3, #20]
 8007766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800776a:	b2da      	uxtb	r2, r3
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	7858      	ldrb	r0, [r3, #1]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800777a:	2301      	movs	r3, #1
 800777c:	69ba      	ldr	r2, [r7, #24]
 800777e:	f7fe f873 	bl	8005868 <disk_read>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d004      	beq.n	8007792 <f_read+0x20a>
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2201      	movs	r2, #1
 800778c:	755a      	strb	r2, [r3, #21]
 800778e:	2301      	movs	r3, #1
 8007790:	e035      	b.n	80077fe <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	69ba      	ldr	r2, [r7, #24]
 8007796:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	699b      	ldr	r3, [r3, #24]
 800779c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077a0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80077a4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80077a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d901      	bls.n	80077b2 <f_read+0x22a>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	699b      	ldr	r3, [r3, #24]
 80077bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077c0:	4413      	add	r3, r2
 80077c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077c4:	4619      	mov	r1, r3
 80077c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80077c8:	f7fe f910 	bl	80059ec <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80077cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d0:	4413      	add	r3, r2
 80077d2:	627b      	str	r3, [r7, #36]	; 0x24
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	699a      	ldr	r2, [r3, #24]
 80077d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077da:	441a      	add	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	619a      	str	r2, [r3, #24]
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e6:	441a      	add	r2, r3
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	601a      	str	r2, [r3, #0]
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f0:	1ad3      	subs	r3, r2, r3
 80077f2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f47f af01 	bne.w	80075fe <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3738      	adds	r7, #56	; 0x38
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b090      	sub	sp, #64	; 0x40
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
 800780e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f107 0208 	add.w	r2, r7, #8
 8007816:	4611      	mov	r1, r2
 8007818:	4618      	mov	r0, r3
 800781a:	f7ff fc7b 	bl	8007114 <validate>
 800781e:	4603      	mov	r3, r0
 8007820:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8007824:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007828:	2b00      	cmp	r3, #0
 800782a:	d103      	bne.n	8007834 <f_lseek+0x2e>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	7d5b      	ldrb	r3, [r3, #21]
 8007830:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8007834:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007838:	2b00      	cmp	r3, #0
 800783a:	d002      	beq.n	8007842 <f_lseek+0x3c>
 800783c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007840:	e1e6      	b.n	8007c10 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007846:	2b00      	cmp	r3, #0
 8007848:	f000 80d1 	beq.w	80079ee <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007852:	d15a      	bne.n	800790a <f_lseek+0x104>
			tbl = fp->cltbl;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007858:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	1d1a      	adds	r2, r3, #4
 800785e:	627a      	str	r2, [r7, #36]	; 0x24
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	617b      	str	r3, [r7, #20]
 8007864:	2302      	movs	r3, #2
 8007866:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800786e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007870:	2b00      	cmp	r3, #0
 8007872:	d03a      	beq.n	80078ea <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007876:	613b      	str	r3, [r7, #16]
 8007878:	2300      	movs	r3, #0
 800787a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800787c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787e:	3302      	adds	r3, #2
 8007880:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8007882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007884:	60fb      	str	r3, [r7, #12]
 8007886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007888:	3301      	adds	r3, #1
 800788a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007890:	4618      	mov	r0, r3
 8007892:	f7fe fae9 	bl	8005e68 <get_fat>
 8007896:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8007898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789a:	2b01      	cmp	r3, #1
 800789c:	d804      	bhi.n	80078a8 <f_lseek+0xa2>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2202      	movs	r2, #2
 80078a2:	755a      	strb	r2, [r3, #21]
 80078a4:	2302      	movs	r3, #2
 80078a6:	e1b3      	b.n	8007c10 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80078a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078ae:	d104      	bne.n	80078ba <f_lseek+0xb4>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	755a      	strb	r2, [r3, #21]
 80078b6:	2301      	movs	r3, #1
 80078b8:	e1aa      	b.n	8007c10 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	3301      	adds	r3, #1
 80078be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d0de      	beq.n	8007882 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80078c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d809      	bhi.n	80078e0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80078cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ce:	1d1a      	adds	r2, r3, #4
 80078d0:	627a      	str	r2, [r7, #36]	; 0x24
 80078d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078d4:	601a      	str	r2, [r3, #0]
 80078d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d8:	1d1a      	adds	r2, r3, #4
 80078da:	627a      	str	r2, [r7, #36]	; 0x24
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	695b      	ldr	r3, [r3, #20]
 80078e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d3c4      	bcc.n	8007874 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078f0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80078f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d803      	bhi.n	8007902 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80078fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fc:	2200      	movs	r2, #0
 80078fe:	601a      	str	r2, [r3, #0]
 8007900:	e184      	b.n	8007c0c <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007902:	2311      	movs	r3, #17
 8007904:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007908:	e180      	b.n	8007c0c <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	683a      	ldr	r2, [r7, #0]
 8007910:	429a      	cmp	r2, r3
 8007912:	d902      	bls.n	800791a <f_lseek+0x114>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	683a      	ldr	r2, [r7, #0]
 800791e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	f000 8172 	beq.w	8007c0c <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	3b01      	subs	r3, #1
 800792c:	4619      	mov	r1, r3
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7fe fd23 	bl	800637a <clmt_clust>
 8007934:	4602      	mov	r2, r0
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800793a:	68ba      	ldr	r2, [r7, #8]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	69db      	ldr	r3, [r3, #28]
 8007940:	4619      	mov	r1, r3
 8007942:	4610      	mov	r0, r2
 8007944:	f7fe fa71 	bl	8005e2a <clust2sect>
 8007948:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d104      	bne.n	800795a <f_lseek+0x154>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2202      	movs	r2, #2
 8007954:	755a      	strb	r2, [r3, #21]
 8007956:	2302      	movs	r3, #2
 8007958:	e15a      	b.n	8007c10 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	3b01      	subs	r3, #1
 800795e:	0a5b      	lsrs	r3, r3, #9
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	8952      	ldrh	r2, [r2, #10]
 8007964:	3a01      	subs	r2, #1
 8007966:	4013      	ands	r3, r2
 8007968:	69ba      	ldr	r2, [r7, #24]
 800796a:	4413      	add	r3, r2
 800796c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	699b      	ldr	r3, [r3, #24]
 8007972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007976:	2b00      	cmp	r3, #0
 8007978:	f000 8148 	beq.w	8007c0c <f_lseek+0x406>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a1b      	ldr	r3, [r3, #32]
 8007980:	69ba      	ldr	r2, [r7, #24]
 8007982:	429a      	cmp	r2, r3
 8007984:	f000 8142 	beq.w	8007c0c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	7d1b      	ldrb	r3, [r3, #20]
 800798c:	b25b      	sxtb	r3, r3
 800798e:	2b00      	cmp	r3, #0
 8007990:	da18      	bge.n	80079c4 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	7858      	ldrb	r0, [r3, #1]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6a1a      	ldr	r2, [r3, #32]
 80079a0:	2301      	movs	r3, #1
 80079a2:	f7fd ff81 	bl	80058a8 <disk_write>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d004      	beq.n	80079b6 <f_lseek+0x1b0>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	755a      	strb	r2, [r3, #21]
 80079b2:	2301      	movs	r3, #1
 80079b4:	e12c      	b.n	8007c10 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	7d1b      	ldrb	r3, [r3, #20]
 80079ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079be:	b2da      	uxtb	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	7858      	ldrb	r0, [r3, #1]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80079ce:	2301      	movs	r3, #1
 80079d0:	69ba      	ldr	r2, [r7, #24]
 80079d2:	f7fd ff49 	bl	8005868 <disk_read>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d004      	beq.n	80079e6 <f_lseek+0x1e0>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	755a      	strb	r2, [r3, #21]
 80079e2:	2301      	movs	r3, #1
 80079e4:	e114      	b.n	8007c10 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	69ba      	ldr	r2, [r7, #24]
 80079ea:	621a      	str	r2, [r3, #32]
 80079ec:	e10e      	b.n	8007c0c <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	683a      	ldr	r2, [r7, #0]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d908      	bls.n	8007a0a <f_lseek+0x204>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	7d1b      	ldrb	r3, [r3, #20]
 80079fc:	f003 0302 	and.w	r3, r3, #2
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d102      	bne.n	8007a0a <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007a10:	2300      	movs	r3, #0
 8007a12:	637b      	str	r3, [r7, #52]	; 0x34
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a18:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f000 80a7 	beq.w	8007b70 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	895b      	ldrh	r3, [r3, #10]
 8007a26:	025b      	lsls	r3, r3, #9
 8007a28:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007a2a:	6a3b      	ldr	r3, [r7, #32]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d01b      	beq.n	8007a68 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	1e5a      	subs	r2, r3, #1
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a3a:	6a3b      	ldr	r3, [r7, #32]
 8007a3c:	1e59      	subs	r1, r3, #1
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d30f      	bcc.n	8007a68 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8007a48:	6a3b      	ldr	r3, [r7, #32]
 8007a4a:	1e5a      	subs	r2, r3, #1
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	425b      	negs	r3, r3
 8007a50:	401a      	ands	r2, r3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	683a      	ldr	r2, [r7, #0]
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	69db      	ldr	r3, [r3, #28]
 8007a64:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a66:	e022      	b.n	8007aae <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d119      	bne.n	8007aa8 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2100      	movs	r1, #0
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f7fe fbe6 	bl	800624a <create_chain>
 8007a7e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d104      	bne.n	8007a90 <f_lseek+0x28a>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2202      	movs	r2, #2
 8007a8a:	755a      	strb	r2, [r3, #21]
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	e0bf      	b.n	8007c10 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a96:	d104      	bne.n	8007aa2 <f_lseek+0x29c>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	755a      	strb	r2, [r3, #21]
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e0b6      	b.n	8007c10 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007aa6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007aac:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8007aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d05d      	beq.n	8007b70 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8007ab4:	e03a      	b.n	8007b2c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8007ab6:	683a      	ldr	r2, [r7, #0]
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	1ad3      	subs	r3, r2, r3
 8007abc:	603b      	str	r3, [r7, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	699a      	ldr	r2, [r3, #24]
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	441a      	add	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	7d1b      	ldrb	r3, [r3, #20]
 8007ace:	f003 0302 	and.w	r3, r3, #2
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00b      	beq.n	8007aee <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fe fbb5 	bl	800624a <create_chain>
 8007ae0:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8007ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d108      	bne.n	8007afa <f_lseek+0x2f4>
							ofs = 0; break;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	603b      	str	r3, [r7, #0]
 8007aec:	e022      	b.n	8007b34 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7fe f9b8 	bl	8005e68 <get_fat>
 8007af8:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b00:	d104      	bne.n	8007b0c <f_lseek+0x306>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	755a      	strb	r2, [r3, #21]
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e081      	b.n	8007c10 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8007b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d904      	bls.n	8007b1c <f_lseek+0x316>
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	695b      	ldr	r3, [r3, #20]
 8007b16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d304      	bcc.n	8007b26 <f_lseek+0x320>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2202      	movs	r2, #2
 8007b20:	755a      	strb	r2, [r3, #21]
 8007b22:	2302      	movs	r3, #2
 8007b24:	e074      	b.n	8007c10 <f_lseek+0x40a>
					fp->clust = clst;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b2a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8007b2c:	683a      	ldr	r2, [r7, #0]
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d8c0      	bhi.n	8007ab6 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	699a      	ldr	r2, [r3, #24]
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	441a      	add	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d012      	beq.n	8007b70 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7fe f96b 	bl	8005e2a <clust2sect>
 8007b54:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8007b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d104      	bne.n	8007b66 <f_lseek+0x360>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2202      	movs	r2, #2
 8007b60:	755a      	strb	r2, [r3, #21]
 8007b62:	2302      	movs	r3, #2
 8007b64:	e054      	b.n	8007c10 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	0a5b      	lsrs	r3, r3, #9
 8007b6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b6c:	4413      	add	r3, r2
 8007b6e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	699a      	ldr	r2, [r3, #24]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d90a      	bls.n	8007b92 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	699a      	ldr	r2, [r3, #24]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	7d1b      	ldrb	r3, [r3, #20]
 8007b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b8c:	b2da      	uxtb	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	699b      	ldr	r3, [r3, #24]
 8007b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d036      	beq.n	8007c0c <f_lseek+0x406>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a1b      	ldr	r3, [r3, #32]
 8007ba2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d031      	beq.n	8007c0c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	7d1b      	ldrb	r3, [r3, #20]
 8007bac:	b25b      	sxtb	r3, r3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	da18      	bge.n	8007be4 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	7858      	ldrb	r0, [r3, #1]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a1a      	ldr	r2, [r3, #32]
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	f7fd fe71 	bl	80058a8 <disk_write>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d004      	beq.n	8007bd6 <f_lseek+0x3d0>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	755a      	strb	r2, [r3, #21]
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e01c      	b.n	8007c10 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	7d1b      	ldrb	r3, [r3, #20]
 8007bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bde:	b2da      	uxtb	r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	7858      	ldrb	r0, [r3, #1]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007bee:	2301      	movs	r3, #1
 8007bf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bf2:	f7fd fe39 	bl	8005868 <disk_read>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d004      	beq.n	8007c06 <f_lseek+0x400>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	755a      	strb	r2, [r3, #21]
 8007c02:	2301      	movs	r3, #1
 8007c04:	e004      	b.n	8007c10 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c0a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8007c0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3740      	adds	r7, #64	; 0x40
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b090      	sub	sp, #64	; 0x40
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8007c22:	f107 010c 	add.w	r1, r7, #12
 8007c26:	1d3b      	adds	r3, r7, #4
 8007c28:	2200      	movs	r2, #0
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7ff f826 	bl	8006c7c <find_volume>
 8007c30:	4603      	mov	r3, r0
 8007c32:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8007c36:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d11f      	bne.n	8007c7e <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	f107 030c 	add.w	r3, r7, #12
 8007c44:	4611      	mov	r1, r2
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fe ff0c 	bl	8006a64 <follow_path>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8007c52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d111      	bne.n	8007c7e <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8007c5a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007c5e:	b25b      	sxtb	r3, r3
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	da03      	bge.n	8007c6c <f_stat+0x54>
				res = FR_INVALID_NAME;
 8007c64:	2306      	movs	r3, #6
 8007c66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007c6a:	e008      	b.n	8007c7e <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d005      	beq.n	8007c7e <f_stat+0x66>
 8007c72:	f107 030c 	add.w	r3, r7, #12
 8007c76:	6839      	ldr	r1, [r7, #0]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7fe fdff 	bl	800687c <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8007c7e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3740      	adds	r7, #64	; 0x40
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
	...

08007c8c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b087      	sub	sp, #28
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	4613      	mov	r3, r2
 8007c98:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007ca2:	4b1f      	ldr	r3, [pc, #124]	; (8007d20 <FATFS_LinkDriverEx+0x94>)
 8007ca4:	7a5b      	ldrb	r3, [r3, #9]
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d131      	bne.n	8007d10 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007cac:	4b1c      	ldr	r3, [pc, #112]	; (8007d20 <FATFS_LinkDriverEx+0x94>)
 8007cae:	7a5b      	ldrb	r3, [r3, #9]
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	4b1a      	ldr	r3, [pc, #104]	; (8007d20 <FATFS_LinkDriverEx+0x94>)
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007cba:	4b19      	ldr	r3, [pc, #100]	; (8007d20 <FATFS_LinkDriverEx+0x94>)
 8007cbc:	7a5b      	ldrb	r3, [r3, #9]
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	4a17      	ldr	r2, [pc, #92]	; (8007d20 <FATFS_LinkDriverEx+0x94>)
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4413      	add	r3, r2
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007cca:	4b15      	ldr	r3, [pc, #84]	; (8007d20 <FATFS_LinkDriverEx+0x94>)
 8007ccc:	7a5b      	ldrb	r3, [r3, #9]
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	4b13      	ldr	r3, [pc, #76]	; (8007d20 <FATFS_LinkDriverEx+0x94>)
 8007cd4:	4413      	add	r3, r2
 8007cd6:	79fa      	ldrb	r2, [r7, #7]
 8007cd8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007cda:	4b11      	ldr	r3, [pc, #68]	; (8007d20 <FATFS_LinkDriverEx+0x94>)
 8007cdc:	7a5b      	ldrb	r3, [r3, #9]
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	1c5a      	adds	r2, r3, #1
 8007ce2:	b2d1      	uxtb	r1, r2
 8007ce4:	4a0e      	ldr	r2, [pc, #56]	; (8007d20 <FATFS_LinkDriverEx+0x94>)
 8007ce6:	7251      	strb	r1, [r2, #9]
 8007ce8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007cea:	7dbb      	ldrb	r3, [r7, #22]
 8007cec:	3330      	adds	r3, #48	; 0x30
 8007cee:	b2da      	uxtb	r2, r3
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	223a      	movs	r2, #58	; 0x3a
 8007cfa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	3302      	adds	r3, #2
 8007d00:	222f      	movs	r2, #47	; 0x2f
 8007d02:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	3303      	adds	r3, #3
 8007d08:	2200      	movs	r2, #0
 8007d0a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	371c      	adds	r7, #28
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	200000c0 	.word	0x200000c0

08007d24 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007d2e:	2200      	movs	r2, #0
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f7ff ffaa 	bl	8007c8c <FATFS_LinkDriverEx>
 8007d38:	4603      	mov	r3, r0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3708      	adds	r7, #8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
	...

08007d44 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007d4e:	f000 f879 	bl	8007e44 <BSP_SD_IsDetected>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d001      	beq.n	8007d5c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e012      	b.n	8007d82 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007d5c:	480b      	ldr	r0, [pc, #44]	; (8007d8c <BSP_SD_Init+0x48>)
 8007d5e:	f7fa ff47 	bl	8002bf0 <HAL_SD_Init>
 8007d62:	4603      	mov	r3, r0
 8007d64:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007d66:	79fb      	ldrb	r3, [r7, #7]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d109      	bne.n	8007d80 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8007d6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007d70:	4806      	ldr	r0, [pc, #24]	; (8007d8c <BSP_SD_Init+0x48>)
 8007d72:	f7fb fd39 	bl	80037e8 <HAL_SD_ConfigWideBusOperation>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d001      	beq.n	8007d80 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007d80:	79fb      	ldrb	r3, [r7, #7]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	2000b28c 	.word	0x2000b28c

08007d90 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b088      	sub	sp, #32
 8007d94:	af02      	add	r7, sp, #8
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
 8007d9c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	9300      	str	r3, [sp, #0]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	68ba      	ldr	r2, [r7, #8]
 8007daa:	68f9      	ldr	r1, [r7, #12]
 8007dac:	4806      	ldr	r0, [pc, #24]	; (8007dc8 <BSP_SD_ReadBlocks+0x38>)
 8007dae:	f7fa ffaf 	bl	8002d10 <HAL_SD_ReadBlocks>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d001      	beq.n	8007dbc <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8007dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3718      	adds	r7, #24
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	2000b28c 	.word	0x2000b28c

08007dcc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b088      	sub	sp, #32
 8007dd0:	af02      	add	r7, sp, #8
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	607a      	str	r2, [r7, #4]
 8007dd8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	68f9      	ldr	r1, [r7, #12]
 8007de8:	4806      	ldr	r0, [pc, #24]	; (8007e04 <BSP_SD_WriteBlocks+0x38>)
 8007dea:	f7fb f98b 	bl	8003104 <HAL_SD_WriteBlocks>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d001      	beq.n	8007df8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8007df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3718      	adds	r7, #24
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	2000b28c 	.word	0x2000b28c

08007e08 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007e0c:	4805      	ldr	r0, [pc, #20]	; (8007e24 <BSP_SD_GetCardState+0x1c>)
 8007e0e:	f7fb fd67 	bl	80038e0 <HAL_SD_GetCardState>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b04      	cmp	r3, #4
 8007e16:	bf14      	ite	ne
 8007e18:	2301      	movne	r3, #1
 8007e1a:	2300      	moveq	r3, #0
 8007e1c:	b2db      	uxtb	r3, r3
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	2000b28c 	.word	0x2000b28c

08007e28 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007e30:	6879      	ldr	r1, [r7, #4]
 8007e32:	4803      	ldr	r0, [pc, #12]	; (8007e40 <BSP_SD_GetCardInfo+0x18>)
 8007e34:	f7fb fcac 	bl	8003790 <HAL_SD_GetCardInfo>
}
 8007e38:	bf00      	nop
 8007e3a:	3708      	adds	r7, #8
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	2000b28c 	.word	0x2000b28c

08007e44 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8007e4e:	f000 f825 	bl	8007e9c <BSP_PlatformIsDetected>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d101      	bne.n	8007e5c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007e5c:	79fb      	ldrb	r3, [r7, #7]
 8007e5e:	b2db      	uxtb	r3, r3
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007e6c:	4904      	ldr	r1, [pc, #16]	; (8007e80 <MX_FATFS_Init+0x18>)
 8007e6e:	4805      	ldr	r0, [pc, #20]	; (8007e84 <MX_FATFS_Init+0x1c>)
 8007e70:	f7ff ff58 	bl	8007d24 <FATFS_LinkDriver>
 8007e74:	4603      	mov	r3, r0
 8007e76:	461a      	mov	r2, r3
 8007e78:	4b03      	ldr	r3, [pc, #12]	; (8007e88 <MX_FATFS_Init+0x20>)
 8007e7a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8007e7c:	bf00      	nop
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	200068b8 	.word	0x200068b8
 8007e84:	08009714 	.word	0x08009714
 8007e88:	200068b4 	.word	0x200068b4

08007e8c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007e90:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007ea6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007eaa:	4806      	ldr	r0, [pc, #24]	; (8007ec4 <BSP_PlatformIsDetected+0x28>)
 8007eac:	f7f9 fa0e 	bl	80012cc <HAL_GPIO_ReadPin>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d001      	beq.n	8007eba <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8007eba:	79fb      	ldrb	r3, [r7, #7]
}  
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	40020000 	.word	0x40020000

08007ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007ecc:	f7f8 fb50 	bl	8000570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007ed0:	f000 f89a 	bl	8008008 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007ed4:	f000 fa32 	bl	800833c <MX_GPIO_Init>
  MX_DMA_Init();
 8007ed8:	f000 fa08 	bl	80082ec <MX_DMA_Init>
  MX_I2C1_Init();
 8007edc:	f000 f914 	bl	8008108 <MX_I2C1_Init>
  MX_I2S2_Init();
 8007ee0:	f000 f940 	bl	8008164 <MX_I2S2_Init>
  MX_SDIO_SD_Init();
 8007ee4:	f000 f96c 	bl	80081c0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8007ee8:	f7ff ffbe 	bl	8007e68 <MX_FATFS_Init>
  MX_TIM3_Init();
 8007eec:	f000 f988 	bl	8008200 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


__HAL_TIM_SET_PRESCALER(&htim3, LED_PRESCALER);
 8007ef0:	4b39      	ldr	r3, [pc, #228]	; (8007fd8 <main+0x110>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	629a      	str	r2, [r3, #40]	; 0x28
__HAL_TIM_SET_AUTORELOAD(&htim3, LED_AUTORELOAD);
 8007ef8:	4b37      	ldr	r3, [pc, #220]	; (8007fd8 <main+0x110>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2268      	movs	r2, #104	; 0x68
 8007efe:	62da      	str	r2, [r3, #44]	; 0x2c
 8007f00:	4b35      	ldr	r3, [pc, #212]	; (8007fd8 <main+0x110>)
 8007f02:	2268      	movs	r2, #104	; 0x68
 8007f04:	60da      	str	r2, [r3, #12]

  // Fill screenbuffer with LOWs
  for (i = 0; i < LED_BYTES; i++)
 8007f06:	4b35      	ldr	r3, [pc, #212]	; (8007fdc <main+0x114>)
 8007f08:	2200      	movs	r2, #0
 8007f0a:	601a      	str	r2, [r3, #0]
 8007f0c:	e00a      	b.n	8007f24 <main+0x5c>
  {
	  LED_Framebuffer[i] = LED_ZERO;
 8007f0e:	4b33      	ldr	r3, [pc, #204]	; (8007fdc <main+0x114>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a33      	ldr	r2, [pc, #204]	; (8007fe0 <main+0x118>)
 8007f14:	211c      	movs	r1, #28
 8007f16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0; i < LED_BYTES; i++)
 8007f1a:	4b30      	ldr	r3, [pc, #192]	; (8007fdc <main+0x114>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	4a2e      	ldr	r2, [pc, #184]	; (8007fdc <main+0x114>)
 8007f22:	6013      	str	r3, [r2, #0]
 8007f24:	4b2d      	ldr	r3, [pc, #180]	; (8007fdc <main+0x114>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007f2c:	d3ef      	bcc.n	8007f0e <main+0x46>
  }

  // Start circular DMA
  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_Framebuffer, sizeof(LED_Framebuffer) / sizeof(uint32_t));
 8007f2e:	f641 13f4 	movw	r3, #6644	; 0x19f4
 8007f32:	4a2b      	ldr	r2, [pc, #172]	; (8007fe0 <main+0x118>)
 8007f34:	2104      	movs	r1, #4
 8007f36:	4828      	ldr	r0, [pc, #160]	; (8007fd8 <main+0x110>)
 8007f38:	f7fc f836 	bl	8003fa8 <HAL_TIM_PWM_Start_DMA>


  // Mount SD card
  fr = f_mount(&fatfs, (TCHAR const*)SDPath, 1);
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	4929      	ldr	r1, [pc, #164]	; (8007fe4 <main+0x11c>)
 8007f40:	4829      	ldr	r0, [pc, #164]	; (8007fe8 <main+0x120>)
 8007f42:	f7ff f91d 	bl	8007180 <f_mount>
 8007f46:	4603      	mov	r3, r0
 8007f48:	461a      	mov	r2, r3
 8007f4a:	4b28      	ldr	r3, [pc, #160]	; (8007fec <main+0x124>)
 8007f4c:	701a      	strb	r2, [r3, #0]

  if (fr != FR_OK)
 8007f4e:	4b27      	ldr	r3, [pc, #156]	; (8007fec <main+0x124>)
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d001      	beq.n	8007f5a <main+0x92>
  {
	  Error_Handler();
 8007f56:	f000 fb87 	bl	8008668 <Error_Handler>
  }

  // Find highest file (looking contiguously, no gaps allowed!)
  for (i = 0; i < 100; i++)
 8007f5a:	4b20      	ldr	r3, [pc, #128]	; (8007fdc <main+0x114>)
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	601a      	str	r2, [r3, #0]
 8007f60:	e025      	b.n	8007fae <main+0xe6>
  {
	  sprintf(Track_Current_Path, "%03lu.wav", i);
 8007f62:	4b1e      	ldr	r3, [pc, #120]	; (8007fdc <main+0x114>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	461a      	mov	r2, r3
 8007f68:	4921      	ldr	r1, [pc, #132]	; (8007ff0 <main+0x128>)
 8007f6a:	4822      	ldr	r0, [pc, #136]	; (8007ff4 <main+0x12c>)
 8007f6c:	f000 ff5a 	bl	8008e24 <siprintf>
	  fr = f_stat(Track_Current_Path, &fi);
 8007f70:	4921      	ldr	r1, [pc, #132]	; (8007ff8 <main+0x130>)
 8007f72:	4820      	ldr	r0, [pc, #128]	; (8007ff4 <main+0x12c>)
 8007f74:	f7ff fe50 	bl	8007c18 <f_stat>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	4b1b      	ldr	r3, [pc, #108]	; (8007fec <main+0x124>)
 8007f7e:	701a      	strb	r2, [r3, #0]
	  if (fr != FR_OK)
 8007f80:	4b1a      	ldr	r3, [pc, #104]	; (8007fec <main+0x124>)
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d00d      	beq.n	8007fa4 <main+0xdc>
	  {
		  if (i == 0) // 000.wav doesn't exist
 8007f88:	4b14      	ldr	r3, [pc, #80]	; (8007fdc <main+0x114>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d101      	bne.n	8007f94 <main+0xcc>
		  {
			  Error_Handler();
 8007f90:	f000 fb6a 	bl	8008668 <Error_Handler>
		  }
		  Track_Max = i-1;
 8007f94:	4b11      	ldr	r3, [pc, #68]	; (8007fdc <main+0x114>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	b2da      	uxtb	r2, r3
 8007f9e:	4b17      	ldr	r3, [pc, #92]	; (8007ffc <main+0x134>)
 8007fa0:	701a      	strb	r2, [r3, #0]
		  break;
 8007fa2:	e008      	b.n	8007fb6 <main+0xee>
  for (i = 0; i < 100; i++)
 8007fa4:	4b0d      	ldr	r3, [pc, #52]	; (8007fdc <main+0x114>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	4a0c      	ldr	r2, [pc, #48]	; (8007fdc <main+0x114>)
 8007fac:	6013      	str	r3, [r2, #0]
 8007fae:	4b0b      	ldr	r3, [pc, #44]	; (8007fdc <main+0x114>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2b63      	cmp	r3, #99	; 0x63
 8007fb4:	d9d5      	bls.n	8007f62 <main+0x9a>
	  }
  }

  LoadTrack();
 8007fb6:	f000 fabf 	bl	8008538 <LoadTrack>
//	  HAL_GPIO_WritePin(GPIOA, LED_STATUS_Pin, GPIO_PIN_SET);
//	  HAL_Delay(10);
//	  HAL_GPIO_WritePin(GPIOA, LED_STATUS_Pin, GPIO_PIN_RESET);
//	  HAL_Delay(500);

	  if (HAL_GPIO_ReadPin(GPIOA, SENSOR_Pin) == GPIO_PIN_SET)
 8007fba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007fbe:	4810      	ldr	r0, [pc, #64]	; (8008000 <main+0x138>)
 8007fc0:	f7f9 f984 	bl	80012cc <HAL_GPIO_ReadPin>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d1f7      	bne.n	8007fba <main+0xf2>
	  {
		  PlayTrack(&hi2s2);
 8007fca:	480e      	ldr	r0, [pc, #56]	; (8008004 <main+0x13c>)
 8007fcc:	f000 fadc 	bl	8008588 <PlayTrack>
		  HAL_Delay(200);
 8007fd0:	20c8      	movs	r0, #200	; 0xc8
 8007fd2:	f7f8 fb3f 	bl	8000654 <HAL_Delay>
	  if (HAL_GPIO_ReadPin(GPIOA, SENSOR_Pin) == GPIO_PIN_SET)
 8007fd6:	e7f0      	b.n	8007fba <main+0xf2>
 8007fd8:	2000afb8 	.word	0x2000afb8
 8007fdc:	200068a0 	.word	0x200068a0
 8007fe0:	200000cc 	.word	0x200000cc
 8007fe4:	200068b8 	.word	0x200068b8
 8007fe8:	2000f5a0 	.word	0x2000f5a0
 8007fec:	2000b288 	.word	0x2000b288
 8007ff0:	08009678 	.word	0x08009678
 8007ff4:	20000008 	.word	0x20000008
 8007ff8:	20006fa0 	.word	0x20006fa0
 8007ffc:	20000005 	.word	0x20000005
 8008000:	40020000 	.word	0x40020000
 8008004:	2000f7d0 	.word	0x2000f7d0

08008008 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b098      	sub	sp, #96	; 0x60
 800800c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800800e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008012:	2230      	movs	r2, #48	; 0x30
 8008014:	2100      	movs	r1, #0
 8008016:	4618      	mov	r0, r3
 8008018:	f000 fefb 	bl	8008e12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800801c:	f107 031c 	add.w	r3, r7, #28
 8008020:	2200      	movs	r2, #0
 8008022:	601a      	str	r2, [r3, #0]
 8008024:	605a      	str	r2, [r3, #4]
 8008026:	609a      	str	r2, [r3, #8]
 8008028:	60da      	str	r2, [r3, #12]
 800802a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800802c:	f107 030c 	add.w	r3, r7, #12
 8008030:	2200      	movs	r2, #0
 8008032:	601a      	str	r2, [r3, #0]
 8008034:	605a      	str	r2, [r3, #4]
 8008036:	609a      	str	r2, [r3, #8]
 8008038:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800803a:	2300      	movs	r3, #0
 800803c:	60bb      	str	r3, [r7, #8]
 800803e:	4b30      	ldr	r3, [pc, #192]	; (8008100 <SystemClock_Config+0xf8>)
 8008040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008042:	4a2f      	ldr	r2, [pc, #188]	; (8008100 <SystemClock_Config+0xf8>)
 8008044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008048:	6413      	str	r3, [r2, #64]	; 0x40
 800804a:	4b2d      	ldr	r3, [pc, #180]	; (8008100 <SystemClock_Config+0xf8>)
 800804c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008052:	60bb      	str	r3, [r7, #8]
 8008054:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008056:	2300      	movs	r3, #0
 8008058:	607b      	str	r3, [r7, #4]
 800805a:	4b2a      	ldr	r3, [pc, #168]	; (8008104 <SystemClock_Config+0xfc>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a29      	ldr	r2, [pc, #164]	; (8008104 <SystemClock_Config+0xfc>)
 8008060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008064:	6013      	str	r3, [r2, #0]
 8008066:	4b27      	ldr	r3, [pc, #156]	; (8008104 <SystemClock_Config+0xfc>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800806e:	607b      	str	r3, [r7, #4]
 8008070:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008072:	2301      	movs	r3, #1
 8008074:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008076:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800807a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800807c:	2302      	movs	r3, #2
 800807e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008080:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008084:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8008086:	230c      	movs	r3, #12
 8008088:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 164;
 800808a:	23a4      	movs	r3, #164	; 0xa4
 800808c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800808e:	2302      	movs	r3, #2
 8008090:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8008092:	2307      	movs	r3, #7
 8008094:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008096:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800809a:	4618      	mov	r0, r3
 800809c:	f7fa f812 	bl	80020c4 <HAL_RCC_OscConfig>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d001      	beq.n	80080aa <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80080a6:	f000 fadf 	bl	8008668 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80080aa:	230f      	movs	r3, #15
 80080ac:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80080ae:	2302      	movs	r3, #2
 80080b0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80080b2:	2300      	movs	r3, #0
 80080b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80080b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80080ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80080bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080c0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80080c2:	f107 031c 	add.w	r3, r7, #28
 80080c6:	2105      	movs	r1, #5
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7fa fa6b 	bl	80025a4 <HAL_RCC_ClockConfig>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d001      	beq.n	80080d8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80080d4:	f000 fac8 	bl	8008668 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80080d8:	2301      	movs	r3, #1
 80080da:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 120;
 80080dc:	2378      	movs	r3, #120	; 0x78
 80080de:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 5;
 80080e0:	2305      	movs	r3, #5
 80080e2:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80080e4:	f107 030c 	add.w	r3, r7, #12
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7fa fc43 	bl	8002974 <HAL_RCCEx_PeriphCLKConfig>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d001      	beq.n	80080f8 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80080f4:	f000 fab8 	bl	8008668 <Error_Handler>
  }
}
 80080f8:	bf00      	nop
 80080fa:	3760      	adds	r7, #96	; 0x60
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	40023800 	.word	0x40023800
 8008104:	40007000 	.word	0x40007000

08008108 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800810c:	4b12      	ldr	r3, [pc, #72]	; (8008158 <MX_I2C1_Init+0x50>)
 800810e:	4a13      	ldr	r2, [pc, #76]	; (800815c <MX_I2C1_Init+0x54>)
 8008110:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8008112:	4b11      	ldr	r3, [pc, #68]	; (8008158 <MX_I2C1_Init+0x50>)
 8008114:	4a12      	ldr	r2, [pc, #72]	; (8008160 <MX_I2C1_Init+0x58>)
 8008116:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008118:	4b0f      	ldr	r3, [pc, #60]	; (8008158 <MX_I2C1_Init+0x50>)
 800811a:	2200      	movs	r2, #0
 800811c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800811e:	4b0e      	ldr	r3, [pc, #56]	; (8008158 <MX_I2C1_Init+0x50>)
 8008120:	2200      	movs	r2, #0
 8008122:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008124:	4b0c      	ldr	r3, [pc, #48]	; (8008158 <MX_I2C1_Init+0x50>)
 8008126:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800812a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800812c:	4b0a      	ldr	r3, [pc, #40]	; (8008158 <MX_I2C1_Init+0x50>)
 800812e:	2200      	movs	r2, #0
 8008130:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008132:	4b09      	ldr	r3, [pc, #36]	; (8008158 <MX_I2C1_Init+0x50>)
 8008134:	2200      	movs	r2, #0
 8008136:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008138:	4b07      	ldr	r3, [pc, #28]	; (8008158 <MX_I2C1_Init+0x50>)
 800813a:	2200      	movs	r2, #0
 800813c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800813e:	4b06      	ldr	r3, [pc, #24]	; (8008158 <MX_I2C1_Init+0x50>)
 8008140:	2200      	movs	r2, #0
 8008142:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008144:	4804      	ldr	r0, [pc, #16]	; (8008158 <MX_I2C1_Init+0x50>)
 8008146:	f7f9 f8f3 	bl	8001330 <HAL_I2C_Init>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d001      	beq.n	8008154 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008150:	f000 fa8a 	bl	8008668 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8008154:	bf00      	nop
 8008156:	bd80      	pop	{r7, pc}
 8008158:	20006f4c 	.word	0x20006f4c
 800815c:	40005400 	.word	0x40005400
 8008160:	000186a0 	.word	0x000186a0

08008164 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8008168:	4b13      	ldr	r3, [pc, #76]	; (80081b8 <MX_I2S2_Init+0x54>)
 800816a:	4a14      	ldr	r2, [pc, #80]	; (80081bc <MX_I2S2_Init+0x58>)
 800816c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800816e:	4b12      	ldr	r3, [pc, #72]	; (80081b8 <MX_I2S2_Init+0x54>)
 8008170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008174:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8008176:	4b10      	ldr	r3, [pc, #64]	; (80081b8 <MX_I2S2_Init+0x54>)
 8008178:	2200      	movs	r2, #0
 800817a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800817c:	4b0e      	ldr	r3, [pc, #56]	; (80081b8 <MX_I2S2_Init+0x54>)
 800817e:	2200      	movs	r2, #0
 8008180:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8008182:	4b0d      	ldr	r3, [pc, #52]	; (80081b8 <MX_I2S2_Init+0x54>)
 8008184:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008188:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800818a:	4b0b      	ldr	r3, [pc, #44]	; (80081b8 <MX_I2S2_Init+0x54>)
 800818c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8008190:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8008192:	4b09      	ldr	r3, [pc, #36]	; (80081b8 <MX_I2S2_Init+0x54>)
 8008194:	2200      	movs	r2, #0
 8008196:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8008198:	4b07      	ldr	r3, [pc, #28]	; (80081b8 <MX_I2S2_Init+0x54>)
 800819a:	2200      	movs	r2, #0
 800819c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800819e:	4b06      	ldr	r3, [pc, #24]	; (80081b8 <MX_I2S2_Init+0x54>)
 80081a0:	2200      	movs	r2, #0
 80081a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80081a4:	4804      	ldr	r0, [pc, #16]	; (80081b8 <MX_I2S2_Init+0x54>)
 80081a6:	f7f9 f9fb 	bl	80015a0 <HAL_I2S_Init>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d001      	beq.n	80081b4 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 80081b0:	f000 fa5a 	bl	8008668 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80081b4:	bf00      	nop
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	2000f7d0 	.word	0x2000f7d0
 80081bc:	40003800 	.word	0x40003800

080081c0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80081c0:	b480      	push	{r7}
 80081c2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80081c4:	4b0c      	ldr	r3, [pc, #48]	; (80081f8 <MX_SDIO_SD_Init+0x38>)
 80081c6:	4a0d      	ldr	r2, [pc, #52]	; (80081fc <MX_SDIO_SD_Init+0x3c>)
 80081c8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80081ca:	4b0b      	ldr	r3, [pc, #44]	; (80081f8 <MX_SDIO_SD_Init+0x38>)
 80081cc:	2200      	movs	r2, #0
 80081ce:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80081d0:	4b09      	ldr	r3, [pc, #36]	; (80081f8 <MX_SDIO_SD_Init+0x38>)
 80081d2:	2200      	movs	r2, #0
 80081d4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80081d6:	4b08      	ldr	r3, [pc, #32]	; (80081f8 <MX_SDIO_SD_Init+0x38>)
 80081d8:	2200      	movs	r2, #0
 80081da:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80081dc:	4b06      	ldr	r3, [pc, #24]	; (80081f8 <MX_SDIO_SD_Init+0x38>)
 80081de:	2200      	movs	r2, #0
 80081e0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80081e2:	4b05      	ldr	r3, [pc, #20]	; (80081f8 <MX_SDIO_SD_Init+0x38>)
 80081e4:	2200      	movs	r2, #0
 80081e6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 32;
 80081e8:	4b03      	ldr	r3, [pc, #12]	; (80081f8 <MX_SDIO_SD_Init+0x38>)
 80081ea:	2220      	movs	r2, #32
 80081ec:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80081ee:	bf00      	nop
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr
 80081f8:	2000b28c 	.word	0x2000b28c
 80081fc:	40012c00 	.word	0x40012c00

08008200 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b08e      	sub	sp, #56	; 0x38
 8008204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008206:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800820a:	2200      	movs	r2, #0
 800820c:	601a      	str	r2, [r3, #0]
 800820e:	605a      	str	r2, [r3, #4]
 8008210:	609a      	str	r2, [r3, #8]
 8008212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008214:	f107 0320 	add.w	r3, r7, #32
 8008218:	2200      	movs	r2, #0
 800821a:	601a      	str	r2, [r3, #0]
 800821c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800821e:	1d3b      	adds	r3, r7, #4
 8008220:	2200      	movs	r2, #0
 8008222:	601a      	str	r2, [r3, #0]
 8008224:	605a      	str	r2, [r3, #4]
 8008226:	609a      	str	r2, [r3, #8]
 8008228:	60da      	str	r2, [r3, #12]
 800822a:	611a      	str	r2, [r3, #16]
 800822c:	615a      	str	r2, [r3, #20]
 800822e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008230:	4b2c      	ldr	r3, [pc, #176]	; (80082e4 <MX_TIM3_Init+0xe4>)
 8008232:	4a2d      	ldr	r2, [pc, #180]	; (80082e8 <MX_TIM3_Init+0xe8>)
 8008234:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8008236:	4b2b      	ldr	r3, [pc, #172]	; (80082e4 <MX_TIM3_Init+0xe4>)
 8008238:	2200      	movs	r2, #0
 800823a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800823c:	4b29      	ldr	r3, [pc, #164]	; (80082e4 <MX_TIM3_Init+0xe4>)
 800823e:	2200      	movs	r2, #0
 8008240:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 104;
 8008242:	4b28      	ldr	r3, [pc, #160]	; (80082e4 <MX_TIM3_Init+0xe4>)
 8008244:	2268      	movs	r2, #104	; 0x68
 8008246:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008248:	4b26      	ldr	r3, [pc, #152]	; (80082e4 <MX_TIM3_Init+0xe4>)
 800824a:	2200      	movs	r2, #0
 800824c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800824e:	4b25      	ldr	r3, [pc, #148]	; (80082e4 <MX_TIM3_Init+0xe4>)
 8008250:	2280      	movs	r2, #128	; 0x80
 8008252:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8008254:	4823      	ldr	r0, [pc, #140]	; (80082e4 <MX_TIM3_Init+0xe4>)
 8008256:	f7fb fe47 	bl	8003ee8 <HAL_TIM_Base_Init>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d001      	beq.n	8008264 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8008260:	f000 fa02 	bl	8008668 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008264:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008268:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800826a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800826e:	4619      	mov	r1, r3
 8008270:	481c      	ldr	r0, [pc, #112]	; (80082e4 <MX_TIM3_Init+0xe4>)
 8008272:	f7fc f871 	bl	8004358 <HAL_TIM_ConfigClockSource>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d001      	beq.n	8008280 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800827c:	f000 f9f4 	bl	8008668 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008280:	4818      	ldr	r0, [pc, #96]	; (80082e4 <MX_TIM3_Init+0xe4>)
 8008282:	f7fb fe5c 	bl	8003f3e <HAL_TIM_PWM_Init>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d001      	beq.n	8008290 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800828c:	f000 f9ec 	bl	8008668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008290:	2300      	movs	r3, #0
 8008292:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008294:	2300      	movs	r3, #0
 8008296:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008298:	f107 0320 	add.w	r3, r7, #32
 800829c:	4619      	mov	r1, r3
 800829e:	4811      	ldr	r0, [pc, #68]	; (80082e4 <MX_TIM3_Init+0xe4>)
 80082a0:	f7fc fcc2 	bl	8004c28 <HAL_TIMEx_MasterConfigSynchronization>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80082aa:	f000 f9dd 	bl	8008668 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80082ae:	2370      	movs	r3, #112	; 0x70
 80082b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80082b2:	2300      	movs	r3, #0
 80082b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80082b6:	2302      	movs	r3, #2
 80082b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80082ba:	2300      	movs	r3, #0
 80082bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80082be:	1d3b      	adds	r3, r7, #4
 80082c0:	2204      	movs	r2, #4
 80082c2:	4619      	mov	r1, r3
 80082c4:	4807      	ldr	r0, [pc, #28]	; (80082e4 <MX_TIM3_Init+0xe4>)
 80082c6:	f7fb ff81 	bl	80041cc <HAL_TIM_PWM_ConfigChannel>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d001      	beq.n	80082d4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80082d0:	f000 f9ca 	bl	8008668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80082d4:	4803      	ldr	r0, [pc, #12]	; (80082e4 <MX_TIM3_Init+0xe4>)
 80082d6:	f000 fc7f 	bl	8008bd8 <HAL_TIM_MspPostInit>

}
 80082da:	bf00      	nop
 80082dc:	3738      	adds	r7, #56	; 0x38
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	2000afb8 	.word	0x2000afb8
 80082e8:	40000400 	.word	0x40000400

080082ec <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80082f2:	2300      	movs	r3, #0
 80082f4:	607b      	str	r3, [r7, #4]
 80082f6:	4b10      	ldr	r3, [pc, #64]	; (8008338 <MX_DMA_Init+0x4c>)
 80082f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082fa:	4a0f      	ldr	r2, [pc, #60]	; (8008338 <MX_DMA_Init+0x4c>)
 80082fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008300:	6313      	str	r3, [r2, #48]	; 0x30
 8008302:	4b0d      	ldr	r3, [pc, #52]	; (8008338 <MX_DMA_Init+0x4c>)
 8008304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008306:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800830a:	607b      	str	r3, [r7, #4]
 800830c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800830e:	2200      	movs	r2, #0
 8008310:	2100      	movs	r1, #0
 8008312:	200f      	movs	r0, #15
 8008314:	f7f8 fa9b 	bl	800084e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8008318:	200f      	movs	r0, #15
 800831a:	f7f8 fab4 	bl	8000886 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800831e:	2200      	movs	r2, #0
 8008320:	2100      	movs	r1, #0
 8008322:	2010      	movs	r0, #16
 8008324:	f7f8 fa93 	bl	800084e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8008328:	2010      	movs	r0, #16
 800832a:	f7f8 faac 	bl	8000886 <HAL_NVIC_EnableIRQ>

}
 800832e:	bf00      	nop
 8008330:	3708      	adds	r7, #8
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	40023800 	.word	0x40023800

0800833c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b08c      	sub	sp, #48	; 0x30
 8008340:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008342:	f107 031c 	add.w	r3, r7, #28
 8008346:	2200      	movs	r2, #0
 8008348:	601a      	str	r2, [r3, #0]
 800834a:	605a      	str	r2, [r3, #4]
 800834c:	609a      	str	r2, [r3, #8]
 800834e:	60da      	str	r2, [r3, #12]
 8008350:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008352:	2300      	movs	r3, #0
 8008354:	61bb      	str	r3, [r7, #24]
 8008356:	4b72      	ldr	r3, [pc, #456]	; (8008520 <MX_GPIO_Init+0x1e4>)
 8008358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835a:	4a71      	ldr	r2, [pc, #452]	; (8008520 <MX_GPIO_Init+0x1e4>)
 800835c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008360:	6313      	str	r3, [r2, #48]	; 0x30
 8008362:	4b6f      	ldr	r3, [pc, #444]	; (8008520 <MX_GPIO_Init+0x1e4>)
 8008364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800836a:	61bb      	str	r3, [r7, #24]
 800836c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800836e:	2300      	movs	r3, #0
 8008370:	617b      	str	r3, [r7, #20]
 8008372:	4b6b      	ldr	r3, [pc, #428]	; (8008520 <MX_GPIO_Init+0x1e4>)
 8008374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008376:	4a6a      	ldr	r2, [pc, #424]	; (8008520 <MX_GPIO_Init+0x1e4>)
 8008378:	f043 0304 	orr.w	r3, r3, #4
 800837c:	6313      	str	r3, [r2, #48]	; 0x30
 800837e:	4b68      	ldr	r3, [pc, #416]	; (8008520 <MX_GPIO_Init+0x1e4>)
 8008380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008382:	f003 0304 	and.w	r3, r3, #4
 8008386:	617b      	str	r3, [r7, #20]
 8008388:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800838a:	2300      	movs	r3, #0
 800838c:	613b      	str	r3, [r7, #16]
 800838e:	4b64      	ldr	r3, [pc, #400]	; (8008520 <MX_GPIO_Init+0x1e4>)
 8008390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008392:	4a63      	ldr	r2, [pc, #396]	; (8008520 <MX_GPIO_Init+0x1e4>)
 8008394:	f043 0301 	orr.w	r3, r3, #1
 8008398:	6313      	str	r3, [r2, #48]	; 0x30
 800839a:	4b61      	ldr	r3, [pc, #388]	; (8008520 <MX_GPIO_Init+0x1e4>)
 800839c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800839e:	f003 0301 	and.w	r3, r3, #1
 80083a2:	613b      	str	r3, [r7, #16]
 80083a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80083a6:	2300      	movs	r3, #0
 80083a8:	60fb      	str	r3, [r7, #12]
 80083aa:	4b5d      	ldr	r3, [pc, #372]	; (8008520 <MX_GPIO_Init+0x1e4>)
 80083ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ae:	4a5c      	ldr	r2, [pc, #368]	; (8008520 <MX_GPIO_Init+0x1e4>)
 80083b0:	f043 0302 	orr.w	r3, r3, #2
 80083b4:	6313      	str	r3, [r2, #48]	; 0x30
 80083b6:	4b5a      	ldr	r3, [pc, #360]	; (8008520 <MX_GPIO_Init+0x1e4>)
 80083b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ba:	f003 0302 	and.w	r3, r3, #2
 80083be:	60fb      	str	r3, [r7, #12]
 80083c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80083c2:	2300      	movs	r3, #0
 80083c4:	60bb      	str	r3, [r7, #8]
 80083c6:	4b56      	ldr	r3, [pc, #344]	; (8008520 <MX_GPIO_Init+0x1e4>)
 80083c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ca:	4a55      	ldr	r2, [pc, #340]	; (8008520 <MX_GPIO_Init+0x1e4>)
 80083cc:	f043 0310 	orr.w	r3, r3, #16
 80083d0:	6313      	str	r3, [r2, #48]	; 0x30
 80083d2:	4b53      	ldr	r3, [pc, #332]	; (8008520 <MX_GPIO_Init+0x1e4>)
 80083d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d6:	f003 0310 	and.w	r3, r3, #16
 80083da:	60bb      	str	r3, [r7, #8]
 80083dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80083de:	2300      	movs	r3, #0
 80083e0:	607b      	str	r3, [r7, #4]
 80083e2:	4b4f      	ldr	r3, [pc, #316]	; (8008520 <MX_GPIO_Init+0x1e4>)
 80083e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e6:	4a4e      	ldr	r2, [pc, #312]	; (8008520 <MX_GPIO_Init+0x1e4>)
 80083e8:	f043 0308 	orr.w	r3, r3, #8
 80083ec:	6313      	str	r3, [r2, #48]	; 0x30
 80083ee:	4b4c      	ldr	r3, [pc, #304]	; (8008520 <MX_GPIO_Init+0x1e4>)
 80083f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f2:	f003 0308 	and.w	r3, r3, #8
 80083f6:	607b      	str	r3, [r7, #4]
 80083f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MIDI_OUT_Pin|LED_STATUS_Pin, GPIO_PIN_RESET);
 80083fa:	2200      	movs	r2, #0
 80083fc:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008400:	4848      	ldr	r0, [pc, #288]	; (8008524 <MX_GPIO_Init+0x1e8>)
 8008402:	f7f8 ff7b 	bl	80012fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_A_Pin|LCD_B_Pin, GPIO_PIN_RESET);
 8008406:	2200      	movs	r2, #0
 8008408:	2130      	movs	r1, #48	; 0x30
 800840a:	4847      	ldr	r0, [pc, #284]	; (8008528 <MX_GPIO_Init+0x1ec>)
 800840c:	f7f8 ff76 	bl	80012fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_C_Pin|LCD_D_Pin|GPIO1_Pin|GPIO2_Pin, GPIO_PIN_RESET);
 8008410:	2200      	movs	r2, #0
 8008412:	f24c 0103 	movw	r1, #49155	; 0xc003
 8008416:	4845      	ldr	r0, [pc, #276]	; (800852c <MX_GPIO_Init+0x1f0>)
 8008418:	f7f8 ff70 	bl	80012fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_E_Pin|LCD_F_Pin|LCD_G_Pin|LCD_DP_Pin 
 800841c:	2200      	movs	r2, #0
 800841e:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 8008422:	4843      	ldr	r0, [pc, #268]	; (8008530 <MX_GPIO_Init+0x1f4>)
 8008424:	f7f8 ff6a 	bl	80012fc <HAL_GPIO_WritePin>
                          |LCD_DIG1CC_Pin|LCD_DIG2CC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO3_Pin|GPIO4_Pin|GPIO5_Pin|GPIO6_Pin 
 8008428:	2200      	movs	r2, #0
 800842a:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
 800842e:	4841      	ldr	r0, [pc, #260]	; (8008534 <MX_GPIO_Init+0x1f8>)
 8008430:	f7f8 ff64 	bl	80012fc <HAL_GPIO_WritePin>
                          |GPIO7_Pin|GPIO8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : MIDI_OUT_Pin LED_STATUS_Pin */
  GPIO_InitStruct.Pin = MIDI_OUT_Pin|LED_STATUS_Pin;
 8008434:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8008438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800843a:	2301      	movs	r3, #1
 800843c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800843e:	2300      	movs	r3, #0
 8008440:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008442:	2300      	movs	r3, #0
 8008444:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008446:	f107 031c 	add.w	r3, r7, #28
 800844a:	4619      	mov	r1, r3
 800844c:	4835      	ldr	r0, [pc, #212]	; (8008524 <MX_GPIO_Init+0x1e8>)
 800844e:	f7f8 fda3 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_A_Pin LCD_B_Pin */
  GPIO_InitStruct.Pin = LCD_A_Pin|LCD_B_Pin;
 8008452:	2330      	movs	r3, #48	; 0x30
 8008454:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008456:	2301      	movs	r3, #1
 8008458:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800845a:	2300      	movs	r3, #0
 800845c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800845e:	2300      	movs	r3, #0
 8008460:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008462:	f107 031c 	add.w	r3, r7, #28
 8008466:	4619      	mov	r1, r3
 8008468:	482f      	ldr	r0, [pc, #188]	; (8008528 <MX_GPIO_Init+0x1ec>)
 800846a:	f7f8 fd95 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_C_Pin LCD_D_Pin GPIO1_Pin GPIO2_Pin */
  GPIO_InitStruct.Pin = LCD_C_Pin|LCD_D_Pin|GPIO1_Pin|GPIO2_Pin;
 800846e:	f24c 0303 	movw	r3, #49155	; 0xc003
 8008472:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008474:	2301      	movs	r3, #1
 8008476:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008478:	2300      	movs	r3, #0
 800847a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800847c:	2300      	movs	r3, #0
 800847e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008480:	f107 031c 	add.w	r3, r7, #28
 8008484:	4619      	mov	r1, r3
 8008486:	4829      	ldr	r0, [pc, #164]	; (800852c <MX_GPIO_Init+0x1f0>)
 8008488:	f7f8 fd86 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_E_Pin LCD_F_Pin LCD_G_Pin LCD_DP_Pin 
                           LCD_DIG1CC_Pin LCD_DIG2CC_Pin */
  GPIO_InitStruct.Pin = LCD_E_Pin|LCD_F_Pin|LCD_G_Pin|LCD_DP_Pin 
 800848c:	f44f 53fc 	mov.w	r3, #8064	; 0x1f80
 8008490:	61fb      	str	r3, [r7, #28]
                          |LCD_DIG1CC_Pin|LCD_DIG2CC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008492:	2301      	movs	r3, #1
 8008494:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008496:	2300      	movs	r3, #0
 8008498:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800849a:	2300      	movs	r3, #0
 800849c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800849e:	f107 031c 	add.w	r3, r7, #28
 80084a2:	4619      	mov	r1, r3
 80084a4:	4822      	ldr	r0, [pc, #136]	; (8008530 <MX_GPIO_Init+0x1f4>)
 80084a6:	f7f8 fd77 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_PREV_Pin B_NEXT_Pin B_STOP_Pin */
  GPIO_InitStruct.Pin = B_PREV_Pin|B_NEXT_Pin|B_STOP_Pin;
 80084aa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80084ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80084b0:	2300      	movs	r3, #0
 80084b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80084b4:	2301      	movs	r3, #1
 80084b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80084b8:	f107 031c 	add.w	r3, r7, #28
 80084bc:	4619      	mov	r1, r3
 80084be:	481c      	ldr	r0, [pc, #112]	; (8008530 <MX_GPIO_Init+0x1f4>)
 80084c0:	f7f8 fd6a 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO3_Pin GPIO4_Pin GPIO5_Pin GPIO6_Pin 
                           GPIO7_Pin GPIO8_Pin */
  GPIO_InitStruct.Pin = GPIO3_Pin|GPIO4_Pin|GPIO5_Pin|GPIO6_Pin 
 80084c4:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 80084c8:	61fb      	str	r3, [r7, #28]
                          |GPIO7_Pin|GPIO8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80084ca:	2301      	movs	r3, #1
 80084cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084ce:	2300      	movs	r3, #0
 80084d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084d2:	2300      	movs	r3, #0
 80084d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80084d6:	f107 031c 	add.w	r3, r7, #28
 80084da:	4619      	mov	r1, r3
 80084dc:	4815      	ldr	r0, [pc, #84]	; (8008534 <MX_GPIO_Init+0x1f8>)
 80084de:	f7f8 fd5b 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CD_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin;
 80084e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80084e8:	2300      	movs	r3, #0
 80084ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084ec:	2300      	movs	r3, #0
 80084ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 80084f0:	f107 031c 	add.w	r3, r7, #28
 80084f4:	4619      	mov	r1, r3
 80084f6:	480b      	ldr	r0, [pc, #44]	; (8008524 <MX_GPIO_Init+0x1e8>)
 80084f8:	f7f8 fd4e 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : SENSOR_Pin */
  GPIO_InitStruct.Pin = SENSOR_Pin;
 80084fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008500:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008502:	2300      	movs	r3, #0
 8008504:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008506:	2301      	movs	r3, #1
 8008508:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SENSOR_GPIO_Port, &GPIO_InitStruct);
 800850a:	f107 031c 	add.w	r3, r7, #28
 800850e:	4619      	mov	r1, r3
 8008510:	4804      	ldr	r0, [pc, #16]	; (8008524 <MX_GPIO_Init+0x1e8>)
 8008512:	f7f8 fd41 	bl	8000f98 <HAL_GPIO_Init>

}
 8008516:	bf00      	nop
 8008518:	3730      	adds	r7, #48	; 0x30
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	40023800 	.word	0x40023800
 8008524:	40020000 	.word	0x40020000
 8008528:	40020800 	.word	0x40020800
 800852c:	40020400 	.word	0x40020400
 8008530:	40021000 	.word	0x40021000
 8008534:	40020c00 	.word	0x40020c00

08008538 <LoadTrack>:
//{
//  HAL_DMA_IRQHandler(&hdma_spi2_tx);
//}

void LoadTrack(void)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	af00      	add	r7, sp, #0
	// Loads the track in Track_Next into the Audio_Next_fil
	  fr = f_open(&Audio_Next_fil, "003.wav", FA_READ);
 800853c:	2201      	movs	r2, #1
 800853e:	490d      	ldr	r1, [pc, #52]	; (8008574 <LoadTrack+0x3c>)
 8008540:	480d      	ldr	r0, [pc, #52]	; (8008578 <LoadTrack+0x40>)
 8008542:	f7fe fe63 	bl	800720c <f_open>
 8008546:	4603      	mov	r3, r0
 8008548:	461a      	mov	r2, r3
 800854a:	4b0c      	ldr	r3, [pc, #48]	; (800857c <LoadTrack+0x44>)
 800854c:	701a      	strb	r2, [r3, #0]
	  if (fr != FR_OK)
 800854e:	4b0b      	ldr	r3, [pc, #44]	; (800857c <LoadTrack+0x44>)
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <LoadTrack+0x22>
	  {
		  Error_Handler();
 8008556:	f000 f887 	bl	8008668 <Error_Handler>
	  }

	  f_rewind(&Audio_Next_fil);
 800855a:	2100      	movs	r1, #0
 800855c:	4806      	ldr	r0, [pc, #24]	; (8008578 <LoadTrack+0x40>)
 800855e:	f7ff f952 	bl	8007806 <f_lseek>
	  f_read(&Audio_Next_fil, &Audio_Next_Buffer[0], AUDIO_BUFFER_SIZE*2, &br);
 8008562:	4b07      	ldr	r3, [pc, #28]	; (8008580 <LoadTrack+0x48>)
 8008564:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008568:	4906      	ldr	r1, [pc, #24]	; (8008584 <LoadTrack+0x4c>)
 800856a:	4803      	ldr	r0, [pc, #12]	; (8008578 <LoadTrack+0x40>)
 800856c:	f7ff f80c 	bl	8007588 <f_read>
}
 8008570:	bf00      	nop
 8008572:	bd80      	pop	{r7, pc}
 8008574:	08009684 	.word	0x08009684
 8008578:	2000f310 	.word	0x2000f310
 800857c:	2000b288 	.word	0x2000b288
 8008580:	2000689c 	.word	0x2000689c
 8008584:	20006fb8 	.word	0x20006fb8

08008588 <PlayTrack>:

void PlayTrack(I2S_HandleTypeDef *hi2s)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
	// Moves Audio_Next_Buffer into Audio_DMA_Buffer, starts playback
	memcpy(Audio_DMA_Buffer, Audio_Next_Buffer, AUDIO_BUFFER_SIZE*2);
 8008590:	4a0d      	ldr	r2, [pc, #52]	; (80085c8 <PlayTrack+0x40>)
 8008592:	4b0e      	ldr	r3, [pc, #56]	; (80085cc <PlayTrack+0x44>)
 8008594:	4610      	mov	r0, r2
 8008596:	4619      	mov	r1, r3
 8008598:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800859c:	461a      	mov	r2, r3
 800859e:	f000 fc2d 	bl	8008dfc <memcpy>
	Audio_Current_fil = Audio_Next_fil;
 80085a2:	4a0b      	ldr	r2, [pc, #44]	; (80085d0 <PlayTrack+0x48>)
 80085a4:	4b0b      	ldr	r3, [pc, #44]	; (80085d4 <PlayTrack+0x4c>)
 80085a6:	4610      	mov	r0, r2
 80085a8:	4619      	mov	r1, r3
 80085aa:	f44f 730c 	mov.w	r3, #560	; 0x230
 80085ae:	461a      	mov	r2, r3
 80085b0:	f000 fc24 	bl	8008dfc <memcpy>
	HAL_I2S_Transmit_DMA (hi2s, Audio_DMA_Buffer, AUDIO_BUFFER_SIZE);
 80085b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80085b8:	4903      	ldr	r1, [pc, #12]	; (80085c8 <PlayTrack+0x40>)
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f7f9 f930 	bl	8001820 <HAL_I2S_Transmit_DMA>
}
 80085c0:	bf00      	nop
 80085c2:	3708      	adds	r7, #8
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	2000b310 	.word	0x2000b310
 80085cc:	20006fb8 	.word	0x20006fb8
 80085d0:	2000aff8 	.word	0x2000aff8
 80085d4:	2000f310 	.word	0x2000f310

080085d8 <HAL_I2S_TxCpltCallback>:
////  AudioRemSize = WaveDataLength - br;
//  HAL_I2S_Transmit_DMA (hi2s,  dma_buffer, AUDIO_BUFFER_SIZE);
//}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  // second half finished, filling it up again while first  half is playing
//  FillBuffer  (&(dma_buffer [AUDIO_BUFFER_SIZE  >> 1]), AUDIO_BUFFER_SIZE >> 1);
    f_read(&Audio_Current_fil,
 80085e0:	4b0b      	ldr	r3, [pc, #44]	; (8008610 <HAL_I2S_TxCpltCallback+0x38>)
 80085e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80085e6:	490b      	ldr	r1, [pc, #44]	; (8008614 <HAL_I2S_TxCpltCallback+0x3c>)
 80085e8:	480b      	ldr	r0, [pc, #44]	; (8008618 <HAL_I2S_TxCpltCallback+0x40>)
 80085ea:	f7fe ffcd 	bl	8007588 <f_read>
           &Audio_DMA_Buffer[AUDIO_BUFFER_SIZE/2],
           AUDIO_BUFFER_SIZE,
           (void *)&br);

	HAL_GPIO_WritePin(GPIOE, LCD_G_Pin, GPIO_PIN_SET);
 80085ee:	2201      	movs	r2, #1
 80085f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80085f4:	4809      	ldr	r0, [pc, #36]	; (800861c <HAL_I2S_TxCpltCallback+0x44>)
 80085f6:	f7f8 fe81 	bl	80012fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LCD_F_Pin, GPIO_PIN_RESET);
 80085fa:	2200      	movs	r2, #0
 80085fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008600:	4806      	ldr	r0, [pc, #24]	; (800861c <HAL_I2S_TxCpltCallback+0x44>)
 8008602:	f7f8 fe7b 	bl	80012fc <HAL_GPIO_WritePin>
}
 8008606:	bf00      	nop
 8008608:	3708      	adds	r7, #8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	2000689c 	.word	0x2000689c
 8008614:	2000d310 	.word	0x2000d310
 8008618:	2000aff8 	.word	0x2000aff8
 800861c:	40021000 	.word	0x40021000

08008620 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  // first half finished, filling it up again while second half is playing
    f_read(&Audio_Current_fil,
 8008628:	4b0b      	ldr	r3, [pc, #44]	; (8008658 <HAL_I2S_TxHalfCpltCallback+0x38>)
 800862a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800862e:	490b      	ldr	r1, [pc, #44]	; (800865c <HAL_I2S_TxHalfCpltCallback+0x3c>)
 8008630:	480b      	ldr	r0, [pc, #44]	; (8008660 <HAL_I2S_TxHalfCpltCallback+0x40>)
 8008632:	f7fe ffa9 	bl	8007588 <f_read>
           &Audio_DMA_Buffer[0],
           AUDIO_BUFFER_SIZE,
           (void *)&br);

	HAL_GPIO_WritePin(GPIOE, LCD_F_Pin, GPIO_PIN_SET);
 8008636:	2201      	movs	r2, #1
 8008638:	f44f 7180 	mov.w	r1, #256	; 0x100
 800863c:	4809      	ldr	r0, [pc, #36]	; (8008664 <HAL_I2S_TxHalfCpltCallback+0x44>)
 800863e:	f7f8 fe5d 	bl	80012fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LCD_G_Pin, GPIO_PIN_RESET);
 8008642:	2200      	movs	r2, #0
 8008644:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008648:	4806      	ldr	r0, [pc, #24]	; (8008664 <HAL_I2S_TxHalfCpltCallback+0x44>)
 800864a:	f7f8 fe57 	bl	80012fc <HAL_GPIO_WritePin>
//  FillBuffer  (&(dma_buffer [0]), AUDIO_BUFFER_SIZE >> 1);
}
 800864e:	bf00      	nop
 8008650:	3708      	adds	r7, #8
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	2000689c 	.word	0x2000689c
 800865c:	2000b310 	.word	0x2000b310
 8008660:	2000aff8 	.word	0x2000aff8
 8008664:	40021000 	.word	0x40021000

08008668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(GPIOA, LED_STATUS_Pin, GPIO_PIN_SET);
 800866c:	2201      	movs	r2, #1
 800866e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008672:	4802      	ldr	r0, [pc, #8]	; (800867c <Error_Handler+0x14>)
 8008674:	f7f8 fe42 	bl	80012fc <HAL_GPIO_WritePin>
  while (1) {}
 8008678:	e7fe      	b.n	8008678 <Error_Handler+0x10>
 800867a:	bf00      	nop
 800867c:	40020000 	.word	0x40020000

08008680 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	4603      	mov	r3, r0
 8008688:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800868a:	4b0b      	ldr	r3, [pc, #44]	; (80086b8 <SD_CheckStatus+0x38>)
 800868c:	2201      	movs	r2, #1
 800868e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008690:	f7ff fbba 	bl	8007e08 <BSP_SD_GetCardState>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d107      	bne.n	80086aa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800869a:	4b07      	ldr	r3, [pc, #28]	; (80086b8 <SD_CheckStatus+0x38>)
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	f023 0301 	bic.w	r3, r3, #1
 80086a4:	b2da      	uxtb	r2, r3
 80086a6:	4b04      	ldr	r3, [pc, #16]	; (80086b8 <SD_CheckStatus+0x38>)
 80086a8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80086aa:	4b03      	ldr	r3, [pc, #12]	; (80086b8 <SD_CheckStatus+0x38>)
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	b2db      	uxtb	r3, r3
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3708      	adds	r7, #8
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	20000010 	.word	0x20000010

080086bc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	4603      	mov	r3, r0
 80086c4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 80086c6:	4b0b      	ldr	r3, [pc, #44]	; (80086f4 <SD_initialize+0x38>)
 80086c8:	2201      	movs	r2, #1
 80086ca:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80086cc:	f7ff fb3a 	bl	8007d44 <BSP_SD_Init>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d107      	bne.n	80086e6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80086d6:	79fb      	ldrb	r3, [r7, #7]
 80086d8:	4618      	mov	r0, r3
 80086da:	f7ff ffd1 	bl	8008680 <SD_CheckStatus>
 80086de:	4603      	mov	r3, r0
 80086e0:	461a      	mov	r2, r3
 80086e2:	4b04      	ldr	r3, [pc, #16]	; (80086f4 <SD_initialize+0x38>)
 80086e4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80086e6:	4b03      	ldr	r3, [pc, #12]	; (80086f4 <SD_initialize+0x38>)
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	b2db      	uxtb	r3, r3
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3708      	adds	r7, #8
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	20000010 	.word	0x20000010

080086f8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	4603      	mov	r3, r0
 8008700:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008702:	79fb      	ldrb	r3, [r7, #7]
 8008704:	4618      	mov	r0, r3
 8008706:	f7ff ffbb 	bl	8008680 <SD_CheckStatus>
 800870a:	4603      	mov	r3, r0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3708      	adds	r7, #8
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b086      	sub	sp, #24
 8008718:	af00      	add	r7, sp, #0
 800871a:	60b9      	str	r1, [r7, #8]
 800871c:	607a      	str	r2, [r7, #4]
 800871e:	603b      	str	r3, [r7, #0]
 8008720:	4603      	mov	r3, r0
 8008722:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8008728:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800872c:	683a      	ldr	r2, [r7, #0]
 800872e:	6879      	ldr	r1, [r7, #4]
 8008730:	68b8      	ldr	r0, [r7, #8]
 8008732:	f7ff fb2d 	bl	8007d90 <BSP_SD_ReadBlocks>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d107      	bne.n	800874c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800873c:	bf00      	nop
 800873e:	f7ff fb63 	bl	8007e08 <BSP_SD_GetCardState>
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1fa      	bne.n	800873e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8008748:	2300      	movs	r3, #0
 800874a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800874c:	7dfb      	ldrb	r3, [r7, #23]
}
 800874e:	4618      	mov	r0, r3
 8008750:	3718      	adds	r7, #24
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b086      	sub	sp, #24
 800875a:	af00      	add	r7, sp, #0
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	607a      	str	r2, [r7, #4]
 8008760:	603b      	str	r3, [r7, #0]
 8008762:	4603      	mov	r3, r0
 8008764:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800876a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800876e:	683a      	ldr	r2, [r7, #0]
 8008770:	6879      	ldr	r1, [r7, #4]
 8008772:	68b8      	ldr	r0, [r7, #8]
 8008774:	f7ff fb2a 	bl	8007dcc <BSP_SD_WriteBlocks>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d107      	bne.n	800878e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800877e:	bf00      	nop
 8008780:	f7ff fb42 	bl	8007e08 <BSP_SD_GetCardState>
 8008784:	4603      	mov	r3, r0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1fa      	bne.n	8008780 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800878a:	2300      	movs	r3, #0
 800878c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800878e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008790:	4618      	mov	r0, r3
 8008792:	3718      	adds	r7, #24
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b08c      	sub	sp, #48	; 0x30
 800879c:	af00      	add	r7, sp, #0
 800879e:	4603      	mov	r3, r0
 80087a0:	603a      	str	r2, [r7, #0]
 80087a2:	71fb      	strb	r3, [r7, #7]
 80087a4:	460b      	mov	r3, r1
 80087a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80087ae:	4b25      	ldr	r3, [pc, #148]	; (8008844 <SD_ioctl+0xac>)
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	f003 0301 	and.w	r3, r3, #1
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d001      	beq.n	80087c0 <SD_ioctl+0x28>
 80087bc:	2303      	movs	r3, #3
 80087be:	e03c      	b.n	800883a <SD_ioctl+0xa2>

  switch (cmd)
 80087c0:	79bb      	ldrb	r3, [r7, #6]
 80087c2:	2b03      	cmp	r3, #3
 80087c4:	d834      	bhi.n	8008830 <SD_ioctl+0x98>
 80087c6:	a201      	add	r2, pc, #4	; (adr r2, 80087cc <SD_ioctl+0x34>)
 80087c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087cc:	080087dd 	.word	0x080087dd
 80087d0:	080087e5 	.word	0x080087e5
 80087d4:	080087fd 	.word	0x080087fd
 80087d8:	08008817 	.word	0x08008817
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80087dc:	2300      	movs	r3, #0
 80087de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80087e2:	e028      	b.n	8008836 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80087e4:	f107 030c 	add.w	r3, r7, #12
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7ff fb1d 	bl	8007e28 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80087ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80087f4:	2300      	movs	r3, #0
 80087f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80087fa:	e01c      	b.n	8008836 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80087fc:	f107 030c 	add.w	r3, r7, #12
 8008800:	4618      	mov	r0, r3
 8008802:	f7ff fb11 	bl	8007e28 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008808:	b29a      	uxth	r2, r3
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800880e:	2300      	movs	r3, #0
 8008810:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008814:	e00f      	b.n	8008836 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008816:	f107 030c 	add.w	r3, r7, #12
 800881a:	4618      	mov	r0, r3
 800881c:	f7ff fb04 	bl	8007e28 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008822:	0a5a      	lsrs	r2, r3, #9
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008828:	2300      	movs	r3, #0
 800882a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800882e:	e002      	b.n	8008836 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008830:	2304      	movs	r3, #4
 8008832:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8008836:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800883a:	4618      	mov	r0, r3
 800883c:	3730      	adds	r7, #48	; 0x30
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	20000010 	.word	0x20000010

08008848 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800884e:	2300      	movs	r3, #0
 8008850:	607b      	str	r3, [r7, #4]
 8008852:	4b10      	ldr	r3, [pc, #64]	; (8008894 <HAL_MspInit+0x4c>)
 8008854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008856:	4a0f      	ldr	r2, [pc, #60]	; (8008894 <HAL_MspInit+0x4c>)
 8008858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800885c:	6453      	str	r3, [r2, #68]	; 0x44
 800885e:	4b0d      	ldr	r3, [pc, #52]	; (8008894 <HAL_MspInit+0x4c>)
 8008860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008866:	607b      	str	r3, [r7, #4]
 8008868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800886a:	2300      	movs	r3, #0
 800886c:	603b      	str	r3, [r7, #0]
 800886e:	4b09      	ldr	r3, [pc, #36]	; (8008894 <HAL_MspInit+0x4c>)
 8008870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008872:	4a08      	ldr	r2, [pc, #32]	; (8008894 <HAL_MspInit+0x4c>)
 8008874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008878:	6413      	str	r3, [r2, #64]	; 0x40
 800887a:	4b06      	ldr	r3, [pc, #24]	; (8008894 <HAL_MspInit+0x4c>)
 800887c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008882:	603b      	str	r3, [r7, #0]
 8008884:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008886:	bf00      	nop
 8008888:	370c      	adds	r7, #12
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	40023800 	.word	0x40023800

08008898 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b08a      	sub	sp, #40	; 0x28
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088a0:	f107 0314 	add.w	r3, r7, #20
 80088a4:	2200      	movs	r2, #0
 80088a6:	601a      	str	r2, [r3, #0]
 80088a8:	605a      	str	r2, [r3, #4]
 80088aa:	609a      	str	r2, [r3, #8]
 80088ac:	60da      	str	r2, [r3, #12]
 80088ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a19      	ldr	r2, [pc, #100]	; (800891c <HAL_I2C_MspInit+0x84>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d12b      	bne.n	8008912 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80088ba:	2300      	movs	r3, #0
 80088bc:	613b      	str	r3, [r7, #16]
 80088be:	4b18      	ldr	r3, [pc, #96]	; (8008920 <HAL_I2C_MspInit+0x88>)
 80088c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c2:	4a17      	ldr	r2, [pc, #92]	; (8008920 <HAL_I2C_MspInit+0x88>)
 80088c4:	f043 0302 	orr.w	r3, r3, #2
 80088c8:	6313      	str	r3, [r2, #48]	; 0x30
 80088ca:	4b15      	ldr	r3, [pc, #84]	; (8008920 <HAL_I2C_MspInit+0x88>)
 80088cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ce:	f003 0302 	and.w	r3, r3, #2
 80088d2:	613b      	str	r3, [r7, #16]
 80088d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80088d6:	23c0      	movs	r3, #192	; 0xc0
 80088d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80088da:	2312      	movs	r3, #18
 80088dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80088de:	2301      	movs	r3, #1
 80088e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088e2:	2303      	movs	r3, #3
 80088e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80088e6:	2304      	movs	r3, #4
 80088e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80088ea:	f107 0314 	add.w	r3, r7, #20
 80088ee:	4619      	mov	r1, r3
 80088f0:	480c      	ldr	r0, [pc, #48]	; (8008924 <HAL_I2C_MspInit+0x8c>)
 80088f2:	f7f8 fb51 	bl	8000f98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80088f6:	2300      	movs	r3, #0
 80088f8:	60fb      	str	r3, [r7, #12]
 80088fa:	4b09      	ldr	r3, [pc, #36]	; (8008920 <HAL_I2C_MspInit+0x88>)
 80088fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fe:	4a08      	ldr	r2, [pc, #32]	; (8008920 <HAL_I2C_MspInit+0x88>)
 8008900:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008904:	6413      	str	r3, [r2, #64]	; 0x40
 8008906:	4b06      	ldr	r3, [pc, #24]	; (8008920 <HAL_I2C_MspInit+0x88>)
 8008908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800890a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800890e:	60fb      	str	r3, [r7, #12]
 8008910:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008912:	bf00      	nop
 8008914:	3728      	adds	r7, #40	; 0x28
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	40005400 	.word	0x40005400
 8008920:	40023800 	.word	0x40023800
 8008924:	40020400 	.word	0x40020400

08008928 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b08a      	sub	sp, #40	; 0x28
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008930:	f107 0314 	add.w	r3, r7, #20
 8008934:	2200      	movs	r2, #0
 8008936:	601a      	str	r2, [r3, #0]
 8008938:	605a      	str	r2, [r3, #4]
 800893a:	609a      	str	r2, [r3, #8]
 800893c:	60da      	str	r2, [r3, #12]
 800893e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a40      	ldr	r2, [pc, #256]	; (8008a48 <HAL_I2S_MspInit+0x120>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d17a      	bne.n	8008a40 <HAL_I2S_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800894a:	2300      	movs	r3, #0
 800894c:	613b      	str	r3, [r7, #16]
 800894e:	4b3f      	ldr	r3, [pc, #252]	; (8008a4c <HAL_I2S_MspInit+0x124>)
 8008950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008952:	4a3e      	ldr	r2, [pc, #248]	; (8008a4c <HAL_I2S_MspInit+0x124>)
 8008954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008958:	6413      	str	r3, [r2, #64]	; 0x40
 800895a:	4b3c      	ldr	r3, [pc, #240]	; (8008a4c <HAL_I2S_MspInit+0x124>)
 800895c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008962:	613b      	str	r3, [r7, #16]
 8008964:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008966:	2300      	movs	r3, #0
 8008968:	60fb      	str	r3, [r7, #12]
 800896a:	4b38      	ldr	r3, [pc, #224]	; (8008a4c <HAL_I2S_MspInit+0x124>)
 800896c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896e:	4a37      	ldr	r2, [pc, #220]	; (8008a4c <HAL_I2S_MspInit+0x124>)
 8008970:	f043 0304 	orr.w	r3, r3, #4
 8008974:	6313      	str	r3, [r2, #48]	; 0x30
 8008976:	4b35      	ldr	r3, [pc, #212]	; (8008a4c <HAL_I2S_MspInit+0x124>)
 8008978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800897a:	f003 0304 	and.w	r3, r3, #4
 800897e:	60fb      	str	r3, [r7, #12]
 8008980:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008982:	2300      	movs	r3, #0
 8008984:	60bb      	str	r3, [r7, #8]
 8008986:	4b31      	ldr	r3, [pc, #196]	; (8008a4c <HAL_I2S_MspInit+0x124>)
 8008988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800898a:	4a30      	ldr	r2, [pc, #192]	; (8008a4c <HAL_I2S_MspInit+0x124>)
 800898c:	f043 0302 	orr.w	r3, r3, #2
 8008990:	6313      	str	r3, [r2, #48]	; 0x30
 8008992:	4b2e      	ldr	r3, [pc, #184]	; (8008a4c <HAL_I2S_MspInit+0x124>)
 8008994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008996:	f003 0302 	and.w	r3, r3, #2
 800899a:	60bb      	str	r3, [r7, #8]
 800899c:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PC6     ------> I2S2_MCK
    PB9     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 800899e:	2348      	movs	r3, #72	; 0x48
 80089a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089a2:	2302      	movs	r3, #2
 80089a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089a6:	2300      	movs	r3, #0
 80089a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089aa:	2300      	movs	r3, #0
 80089ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80089ae:	2305      	movs	r3, #5
 80089b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80089b2:	f107 0314 	add.w	r3, r7, #20
 80089b6:	4619      	mov	r1, r3
 80089b8:	4825      	ldr	r0, [pc, #148]	; (8008a50 <HAL_I2S_MspInit+0x128>)
 80089ba:	f7f8 faed 	bl	8000f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80089be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80089c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089c4:	2302      	movs	r3, #2
 80089c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089c8:	2300      	movs	r3, #0
 80089ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089cc:	2300      	movs	r3, #0
 80089ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80089d0:	2305      	movs	r3, #5
 80089d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80089d4:	f107 0314 	add.w	r3, r7, #20
 80089d8:	4619      	mov	r1, r3
 80089da:	481e      	ldr	r0, [pc, #120]	; (8008a54 <HAL_I2S_MspInit+0x12c>)
 80089dc:	f7f8 fadc 	bl	8000f98 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80089e0:	4b1d      	ldr	r3, [pc, #116]	; (8008a58 <HAL_I2S_MspInit+0x130>)
 80089e2:	4a1e      	ldr	r2, [pc, #120]	; (8008a5c <HAL_I2S_MspInit+0x134>)
 80089e4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80089e6:	4b1c      	ldr	r3, [pc, #112]	; (8008a58 <HAL_I2S_MspInit+0x130>)
 80089e8:	2200      	movs	r2, #0
 80089ea:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80089ec:	4b1a      	ldr	r3, [pc, #104]	; (8008a58 <HAL_I2S_MspInit+0x130>)
 80089ee:	2240      	movs	r2, #64	; 0x40
 80089f0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80089f2:	4b19      	ldr	r3, [pc, #100]	; (8008a58 <HAL_I2S_MspInit+0x130>)
 80089f4:	2200      	movs	r2, #0
 80089f6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80089f8:	4b17      	ldr	r3, [pc, #92]	; (8008a58 <HAL_I2S_MspInit+0x130>)
 80089fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80089fe:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008a00:	4b15      	ldr	r3, [pc, #84]	; (8008a58 <HAL_I2S_MspInit+0x130>)
 8008a02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a06:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008a08:	4b13      	ldr	r3, [pc, #76]	; (8008a58 <HAL_I2S_MspInit+0x130>)
 8008a0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008a0e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8008a10:	4b11      	ldr	r3, [pc, #68]	; (8008a58 <HAL_I2S_MspInit+0x130>)
 8008a12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a16:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008a18:	4b0f      	ldr	r3, [pc, #60]	; (8008a58 <HAL_I2S_MspInit+0x130>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008a1e:	4b0e      	ldr	r3, [pc, #56]	; (8008a58 <HAL_I2S_MspInit+0x130>)
 8008a20:	2200      	movs	r2, #0
 8008a22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8008a24:	480c      	ldr	r0, [pc, #48]	; (8008a58 <HAL_I2S_MspInit+0x130>)
 8008a26:	f7f7 ff49 	bl	80008bc <HAL_DMA_Init>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d001      	beq.n	8008a34 <HAL_I2S_MspInit+0x10c>
    {
      Error_Handler();
 8008a30:	f7ff fe1a 	bl	8008668 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a08      	ldr	r2, [pc, #32]	; (8008a58 <HAL_I2S_MspInit+0x130>)
 8008a38:	639a      	str	r2, [r3, #56]	; 0x38
 8008a3a:	4a07      	ldr	r2, [pc, #28]	; (8008a58 <HAL_I2S_MspInit+0x130>)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8008a40:	bf00      	nop
 8008a42:	3728      	adds	r7, #40	; 0x28
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	40003800 	.word	0x40003800
 8008a4c:	40023800 	.word	0x40023800
 8008a50:	40020800 	.word	0x40020800
 8008a54:	40020400 	.word	0x40020400
 8008a58:	2000f540 	.word	0x2000f540
 8008a5c:	40026070 	.word	0x40026070

08008a60 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b08a      	sub	sp, #40	; 0x28
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a68:	f107 0314 	add.w	r3, r7, #20
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	601a      	str	r2, [r3, #0]
 8008a70:	605a      	str	r2, [r3, #4]
 8008a72:	609a      	str	r2, [r3, #8]
 8008a74:	60da      	str	r2, [r3, #12]
 8008a76:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a28      	ldr	r2, [pc, #160]	; (8008b20 <HAL_SD_MspInit+0xc0>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d14a      	bne.n	8008b18 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8008a82:	2300      	movs	r3, #0
 8008a84:	613b      	str	r3, [r7, #16]
 8008a86:	4b27      	ldr	r3, [pc, #156]	; (8008b24 <HAL_SD_MspInit+0xc4>)
 8008a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a8a:	4a26      	ldr	r2, [pc, #152]	; (8008b24 <HAL_SD_MspInit+0xc4>)
 8008a8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008a90:	6453      	str	r3, [r2, #68]	; 0x44
 8008a92:	4b24      	ldr	r3, [pc, #144]	; (8008b24 <HAL_SD_MspInit+0xc4>)
 8008a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a9a:	613b      	str	r3, [r7, #16]
 8008a9c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	60fb      	str	r3, [r7, #12]
 8008aa2:	4b20      	ldr	r3, [pc, #128]	; (8008b24 <HAL_SD_MspInit+0xc4>)
 8008aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa6:	4a1f      	ldr	r2, [pc, #124]	; (8008b24 <HAL_SD_MspInit+0xc4>)
 8008aa8:	f043 0304 	orr.w	r3, r3, #4
 8008aac:	6313      	str	r3, [r2, #48]	; 0x30
 8008aae:	4b1d      	ldr	r3, [pc, #116]	; (8008b24 <HAL_SD_MspInit+0xc4>)
 8008ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab2:	f003 0304 	and.w	r3, r3, #4
 8008ab6:	60fb      	str	r3, [r7, #12]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008aba:	2300      	movs	r3, #0
 8008abc:	60bb      	str	r3, [r7, #8]
 8008abe:	4b19      	ldr	r3, [pc, #100]	; (8008b24 <HAL_SD_MspInit+0xc4>)
 8008ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac2:	4a18      	ldr	r2, [pc, #96]	; (8008b24 <HAL_SD_MspInit+0xc4>)
 8008ac4:	f043 0308 	orr.w	r3, r3, #8
 8008ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8008aca:	4b16      	ldr	r3, [pc, #88]	; (8008b24 <HAL_SD_MspInit+0xc4>)
 8008acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ace:	f003 0308 	and.w	r3, r3, #8
 8008ad2:	60bb      	str	r3, [r7, #8]
 8008ad4:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8008ad6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8008ada:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008adc:	2302      	movs	r3, #2
 8008ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8008ae8:	230c      	movs	r3, #12
 8008aea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008aec:	f107 0314 	add.w	r3, r7, #20
 8008af0:	4619      	mov	r1, r3
 8008af2:	480d      	ldr	r0, [pc, #52]	; (8008b28 <HAL_SD_MspInit+0xc8>)
 8008af4:	f7f8 fa50 	bl	8000f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008af8:	2304      	movs	r3, #4
 8008afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008afc:	2302      	movs	r3, #2
 8008afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b00:	2300      	movs	r3, #0
 8008b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b04:	2303      	movs	r3, #3
 8008b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8008b08:	230c      	movs	r3, #12
 8008b0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008b0c:	f107 0314 	add.w	r3, r7, #20
 8008b10:	4619      	mov	r1, r3
 8008b12:	4806      	ldr	r0, [pc, #24]	; (8008b2c <HAL_SD_MspInit+0xcc>)
 8008b14:	f7f8 fa40 	bl	8000f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8008b18:	bf00      	nop
 8008b1a:	3728      	adds	r7, #40	; 0x28
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	40012c00 	.word	0x40012c00
 8008b24:	40023800 	.word	0x40023800
 8008b28:	40020800 	.word	0x40020800
 8008b2c:	40020c00 	.word	0x40020c00

08008b30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a22      	ldr	r2, [pc, #136]	; (8008bc8 <HAL_TIM_Base_MspInit+0x98>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d13e      	bne.n	8008bc0 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008b42:	2300      	movs	r3, #0
 8008b44:	60fb      	str	r3, [r7, #12]
 8008b46:	4b21      	ldr	r3, [pc, #132]	; (8008bcc <HAL_TIM_Base_MspInit+0x9c>)
 8008b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4a:	4a20      	ldr	r2, [pc, #128]	; (8008bcc <HAL_TIM_Base_MspInit+0x9c>)
 8008b4c:	f043 0302 	orr.w	r3, r3, #2
 8008b50:	6413      	str	r3, [r2, #64]	; 0x40
 8008b52:	4b1e      	ldr	r3, [pc, #120]	; (8008bcc <HAL_TIM_Base_MspInit+0x9c>)
 8008b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b56:	f003 0302 	and.w	r3, r3, #2
 8008b5a:	60fb      	str	r3, [r7, #12]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 8008b5e:	4b1c      	ldr	r3, [pc, #112]	; (8008bd0 <HAL_TIM_Base_MspInit+0xa0>)
 8008b60:	4a1c      	ldr	r2, [pc, #112]	; (8008bd4 <HAL_TIM_Base_MspInit+0xa4>)
 8008b62:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 8008b64:	4b1a      	ldr	r3, [pc, #104]	; (8008bd0 <HAL_TIM_Base_MspInit+0xa0>)
 8008b66:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8008b6a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008b6c:	4b18      	ldr	r3, [pc, #96]	; (8008bd0 <HAL_TIM_Base_MspInit+0xa0>)
 8008b6e:	2240      	movs	r2, #64	; 0x40
 8008b70:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8008b72:	4b17      	ldr	r3, [pc, #92]	; (8008bd0 <HAL_TIM_Base_MspInit+0xa0>)
 8008b74:	2200      	movs	r2, #0
 8008b76:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8008b78:	4b15      	ldr	r3, [pc, #84]	; (8008bd0 <HAL_TIM_Base_MspInit+0xa0>)
 8008b7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008b7e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008b80:	4b13      	ldr	r3, [pc, #76]	; (8008bd0 <HAL_TIM_Base_MspInit+0xa0>)
 8008b82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008b86:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008b88:	4b11      	ldr	r3, [pc, #68]	; (8008bd0 <HAL_TIM_Base_MspInit+0xa0>)
 8008b8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008b8e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 8008b90:	4b0f      	ldr	r3, [pc, #60]	; (8008bd0 <HAL_TIM_Base_MspInit+0xa0>)
 8008b92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b96:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8008b98:	4b0d      	ldr	r3, [pc, #52]	; (8008bd0 <HAL_TIM_Base_MspInit+0xa0>)
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008b9e:	4b0c      	ldr	r3, [pc, #48]	; (8008bd0 <HAL_TIM_Base_MspInit+0xa0>)
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8008ba4:	480a      	ldr	r0, [pc, #40]	; (8008bd0 <HAL_TIM_Base_MspInit+0xa0>)
 8008ba6:	f7f7 fe89 	bl	80008bc <HAL_DMA_Init>
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d001      	beq.n	8008bb4 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8008bb0:	f7ff fd5a 	bl	8008668 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4a06      	ldr	r2, [pc, #24]	; (8008bd0 <HAL_TIM_Base_MspInit+0xa0>)
 8008bb8:	629a      	str	r2, [r3, #40]	; 0x28
 8008bba:	4a05      	ldr	r2, [pc, #20]	; (8008bd0 <HAL_TIM_Base_MspInit+0xa0>)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8008bc0:	bf00      	nop
 8008bc2:	3710      	adds	r7, #16
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	40000400 	.word	0x40000400
 8008bcc:	40023800 	.word	0x40023800
 8008bd0:	2000b228 	.word	0x2000b228
 8008bd4:	40026088 	.word	0x40026088

08008bd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b088      	sub	sp, #32
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008be0:	f107 030c 	add.w	r3, r7, #12
 8008be4:	2200      	movs	r2, #0
 8008be6:	601a      	str	r2, [r3, #0]
 8008be8:	605a      	str	r2, [r3, #4]
 8008bea:	609a      	str	r2, [r3, #8]
 8008bec:	60da      	str	r2, [r3, #12]
 8008bee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a12      	ldr	r2, [pc, #72]	; (8008c40 <HAL_TIM_MspPostInit+0x68>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d11d      	bne.n	8008c36 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	60bb      	str	r3, [r7, #8]
 8008bfe:	4b11      	ldr	r3, [pc, #68]	; (8008c44 <HAL_TIM_MspPostInit+0x6c>)
 8008c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c02:	4a10      	ldr	r2, [pc, #64]	; (8008c44 <HAL_TIM_MspPostInit+0x6c>)
 8008c04:	f043 0301 	orr.w	r3, r3, #1
 8008c08:	6313      	str	r3, [r2, #48]	; 0x30
 8008c0a:	4b0e      	ldr	r3, [pc, #56]	; (8008c44 <HAL_TIM_MspPostInit+0x6c>)
 8008c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c0e:	f003 0301 	and.w	r3, r3, #1
 8008c12:	60bb      	str	r3, [r7, #8]
 8008c14:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = WS2812_Pin;
 8008c16:	2380      	movs	r3, #128	; 0x80
 8008c18:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c1a:	2302      	movs	r3, #2
 8008c1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008c1e:	2302      	movs	r3, #2
 8008c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008c22:	2302      	movs	r3, #2
 8008c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008c26:	2302      	movs	r3, #2
 8008c28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 8008c2a:	f107 030c 	add.w	r3, r7, #12
 8008c2e:	4619      	mov	r1, r3
 8008c30:	4805      	ldr	r0, [pc, #20]	; (8008c48 <HAL_TIM_MspPostInit+0x70>)
 8008c32:	f7f8 f9b1 	bl	8000f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8008c36:	bf00      	nop
 8008c38:	3720      	adds	r7, #32
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	40000400 	.word	0x40000400
 8008c44:	40023800 	.word	0x40023800
 8008c48:	40020000 	.word	0x40020000

08008c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008c50:	bf00      	nop
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr

08008c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008c5a:	b480      	push	{r7}
 8008c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008c5e:	e7fe      	b.n	8008c5e <HardFault_Handler+0x4>

08008c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008c60:	b480      	push	{r7}
 8008c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008c64:	e7fe      	b.n	8008c64 <MemManage_Handler+0x4>

08008c66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008c66:	b480      	push	{r7}
 8008c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008c6a:	e7fe      	b.n	8008c6a <BusFault_Handler+0x4>

08008c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008c70:	e7fe      	b.n	8008c70 <UsageFault_Handler+0x4>

08008c72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008c72:	b480      	push	{r7}
 8008c74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008c76:	bf00      	nop
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008c80:	b480      	push	{r7}
 8008c82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008c84:	bf00      	nop
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008c92:	bf00      	nop
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008ca0:	f7f7 fcb8 	bl	8000614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008ca4:	bf00      	nop
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8008cac:	4802      	ldr	r0, [pc, #8]	; (8008cb8 <DMA1_Stream4_IRQHandler+0x10>)
 8008cae:	f7f7 ff0b 	bl	8000ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8008cb2:	bf00      	nop
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	2000f540 	.word	0x2000f540

08008cbc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8008cc0:	4802      	ldr	r0, [pc, #8]	; (8008ccc <DMA1_Stream5_IRQHandler+0x10>)
 8008cc2:	f7f7 ff01 	bl	8000ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8008cc6:	bf00      	nop
 8008cc8:	bd80      	pop	{r7, pc}
 8008cca:	bf00      	nop
 8008ccc:	2000b228 	.word	0x2000b228

08008cd0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008cd8:	4b11      	ldr	r3, [pc, #68]	; (8008d20 <_sbrk+0x50>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d102      	bne.n	8008ce6 <_sbrk+0x16>
		heap_end = &end;
 8008ce0:	4b0f      	ldr	r3, [pc, #60]	; (8008d20 <_sbrk+0x50>)
 8008ce2:	4a10      	ldr	r2, [pc, #64]	; (8008d24 <_sbrk+0x54>)
 8008ce4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008ce6:	4b0e      	ldr	r3, [pc, #56]	; (8008d20 <_sbrk+0x50>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008cec:	4b0c      	ldr	r3, [pc, #48]	; (8008d20 <_sbrk+0x50>)
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	466a      	mov	r2, sp
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d907      	bls.n	8008d0a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008cfa:	f000 f855 	bl	8008da8 <__errno>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	230c      	movs	r3, #12
 8008d02:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008d04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d08:	e006      	b.n	8008d18 <_sbrk+0x48>
	}

	heap_end += incr;
 8008d0a:	4b05      	ldr	r3, [pc, #20]	; (8008d20 <_sbrk+0x50>)
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4413      	add	r3, r2
 8008d12:	4a03      	ldr	r2, [pc, #12]	; (8008d20 <_sbrk+0x50>)
 8008d14:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008d16:	68fb      	ldr	r3, [r7, #12]
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	200068a4 	.word	0x200068a4
 8008d24:	2000f820 	.word	0x2000f820

08008d28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008d2c:	4b08      	ldr	r3, [pc, #32]	; (8008d50 <SystemInit+0x28>)
 8008d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d32:	4a07      	ldr	r2, [pc, #28]	; (8008d50 <SystemInit+0x28>)
 8008d34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008d3c:	4b04      	ldr	r3, [pc, #16]	; (8008d50 <SystemInit+0x28>)
 8008d3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008d42:	609a      	str	r2, [r3, #8]
#endif
}
 8008d44:	bf00      	nop
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	e000ed00 	.word	0xe000ed00

08008d54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008d54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008d8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008d58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008d5a:	e003      	b.n	8008d64 <LoopCopyDataInit>

08008d5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008d5c:	4b0c      	ldr	r3, [pc, #48]	; (8008d90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008d5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008d60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008d62:	3104      	adds	r1, #4

08008d64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008d64:	480b      	ldr	r0, [pc, #44]	; (8008d94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008d66:	4b0c      	ldr	r3, [pc, #48]	; (8008d98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008d68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008d6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008d6c:	d3f6      	bcc.n	8008d5c <CopyDataInit>
  ldr  r2, =_sbss
 8008d6e:	4a0b      	ldr	r2, [pc, #44]	; (8008d9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008d70:	e002      	b.n	8008d78 <LoopFillZerobss>

08008d72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008d72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008d74:	f842 3b04 	str.w	r3, [r2], #4

08008d78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008d78:	4b09      	ldr	r3, [pc, #36]	; (8008da0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008d7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008d7c:	d3f9      	bcc.n	8008d72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008d7e:	f7ff ffd3 	bl	8008d28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008d82:	f000 f817 	bl	8008db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008d86:	f7ff f89f 	bl	8007ec8 <main>
  bx  lr    
 8008d8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008d8c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008d90:	08009784 	.word	0x08009784
  ldr  r0, =_sdata
 8008d94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008d98:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8008d9c:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8008da0:	2000f81c 	.word	0x2000f81c

08008da4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008da4:	e7fe      	b.n	8008da4 <ADC_IRQHandler>
	...

08008da8 <__errno>:
 8008da8:	4b01      	ldr	r3, [pc, #4]	; (8008db0 <__errno+0x8>)
 8008daa:	6818      	ldr	r0, [r3, #0]
 8008dac:	4770      	bx	lr
 8008dae:	bf00      	nop
 8008db0:	20000018 	.word	0x20000018

08008db4 <__libc_init_array>:
 8008db4:	b570      	push	{r4, r5, r6, lr}
 8008db6:	4e0d      	ldr	r6, [pc, #52]	; (8008dec <__libc_init_array+0x38>)
 8008db8:	4c0d      	ldr	r4, [pc, #52]	; (8008df0 <__libc_init_array+0x3c>)
 8008dba:	1ba4      	subs	r4, r4, r6
 8008dbc:	10a4      	asrs	r4, r4, #2
 8008dbe:	2500      	movs	r5, #0
 8008dc0:	42a5      	cmp	r5, r4
 8008dc2:	d109      	bne.n	8008dd8 <__libc_init_array+0x24>
 8008dc4:	4e0b      	ldr	r6, [pc, #44]	; (8008df4 <__libc_init_array+0x40>)
 8008dc6:	4c0c      	ldr	r4, [pc, #48]	; (8008df8 <__libc_init_array+0x44>)
 8008dc8:	f000 fc28 	bl	800961c <_init>
 8008dcc:	1ba4      	subs	r4, r4, r6
 8008dce:	10a4      	asrs	r4, r4, #2
 8008dd0:	2500      	movs	r5, #0
 8008dd2:	42a5      	cmp	r5, r4
 8008dd4:	d105      	bne.n	8008de2 <__libc_init_array+0x2e>
 8008dd6:	bd70      	pop	{r4, r5, r6, pc}
 8008dd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ddc:	4798      	blx	r3
 8008dde:	3501      	adds	r5, #1
 8008de0:	e7ee      	b.n	8008dc0 <__libc_init_array+0xc>
 8008de2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008de6:	4798      	blx	r3
 8008de8:	3501      	adds	r5, #1
 8008dea:	e7f2      	b.n	8008dd2 <__libc_init_array+0x1e>
 8008dec:	0800977c 	.word	0x0800977c
 8008df0:	0800977c 	.word	0x0800977c
 8008df4:	0800977c 	.word	0x0800977c
 8008df8:	08009780 	.word	0x08009780

08008dfc <memcpy>:
 8008dfc:	b510      	push	{r4, lr}
 8008dfe:	1e43      	subs	r3, r0, #1
 8008e00:	440a      	add	r2, r1
 8008e02:	4291      	cmp	r1, r2
 8008e04:	d100      	bne.n	8008e08 <memcpy+0xc>
 8008e06:	bd10      	pop	{r4, pc}
 8008e08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e10:	e7f7      	b.n	8008e02 <memcpy+0x6>

08008e12 <memset>:
 8008e12:	4402      	add	r2, r0
 8008e14:	4603      	mov	r3, r0
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d100      	bne.n	8008e1c <memset+0xa>
 8008e1a:	4770      	bx	lr
 8008e1c:	f803 1b01 	strb.w	r1, [r3], #1
 8008e20:	e7f9      	b.n	8008e16 <memset+0x4>
	...

08008e24 <siprintf>:
 8008e24:	b40e      	push	{r1, r2, r3}
 8008e26:	b500      	push	{lr}
 8008e28:	b09c      	sub	sp, #112	; 0x70
 8008e2a:	ab1d      	add	r3, sp, #116	; 0x74
 8008e2c:	9002      	str	r0, [sp, #8]
 8008e2e:	9006      	str	r0, [sp, #24]
 8008e30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e34:	4809      	ldr	r0, [pc, #36]	; (8008e5c <siprintf+0x38>)
 8008e36:	9107      	str	r1, [sp, #28]
 8008e38:	9104      	str	r1, [sp, #16]
 8008e3a:	4909      	ldr	r1, [pc, #36]	; (8008e60 <siprintf+0x3c>)
 8008e3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e40:	9105      	str	r1, [sp, #20]
 8008e42:	6800      	ldr	r0, [r0, #0]
 8008e44:	9301      	str	r3, [sp, #4]
 8008e46:	a902      	add	r1, sp, #8
 8008e48:	f000 f866 	bl	8008f18 <_svfiprintf_r>
 8008e4c:	9b02      	ldr	r3, [sp, #8]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	701a      	strb	r2, [r3, #0]
 8008e52:	b01c      	add	sp, #112	; 0x70
 8008e54:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e58:	b003      	add	sp, #12
 8008e5a:	4770      	bx	lr
 8008e5c:	20000018 	.word	0x20000018
 8008e60:	ffff0208 	.word	0xffff0208

08008e64 <__ssputs_r>:
 8008e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e68:	688e      	ldr	r6, [r1, #8]
 8008e6a:	429e      	cmp	r6, r3
 8008e6c:	4682      	mov	sl, r0
 8008e6e:	460c      	mov	r4, r1
 8008e70:	4690      	mov	r8, r2
 8008e72:	4699      	mov	r9, r3
 8008e74:	d837      	bhi.n	8008ee6 <__ssputs_r+0x82>
 8008e76:	898a      	ldrh	r2, [r1, #12]
 8008e78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e7c:	d031      	beq.n	8008ee2 <__ssputs_r+0x7e>
 8008e7e:	6825      	ldr	r5, [r4, #0]
 8008e80:	6909      	ldr	r1, [r1, #16]
 8008e82:	1a6f      	subs	r7, r5, r1
 8008e84:	6965      	ldr	r5, [r4, #20]
 8008e86:	2302      	movs	r3, #2
 8008e88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e8c:	fb95 f5f3 	sdiv	r5, r5, r3
 8008e90:	f109 0301 	add.w	r3, r9, #1
 8008e94:	443b      	add	r3, r7
 8008e96:	429d      	cmp	r5, r3
 8008e98:	bf38      	it	cc
 8008e9a:	461d      	movcc	r5, r3
 8008e9c:	0553      	lsls	r3, r2, #21
 8008e9e:	d530      	bpl.n	8008f02 <__ssputs_r+0x9e>
 8008ea0:	4629      	mov	r1, r5
 8008ea2:	f000 fb21 	bl	80094e8 <_malloc_r>
 8008ea6:	4606      	mov	r6, r0
 8008ea8:	b950      	cbnz	r0, 8008ec0 <__ssputs_r+0x5c>
 8008eaa:	230c      	movs	r3, #12
 8008eac:	f8ca 3000 	str.w	r3, [sl]
 8008eb0:	89a3      	ldrh	r3, [r4, #12]
 8008eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008eb6:	81a3      	strh	r3, [r4, #12]
 8008eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ec0:	463a      	mov	r2, r7
 8008ec2:	6921      	ldr	r1, [r4, #16]
 8008ec4:	f7ff ff9a 	bl	8008dfc <memcpy>
 8008ec8:	89a3      	ldrh	r3, [r4, #12]
 8008eca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ed2:	81a3      	strh	r3, [r4, #12]
 8008ed4:	6126      	str	r6, [r4, #16]
 8008ed6:	6165      	str	r5, [r4, #20]
 8008ed8:	443e      	add	r6, r7
 8008eda:	1bed      	subs	r5, r5, r7
 8008edc:	6026      	str	r6, [r4, #0]
 8008ede:	60a5      	str	r5, [r4, #8]
 8008ee0:	464e      	mov	r6, r9
 8008ee2:	454e      	cmp	r6, r9
 8008ee4:	d900      	bls.n	8008ee8 <__ssputs_r+0x84>
 8008ee6:	464e      	mov	r6, r9
 8008ee8:	4632      	mov	r2, r6
 8008eea:	4641      	mov	r1, r8
 8008eec:	6820      	ldr	r0, [r4, #0]
 8008eee:	f000 fa93 	bl	8009418 <memmove>
 8008ef2:	68a3      	ldr	r3, [r4, #8]
 8008ef4:	1b9b      	subs	r3, r3, r6
 8008ef6:	60a3      	str	r3, [r4, #8]
 8008ef8:	6823      	ldr	r3, [r4, #0]
 8008efa:	441e      	add	r6, r3
 8008efc:	6026      	str	r6, [r4, #0]
 8008efe:	2000      	movs	r0, #0
 8008f00:	e7dc      	b.n	8008ebc <__ssputs_r+0x58>
 8008f02:	462a      	mov	r2, r5
 8008f04:	f000 fb4a 	bl	800959c <_realloc_r>
 8008f08:	4606      	mov	r6, r0
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	d1e2      	bne.n	8008ed4 <__ssputs_r+0x70>
 8008f0e:	6921      	ldr	r1, [r4, #16]
 8008f10:	4650      	mov	r0, sl
 8008f12:	f000 fa9b 	bl	800944c <_free_r>
 8008f16:	e7c8      	b.n	8008eaa <__ssputs_r+0x46>

08008f18 <_svfiprintf_r>:
 8008f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f1c:	461d      	mov	r5, r3
 8008f1e:	898b      	ldrh	r3, [r1, #12]
 8008f20:	061f      	lsls	r7, r3, #24
 8008f22:	b09d      	sub	sp, #116	; 0x74
 8008f24:	4680      	mov	r8, r0
 8008f26:	460c      	mov	r4, r1
 8008f28:	4616      	mov	r6, r2
 8008f2a:	d50f      	bpl.n	8008f4c <_svfiprintf_r+0x34>
 8008f2c:	690b      	ldr	r3, [r1, #16]
 8008f2e:	b96b      	cbnz	r3, 8008f4c <_svfiprintf_r+0x34>
 8008f30:	2140      	movs	r1, #64	; 0x40
 8008f32:	f000 fad9 	bl	80094e8 <_malloc_r>
 8008f36:	6020      	str	r0, [r4, #0]
 8008f38:	6120      	str	r0, [r4, #16]
 8008f3a:	b928      	cbnz	r0, 8008f48 <_svfiprintf_r+0x30>
 8008f3c:	230c      	movs	r3, #12
 8008f3e:	f8c8 3000 	str.w	r3, [r8]
 8008f42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f46:	e0c8      	b.n	80090da <_svfiprintf_r+0x1c2>
 8008f48:	2340      	movs	r3, #64	; 0x40
 8008f4a:	6163      	str	r3, [r4, #20]
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f50:	2320      	movs	r3, #32
 8008f52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f56:	2330      	movs	r3, #48	; 0x30
 8008f58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f5c:	9503      	str	r5, [sp, #12]
 8008f5e:	f04f 0b01 	mov.w	fp, #1
 8008f62:	4637      	mov	r7, r6
 8008f64:	463d      	mov	r5, r7
 8008f66:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008f6a:	b10b      	cbz	r3, 8008f70 <_svfiprintf_r+0x58>
 8008f6c:	2b25      	cmp	r3, #37	; 0x25
 8008f6e:	d13e      	bne.n	8008fee <_svfiprintf_r+0xd6>
 8008f70:	ebb7 0a06 	subs.w	sl, r7, r6
 8008f74:	d00b      	beq.n	8008f8e <_svfiprintf_r+0x76>
 8008f76:	4653      	mov	r3, sl
 8008f78:	4632      	mov	r2, r6
 8008f7a:	4621      	mov	r1, r4
 8008f7c:	4640      	mov	r0, r8
 8008f7e:	f7ff ff71 	bl	8008e64 <__ssputs_r>
 8008f82:	3001      	adds	r0, #1
 8008f84:	f000 80a4 	beq.w	80090d0 <_svfiprintf_r+0x1b8>
 8008f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f8a:	4453      	add	r3, sl
 8008f8c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f8e:	783b      	ldrb	r3, [r7, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f000 809d 	beq.w	80090d0 <_svfiprintf_r+0x1b8>
 8008f96:	2300      	movs	r3, #0
 8008f98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fa0:	9304      	str	r3, [sp, #16]
 8008fa2:	9307      	str	r3, [sp, #28]
 8008fa4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008fa8:	931a      	str	r3, [sp, #104]	; 0x68
 8008faa:	462f      	mov	r7, r5
 8008fac:	2205      	movs	r2, #5
 8008fae:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008fb2:	4850      	ldr	r0, [pc, #320]	; (80090f4 <_svfiprintf_r+0x1dc>)
 8008fb4:	f7f7 f90c 	bl	80001d0 <memchr>
 8008fb8:	9b04      	ldr	r3, [sp, #16]
 8008fba:	b9d0      	cbnz	r0, 8008ff2 <_svfiprintf_r+0xda>
 8008fbc:	06d9      	lsls	r1, r3, #27
 8008fbe:	bf44      	itt	mi
 8008fc0:	2220      	movmi	r2, #32
 8008fc2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008fc6:	071a      	lsls	r2, r3, #28
 8008fc8:	bf44      	itt	mi
 8008fca:	222b      	movmi	r2, #43	; 0x2b
 8008fcc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008fd0:	782a      	ldrb	r2, [r5, #0]
 8008fd2:	2a2a      	cmp	r2, #42	; 0x2a
 8008fd4:	d015      	beq.n	8009002 <_svfiprintf_r+0xea>
 8008fd6:	9a07      	ldr	r2, [sp, #28]
 8008fd8:	462f      	mov	r7, r5
 8008fda:	2000      	movs	r0, #0
 8008fdc:	250a      	movs	r5, #10
 8008fde:	4639      	mov	r1, r7
 8008fe0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fe4:	3b30      	subs	r3, #48	; 0x30
 8008fe6:	2b09      	cmp	r3, #9
 8008fe8:	d94d      	bls.n	8009086 <_svfiprintf_r+0x16e>
 8008fea:	b1b8      	cbz	r0, 800901c <_svfiprintf_r+0x104>
 8008fec:	e00f      	b.n	800900e <_svfiprintf_r+0xf6>
 8008fee:	462f      	mov	r7, r5
 8008ff0:	e7b8      	b.n	8008f64 <_svfiprintf_r+0x4c>
 8008ff2:	4a40      	ldr	r2, [pc, #256]	; (80090f4 <_svfiprintf_r+0x1dc>)
 8008ff4:	1a80      	subs	r0, r0, r2
 8008ff6:	fa0b f000 	lsl.w	r0, fp, r0
 8008ffa:	4318      	orrs	r0, r3
 8008ffc:	9004      	str	r0, [sp, #16]
 8008ffe:	463d      	mov	r5, r7
 8009000:	e7d3      	b.n	8008faa <_svfiprintf_r+0x92>
 8009002:	9a03      	ldr	r2, [sp, #12]
 8009004:	1d11      	adds	r1, r2, #4
 8009006:	6812      	ldr	r2, [r2, #0]
 8009008:	9103      	str	r1, [sp, #12]
 800900a:	2a00      	cmp	r2, #0
 800900c:	db01      	blt.n	8009012 <_svfiprintf_r+0xfa>
 800900e:	9207      	str	r2, [sp, #28]
 8009010:	e004      	b.n	800901c <_svfiprintf_r+0x104>
 8009012:	4252      	negs	r2, r2
 8009014:	f043 0302 	orr.w	r3, r3, #2
 8009018:	9207      	str	r2, [sp, #28]
 800901a:	9304      	str	r3, [sp, #16]
 800901c:	783b      	ldrb	r3, [r7, #0]
 800901e:	2b2e      	cmp	r3, #46	; 0x2e
 8009020:	d10c      	bne.n	800903c <_svfiprintf_r+0x124>
 8009022:	787b      	ldrb	r3, [r7, #1]
 8009024:	2b2a      	cmp	r3, #42	; 0x2a
 8009026:	d133      	bne.n	8009090 <_svfiprintf_r+0x178>
 8009028:	9b03      	ldr	r3, [sp, #12]
 800902a:	1d1a      	adds	r2, r3, #4
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	9203      	str	r2, [sp, #12]
 8009030:	2b00      	cmp	r3, #0
 8009032:	bfb8      	it	lt
 8009034:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009038:	3702      	adds	r7, #2
 800903a:	9305      	str	r3, [sp, #20]
 800903c:	4d2e      	ldr	r5, [pc, #184]	; (80090f8 <_svfiprintf_r+0x1e0>)
 800903e:	7839      	ldrb	r1, [r7, #0]
 8009040:	2203      	movs	r2, #3
 8009042:	4628      	mov	r0, r5
 8009044:	f7f7 f8c4 	bl	80001d0 <memchr>
 8009048:	b138      	cbz	r0, 800905a <_svfiprintf_r+0x142>
 800904a:	2340      	movs	r3, #64	; 0x40
 800904c:	1b40      	subs	r0, r0, r5
 800904e:	fa03 f000 	lsl.w	r0, r3, r0
 8009052:	9b04      	ldr	r3, [sp, #16]
 8009054:	4303      	orrs	r3, r0
 8009056:	3701      	adds	r7, #1
 8009058:	9304      	str	r3, [sp, #16]
 800905a:	7839      	ldrb	r1, [r7, #0]
 800905c:	4827      	ldr	r0, [pc, #156]	; (80090fc <_svfiprintf_r+0x1e4>)
 800905e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009062:	2206      	movs	r2, #6
 8009064:	1c7e      	adds	r6, r7, #1
 8009066:	f7f7 f8b3 	bl	80001d0 <memchr>
 800906a:	2800      	cmp	r0, #0
 800906c:	d038      	beq.n	80090e0 <_svfiprintf_r+0x1c8>
 800906e:	4b24      	ldr	r3, [pc, #144]	; (8009100 <_svfiprintf_r+0x1e8>)
 8009070:	bb13      	cbnz	r3, 80090b8 <_svfiprintf_r+0x1a0>
 8009072:	9b03      	ldr	r3, [sp, #12]
 8009074:	3307      	adds	r3, #7
 8009076:	f023 0307 	bic.w	r3, r3, #7
 800907a:	3308      	adds	r3, #8
 800907c:	9303      	str	r3, [sp, #12]
 800907e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009080:	444b      	add	r3, r9
 8009082:	9309      	str	r3, [sp, #36]	; 0x24
 8009084:	e76d      	b.n	8008f62 <_svfiprintf_r+0x4a>
 8009086:	fb05 3202 	mla	r2, r5, r2, r3
 800908a:	2001      	movs	r0, #1
 800908c:	460f      	mov	r7, r1
 800908e:	e7a6      	b.n	8008fde <_svfiprintf_r+0xc6>
 8009090:	2300      	movs	r3, #0
 8009092:	3701      	adds	r7, #1
 8009094:	9305      	str	r3, [sp, #20]
 8009096:	4619      	mov	r1, r3
 8009098:	250a      	movs	r5, #10
 800909a:	4638      	mov	r0, r7
 800909c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090a0:	3a30      	subs	r2, #48	; 0x30
 80090a2:	2a09      	cmp	r2, #9
 80090a4:	d903      	bls.n	80090ae <_svfiprintf_r+0x196>
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d0c8      	beq.n	800903c <_svfiprintf_r+0x124>
 80090aa:	9105      	str	r1, [sp, #20]
 80090ac:	e7c6      	b.n	800903c <_svfiprintf_r+0x124>
 80090ae:	fb05 2101 	mla	r1, r5, r1, r2
 80090b2:	2301      	movs	r3, #1
 80090b4:	4607      	mov	r7, r0
 80090b6:	e7f0      	b.n	800909a <_svfiprintf_r+0x182>
 80090b8:	ab03      	add	r3, sp, #12
 80090ba:	9300      	str	r3, [sp, #0]
 80090bc:	4622      	mov	r2, r4
 80090be:	4b11      	ldr	r3, [pc, #68]	; (8009104 <_svfiprintf_r+0x1ec>)
 80090c0:	a904      	add	r1, sp, #16
 80090c2:	4640      	mov	r0, r8
 80090c4:	f3af 8000 	nop.w
 80090c8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80090cc:	4681      	mov	r9, r0
 80090ce:	d1d6      	bne.n	800907e <_svfiprintf_r+0x166>
 80090d0:	89a3      	ldrh	r3, [r4, #12]
 80090d2:	065b      	lsls	r3, r3, #25
 80090d4:	f53f af35 	bmi.w	8008f42 <_svfiprintf_r+0x2a>
 80090d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090da:	b01d      	add	sp, #116	; 0x74
 80090dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e0:	ab03      	add	r3, sp, #12
 80090e2:	9300      	str	r3, [sp, #0]
 80090e4:	4622      	mov	r2, r4
 80090e6:	4b07      	ldr	r3, [pc, #28]	; (8009104 <_svfiprintf_r+0x1ec>)
 80090e8:	a904      	add	r1, sp, #16
 80090ea:	4640      	mov	r0, r8
 80090ec:	f000 f882 	bl	80091f4 <_printf_i>
 80090f0:	e7ea      	b.n	80090c8 <_svfiprintf_r+0x1b0>
 80090f2:	bf00      	nop
 80090f4:	08009740 	.word	0x08009740
 80090f8:	08009746 	.word	0x08009746
 80090fc:	0800974a 	.word	0x0800974a
 8009100:	00000000 	.word	0x00000000
 8009104:	08008e65 	.word	0x08008e65

08009108 <_printf_common>:
 8009108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800910c:	4691      	mov	r9, r2
 800910e:	461f      	mov	r7, r3
 8009110:	688a      	ldr	r2, [r1, #8]
 8009112:	690b      	ldr	r3, [r1, #16]
 8009114:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009118:	4293      	cmp	r3, r2
 800911a:	bfb8      	it	lt
 800911c:	4613      	movlt	r3, r2
 800911e:	f8c9 3000 	str.w	r3, [r9]
 8009122:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009126:	4606      	mov	r6, r0
 8009128:	460c      	mov	r4, r1
 800912a:	b112      	cbz	r2, 8009132 <_printf_common+0x2a>
 800912c:	3301      	adds	r3, #1
 800912e:	f8c9 3000 	str.w	r3, [r9]
 8009132:	6823      	ldr	r3, [r4, #0]
 8009134:	0699      	lsls	r1, r3, #26
 8009136:	bf42      	ittt	mi
 8009138:	f8d9 3000 	ldrmi.w	r3, [r9]
 800913c:	3302      	addmi	r3, #2
 800913e:	f8c9 3000 	strmi.w	r3, [r9]
 8009142:	6825      	ldr	r5, [r4, #0]
 8009144:	f015 0506 	ands.w	r5, r5, #6
 8009148:	d107      	bne.n	800915a <_printf_common+0x52>
 800914a:	f104 0a19 	add.w	sl, r4, #25
 800914e:	68e3      	ldr	r3, [r4, #12]
 8009150:	f8d9 2000 	ldr.w	r2, [r9]
 8009154:	1a9b      	subs	r3, r3, r2
 8009156:	42ab      	cmp	r3, r5
 8009158:	dc28      	bgt.n	80091ac <_printf_common+0xa4>
 800915a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800915e:	6822      	ldr	r2, [r4, #0]
 8009160:	3300      	adds	r3, #0
 8009162:	bf18      	it	ne
 8009164:	2301      	movne	r3, #1
 8009166:	0692      	lsls	r2, r2, #26
 8009168:	d42d      	bmi.n	80091c6 <_printf_common+0xbe>
 800916a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800916e:	4639      	mov	r1, r7
 8009170:	4630      	mov	r0, r6
 8009172:	47c0      	blx	r8
 8009174:	3001      	adds	r0, #1
 8009176:	d020      	beq.n	80091ba <_printf_common+0xb2>
 8009178:	6823      	ldr	r3, [r4, #0]
 800917a:	68e5      	ldr	r5, [r4, #12]
 800917c:	f8d9 2000 	ldr.w	r2, [r9]
 8009180:	f003 0306 	and.w	r3, r3, #6
 8009184:	2b04      	cmp	r3, #4
 8009186:	bf08      	it	eq
 8009188:	1aad      	subeq	r5, r5, r2
 800918a:	68a3      	ldr	r3, [r4, #8]
 800918c:	6922      	ldr	r2, [r4, #16]
 800918e:	bf0c      	ite	eq
 8009190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009194:	2500      	movne	r5, #0
 8009196:	4293      	cmp	r3, r2
 8009198:	bfc4      	itt	gt
 800919a:	1a9b      	subgt	r3, r3, r2
 800919c:	18ed      	addgt	r5, r5, r3
 800919e:	f04f 0900 	mov.w	r9, #0
 80091a2:	341a      	adds	r4, #26
 80091a4:	454d      	cmp	r5, r9
 80091a6:	d11a      	bne.n	80091de <_printf_common+0xd6>
 80091a8:	2000      	movs	r0, #0
 80091aa:	e008      	b.n	80091be <_printf_common+0xb6>
 80091ac:	2301      	movs	r3, #1
 80091ae:	4652      	mov	r2, sl
 80091b0:	4639      	mov	r1, r7
 80091b2:	4630      	mov	r0, r6
 80091b4:	47c0      	blx	r8
 80091b6:	3001      	adds	r0, #1
 80091b8:	d103      	bne.n	80091c2 <_printf_common+0xba>
 80091ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091c2:	3501      	adds	r5, #1
 80091c4:	e7c3      	b.n	800914e <_printf_common+0x46>
 80091c6:	18e1      	adds	r1, r4, r3
 80091c8:	1c5a      	adds	r2, r3, #1
 80091ca:	2030      	movs	r0, #48	; 0x30
 80091cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091d0:	4422      	add	r2, r4
 80091d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091da:	3302      	adds	r3, #2
 80091dc:	e7c5      	b.n	800916a <_printf_common+0x62>
 80091de:	2301      	movs	r3, #1
 80091e0:	4622      	mov	r2, r4
 80091e2:	4639      	mov	r1, r7
 80091e4:	4630      	mov	r0, r6
 80091e6:	47c0      	blx	r8
 80091e8:	3001      	adds	r0, #1
 80091ea:	d0e6      	beq.n	80091ba <_printf_common+0xb2>
 80091ec:	f109 0901 	add.w	r9, r9, #1
 80091f0:	e7d8      	b.n	80091a4 <_printf_common+0x9c>
	...

080091f4 <_printf_i>:
 80091f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80091f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80091fc:	460c      	mov	r4, r1
 80091fe:	7e09      	ldrb	r1, [r1, #24]
 8009200:	b085      	sub	sp, #20
 8009202:	296e      	cmp	r1, #110	; 0x6e
 8009204:	4617      	mov	r7, r2
 8009206:	4606      	mov	r6, r0
 8009208:	4698      	mov	r8, r3
 800920a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800920c:	f000 80b3 	beq.w	8009376 <_printf_i+0x182>
 8009210:	d822      	bhi.n	8009258 <_printf_i+0x64>
 8009212:	2963      	cmp	r1, #99	; 0x63
 8009214:	d036      	beq.n	8009284 <_printf_i+0x90>
 8009216:	d80a      	bhi.n	800922e <_printf_i+0x3a>
 8009218:	2900      	cmp	r1, #0
 800921a:	f000 80b9 	beq.w	8009390 <_printf_i+0x19c>
 800921e:	2958      	cmp	r1, #88	; 0x58
 8009220:	f000 8083 	beq.w	800932a <_printf_i+0x136>
 8009224:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009228:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800922c:	e032      	b.n	8009294 <_printf_i+0xa0>
 800922e:	2964      	cmp	r1, #100	; 0x64
 8009230:	d001      	beq.n	8009236 <_printf_i+0x42>
 8009232:	2969      	cmp	r1, #105	; 0x69
 8009234:	d1f6      	bne.n	8009224 <_printf_i+0x30>
 8009236:	6820      	ldr	r0, [r4, #0]
 8009238:	6813      	ldr	r3, [r2, #0]
 800923a:	0605      	lsls	r5, r0, #24
 800923c:	f103 0104 	add.w	r1, r3, #4
 8009240:	d52a      	bpl.n	8009298 <_printf_i+0xa4>
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	6011      	str	r1, [r2, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	da03      	bge.n	8009252 <_printf_i+0x5e>
 800924a:	222d      	movs	r2, #45	; 0x2d
 800924c:	425b      	negs	r3, r3
 800924e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009252:	486f      	ldr	r0, [pc, #444]	; (8009410 <_printf_i+0x21c>)
 8009254:	220a      	movs	r2, #10
 8009256:	e039      	b.n	80092cc <_printf_i+0xd8>
 8009258:	2973      	cmp	r1, #115	; 0x73
 800925a:	f000 809d 	beq.w	8009398 <_printf_i+0x1a4>
 800925e:	d808      	bhi.n	8009272 <_printf_i+0x7e>
 8009260:	296f      	cmp	r1, #111	; 0x6f
 8009262:	d020      	beq.n	80092a6 <_printf_i+0xb2>
 8009264:	2970      	cmp	r1, #112	; 0x70
 8009266:	d1dd      	bne.n	8009224 <_printf_i+0x30>
 8009268:	6823      	ldr	r3, [r4, #0]
 800926a:	f043 0320 	orr.w	r3, r3, #32
 800926e:	6023      	str	r3, [r4, #0]
 8009270:	e003      	b.n	800927a <_printf_i+0x86>
 8009272:	2975      	cmp	r1, #117	; 0x75
 8009274:	d017      	beq.n	80092a6 <_printf_i+0xb2>
 8009276:	2978      	cmp	r1, #120	; 0x78
 8009278:	d1d4      	bne.n	8009224 <_printf_i+0x30>
 800927a:	2378      	movs	r3, #120	; 0x78
 800927c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009280:	4864      	ldr	r0, [pc, #400]	; (8009414 <_printf_i+0x220>)
 8009282:	e055      	b.n	8009330 <_printf_i+0x13c>
 8009284:	6813      	ldr	r3, [r2, #0]
 8009286:	1d19      	adds	r1, r3, #4
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	6011      	str	r1, [r2, #0]
 800928c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009290:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009294:	2301      	movs	r3, #1
 8009296:	e08c      	b.n	80093b2 <_printf_i+0x1be>
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	6011      	str	r1, [r2, #0]
 800929c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80092a0:	bf18      	it	ne
 80092a2:	b21b      	sxthne	r3, r3
 80092a4:	e7cf      	b.n	8009246 <_printf_i+0x52>
 80092a6:	6813      	ldr	r3, [r2, #0]
 80092a8:	6825      	ldr	r5, [r4, #0]
 80092aa:	1d18      	adds	r0, r3, #4
 80092ac:	6010      	str	r0, [r2, #0]
 80092ae:	0628      	lsls	r0, r5, #24
 80092b0:	d501      	bpl.n	80092b6 <_printf_i+0xc2>
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	e002      	b.n	80092bc <_printf_i+0xc8>
 80092b6:	0668      	lsls	r0, r5, #25
 80092b8:	d5fb      	bpl.n	80092b2 <_printf_i+0xbe>
 80092ba:	881b      	ldrh	r3, [r3, #0]
 80092bc:	4854      	ldr	r0, [pc, #336]	; (8009410 <_printf_i+0x21c>)
 80092be:	296f      	cmp	r1, #111	; 0x6f
 80092c0:	bf14      	ite	ne
 80092c2:	220a      	movne	r2, #10
 80092c4:	2208      	moveq	r2, #8
 80092c6:	2100      	movs	r1, #0
 80092c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092cc:	6865      	ldr	r5, [r4, #4]
 80092ce:	60a5      	str	r5, [r4, #8]
 80092d0:	2d00      	cmp	r5, #0
 80092d2:	f2c0 8095 	blt.w	8009400 <_printf_i+0x20c>
 80092d6:	6821      	ldr	r1, [r4, #0]
 80092d8:	f021 0104 	bic.w	r1, r1, #4
 80092dc:	6021      	str	r1, [r4, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d13d      	bne.n	800935e <_printf_i+0x16a>
 80092e2:	2d00      	cmp	r5, #0
 80092e4:	f040 808e 	bne.w	8009404 <_printf_i+0x210>
 80092e8:	4665      	mov	r5, ip
 80092ea:	2a08      	cmp	r2, #8
 80092ec:	d10b      	bne.n	8009306 <_printf_i+0x112>
 80092ee:	6823      	ldr	r3, [r4, #0]
 80092f0:	07db      	lsls	r3, r3, #31
 80092f2:	d508      	bpl.n	8009306 <_printf_i+0x112>
 80092f4:	6923      	ldr	r3, [r4, #16]
 80092f6:	6862      	ldr	r2, [r4, #4]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	bfde      	ittt	le
 80092fc:	2330      	movle	r3, #48	; 0x30
 80092fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009302:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009306:	ebac 0305 	sub.w	r3, ip, r5
 800930a:	6123      	str	r3, [r4, #16]
 800930c:	f8cd 8000 	str.w	r8, [sp]
 8009310:	463b      	mov	r3, r7
 8009312:	aa03      	add	r2, sp, #12
 8009314:	4621      	mov	r1, r4
 8009316:	4630      	mov	r0, r6
 8009318:	f7ff fef6 	bl	8009108 <_printf_common>
 800931c:	3001      	adds	r0, #1
 800931e:	d14d      	bne.n	80093bc <_printf_i+0x1c8>
 8009320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009324:	b005      	add	sp, #20
 8009326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800932a:	4839      	ldr	r0, [pc, #228]	; (8009410 <_printf_i+0x21c>)
 800932c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009330:	6813      	ldr	r3, [r2, #0]
 8009332:	6821      	ldr	r1, [r4, #0]
 8009334:	1d1d      	adds	r5, r3, #4
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	6015      	str	r5, [r2, #0]
 800933a:	060a      	lsls	r2, r1, #24
 800933c:	d50b      	bpl.n	8009356 <_printf_i+0x162>
 800933e:	07ca      	lsls	r2, r1, #31
 8009340:	bf44      	itt	mi
 8009342:	f041 0120 	orrmi.w	r1, r1, #32
 8009346:	6021      	strmi	r1, [r4, #0]
 8009348:	b91b      	cbnz	r3, 8009352 <_printf_i+0x15e>
 800934a:	6822      	ldr	r2, [r4, #0]
 800934c:	f022 0220 	bic.w	r2, r2, #32
 8009350:	6022      	str	r2, [r4, #0]
 8009352:	2210      	movs	r2, #16
 8009354:	e7b7      	b.n	80092c6 <_printf_i+0xd2>
 8009356:	064d      	lsls	r5, r1, #25
 8009358:	bf48      	it	mi
 800935a:	b29b      	uxthmi	r3, r3
 800935c:	e7ef      	b.n	800933e <_printf_i+0x14a>
 800935e:	4665      	mov	r5, ip
 8009360:	fbb3 f1f2 	udiv	r1, r3, r2
 8009364:	fb02 3311 	mls	r3, r2, r1, r3
 8009368:	5cc3      	ldrb	r3, [r0, r3]
 800936a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800936e:	460b      	mov	r3, r1
 8009370:	2900      	cmp	r1, #0
 8009372:	d1f5      	bne.n	8009360 <_printf_i+0x16c>
 8009374:	e7b9      	b.n	80092ea <_printf_i+0xf6>
 8009376:	6813      	ldr	r3, [r2, #0]
 8009378:	6825      	ldr	r5, [r4, #0]
 800937a:	6961      	ldr	r1, [r4, #20]
 800937c:	1d18      	adds	r0, r3, #4
 800937e:	6010      	str	r0, [r2, #0]
 8009380:	0628      	lsls	r0, r5, #24
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	d501      	bpl.n	800938a <_printf_i+0x196>
 8009386:	6019      	str	r1, [r3, #0]
 8009388:	e002      	b.n	8009390 <_printf_i+0x19c>
 800938a:	066a      	lsls	r2, r5, #25
 800938c:	d5fb      	bpl.n	8009386 <_printf_i+0x192>
 800938e:	8019      	strh	r1, [r3, #0]
 8009390:	2300      	movs	r3, #0
 8009392:	6123      	str	r3, [r4, #16]
 8009394:	4665      	mov	r5, ip
 8009396:	e7b9      	b.n	800930c <_printf_i+0x118>
 8009398:	6813      	ldr	r3, [r2, #0]
 800939a:	1d19      	adds	r1, r3, #4
 800939c:	6011      	str	r1, [r2, #0]
 800939e:	681d      	ldr	r5, [r3, #0]
 80093a0:	6862      	ldr	r2, [r4, #4]
 80093a2:	2100      	movs	r1, #0
 80093a4:	4628      	mov	r0, r5
 80093a6:	f7f6 ff13 	bl	80001d0 <memchr>
 80093aa:	b108      	cbz	r0, 80093b0 <_printf_i+0x1bc>
 80093ac:	1b40      	subs	r0, r0, r5
 80093ae:	6060      	str	r0, [r4, #4]
 80093b0:	6863      	ldr	r3, [r4, #4]
 80093b2:	6123      	str	r3, [r4, #16]
 80093b4:	2300      	movs	r3, #0
 80093b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093ba:	e7a7      	b.n	800930c <_printf_i+0x118>
 80093bc:	6923      	ldr	r3, [r4, #16]
 80093be:	462a      	mov	r2, r5
 80093c0:	4639      	mov	r1, r7
 80093c2:	4630      	mov	r0, r6
 80093c4:	47c0      	blx	r8
 80093c6:	3001      	adds	r0, #1
 80093c8:	d0aa      	beq.n	8009320 <_printf_i+0x12c>
 80093ca:	6823      	ldr	r3, [r4, #0]
 80093cc:	079b      	lsls	r3, r3, #30
 80093ce:	d413      	bmi.n	80093f8 <_printf_i+0x204>
 80093d0:	68e0      	ldr	r0, [r4, #12]
 80093d2:	9b03      	ldr	r3, [sp, #12]
 80093d4:	4298      	cmp	r0, r3
 80093d6:	bfb8      	it	lt
 80093d8:	4618      	movlt	r0, r3
 80093da:	e7a3      	b.n	8009324 <_printf_i+0x130>
 80093dc:	2301      	movs	r3, #1
 80093de:	464a      	mov	r2, r9
 80093e0:	4639      	mov	r1, r7
 80093e2:	4630      	mov	r0, r6
 80093e4:	47c0      	blx	r8
 80093e6:	3001      	adds	r0, #1
 80093e8:	d09a      	beq.n	8009320 <_printf_i+0x12c>
 80093ea:	3501      	adds	r5, #1
 80093ec:	68e3      	ldr	r3, [r4, #12]
 80093ee:	9a03      	ldr	r2, [sp, #12]
 80093f0:	1a9b      	subs	r3, r3, r2
 80093f2:	42ab      	cmp	r3, r5
 80093f4:	dcf2      	bgt.n	80093dc <_printf_i+0x1e8>
 80093f6:	e7eb      	b.n	80093d0 <_printf_i+0x1dc>
 80093f8:	2500      	movs	r5, #0
 80093fa:	f104 0919 	add.w	r9, r4, #25
 80093fe:	e7f5      	b.n	80093ec <_printf_i+0x1f8>
 8009400:	2b00      	cmp	r3, #0
 8009402:	d1ac      	bne.n	800935e <_printf_i+0x16a>
 8009404:	7803      	ldrb	r3, [r0, #0]
 8009406:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800940a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800940e:	e76c      	b.n	80092ea <_printf_i+0xf6>
 8009410:	08009751 	.word	0x08009751
 8009414:	08009762 	.word	0x08009762

08009418 <memmove>:
 8009418:	4288      	cmp	r0, r1
 800941a:	b510      	push	{r4, lr}
 800941c:	eb01 0302 	add.w	r3, r1, r2
 8009420:	d807      	bhi.n	8009432 <memmove+0x1a>
 8009422:	1e42      	subs	r2, r0, #1
 8009424:	4299      	cmp	r1, r3
 8009426:	d00a      	beq.n	800943e <memmove+0x26>
 8009428:	f811 4b01 	ldrb.w	r4, [r1], #1
 800942c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009430:	e7f8      	b.n	8009424 <memmove+0xc>
 8009432:	4283      	cmp	r3, r0
 8009434:	d9f5      	bls.n	8009422 <memmove+0xa>
 8009436:	1881      	adds	r1, r0, r2
 8009438:	1ad2      	subs	r2, r2, r3
 800943a:	42d3      	cmn	r3, r2
 800943c:	d100      	bne.n	8009440 <memmove+0x28>
 800943e:	bd10      	pop	{r4, pc}
 8009440:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009444:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009448:	e7f7      	b.n	800943a <memmove+0x22>
	...

0800944c <_free_r>:
 800944c:	b538      	push	{r3, r4, r5, lr}
 800944e:	4605      	mov	r5, r0
 8009450:	2900      	cmp	r1, #0
 8009452:	d045      	beq.n	80094e0 <_free_r+0x94>
 8009454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009458:	1f0c      	subs	r4, r1, #4
 800945a:	2b00      	cmp	r3, #0
 800945c:	bfb8      	it	lt
 800945e:	18e4      	addlt	r4, r4, r3
 8009460:	f000 f8d2 	bl	8009608 <__malloc_lock>
 8009464:	4a1f      	ldr	r2, [pc, #124]	; (80094e4 <_free_r+0x98>)
 8009466:	6813      	ldr	r3, [r2, #0]
 8009468:	4610      	mov	r0, r2
 800946a:	b933      	cbnz	r3, 800947a <_free_r+0x2e>
 800946c:	6063      	str	r3, [r4, #4]
 800946e:	6014      	str	r4, [r2, #0]
 8009470:	4628      	mov	r0, r5
 8009472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009476:	f000 b8c8 	b.w	800960a <__malloc_unlock>
 800947a:	42a3      	cmp	r3, r4
 800947c:	d90c      	bls.n	8009498 <_free_r+0x4c>
 800947e:	6821      	ldr	r1, [r4, #0]
 8009480:	1862      	adds	r2, r4, r1
 8009482:	4293      	cmp	r3, r2
 8009484:	bf04      	itt	eq
 8009486:	681a      	ldreq	r2, [r3, #0]
 8009488:	685b      	ldreq	r3, [r3, #4]
 800948a:	6063      	str	r3, [r4, #4]
 800948c:	bf04      	itt	eq
 800948e:	1852      	addeq	r2, r2, r1
 8009490:	6022      	streq	r2, [r4, #0]
 8009492:	6004      	str	r4, [r0, #0]
 8009494:	e7ec      	b.n	8009470 <_free_r+0x24>
 8009496:	4613      	mov	r3, r2
 8009498:	685a      	ldr	r2, [r3, #4]
 800949a:	b10a      	cbz	r2, 80094a0 <_free_r+0x54>
 800949c:	42a2      	cmp	r2, r4
 800949e:	d9fa      	bls.n	8009496 <_free_r+0x4a>
 80094a0:	6819      	ldr	r1, [r3, #0]
 80094a2:	1858      	adds	r0, r3, r1
 80094a4:	42a0      	cmp	r0, r4
 80094a6:	d10b      	bne.n	80094c0 <_free_r+0x74>
 80094a8:	6820      	ldr	r0, [r4, #0]
 80094aa:	4401      	add	r1, r0
 80094ac:	1858      	adds	r0, r3, r1
 80094ae:	4282      	cmp	r2, r0
 80094b0:	6019      	str	r1, [r3, #0]
 80094b2:	d1dd      	bne.n	8009470 <_free_r+0x24>
 80094b4:	6810      	ldr	r0, [r2, #0]
 80094b6:	6852      	ldr	r2, [r2, #4]
 80094b8:	605a      	str	r2, [r3, #4]
 80094ba:	4401      	add	r1, r0
 80094bc:	6019      	str	r1, [r3, #0]
 80094be:	e7d7      	b.n	8009470 <_free_r+0x24>
 80094c0:	d902      	bls.n	80094c8 <_free_r+0x7c>
 80094c2:	230c      	movs	r3, #12
 80094c4:	602b      	str	r3, [r5, #0]
 80094c6:	e7d3      	b.n	8009470 <_free_r+0x24>
 80094c8:	6820      	ldr	r0, [r4, #0]
 80094ca:	1821      	adds	r1, r4, r0
 80094cc:	428a      	cmp	r2, r1
 80094ce:	bf04      	itt	eq
 80094d0:	6811      	ldreq	r1, [r2, #0]
 80094d2:	6852      	ldreq	r2, [r2, #4]
 80094d4:	6062      	str	r2, [r4, #4]
 80094d6:	bf04      	itt	eq
 80094d8:	1809      	addeq	r1, r1, r0
 80094da:	6021      	streq	r1, [r4, #0]
 80094dc:	605c      	str	r4, [r3, #4]
 80094de:	e7c7      	b.n	8009470 <_free_r+0x24>
 80094e0:	bd38      	pop	{r3, r4, r5, pc}
 80094e2:	bf00      	nop
 80094e4:	200068a8 	.word	0x200068a8

080094e8 <_malloc_r>:
 80094e8:	b570      	push	{r4, r5, r6, lr}
 80094ea:	1ccd      	adds	r5, r1, #3
 80094ec:	f025 0503 	bic.w	r5, r5, #3
 80094f0:	3508      	adds	r5, #8
 80094f2:	2d0c      	cmp	r5, #12
 80094f4:	bf38      	it	cc
 80094f6:	250c      	movcc	r5, #12
 80094f8:	2d00      	cmp	r5, #0
 80094fa:	4606      	mov	r6, r0
 80094fc:	db01      	blt.n	8009502 <_malloc_r+0x1a>
 80094fe:	42a9      	cmp	r1, r5
 8009500:	d903      	bls.n	800950a <_malloc_r+0x22>
 8009502:	230c      	movs	r3, #12
 8009504:	6033      	str	r3, [r6, #0]
 8009506:	2000      	movs	r0, #0
 8009508:	bd70      	pop	{r4, r5, r6, pc}
 800950a:	f000 f87d 	bl	8009608 <__malloc_lock>
 800950e:	4a21      	ldr	r2, [pc, #132]	; (8009594 <_malloc_r+0xac>)
 8009510:	6814      	ldr	r4, [r2, #0]
 8009512:	4621      	mov	r1, r4
 8009514:	b991      	cbnz	r1, 800953c <_malloc_r+0x54>
 8009516:	4c20      	ldr	r4, [pc, #128]	; (8009598 <_malloc_r+0xb0>)
 8009518:	6823      	ldr	r3, [r4, #0]
 800951a:	b91b      	cbnz	r3, 8009524 <_malloc_r+0x3c>
 800951c:	4630      	mov	r0, r6
 800951e:	f000 f863 	bl	80095e8 <_sbrk_r>
 8009522:	6020      	str	r0, [r4, #0]
 8009524:	4629      	mov	r1, r5
 8009526:	4630      	mov	r0, r6
 8009528:	f000 f85e 	bl	80095e8 <_sbrk_r>
 800952c:	1c43      	adds	r3, r0, #1
 800952e:	d124      	bne.n	800957a <_malloc_r+0x92>
 8009530:	230c      	movs	r3, #12
 8009532:	6033      	str	r3, [r6, #0]
 8009534:	4630      	mov	r0, r6
 8009536:	f000 f868 	bl	800960a <__malloc_unlock>
 800953a:	e7e4      	b.n	8009506 <_malloc_r+0x1e>
 800953c:	680b      	ldr	r3, [r1, #0]
 800953e:	1b5b      	subs	r3, r3, r5
 8009540:	d418      	bmi.n	8009574 <_malloc_r+0x8c>
 8009542:	2b0b      	cmp	r3, #11
 8009544:	d90f      	bls.n	8009566 <_malloc_r+0x7e>
 8009546:	600b      	str	r3, [r1, #0]
 8009548:	50cd      	str	r5, [r1, r3]
 800954a:	18cc      	adds	r4, r1, r3
 800954c:	4630      	mov	r0, r6
 800954e:	f000 f85c 	bl	800960a <__malloc_unlock>
 8009552:	f104 000b 	add.w	r0, r4, #11
 8009556:	1d23      	adds	r3, r4, #4
 8009558:	f020 0007 	bic.w	r0, r0, #7
 800955c:	1ac3      	subs	r3, r0, r3
 800955e:	d0d3      	beq.n	8009508 <_malloc_r+0x20>
 8009560:	425a      	negs	r2, r3
 8009562:	50e2      	str	r2, [r4, r3]
 8009564:	e7d0      	b.n	8009508 <_malloc_r+0x20>
 8009566:	428c      	cmp	r4, r1
 8009568:	684b      	ldr	r3, [r1, #4]
 800956a:	bf16      	itet	ne
 800956c:	6063      	strne	r3, [r4, #4]
 800956e:	6013      	streq	r3, [r2, #0]
 8009570:	460c      	movne	r4, r1
 8009572:	e7eb      	b.n	800954c <_malloc_r+0x64>
 8009574:	460c      	mov	r4, r1
 8009576:	6849      	ldr	r1, [r1, #4]
 8009578:	e7cc      	b.n	8009514 <_malloc_r+0x2c>
 800957a:	1cc4      	adds	r4, r0, #3
 800957c:	f024 0403 	bic.w	r4, r4, #3
 8009580:	42a0      	cmp	r0, r4
 8009582:	d005      	beq.n	8009590 <_malloc_r+0xa8>
 8009584:	1a21      	subs	r1, r4, r0
 8009586:	4630      	mov	r0, r6
 8009588:	f000 f82e 	bl	80095e8 <_sbrk_r>
 800958c:	3001      	adds	r0, #1
 800958e:	d0cf      	beq.n	8009530 <_malloc_r+0x48>
 8009590:	6025      	str	r5, [r4, #0]
 8009592:	e7db      	b.n	800954c <_malloc_r+0x64>
 8009594:	200068a8 	.word	0x200068a8
 8009598:	200068ac 	.word	0x200068ac

0800959c <_realloc_r>:
 800959c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800959e:	4607      	mov	r7, r0
 80095a0:	4614      	mov	r4, r2
 80095a2:	460e      	mov	r6, r1
 80095a4:	b921      	cbnz	r1, 80095b0 <_realloc_r+0x14>
 80095a6:	4611      	mov	r1, r2
 80095a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80095ac:	f7ff bf9c 	b.w	80094e8 <_malloc_r>
 80095b0:	b922      	cbnz	r2, 80095bc <_realloc_r+0x20>
 80095b2:	f7ff ff4b 	bl	800944c <_free_r>
 80095b6:	4625      	mov	r5, r4
 80095b8:	4628      	mov	r0, r5
 80095ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095bc:	f000 f826 	bl	800960c <_malloc_usable_size_r>
 80095c0:	42a0      	cmp	r0, r4
 80095c2:	d20f      	bcs.n	80095e4 <_realloc_r+0x48>
 80095c4:	4621      	mov	r1, r4
 80095c6:	4638      	mov	r0, r7
 80095c8:	f7ff ff8e 	bl	80094e8 <_malloc_r>
 80095cc:	4605      	mov	r5, r0
 80095ce:	2800      	cmp	r0, #0
 80095d0:	d0f2      	beq.n	80095b8 <_realloc_r+0x1c>
 80095d2:	4631      	mov	r1, r6
 80095d4:	4622      	mov	r2, r4
 80095d6:	f7ff fc11 	bl	8008dfc <memcpy>
 80095da:	4631      	mov	r1, r6
 80095dc:	4638      	mov	r0, r7
 80095de:	f7ff ff35 	bl	800944c <_free_r>
 80095e2:	e7e9      	b.n	80095b8 <_realloc_r+0x1c>
 80095e4:	4635      	mov	r5, r6
 80095e6:	e7e7      	b.n	80095b8 <_realloc_r+0x1c>

080095e8 <_sbrk_r>:
 80095e8:	b538      	push	{r3, r4, r5, lr}
 80095ea:	4c06      	ldr	r4, [pc, #24]	; (8009604 <_sbrk_r+0x1c>)
 80095ec:	2300      	movs	r3, #0
 80095ee:	4605      	mov	r5, r0
 80095f0:	4608      	mov	r0, r1
 80095f2:	6023      	str	r3, [r4, #0]
 80095f4:	f7ff fb6c 	bl	8008cd0 <_sbrk>
 80095f8:	1c43      	adds	r3, r0, #1
 80095fa:	d102      	bne.n	8009602 <_sbrk_r+0x1a>
 80095fc:	6823      	ldr	r3, [r4, #0]
 80095fe:	b103      	cbz	r3, 8009602 <_sbrk_r+0x1a>
 8009600:	602b      	str	r3, [r5, #0]
 8009602:	bd38      	pop	{r3, r4, r5, pc}
 8009604:	2000f818 	.word	0x2000f818

08009608 <__malloc_lock>:
 8009608:	4770      	bx	lr

0800960a <__malloc_unlock>:
 800960a:	4770      	bx	lr

0800960c <_malloc_usable_size_r>:
 800960c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009610:	1f18      	subs	r0, r3, #4
 8009612:	2b00      	cmp	r3, #0
 8009614:	bfbc      	itt	lt
 8009616:	580b      	ldrlt	r3, [r1, r0]
 8009618:	18c0      	addlt	r0, r0, r3
 800961a:	4770      	bx	lr

0800961c <_init>:
 800961c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800961e:	bf00      	nop
 8009620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009622:	bc08      	pop	{r3}
 8009624:	469e      	mov	lr, r3
 8009626:	4770      	bx	lr

08009628 <_fini>:
 8009628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800962a:	bf00      	nop
 800962c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800962e:	bc08      	pop	{r3}
 8009630:	469e      	mov	lr, r3
 8009632:	4770      	bx	lr
