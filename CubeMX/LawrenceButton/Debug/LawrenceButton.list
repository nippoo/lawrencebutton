
LawrenceButton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008948  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08008ad0  08008ad0  00018ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bd0  08008bd0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008bd0  08008bd0  00018bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bd8  08008bd8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bd8  08008bd8  00018bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bdc  08008bdc  00018bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b44  2000000c  08008bec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b50  08008bec  00024b50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001837d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030d8  00000000  00000000  000383b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001528  00000000  00000000  0003b498  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013c8  00000000  00000000  0003c9c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023ede  00000000  00000000  0003dd88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012d7f  00000000  00000000  00061c66  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1ab1  00000000  00000000  000749e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00146496  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005948  00000000  00000000  00146514  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008ab8 	.word	0x08008ab8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08008ab8 	.word	0x08008ab8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 f94d 	bl	8000790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f008 f82c 	bl	8008558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f965 	bl	80007fa <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000548:	f000 f92d 	bl	80007a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000008 	.word	0x20000008
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	20000060 	.word	0x20000060

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000060 	.word	0x20000060

080005ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b4:	f7ff ffee 	bl	8000594 <HAL_GetTick>
 80005b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005c4:	d005      	beq.n	80005d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_Delay+0x40>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005d2:	bf00      	nop
 80005d4:	f7ff ffde 	bl	8000594 <HAL_GetTick>
 80005d8:	4602      	mov	r2, r0
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d8f7      	bhi.n	80005d4 <HAL_Delay+0x28>
  {
  }
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000004 	.word	0x20000004

080005f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800061c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	2b00      	cmp	r3, #0
 8000664:	db0b      	blt.n	800067e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f003 021f 	and.w	r2, r3, #31
 800066c:	4907      	ldr	r1, [pc, #28]	; (800068c <__NVIC_EnableIRQ+0x38>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	095b      	lsrs	r3, r3, #5
 8000674:	2001      	movs	r0, #1
 8000676:	fa00 f202 	lsl.w	r2, r0, r2
 800067a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000e100 	.word	0xe000e100

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	; (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	; (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43da      	mvns	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	401a      	ands	r2, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43d9      	mvns	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	4313      	orrs	r3, r2
         );
}
 800073e:	4618      	mov	r0, r3
 8000740:	3724      	adds	r7, #36	; 0x24
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
	...

0800074c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3b01      	subs	r3, #1
 8000758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800075c:	d301      	bcc.n	8000762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075e:	2301      	movs	r3, #1
 8000760:	e00f      	b.n	8000782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <SysTick_Config+0x40>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3b01      	subs	r3, #1
 8000768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076a:	210f      	movs	r1, #15
 800076c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000770:	f7ff ff8e 	bl	8000690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <SysTick_Config+0x40>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SysTick_Config+0x40>)
 800077c:	2207      	movs	r2, #7
 800077e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	e000e010 	.word	0xe000e010

08000790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f7ff ff29 	bl	80005f0 <__NVIC_SetPriorityGrouping>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b086      	sub	sp, #24
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	60b9      	str	r1, [r7, #8]
 80007b0:	607a      	str	r2, [r7, #4]
 80007b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b4:	2300      	movs	r3, #0
 80007b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007b8:	f7ff ff3e 	bl	8000638 <__NVIC_GetPriorityGrouping>
 80007bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	68b9      	ldr	r1, [r7, #8]
 80007c2:	6978      	ldr	r0, [r7, #20]
 80007c4:	f7ff ff8e 	bl	80006e4 <NVIC_EncodePriority>
 80007c8:	4602      	mov	r2, r0
 80007ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff ff5d 	bl	8000690 <__NVIC_SetPriority>
}
 80007d6:	bf00      	nop
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff31 	bl	8000654 <__NVIC_EnableIRQ>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff ffa2 	bl	800074c <SysTick_Config>
 8000808:	4603      	mov	r3, r0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000820:	f7ff feb8 	bl	8000594 <HAL_GetTick>
 8000824:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d101      	bne.n	8000830 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800082c:	2301      	movs	r3, #1
 800082e:	e099      	b.n	8000964 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2200      	movs	r2, #0
 8000834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2202      	movs	r2, #2
 800083c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f022 0201 	bic.w	r2, r2, #1
 800084e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000850:	e00f      	b.n	8000872 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000852:	f7ff fe9f 	bl	8000594 <HAL_GetTick>
 8000856:	4602      	mov	r2, r0
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	2b05      	cmp	r3, #5
 800085e:	d908      	bls.n	8000872 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2220      	movs	r2, #32
 8000864:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2203      	movs	r2, #3
 800086a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800086e:	2303      	movs	r3, #3
 8000870:	e078      	b.n	8000964 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f003 0301 	and.w	r3, r3, #1
 800087c:	2b00      	cmp	r3, #0
 800087e:	d1e8      	bne.n	8000852 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000888:	697a      	ldr	r2, [r7, #20]
 800088a:	4b38      	ldr	r3, [pc, #224]	; (800096c <HAL_DMA_Init+0x158>)
 800088c:	4013      	ands	r3, r2
 800088e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	685a      	ldr	r2, [r3, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	689b      	ldr	r3, [r3, #8]
 8000898:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800089e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	691b      	ldr	r3, [r3, #16]
 80008a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80008aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80008b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6a1b      	ldr	r3, [r3, #32]
 80008bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80008be:	697a      	ldr	r2, [r7, #20]
 80008c0:	4313      	orrs	r3, r2
 80008c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008c8:	2b04      	cmp	r3, #4
 80008ca:	d107      	bne.n	80008dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d4:	4313      	orrs	r3, r2
 80008d6:	697a      	ldr	r2, [r7, #20]
 80008d8:	4313      	orrs	r3, r2
 80008da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	697a      	ldr	r2, [r7, #20]
 80008e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	f023 0307 	bic.w	r3, r3, #7
 80008f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008f8:	697a      	ldr	r2, [r7, #20]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000902:	2b04      	cmp	r3, #4
 8000904:	d117      	bne.n	8000936 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800090a:	697a      	ldr	r2, [r7, #20]
 800090c:	4313      	orrs	r3, r2
 800090e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000914:	2b00      	cmp	r3, #0
 8000916:	d00e      	beq.n	8000936 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f000 fa6f 	bl	8000dfc <DMA_CheckFifoParam>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d008      	beq.n	8000936 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2240      	movs	r2, #64	; 0x40
 8000928:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2201      	movs	r2, #1
 800092e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000932:	2301      	movs	r3, #1
 8000934:	e016      	b.n	8000964 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	697a      	ldr	r2, [r7, #20]
 800093c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f000 fa26 	bl	8000d90 <DMA_CalcBaseAndBitshift>
 8000944:	4603      	mov	r3, r0
 8000946:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800094c:	223f      	movs	r2, #63	; 0x3f
 800094e:	409a      	lsls	r2, r3
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2200      	movs	r2, #0
 8000958:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2201      	movs	r2, #1
 800095e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000962:	2300      	movs	r3, #0
}
 8000964:	4618      	mov	r0, r3
 8000966:	3718      	adds	r7, #24
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	f010803f 	.word	0xf010803f

08000970 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
 800097c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800097e:	2300      	movs	r3, #0
 8000980:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000986:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800098e:	2b01      	cmp	r3, #1
 8000990:	d101      	bne.n	8000996 <HAL_DMA_Start_IT+0x26>
 8000992:	2302      	movs	r3, #2
 8000994:	e040      	b.n	8000a18 <HAL_DMA_Start_IT+0xa8>
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	2201      	movs	r2, #1
 800099a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d12f      	bne.n	8000a0a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	2202      	movs	r2, #2
 80009ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	2200      	movs	r2, #0
 80009b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	68b9      	ldr	r1, [r7, #8]
 80009be:	68f8      	ldr	r0, [r7, #12]
 80009c0:	f000 f9b8 	bl	8000d34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009c8:	223f      	movs	r2, #63	; 0x3f
 80009ca:	409a      	lsls	r2, r3
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f042 0216 	orr.w	r2, r2, #22
 80009de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d007      	beq.n	80009f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f042 0208 	orr.w	r2, r2, #8
 80009f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f042 0201 	orr.w	r2, r2, #1
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	e005      	b.n	8000a16 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000a12:	2302      	movs	r3, #2
 8000a14:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3718      	adds	r7, #24
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000a2c:	4b92      	ldr	r3, [pc, #584]	; (8000c78 <HAL_DMA_IRQHandler+0x258>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a92      	ldr	r2, [pc, #584]	; (8000c7c <HAL_DMA_IRQHandler+0x25c>)
 8000a32:	fba2 2303 	umull	r2, r3, r2, r3
 8000a36:	0a9b      	lsrs	r3, r3, #10
 8000a38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a4a:	2208      	movs	r2, #8
 8000a4c:	409a      	lsls	r2, r3
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	4013      	ands	r3, r2
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d01a      	beq.n	8000a8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f003 0304 	and.w	r3, r3, #4
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d013      	beq.n	8000a8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f022 0204 	bic.w	r2, r2, #4
 8000a72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a78:	2208      	movs	r2, #8
 8000a7a:	409a      	lsls	r2, r3
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a84:	f043 0201 	orr.w	r2, r3, #1
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a90:	2201      	movs	r2, #1
 8000a92:	409a      	lsls	r2, r3
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	4013      	ands	r3, r2
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d012      	beq.n	8000ac2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d00b      	beq.n	8000ac2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aae:	2201      	movs	r2, #1
 8000ab0:	409a      	lsls	r2, r3
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000aba:	f043 0202 	orr.w	r2, r3, #2
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ac6:	2204      	movs	r2, #4
 8000ac8:	409a      	lsls	r2, r3
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	4013      	ands	r3, r2
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d012      	beq.n	8000af8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f003 0302 	and.w	r3, r3, #2
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d00b      	beq.n	8000af8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ae4:	2204      	movs	r2, #4
 8000ae6:	409a      	lsls	r2, r3
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000af0:	f043 0204 	orr.w	r2, r3, #4
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000afc:	2210      	movs	r2, #16
 8000afe:	409a      	lsls	r2, r3
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	4013      	ands	r3, r2
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d043      	beq.n	8000b90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f003 0308 	and.w	r3, r3, #8
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d03c      	beq.n	8000b90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b1a:	2210      	movs	r2, #16
 8000b1c:	409a      	lsls	r2, r3
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d018      	beq.n	8000b62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d108      	bne.n	8000b50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d024      	beq.n	8000b90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	4798      	blx	r3
 8000b4e:	e01f      	b.n	8000b90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d01b      	beq.n	8000b90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	4798      	blx	r3
 8000b60:	e016      	b.n	8000b90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d107      	bne.n	8000b80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f022 0208 	bic.w	r2, r2, #8
 8000b7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d003      	beq.n	8000b90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b94:	2220      	movs	r2, #32
 8000b96:	409a      	lsls	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	f000 808e 	beq.w	8000cbe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f003 0310 	and.w	r3, r3, #16
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	f000 8086 	beq.w	8000cbe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bb6:	2220      	movs	r2, #32
 8000bb8:	409a      	lsls	r2, r3
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2b05      	cmp	r3, #5
 8000bc8:	d136      	bne.n	8000c38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f022 0216 	bic.w	r2, r2, #22
 8000bd8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	695a      	ldr	r2, [r3, #20]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000be8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d103      	bne.n	8000bfa <HAL_DMA_IRQHandler+0x1da>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d007      	beq.n	8000c0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f022 0208 	bic.w	r2, r2, #8
 8000c08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c0e:	223f      	movs	r2, #63	; 0x3f
 8000c10:	409a      	lsls	r2, r3
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2201      	movs	r2, #1
 8000c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d07d      	beq.n	8000d2a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	4798      	blx	r3
        }
        return;
 8000c36:	e078      	b.n	8000d2a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d01c      	beq.n	8000c80 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d108      	bne.n	8000c66 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d030      	beq.n	8000cbe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	4798      	blx	r3
 8000c64:	e02b      	b.n	8000cbe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d027      	beq.n	8000cbe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	4798      	blx	r3
 8000c76:	e022      	b.n	8000cbe <HAL_DMA_IRQHandler+0x29e>
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d10f      	bne.n	8000cae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f022 0210 	bic.w	r2, r2, #16
 8000c9c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d003      	beq.n	8000cbe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d032      	beq.n	8000d2c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d022      	beq.n	8000d18 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2205      	movs	r2, #5
 8000cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f022 0201 	bic.w	r2, r2, #1
 8000ce8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	3301      	adds	r3, #1
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	697a      	ldr	r2, [r7, #20]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d307      	bcc.n	8000d06 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d1f2      	bne.n	8000cea <HAL_DMA_IRQHandler+0x2ca>
 8000d04:	e000      	b.n	8000d08 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000d06:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2201      	movs	r2, #1
 8000d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d005      	beq.n	8000d2c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	4798      	blx	r3
 8000d28:	e000      	b.n	8000d2c <HAL_DMA_IRQHandler+0x30c>
        return;
 8000d2a:	bf00      	nop
    }
  }
}
 8000d2c:	3718      	adds	r7, #24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop

08000d34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
 8000d40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	683a      	ldr	r2, [r7, #0]
 8000d58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	2b40      	cmp	r3, #64	; 0x40
 8000d60:	d108      	bne.n	8000d74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000d72:	e007      	b.n	8000d84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	68ba      	ldr	r2, [r7, #8]
 8000d7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	60da      	str	r2, [r3, #12]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	3b10      	subs	r3, #16
 8000da0:	4a14      	ldr	r2, [pc, #80]	; (8000df4 <DMA_CalcBaseAndBitshift+0x64>)
 8000da2:	fba2 2303 	umull	r2, r3, r2, r3
 8000da6:	091b      	lsrs	r3, r3, #4
 8000da8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000daa:	4a13      	ldr	r2, [pc, #76]	; (8000df8 <DMA_CalcBaseAndBitshift+0x68>)
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	4413      	add	r3, r2
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d909      	bls.n	8000dd2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000dc6:	f023 0303 	bic.w	r3, r3, #3
 8000dca:	1d1a      	adds	r2, r3, #4
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	659a      	str	r2, [r3, #88]	; 0x58
 8000dd0:	e007      	b.n	8000de2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000dda:	f023 0303 	bic.w	r3, r3, #3
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	aaaaaaab 	.word	0xaaaaaaab
 8000df8:	08008b1c 	.word	0x08008b1c

08000dfc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e04:	2300      	movs	r3, #0
 8000e06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d11f      	bne.n	8000e56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	2b03      	cmp	r3, #3
 8000e1a:	d855      	bhi.n	8000ec8 <DMA_CheckFifoParam+0xcc>
 8000e1c:	a201      	add	r2, pc, #4	; (adr r2, 8000e24 <DMA_CheckFifoParam+0x28>)
 8000e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e22:	bf00      	nop
 8000e24:	08000e35 	.word	0x08000e35
 8000e28:	08000e47 	.word	0x08000e47
 8000e2c:	08000e35 	.word	0x08000e35
 8000e30:	08000ec9 	.word	0x08000ec9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d045      	beq.n	8000ecc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e44:	e042      	b.n	8000ecc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e4e:	d13f      	bne.n	8000ed0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e54:	e03c      	b.n	8000ed0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e5e:	d121      	bne.n	8000ea4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	2b03      	cmp	r3, #3
 8000e64:	d836      	bhi.n	8000ed4 <DMA_CheckFifoParam+0xd8>
 8000e66:	a201      	add	r2, pc, #4	; (adr r2, 8000e6c <DMA_CheckFifoParam+0x70>)
 8000e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6c:	08000e7d 	.word	0x08000e7d
 8000e70:	08000e83 	.word	0x08000e83
 8000e74:	08000e7d 	.word	0x08000e7d
 8000e78:	08000e95 	.word	0x08000e95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8000e80:	e02f      	b.n	8000ee2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d024      	beq.n	8000ed8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000e92:	e021      	b.n	8000ed8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000e9c:	d11e      	bne.n	8000edc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8000ea2:	e01b      	b.n	8000edc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d902      	bls.n	8000eb0 <DMA_CheckFifoParam+0xb4>
 8000eaa:	2b03      	cmp	r3, #3
 8000eac:	d003      	beq.n	8000eb6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8000eae:	e018      	b.n	8000ee2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8000eb4:	e015      	b.n	8000ee2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d00e      	beq.n	8000ee0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	73fb      	strb	r3, [r7, #15]
      break;
 8000ec6:	e00b      	b.n	8000ee0 <DMA_CheckFifoParam+0xe4>
      break;
 8000ec8:	bf00      	nop
 8000eca:	e00a      	b.n	8000ee2 <DMA_CheckFifoParam+0xe6>
      break;
 8000ecc:	bf00      	nop
 8000ece:	e008      	b.n	8000ee2 <DMA_CheckFifoParam+0xe6>
      break;
 8000ed0:	bf00      	nop
 8000ed2:	e006      	b.n	8000ee2 <DMA_CheckFifoParam+0xe6>
      break;
 8000ed4:	bf00      	nop
 8000ed6:	e004      	b.n	8000ee2 <DMA_CheckFifoParam+0xe6>
      break;
 8000ed8:	bf00      	nop
 8000eda:	e002      	b.n	8000ee2 <DMA_CheckFifoParam+0xe6>
      break;   
 8000edc:	bf00      	nop
 8000ede:	e000      	b.n	8000ee2 <DMA_CheckFifoParam+0xe6>
      break;
 8000ee0:	bf00      	nop
    }
  } 
  
  return status; 
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
 8000f0a:	e16b      	b.n	80011e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	f040 815a 	bne.w	80011de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d00b      	beq.n	8000f4a <HAL_GPIO_Init+0x5a>
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d007      	beq.n	8000f4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f3e:	2b11      	cmp	r3, #17
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b12      	cmp	r3, #18
 8000f48:	d130      	bne.n	8000fac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f80:	2201      	movs	r2, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	091b      	lsrs	r3, r3, #4
 8000f96:	f003 0201 	and.w	r2, r3, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0xfc>
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b12      	cmp	r3, #18
 8000fea:	d123      	bne.n	8001034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	08da      	lsrs	r2, r3, #3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3208      	adds	r2, #8
 8000ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	f003 0307 	and.w	r3, r3, #7
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	220f      	movs	r2, #15
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	691a      	ldr	r2, [r3, #16]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	08da      	lsrs	r2, r3, #3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3208      	adds	r2, #8
 800102e:	69b9      	ldr	r1, [r7, #24]
 8001030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2203      	movs	r2, #3
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0203 	and.w	r2, r3, #3
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 80b4 	beq.w	80011de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b5f      	ldr	r3, [pc, #380]	; (80011f8 <HAL_GPIO_Init+0x308>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	4a5e      	ldr	r2, [pc, #376]	; (80011f8 <HAL_GPIO_Init+0x308>)
 8001080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001084:	6453      	str	r3, [r2, #68]	; 0x44
 8001086:	4b5c      	ldr	r3, [pc, #368]	; (80011f8 <HAL_GPIO_Init+0x308>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001092:	4a5a      	ldr	r2, [pc, #360]	; (80011fc <HAL_GPIO_Init+0x30c>)
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	089b      	lsrs	r3, r3, #2
 8001098:	3302      	adds	r3, #2
 800109a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	220f      	movs	r2, #15
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a51      	ldr	r2, [pc, #324]	; (8001200 <HAL_GPIO_Init+0x310>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d02b      	beq.n	8001116 <HAL_GPIO_Init+0x226>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a50      	ldr	r2, [pc, #320]	; (8001204 <HAL_GPIO_Init+0x314>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d025      	beq.n	8001112 <HAL_GPIO_Init+0x222>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4f      	ldr	r2, [pc, #316]	; (8001208 <HAL_GPIO_Init+0x318>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d01f      	beq.n	800110e <HAL_GPIO_Init+0x21e>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4e      	ldr	r2, [pc, #312]	; (800120c <HAL_GPIO_Init+0x31c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d019      	beq.n	800110a <HAL_GPIO_Init+0x21a>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4d      	ldr	r2, [pc, #308]	; (8001210 <HAL_GPIO_Init+0x320>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d013      	beq.n	8001106 <HAL_GPIO_Init+0x216>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4c      	ldr	r2, [pc, #304]	; (8001214 <HAL_GPIO_Init+0x324>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d00d      	beq.n	8001102 <HAL_GPIO_Init+0x212>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4b      	ldr	r2, [pc, #300]	; (8001218 <HAL_GPIO_Init+0x328>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d007      	beq.n	80010fe <HAL_GPIO_Init+0x20e>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4a      	ldr	r2, [pc, #296]	; (800121c <HAL_GPIO_Init+0x32c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d101      	bne.n	80010fa <HAL_GPIO_Init+0x20a>
 80010f6:	2307      	movs	r3, #7
 80010f8:	e00e      	b.n	8001118 <HAL_GPIO_Init+0x228>
 80010fa:	2308      	movs	r3, #8
 80010fc:	e00c      	b.n	8001118 <HAL_GPIO_Init+0x228>
 80010fe:	2306      	movs	r3, #6
 8001100:	e00a      	b.n	8001118 <HAL_GPIO_Init+0x228>
 8001102:	2305      	movs	r3, #5
 8001104:	e008      	b.n	8001118 <HAL_GPIO_Init+0x228>
 8001106:	2304      	movs	r3, #4
 8001108:	e006      	b.n	8001118 <HAL_GPIO_Init+0x228>
 800110a:	2303      	movs	r3, #3
 800110c:	e004      	b.n	8001118 <HAL_GPIO_Init+0x228>
 800110e:	2302      	movs	r3, #2
 8001110:	e002      	b.n	8001118 <HAL_GPIO_Init+0x228>
 8001112:	2301      	movs	r3, #1
 8001114:	e000      	b.n	8001118 <HAL_GPIO_Init+0x228>
 8001116:	2300      	movs	r3, #0
 8001118:	69fa      	ldr	r2, [r7, #28]
 800111a:	f002 0203 	and.w	r2, r2, #3
 800111e:	0092      	lsls	r2, r2, #2
 8001120:	4093      	lsls	r3, r2
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001128:	4934      	ldr	r1, [pc, #208]	; (80011fc <HAL_GPIO_Init+0x30c>)
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	089b      	lsrs	r3, r3, #2
 800112e:	3302      	adds	r3, #2
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001136:	4b3a      	ldr	r3, [pc, #232]	; (8001220 <HAL_GPIO_Init+0x330>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800115a:	4a31      	ldr	r2, [pc, #196]	; (8001220 <HAL_GPIO_Init+0x330>)
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001160:	4b2f      	ldr	r3, [pc, #188]	; (8001220 <HAL_GPIO_Init+0x330>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001184:	4a26      	ldr	r2, [pc, #152]	; (8001220 <HAL_GPIO_Init+0x330>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800118a:	4b25      	ldr	r3, [pc, #148]	; (8001220 <HAL_GPIO_Init+0x330>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ae:	4a1c      	ldr	r2, [pc, #112]	; (8001220 <HAL_GPIO_Init+0x330>)
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011b4:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <HAL_GPIO_Init+0x330>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011d8:	4a11      	ldr	r2, [pc, #68]	; (8001220 <HAL_GPIO_Init+0x330>)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3301      	adds	r3, #1
 80011e2:	61fb      	str	r3, [r7, #28]
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	2b0f      	cmp	r3, #15
 80011e8:	f67f ae90 	bls.w	8000f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011ec:	bf00      	nop
 80011ee:	3724      	adds	r7, #36	; 0x24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40013800 	.word	0x40013800
 8001200:	40020000 	.word	0x40020000
 8001204:	40020400 	.word	0x40020400
 8001208:	40020800 	.word	0x40020800
 800120c:	40020c00 	.word	0x40020c00
 8001210:	40021000 	.word	0x40021000
 8001214:	40021400 	.word	0x40021400
 8001218:	40021800 	.word	0x40021800
 800121c:	40021c00 	.word	0x40021c00
 8001220:	40013c00 	.word	0x40013c00

08001224 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	691a      	ldr	r2, [r3, #16]
 8001234:	887b      	ldrh	r3, [r7, #2]
 8001236:	4013      	ands	r3, r2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d002      	beq.n	8001242 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800123c:	2301      	movs	r3, #1
 800123e:	73fb      	strb	r3, [r7, #15]
 8001240:	e001      	b.n	8001246 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001242:	2300      	movs	r3, #0
 8001244:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001246:	7bfb      	ldrb	r3, [r7, #15]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	807b      	strh	r3, [r7, #2]
 8001260:	4613      	mov	r3, r2
 8001262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001264:	787b      	ldrb	r3, [r7, #1]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800126a:	887a      	ldrh	r2, [r7, #2]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001270:	e003      	b.n	800127a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001272:	887b      	ldrh	r3, [r7, #2]
 8001274:	041a      	lsls	r2, r3, #16
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	619a      	str	r2, [r3, #24]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e11f      	b.n	80014da <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d106      	bne.n	80012b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f007 f97a 	bl	80085a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2224      	movs	r2, #36	; 0x24
 80012b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 0201 	bic.w	r2, r2, #1
 80012ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80012ec:	f001 f9de 	bl	80026ac <HAL_RCC_GetPCLK1Freq>
 80012f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	4a7b      	ldr	r2, [pc, #492]	; (80014e4 <HAL_I2C_Init+0x25c>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d807      	bhi.n	800130c <HAL_I2C_Init+0x84>
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4a7a      	ldr	r2, [pc, #488]	; (80014e8 <HAL_I2C_Init+0x260>)
 8001300:	4293      	cmp	r3, r2
 8001302:	bf94      	ite	ls
 8001304:	2301      	movls	r3, #1
 8001306:	2300      	movhi	r3, #0
 8001308:	b2db      	uxtb	r3, r3
 800130a:	e006      	b.n	800131a <HAL_I2C_Init+0x92>
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4a77      	ldr	r2, [pc, #476]	; (80014ec <HAL_I2C_Init+0x264>)
 8001310:	4293      	cmp	r3, r2
 8001312:	bf94      	ite	ls
 8001314:	2301      	movls	r3, #1
 8001316:	2300      	movhi	r3, #0
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e0db      	b.n	80014da <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4a72      	ldr	r2, [pc, #456]	; (80014f0 <HAL_I2C_Init+0x268>)
 8001326:	fba2 2303 	umull	r2, r3, r2, r3
 800132a:	0c9b      	lsrs	r3, r3, #18
 800132c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	68ba      	ldr	r2, [r7, #8]
 800133e:	430a      	orrs	r2, r1
 8001340:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	4a64      	ldr	r2, [pc, #400]	; (80014e4 <HAL_I2C_Init+0x25c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d802      	bhi.n	800135c <HAL_I2C_Init+0xd4>
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	3301      	adds	r3, #1
 800135a:	e009      	b.n	8001370 <HAL_I2C_Init+0xe8>
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001362:	fb02 f303 	mul.w	r3, r2, r3
 8001366:	4a63      	ldr	r2, [pc, #396]	; (80014f4 <HAL_I2C_Init+0x26c>)
 8001368:	fba2 2303 	umull	r2, r3, r2, r3
 800136c:	099b      	lsrs	r3, r3, #6
 800136e:	3301      	adds	r3, #1
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	6812      	ldr	r2, [r2, #0]
 8001374:	430b      	orrs	r3, r1
 8001376:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001382:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	4956      	ldr	r1, [pc, #344]	; (80014e4 <HAL_I2C_Init+0x25c>)
 800138c:	428b      	cmp	r3, r1
 800138e:	d80d      	bhi.n	80013ac <HAL_I2C_Init+0x124>
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	1e59      	subs	r1, r3, #1
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	fbb1 f3f3 	udiv	r3, r1, r3
 800139e:	3301      	adds	r3, #1
 80013a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013a4:	2b04      	cmp	r3, #4
 80013a6:	bf38      	it	cc
 80013a8:	2304      	movcc	r3, #4
 80013aa:	e04f      	b.n	800144c <HAL_I2C_Init+0x1c4>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d111      	bne.n	80013d8 <HAL_I2C_Init+0x150>
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	1e58      	subs	r0, r3, #1
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6859      	ldr	r1, [r3, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	440b      	add	r3, r1
 80013c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80013c6:	3301      	adds	r3, #1
 80013c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	bf0c      	ite	eq
 80013d0:	2301      	moveq	r3, #1
 80013d2:	2300      	movne	r3, #0
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	e012      	b.n	80013fe <HAL_I2C_Init+0x176>
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	1e58      	subs	r0, r3, #1
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6859      	ldr	r1, [r3, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	0099      	lsls	r1, r3, #2
 80013e8:	440b      	add	r3, r1
 80013ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80013ee:	3301      	adds	r3, #1
 80013f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	bf0c      	ite	eq
 80013f8:	2301      	moveq	r3, #1
 80013fa:	2300      	movne	r3, #0
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_I2C_Init+0x17e>
 8001402:	2301      	movs	r3, #1
 8001404:	e022      	b.n	800144c <HAL_I2C_Init+0x1c4>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d10e      	bne.n	800142c <HAL_I2C_Init+0x1a4>
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	1e58      	subs	r0, r3, #1
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6859      	ldr	r1, [r3, #4]
 8001416:	460b      	mov	r3, r1
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	440b      	add	r3, r1
 800141c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001420:	3301      	adds	r3, #1
 8001422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800142a:	e00f      	b.n	800144c <HAL_I2C_Init+0x1c4>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	1e58      	subs	r0, r3, #1
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6859      	ldr	r1, [r3, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	0099      	lsls	r1, r3, #2
 800143c:	440b      	add	r3, r1
 800143e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001442:	3301      	adds	r3, #1
 8001444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001448:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	6809      	ldr	r1, [r1, #0]
 8001450:	4313      	orrs	r3, r2
 8001452:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69da      	ldr	r2, [r3, #28]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	431a      	orrs	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	430a      	orrs	r2, r1
 800146e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800147a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	6911      	ldr	r1, [r2, #16]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	68d2      	ldr	r2, [r2, #12]
 8001486:	4311      	orrs	r1, r2
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	6812      	ldr	r2, [r2, #0]
 800148c:	430b      	orrs	r3, r1
 800148e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	695a      	ldr	r2, [r3, #20]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	431a      	orrs	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f042 0201 	orr.w	r2, r2, #1
 80014ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2220      	movs	r2, #32
 80014c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	000186a0 	.word	0x000186a0
 80014e8:	001e847f 	.word	0x001e847f
 80014ec:	003d08ff 	.word	0x003d08ff
 80014f0:	431bde83 	.word	0x431bde83
 80014f4:	10624dd3 	.word	0x10624dd3

080014f8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e128      	b.n	800175c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d109      	bne.n	800152a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a90      	ldr	r2, [pc, #576]	; (8001764 <HAL_I2S_Init+0x26c>)
 8001522:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f007 f887 	bl	8008638 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2202      	movs	r2, #2
 800152e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	69db      	ldr	r3, [r3, #28]
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	6812      	ldr	r2, [r2, #0]
 800153c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001540:	f023 030f 	bic.w	r3, r3, #15
 8001544:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2202      	movs	r2, #2
 800154c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d060      	beq.n	8001618 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d102      	bne.n	8001564 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800155e:	2310      	movs	r3, #16
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	e001      	b.n	8001568 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001564:	2320      	movs	r3, #32
 8001566:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2b20      	cmp	r3, #32
 800156e:	d802      	bhi.n	8001576 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001576:	2001      	movs	r0, #1
 8001578:	f001 f98e 	bl	8002898 <HAL_RCCEx_GetPeriphCLKFreq>
 800157c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001586:	d125      	bne.n	80015d4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d010      	beq.n	80015b2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	fbb2 f2f3 	udiv	r2, r2, r3
 800159a:	4613      	mov	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	461a      	mov	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	695b      	ldr	r3, [r3, #20]
 80015a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ac:	3305      	adds	r3, #5
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	e01f      	b.n	80015f2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	461a      	mov	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ce:	3305      	adds	r3, #5
 80015d0:	613b      	str	r3, [r7, #16]
 80015d2:	e00e      	b.n	80015f2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	461a      	mov	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ee:	3305      	adds	r3, #5
 80015f0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4a5c      	ldr	r2, [pc, #368]	; (8001768 <HAL_I2S_Init+0x270>)
 80015f6:	fba2 2303 	umull	r2, r3, r2, r3
 80015fa:	08db      	lsrs	r3, r3, #3
 80015fc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	085b      	lsrs	r3, r3, #1
 800160e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	021b      	lsls	r3, r3, #8
 8001614:	61bb      	str	r3, [r7, #24]
 8001616:	e003      	b.n	8001620 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001618:	2302      	movs	r3, #2
 800161a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800161c:	2300      	movs	r3, #0
 800161e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d902      	bls.n	800162c <HAL_I2S_Init+0x134>
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	2bff      	cmp	r3, #255	; 0xff
 800162a:	d907      	bls.n	800163c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001630:	f043 0210 	orr.w	r2, r3, #16
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e08f      	b.n	800175c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	691a      	ldr	r2, [r3, #16]
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	ea42 0103 	orr.w	r1, r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	69fa      	ldr	r2, [r7, #28]
 800164c:	430a      	orrs	r2, r1
 800164e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800165a:	f023 030f 	bic.w	r3, r3, #15
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	6851      	ldr	r1, [r2, #4]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6892      	ldr	r2, [r2, #8]
 8001666:	4311      	orrs	r1, r2
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	68d2      	ldr	r2, [r2, #12]
 800166c:	4311      	orrs	r1, r2
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	6992      	ldr	r2, [r2, #24]
 8001672:	430a      	orrs	r2, r1
 8001674:	431a      	orrs	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800167e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d161      	bne.n	800174c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a38      	ldr	r2, [pc, #224]	; (800176c <HAL_I2S_Init+0x274>)
 800168c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a37      	ldr	r2, [pc, #220]	; (8001770 <HAL_I2S_Init+0x278>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d101      	bne.n	800169c <HAL_I2S_Init+0x1a4>
 8001698:	4b36      	ldr	r3, [pc, #216]	; (8001774 <HAL_I2S_Init+0x27c>)
 800169a:	e001      	b.n	80016a0 <HAL_I2S_Init+0x1a8>
 800169c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6812      	ldr	r2, [r2, #0]
 80016a6:	4932      	ldr	r1, [pc, #200]	; (8001770 <HAL_I2S_Init+0x278>)
 80016a8:	428a      	cmp	r2, r1
 80016aa:	d101      	bne.n	80016b0 <HAL_I2S_Init+0x1b8>
 80016ac:	4a31      	ldr	r2, [pc, #196]	; (8001774 <HAL_I2S_Init+0x27c>)
 80016ae:	e001      	b.n	80016b4 <HAL_I2S_Init+0x1bc>
 80016b0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80016b4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80016b8:	f023 030f 	bic.w	r3, r3, #15
 80016bc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a2b      	ldr	r2, [pc, #172]	; (8001770 <HAL_I2S_Init+0x278>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d101      	bne.n	80016cc <HAL_I2S_Init+0x1d4>
 80016c8:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <HAL_I2S_Init+0x27c>)
 80016ca:	e001      	b.n	80016d0 <HAL_I2S_Init+0x1d8>
 80016cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80016d0:	2202      	movs	r2, #2
 80016d2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a25      	ldr	r2, [pc, #148]	; (8001770 <HAL_I2S_Init+0x278>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d101      	bne.n	80016e2 <HAL_I2S_Init+0x1ea>
 80016de:	4b25      	ldr	r3, [pc, #148]	; (8001774 <HAL_I2S_Init+0x27c>)
 80016e0:	e001      	b.n	80016e6 <HAL_I2S_Init+0x1ee>
 80016e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016f2:	d003      	beq.n	80016fc <HAL_I2S_Init+0x204>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d103      	bne.n	8001704 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80016fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	e001      	b.n	8001708 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001704:	2300      	movs	r3, #0
 8001706:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	b299      	uxth	r1, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800171e:	4303      	orrs	r3, r0
 8001720:	b29b      	uxth	r3, r3
 8001722:	430b      	orrs	r3, r1
 8001724:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001726:	4313      	orrs	r3, r2
 8001728:	b29a      	uxth	r2, r3
 800172a:	897b      	ldrh	r3, [r7, #10]
 800172c:	4313      	orrs	r3, r2
 800172e:	b29b      	uxth	r3, r3
 8001730:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001734:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a0d      	ldr	r2, [pc, #52]	; (8001770 <HAL_I2S_Init+0x278>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d101      	bne.n	8001744 <HAL_I2S_Init+0x24c>
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <HAL_I2S_Init+0x27c>)
 8001742:	e001      	b.n	8001748 <HAL_I2S_Init+0x250>
 8001744:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001748:	897a      	ldrh	r2, [r7, #10]
 800174a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3720      	adds	r7, #32
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	0800185b 	.word	0x0800185b
 8001768:	cccccccd 	.word	0xcccccccd
 800176c:	08001971 	.word	0x08001971
 8001770:	40003800 	.word	0x40003800
 8001774:	40003400 	.word	0x40003400

08001778 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ac:	881a      	ldrh	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b8:	1c9a      	adds	r2, r3, #2
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	3b01      	subs	r3, #1
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10e      	bne.n	80017f4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80017e4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f006 fda2 	bl	8008338 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68da      	ldr	r2, [r3, #12]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180e:	b292      	uxth	r2, r2
 8001810:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001816:	1c9a      	adds	r2, r3, #2
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001820:	b29b      	uxth	r3, r3
 8001822:	3b01      	subs	r3, #1
 8001824:	b29a      	uxth	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800182e:	b29b      	uxth	r3, r3
 8001830:	2b00      	cmp	r3, #0
 8001832:	d10e      	bne.n	8001852 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001842:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ff93 	bl	8001778 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b086      	sub	sp, #24
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b04      	cmp	r3, #4
 8001874:	d13a      	bne.n	80018ec <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	2b01      	cmp	r3, #1
 800187e:	d109      	bne.n	8001894 <I2S_IRQHandler+0x3a>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800188a:	2b40      	cmp	r3, #64	; 0x40
 800188c:	d102      	bne.n	8001894 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff ffb4 	bl	80017fc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800189a:	2b40      	cmp	r3, #64	; 0x40
 800189c:	d126      	bne.n	80018ec <I2S_IRQHandler+0x92>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0320 	and.w	r3, r3, #32
 80018a8:	2b20      	cmp	r3, #32
 80018aa:	d11f      	bne.n	80018ec <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80018ba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80018bc:	2300      	movs	r3, #0
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2201      	movs	r2, #1
 80018d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	f043 0202 	orr.w	r2, r3, #2
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff ff50 	bl	800178c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	d136      	bne.n	8001966 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d109      	bne.n	8001916 <I2S_IRQHandler+0xbc>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800190c:	2b80      	cmp	r3, #128	; 0x80
 800190e:	d102      	bne.n	8001916 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ff45 	bl	80017a0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	2b08      	cmp	r3, #8
 800191e:	d122      	bne.n	8001966 <I2S_IRQHandler+0x10c>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 0320 	and.w	r3, r3, #32
 800192a:	2b20      	cmp	r3, #32
 800192c:	d11b      	bne.n	8001966 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800193c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001958:	f043 0204 	orr.w	r2, r3, #4
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ff13 	bl	800178c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001966:	bf00      	nop
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4aa2      	ldr	r2, [pc, #648]	; (8001c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d101      	bne.n	800198e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800198a:	4ba2      	ldr	r3, [pc, #648]	; (8001c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800198c:	e001      	b.n	8001992 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800198e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a9b      	ldr	r2, [pc, #620]	; (8001c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d101      	bne.n	80019ac <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80019a8:	4b9a      	ldr	r3, [pc, #616]	; (8001c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80019aa:	e001      	b.n	80019b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80019ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019bc:	d004      	beq.n	80019c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f040 8099 	bne.w	8001afa <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d107      	bne.n	80019e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d002      	beq.n	80019e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 f925 	bl	8001c2c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d107      	bne.n	80019fc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d002      	beq.n	80019fc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f9c8 	bl	8001d8c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a02:	2b40      	cmp	r3, #64	; 0x40
 8001a04:	d13a      	bne.n	8001a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	f003 0320 	and.w	r3, r3, #32
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d035      	beq.n	8001a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a7e      	ldr	r2, [pc, #504]	; (8001c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d101      	bne.n	8001a1e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001a1a:	4b7e      	ldr	r3, [pc, #504]	; (8001c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001a1c:	e001      	b.n	8001a22 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001a1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4979      	ldr	r1, [pc, #484]	; (8001c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001a2a:	428b      	cmp	r3, r1
 8001a2c:	d101      	bne.n	8001a32 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001a2e:	4b79      	ldr	r3, [pc, #484]	; (8001c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001a30:	e001      	b.n	8001a36 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001a32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a36:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001a3a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001a4a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	f043 0202 	orr.w	r2, r3, #2
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff fe88 	bl	800178c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	f040 80be 	bne.w	8001c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	f003 0320 	and.w	r3, r3, #32
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 80b8 	beq.w	8001c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001aa2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a59      	ldr	r2, [pc, #356]	; (8001c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d101      	bne.n	8001ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001aae:	4b59      	ldr	r3, [pc, #356]	; (8001c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001ab0:	e001      	b.n	8001ab6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001ab2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4954      	ldr	r1, [pc, #336]	; (8001c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001abe:	428b      	cmp	r3, r1
 8001ac0:	d101      	bne.n	8001ac6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001ac2:	4b54      	ldr	r3, [pc, #336]	; (8001c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001ac4:	e001      	b.n	8001aca <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001ac6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001aca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ace:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	f043 0204 	orr.w	r2, r3, #4
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff fe4a 	bl	800178c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001af8:	e084      	b.n	8001c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d107      	bne.n	8001b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d002      	beq.n	8001b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f8be 	bl	8001c90 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d107      	bne.n	8001b2e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d002      	beq.n	8001b2e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 f8fd 	bl	8001d28 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b34:	2b40      	cmp	r3, #64	; 0x40
 8001b36:	d12f      	bne.n	8001b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f003 0320 	and.w	r3, r3, #32
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d02a      	beq.n	8001b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b50:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a2e      	ldr	r2, [pc, #184]	; (8001c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d101      	bne.n	8001b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001b5c:	4b2d      	ldr	r3, [pc, #180]	; (8001c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001b5e:	e001      	b.n	8001b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001b60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4929      	ldr	r1, [pc, #164]	; (8001c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001b6c:	428b      	cmp	r3, r1
 8001b6e:	d101      	bne.n	8001b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001b70:	4b28      	ldr	r3, [pc, #160]	; (8001c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001b72:	e001      	b.n	8001b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001b74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b7c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	f043 0202 	orr.w	r2, r3, #2
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff fdfa 	bl	800178c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d131      	bne.n	8001c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	f003 0320 	and.w	r3, r3, #32
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d02c      	beq.n	8001c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a17      	ldr	r2, [pc, #92]	; (8001c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d101      	bne.n	8001bba <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001bb6:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001bb8:	e001      	b.n	8001bbe <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001bba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4912      	ldr	r1, [pc, #72]	; (8001c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001bc6:	428b      	cmp	r3, r1
 8001bc8:	d101      	bne.n	8001bce <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001bcc:	e001      	b.n	8001bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8001bce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bd2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001bd6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001be6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf4:	f043 0204 	orr.w	r2, r3, #4
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7ff fdc5 	bl	800178c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001c02:	e000      	b.n	8001c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001c04:	bf00      	nop
}
 8001c06:	bf00      	nop
 8001c08:	3720      	adds	r7, #32
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40003800 	.word	0x40003800
 8001c14:	40003400 	.word	0x40003400

08001c18 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	1c99      	adds	r1, r3, #2
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	6251      	str	r1, [r2, #36]	; 0x24
 8001c3e:	881a      	ldrh	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d113      	bne.n	8001c86 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c6c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d106      	bne.n	8001c86 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff ffc9 	bl	8001c18 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
	...

08001c90 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	1c99      	adds	r1, r3, #2
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6251      	str	r1, [r2, #36]	; 0x24
 8001ca2:	8819      	ldrh	r1, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1d      	ldr	r2, [pc, #116]	; (8001d20 <I2SEx_TxISR_I2SExt+0x90>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d101      	bne.n	8001cb2 <I2SEx_TxISR_I2SExt+0x22>
 8001cae:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <I2SEx_TxISR_I2SExt+0x94>)
 8001cb0:	e001      	b.n	8001cb6 <I2SEx_TxISR_I2SExt+0x26>
 8001cb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cb6:	460a      	mov	r2, r1
 8001cb8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d121      	bne.n	8001d16 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a12      	ldr	r2, [pc, #72]	; (8001d20 <I2SEx_TxISR_I2SExt+0x90>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d101      	bne.n	8001ce0 <I2SEx_TxISR_I2SExt+0x50>
 8001cdc:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <I2SEx_TxISR_I2SExt+0x94>)
 8001cde:	e001      	b.n	8001ce4 <I2SEx_TxISR_I2SExt+0x54>
 8001ce0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	490d      	ldr	r1, [pc, #52]	; (8001d20 <I2SEx_TxISR_I2SExt+0x90>)
 8001cec:	428b      	cmp	r3, r1
 8001cee:	d101      	bne.n	8001cf4 <I2SEx_TxISR_I2SExt+0x64>
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <I2SEx_TxISR_I2SExt+0x94>)
 8001cf2:	e001      	b.n	8001cf8 <I2SEx_TxISR_I2SExt+0x68>
 8001cf4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cf8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001cfc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d106      	bne.n	8001d16 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff ff81 	bl	8001c18 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40003800 	.word	0x40003800
 8001d24:	40003400 	.word	0x40003400

08001d28 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68d8      	ldr	r0, [r3, #12]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3a:	1c99      	adds	r1, r3, #2
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001d40:	b282      	uxth	r2, r0
 8001d42:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d113      	bne.n	8001d84 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d6a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d106      	bne.n	8001d84 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ff4a 	bl	8001c18 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a20      	ldr	r2, [pc, #128]	; (8001e1c <I2SEx_RxISR_I2SExt+0x90>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d101      	bne.n	8001da2 <I2SEx_RxISR_I2SExt+0x16>
 8001d9e:	4b20      	ldr	r3, [pc, #128]	; (8001e20 <I2SEx_RxISR_I2SExt+0x94>)
 8001da0:	e001      	b.n	8001da6 <I2SEx_RxISR_I2SExt+0x1a>
 8001da2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001da6:	68d8      	ldr	r0, [r3, #12]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dac:	1c99      	adds	r1, r3, #2
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001db2:	b282      	uxth	r2, r0
 8001db4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d121      	bne.n	8001e12 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a12      	ldr	r2, [pc, #72]	; (8001e1c <I2SEx_RxISR_I2SExt+0x90>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d101      	bne.n	8001ddc <I2SEx_RxISR_I2SExt+0x50>
 8001dd8:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <I2SEx_RxISR_I2SExt+0x94>)
 8001dda:	e001      	b.n	8001de0 <I2SEx_RxISR_I2SExt+0x54>
 8001ddc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	490d      	ldr	r1, [pc, #52]	; (8001e1c <I2SEx_RxISR_I2SExt+0x90>)
 8001de8:	428b      	cmp	r3, r1
 8001dea:	d101      	bne.n	8001df0 <I2SEx_RxISR_I2SExt+0x64>
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <I2SEx_RxISR_I2SExt+0x94>)
 8001dee:	e001      	b.n	8001df4 <I2SEx_RxISR_I2SExt+0x68>
 8001df0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001df4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001df8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d106      	bne.n	8001e12 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff ff03 	bl	8001c18 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40003800 	.word	0x40003800
 8001e20:	40003400 	.word	0x40003400

08001e24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e25b      	b.n	80022ee <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d075      	beq.n	8001f2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e42:	4ba3      	ldr	r3, [pc, #652]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 030c 	and.w	r3, r3, #12
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	d00c      	beq.n	8001e68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e4e:	4ba0      	ldr	r3, [pc, #640]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d112      	bne.n	8001e80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e5a:	4b9d      	ldr	r3, [pc, #628]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e66:	d10b      	bne.n	8001e80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e68:	4b99      	ldr	r3, [pc, #612]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d05b      	beq.n	8001f2c <HAL_RCC_OscConfig+0x108>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d157      	bne.n	8001f2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e236      	b.n	80022ee <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e88:	d106      	bne.n	8001e98 <HAL_RCC_OscConfig+0x74>
 8001e8a:	4b91      	ldr	r3, [pc, #580]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a90      	ldr	r2, [pc, #576]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e01d      	b.n	8001ed4 <HAL_RCC_OscConfig+0xb0>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea0:	d10c      	bne.n	8001ebc <HAL_RCC_OscConfig+0x98>
 8001ea2:	4b8b      	ldr	r3, [pc, #556]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a8a      	ldr	r2, [pc, #552]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	4b88      	ldr	r3, [pc, #544]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a87      	ldr	r2, [pc, #540]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	e00b      	b.n	8001ed4 <HAL_RCC_OscConfig+0xb0>
 8001ebc:	4b84      	ldr	r3, [pc, #528]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a83      	ldr	r2, [pc, #524]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	4b81      	ldr	r3, [pc, #516]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a80      	ldr	r2, [pc, #512]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d013      	beq.n	8001f04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001edc:	f7fe fb5a 	bl	8000594 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ee4:	f7fe fb56 	bl	8000594 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b64      	cmp	r3, #100	; 0x64
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e1fb      	b.n	80022ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef6:	4b76      	ldr	r3, [pc, #472]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0xc0>
 8001f02:	e014      	b.n	8001f2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f04:	f7fe fb46 	bl	8000594 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f0c:	f7fe fb42 	bl	8000594 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	; 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e1e7      	b.n	80022ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1e:	4b6c      	ldr	r3, [pc, #432]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0xe8>
 8001f2a:	e000      	b.n	8001f2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d063      	beq.n	8002002 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f3a:	4b65      	ldr	r3, [pc, #404]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00b      	beq.n	8001f5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f46:	4b62      	ldr	r3, [pc, #392]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d11c      	bne.n	8001f8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f52:	4b5f      	ldr	r3, [pc, #380]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d116      	bne.n	8001f8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5e:	4b5c      	ldr	r3, [pc, #368]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d005      	beq.n	8001f76 <HAL_RCC_OscConfig+0x152>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d001      	beq.n	8001f76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e1bb      	b.n	80022ee <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f76:	4b56      	ldr	r3, [pc, #344]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4952      	ldr	r1, [pc, #328]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8a:	e03a      	b.n	8002002 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d020      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f94:	4b4f      	ldr	r3, [pc, #316]	; (80020d4 <HAL_RCC_OscConfig+0x2b0>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9a:	f7fe fafb 	bl	8000594 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fa2:	f7fe faf7 	bl	8000594 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e19c      	b.n	80022ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb4:	4b46      	ldr	r3, [pc, #280]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0f0      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc0:	4b43      	ldr	r3, [pc, #268]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4940      	ldr	r1, [pc, #256]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	600b      	str	r3, [r1, #0]
 8001fd4:	e015      	b.n	8002002 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fd6:	4b3f      	ldr	r3, [pc, #252]	; (80020d4 <HAL_RCC_OscConfig+0x2b0>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fdc:	f7fe fada 	bl	8000594 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe4:	f7fe fad6 	bl	8000594 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e17b      	b.n	80022ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff6:	4b36      	ldr	r3, [pc, #216]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d030      	beq.n	8002070 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d016      	beq.n	8002044 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002016:	4b30      	ldr	r3, [pc, #192]	; (80020d8 <HAL_RCC_OscConfig+0x2b4>)
 8002018:	2201      	movs	r2, #1
 800201a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201c:	f7fe faba 	bl	8000594 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002024:	f7fe fab6 	bl	8000594 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e15b      	b.n	80022ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002036:	4b26      	ldr	r3, [pc, #152]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8002038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCC_OscConfig+0x200>
 8002042:	e015      	b.n	8002070 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002044:	4b24      	ldr	r3, [pc, #144]	; (80020d8 <HAL_RCC_OscConfig+0x2b4>)
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204a:	f7fe faa3 	bl	8000594 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002052:	f7fe fa9f 	bl	8000594 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e144      	b.n	80022ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002064:	4b1a      	ldr	r3, [pc, #104]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8002066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1f0      	bne.n	8002052 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 80a0 	beq.w	80021be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800207e:	2300      	movs	r3, #0
 8002080:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002082:	4b13      	ldr	r3, [pc, #76]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10f      	bne.n	80020ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	4a0e      	ldr	r2, [pc, #56]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 8002098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800209c:	6413      	str	r3, [r2, #64]	; 0x40
 800209e:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <HAL_RCC_OscConfig+0x2ac>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020aa:	2301      	movs	r3, #1
 80020ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ae:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <HAL_RCC_OscConfig+0x2b8>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d121      	bne.n	80020fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ba:	4b08      	ldr	r3, [pc, #32]	; (80020dc <HAL_RCC_OscConfig+0x2b8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a07      	ldr	r2, [pc, #28]	; (80020dc <HAL_RCC_OscConfig+0x2b8>)
 80020c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020c6:	f7fe fa65 	bl	8000594 <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020cc:	e011      	b.n	80020f2 <HAL_RCC_OscConfig+0x2ce>
 80020ce:	bf00      	nop
 80020d0:	40023800 	.word	0x40023800
 80020d4:	42470000 	.word	0x42470000
 80020d8:	42470e80 	.word	0x42470e80
 80020dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020e0:	f7fe fa58 	bl	8000594 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e0fd      	b.n	80022ee <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f2:	4b81      	ldr	r3, [pc, #516]	; (80022f8 <HAL_RCC_OscConfig+0x4d4>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f0      	beq.n	80020e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d106      	bne.n	8002114 <HAL_RCC_OscConfig+0x2f0>
 8002106:	4b7d      	ldr	r3, [pc, #500]	; (80022fc <HAL_RCC_OscConfig+0x4d8>)
 8002108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210a:	4a7c      	ldr	r2, [pc, #496]	; (80022fc <HAL_RCC_OscConfig+0x4d8>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6713      	str	r3, [r2, #112]	; 0x70
 8002112:	e01c      	b.n	800214e <HAL_RCC_OscConfig+0x32a>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b05      	cmp	r3, #5
 800211a:	d10c      	bne.n	8002136 <HAL_RCC_OscConfig+0x312>
 800211c:	4b77      	ldr	r3, [pc, #476]	; (80022fc <HAL_RCC_OscConfig+0x4d8>)
 800211e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002120:	4a76      	ldr	r2, [pc, #472]	; (80022fc <HAL_RCC_OscConfig+0x4d8>)
 8002122:	f043 0304 	orr.w	r3, r3, #4
 8002126:	6713      	str	r3, [r2, #112]	; 0x70
 8002128:	4b74      	ldr	r3, [pc, #464]	; (80022fc <HAL_RCC_OscConfig+0x4d8>)
 800212a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212c:	4a73      	ldr	r2, [pc, #460]	; (80022fc <HAL_RCC_OscConfig+0x4d8>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	6713      	str	r3, [r2, #112]	; 0x70
 8002134:	e00b      	b.n	800214e <HAL_RCC_OscConfig+0x32a>
 8002136:	4b71      	ldr	r3, [pc, #452]	; (80022fc <HAL_RCC_OscConfig+0x4d8>)
 8002138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213a:	4a70      	ldr	r2, [pc, #448]	; (80022fc <HAL_RCC_OscConfig+0x4d8>)
 800213c:	f023 0301 	bic.w	r3, r3, #1
 8002140:	6713      	str	r3, [r2, #112]	; 0x70
 8002142:	4b6e      	ldr	r3, [pc, #440]	; (80022fc <HAL_RCC_OscConfig+0x4d8>)
 8002144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002146:	4a6d      	ldr	r2, [pc, #436]	; (80022fc <HAL_RCC_OscConfig+0x4d8>)
 8002148:	f023 0304 	bic.w	r3, r3, #4
 800214c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d015      	beq.n	8002182 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002156:	f7fe fa1d 	bl	8000594 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215c:	e00a      	b.n	8002174 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800215e:	f7fe fa19 	bl	8000594 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	f241 3288 	movw	r2, #5000	; 0x1388
 800216c:	4293      	cmp	r3, r2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e0bc      	b.n	80022ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002174:	4b61      	ldr	r3, [pc, #388]	; (80022fc <HAL_RCC_OscConfig+0x4d8>)
 8002176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0ee      	beq.n	800215e <HAL_RCC_OscConfig+0x33a>
 8002180:	e014      	b.n	80021ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002182:	f7fe fa07 	bl	8000594 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002188:	e00a      	b.n	80021a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800218a:	f7fe fa03 	bl	8000594 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	f241 3288 	movw	r2, #5000	; 0x1388
 8002198:	4293      	cmp	r3, r2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e0a6      	b.n	80022ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a0:	4b56      	ldr	r3, [pc, #344]	; (80022fc <HAL_RCC_OscConfig+0x4d8>)
 80021a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1ee      	bne.n	800218a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021ac:	7dfb      	ldrb	r3, [r7, #23]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d105      	bne.n	80021be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b2:	4b52      	ldr	r3, [pc, #328]	; (80022fc <HAL_RCC_OscConfig+0x4d8>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	4a51      	ldr	r2, [pc, #324]	; (80022fc <HAL_RCC_OscConfig+0x4d8>)
 80021b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 8092 	beq.w	80022ec <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021c8:	4b4c      	ldr	r3, [pc, #304]	; (80022fc <HAL_RCC_OscConfig+0x4d8>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 030c 	and.w	r3, r3, #12
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d05c      	beq.n	800228e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d141      	bne.n	8002260 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021dc:	4b48      	ldr	r3, [pc, #288]	; (8002300 <HAL_RCC_OscConfig+0x4dc>)
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e2:	f7fe f9d7 	bl	8000594 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ea:	f7fe f9d3 	bl	8000594 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e078      	b.n	80022ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fc:	4b3f      	ldr	r3, [pc, #252]	; (80022fc <HAL_RCC_OscConfig+0x4d8>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1f0      	bne.n	80021ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69da      	ldr	r2, [r3, #28]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	431a      	orrs	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	019b      	lsls	r3, r3, #6
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221e:	085b      	lsrs	r3, r3, #1
 8002220:	3b01      	subs	r3, #1
 8002222:	041b      	lsls	r3, r3, #16
 8002224:	431a      	orrs	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222a:	061b      	lsls	r3, r3, #24
 800222c:	4933      	ldr	r1, [pc, #204]	; (80022fc <HAL_RCC_OscConfig+0x4d8>)
 800222e:	4313      	orrs	r3, r2
 8002230:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002232:	4b33      	ldr	r3, [pc, #204]	; (8002300 <HAL_RCC_OscConfig+0x4dc>)
 8002234:	2201      	movs	r2, #1
 8002236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7fe f9ac 	bl	8000594 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002240:	f7fe f9a8 	bl	8000594 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e04d      	b.n	80022ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002252:	4b2a      	ldr	r3, [pc, #168]	; (80022fc <HAL_RCC_OscConfig+0x4d8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0f0      	beq.n	8002240 <HAL_RCC_OscConfig+0x41c>
 800225e:	e045      	b.n	80022ec <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002260:	4b27      	ldr	r3, [pc, #156]	; (8002300 <HAL_RCC_OscConfig+0x4dc>)
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002266:	f7fe f995 	bl	8000594 <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800226e:	f7fe f991 	bl	8000594 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e036      	b.n	80022ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002280:	4b1e      	ldr	r3, [pc, #120]	; (80022fc <HAL_RCC_OscConfig+0x4d8>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1f0      	bne.n	800226e <HAL_RCC_OscConfig+0x44a>
 800228c:	e02e      	b.n	80022ec <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d101      	bne.n	800229a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e029      	b.n	80022ee <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800229a:	4b18      	ldr	r3, [pc, #96]	; (80022fc <HAL_RCC_OscConfig+0x4d8>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d11c      	bne.n	80022e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d115      	bne.n	80022e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80022bc:	68fa      	ldr	r2, [r7, #12]
 80022be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022c2:	4013      	ands	r3, r2
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d10d      	bne.n	80022e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d106      	bne.n	80022e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d001      	beq.n	80022ec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e000      	b.n	80022ee <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40007000 	.word	0x40007000
 80022fc:	40023800 	.word	0x40023800
 8002300:	42470060 	.word	0x42470060

08002304 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e0cc      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002318:	4b68      	ldr	r3, [pc, #416]	; (80024bc <HAL_RCC_ClockConfig+0x1b8>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 030f 	and.w	r3, r3, #15
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d90c      	bls.n	8002340 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002326:	4b65      	ldr	r3, [pc, #404]	; (80024bc <HAL_RCC_ClockConfig+0x1b8>)
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800232e:	4b63      	ldr	r3, [pc, #396]	; (80024bc <HAL_RCC_ClockConfig+0x1b8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0b8      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d020      	beq.n	800238e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002358:	4b59      	ldr	r3, [pc, #356]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	4a58      	ldr	r2, [pc, #352]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 800235e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002362:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002370:	4b53      	ldr	r3, [pc, #332]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	4a52      	ldr	r2, [pc, #328]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800237a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800237c:	4b50      	ldr	r3, [pc, #320]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	494d      	ldr	r1, [pc, #308]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 800238a:	4313      	orrs	r3, r2
 800238c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d044      	beq.n	8002424 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d107      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a2:	4b47      	ldr	r3, [pc, #284]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d119      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e07f      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d003      	beq.n	80023c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d107      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c2:	4b3f      	ldr	r3, [pc, #252]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d109      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e06f      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d2:	4b3b      	ldr	r3, [pc, #236]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e067      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023e2:	4b37      	ldr	r3, [pc, #220]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f023 0203 	bic.w	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	4934      	ldr	r1, [pc, #208]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023f4:	f7fe f8ce 	bl	8000594 <HAL_GetTick>
 80023f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fa:	e00a      	b.n	8002412 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023fc:	f7fe f8ca 	bl	8000594 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	f241 3288 	movw	r2, #5000	; 0x1388
 800240a:	4293      	cmp	r3, r2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e04f      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002412:	4b2b      	ldr	r3, [pc, #172]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 020c 	and.w	r2, r3, #12
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	429a      	cmp	r2, r3
 8002422:	d1eb      	bne.n	80023fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002424:	4b25      	ldr	r3, [pc, #148]	; (80024bc <HAL_RCC_ClockConfig+0x1b8>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 030f 	and.w	r3, r3, #15
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d20c      	bcs.n	800244c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002432:	4b22      	ldr	r3, [pc, #136]	; (80024bc <HAL_RCC_ClockConfig+0x1b8>)
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800243a:	4b20      	ldr	r3, [pc, #128]	; (80024bc <HAL_RCC_ClockConfig+0x1b8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d001      	beq.n	800244c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e032      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002458:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	4916      	ldr	r1, [pc, #88]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002466:	4313      	orrs	r3, r2
 8002468:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d009      	beq.n	800248a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002476:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	490e      	ldr	r1, [pc, #56]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002486:	4313      	orrs	r3, r2
 8002488:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800248a:	f000 f821 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 800248e:	4601      	mov	r1, r0
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	5cd3      	ldrb	r3, [r2, r3]
 800249e:	fa21 f303 	lsr.w	r3, r1, r3
 80024a2:	4a09      	ldr	r2, [pc, #36]	; (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 80024a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024a6:	4b09      	ldr	r3, [pc, #36]	; (80024cc <HAL_RCC_ClockConfig+0x1c8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe f82e 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40023c00 	.word	0x40023c00
 80024c0:	40023800 	.word	0x40023800
 80024c4:	08008bb8 	.word	0x08008bb8
 80024c8:	20000008 	.word	0x20000008
 80024cc:	20000000 	.word	0x20000000

080024d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80024d4:	b084      	sub	sp, #16
 80024d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	607b      	str	r3, [r7, #4]
 80024dc:	2300      	movs	r3, #0
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	2300      	movs	r3, #0
 80024e2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024e8:	4b67      	ldr	r3, [pc, #412]	; (8002688 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 030c 	and.w	r3, r3, #12
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d007      	beq.n	8002504 <HAL_RCC_GetSysClockFreq+0x34>
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d008      	beq.n	800250a <HAL_RCC_GetSysClockFreq+0x3a>
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f040 80bb 	bne.w	8002674 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024fe:	4b63      	ldr	r3, [pc, #396]	; (800268c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002500:	60bb      	str	r3, [r7, #8]
       break;
 8002502:	e0ba      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002504:	4b62      	ldr	r3, [pc, #392]	; (8002690 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002506:	60bb      	str	r3, [r7, #8]
      break;
 8002508:	e0b7      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800250a:	4b5f      	ldr	r3, [pc, #380]	; (8002688 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002512:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002514:	4b5c      	ldr	r3, [pc, #368]	; (8002688 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d051      	beq.n	80025c4 <HAL_RCC_GetSysClockFreq+0xf4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002520:	4b59      	ldr	r3, [pc, #356]	; (8002688 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	099b      	lsrs	r3, r3, #6
 8002526:	f04f 0400 	mov.w	r4, #0
 800252a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	ea03 0501 	and.w	r5, r3, r1
 8002536:	ea04 0602 	and.w	r6, r4, r2
 800253a:	46ab      	mov	fp, r5
 800253c:	46b4      	mov	ip, r6
 800253e:	eb1b 030b 	adds.w	r3, fp, fp
 8002542:	eb4c 040c 	adc.w	r4, ip, ip
 8002546:	469b      	mov	fp, r3
 8002548:	46a4      	mov	ip, r4
 800254a:	eb1b 0b05 	adds.w	fp, fp, r5
 800254e:	eb4c 0c06 	adc.w	ip, ip, r6
 8002552:	f04f 0100 	mov.w	r1, #0
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	ea4f 120c 	mov.w	r2, ip, lsl #4
 800255e:	ea42 721b 	orr.w	r2, r2, fp, lsr #28
 8002562:	ea4f 110b 	mov.w	r1, fp, lsl #4
 8002566:	468b      	mov	fp, r1
 8002568:	4694      	mov	ip, r2
 800256a:	ebbb 0b05 	subs.w	fp, fp, r5
 800256e:	eb6c 0c06 	sbc.w	ip, ip, r6
 8002572:	f04f 0100 	mov.w	r1, #0
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 800257e:	ea42 725b 	orr.w	r2, r2, fp, lsr #29
 8002582:	ea4f 01cb 	mov.w	r1, fp, lsl #3
 8002586:	468b      	mov	fp, r1
 8002588:	4694      	mov	ip, r2
 800258a:	ebbb 0b05 	subs.w	fp, fp, r5
 800258e:	eb6c 0c06 	sbc.w	ip, ip, r6
 8002592:	f04f 0100 	mov.w	r1, #0
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	ea4f 420c 	mov.w	r2, ip, lsl #16
 800259e:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 80025a2:	ea4f 410b 	mov.w	r1, fp, lsl #16
 80025a6:	468b      	mov	fp, r1
 80025a8:	4694      	mov	ip, r2
 80025aa:	4658      	mov	r0, fp
 80025ac:	4661      	mov	r1, ip
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f04f 0400 	mov.w	r4, #0
 80025b4:	461a      	mov	r2, r3
 80025b6:	4623      	mov	r3, r4
 80025b8:	f7fd fe06 	bl	80001c8 <__aeabi_uldivmod>
 80025bc:	4603      	mov	r3, r0
 80025be:	460c      	mov	r4, r1
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	e049      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025c4:	4b30      	ldr	r3, [pc, #192]	; (8002688 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	099b      	lsrs	r3, r3, #6
 80025ca:	f04f 0400 	mov.w	r4, #0
 80025ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	ea03 0501 	and.w	r5, r3, r1
 80025da:	ea04 0602 	and.w	r6, r4, r2
 80025de:	4629      	mov	r1, r5
 80025e0:	4632      	mov	r2, r6
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	f04f 0400 	mov.w	r4, #0
 80025ea:	0154      	lsls	r4, r2, #5
 80025ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025f0:	014b      	lsls	r3, r1, #5
 80025f2:	4619      	mov	r1, r3
 80025f4:	4622      	mov	r2, r4
 80025f6:	1b49      	subs	r1, r1, r5
 80025f8:	eb62 0206 	sbc.w	r2, r2, r6
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	f04f 0400 	mov.w	r4, #0
 8002604:	0194      	lsls	r4, r2, #6
 8002606:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800260a:	018b      	lsls	r3, r1, #6
 800260c:	1a5b      	subs	r3, r3, r1
 800260e:	eb64 0402 	sbc.w	r4, r4, r2
 8002612:	f04f 0100 	mov.w	r1, #0
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	00e2      	lsls	r2, r4, #3
 800261c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002620:	00d9      	lsls	r1, r3, #3
 8002622:	460b      	mov	r3, r1
 8002624:	4614      	mov	r4, r2
 8002626:	195b      	adds	r3, r3, r5
 8002628:	eb44 0406 	adc.w	r4, r4, r6
 800262c:	f04f 0100 	mov.w	r1, #0
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	02a2      	lsls	r2, r4, #10
 8002636:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800263a:	0299      	lsls	r1, r3, #10
 800263c:	460b      	mov	r3, r1
 800263e:	4614      	mov	r4, r2
 8002640:	4618      	mov	r0, r3
 8002642:	4621      	mov	r1, r4
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f04f 0400 	mov.w	r4, #0
 800264a:	461a      	mov	r2, r3
 800264c:	4623      	mov	r3, r4
 800264e:	f7fd fdbb 	bl	80001c8 <__aeabi_uldivmod>
 8002652:	4603      	mov	r3, r0
 8002654:	460c      	mov	r4, r1
 8002656:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	0c1b      	lsrs	r3, r3, #16
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	3301      	adds	r3, #1
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002670:	60bb      	str	r3, [r7, #8]
      break;
 8002672:	e002      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002674:	4b05      	ldr	r3, [pc, #20]	; (800268c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002676:	60bb      	str	r3, [r7, #8]
      break;
 8002678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800267a:	68bb      	ldr	r3, [r7, #8]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8002686:	bf00      	nop
 8002688:	40023800 	.word	0x40023800
 800268c:	00f42400 	.word	0x00f42400
 8002690:	01770000 	.word	0x01770000

08002694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002698:	4b03      	ldr	r3, [pc, #12]	; (80026a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800269a:	681b      	ldr	r3, [r3, #0]
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20000008 	.word	0x20000008

080026ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026b0:	f7ff fff0 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 80026b4:	4601      	mov	r1, r0
 80026b6:	4b05      	ldr	r3, [pc, #20]	; (80026cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	0a9b      	lsrs	r3, r3, #10
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	4a03      	ldr	r2, [pc, #12]	; (80026d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026c2:	5cd3      	ldrb	r3, [r2, r3]
 80026c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40023800 	.word	0x40023800
 80026d0:	08008bc8 	.word	0x08008bc8

080026d4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d105      	bne.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d035      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80026fc:	4b62      	ldr	r3, [pc, #392]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002702:	f7fd ff47 	bl	8000594 <HAL_GetTick>
 8002706:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002708:	e008      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800270a:	f7fd ff43 	bl	8000594 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e0b0      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800271c:	4b5b      	ldr	r3, [pc, #364]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f0      	bne.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	019a      	lsls	r2, r3, #6
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	071b      	lsls	r3, r3, #28
 8002734:	4955      	ldr	r1, [pc, #340]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002736:	4313      	orrs	r3, r2
 8002738:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800273c:	4b52      	ldr	r3, [pc, #328]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800273e:	2201      	movs	r2, #1
 8002740:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002742:	f7fd ff27 	bl	8000594 <HAL_GetTick>
 8002746:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002748:	e008      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800274a:	f7fd ff23 	bl	8000594 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e090      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800275c:	4b4b      	ldr	r3, [pc, #300]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 8083 	beq.w	800287c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	4b44      	ldr	r3, [pc, #272]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	4a43      	ldr	r2, [pc, #268]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002784:	6413      	str	r3, [r2, #64]	; 0x40
 8002786:	4b41      	ldr	r3, [pc, #260]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002792:	4b3f      	ldr	r3, [pc, #252]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a3e      	ldr	r2, [pc, #248]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800279c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800279e:	f7fd fef9 	bl	8000594 <HAL_GetTick>
 80027a2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80027a4:	e008      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80027a6:	f7fd fef5 	bl	8000594 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e062      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80027b8:	4b35      	ldr	r3, [pc, #212]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0f0      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027c4:	4b31      	ldr	r3, [pc, #196]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80027c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027cc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d02f      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d028      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027e2:	4b2a      	ldr	r3, [pc, #168]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80027e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027ec:	4b29      	ldr	r3, [pc, #164]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027f2:	4b28      	ldr	r3, [pc, #160]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80027f8:	4a24      	ldr	r2, [pc, #144]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80027fe:	4b23      	ldr	r3, [pc, #140]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b01      	cmp	r3, #1
 8002808:	d114      	bne.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800280a:	f7fd fec3 	bl	8000594 <HAL_GetTick>
 800280e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002810:	e00a      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002812:	f7fd febf 	bl	8000594 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002820:	4293      	cmp	r3, r2
 8002822:	d901      	bls.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e02a      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002828:	4b18      	ldr	r3, [pc, #96]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800282a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0ee      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800283c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002840:	d10d      	bne.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002842:	4b12      	ldr	r3, [pc, #72]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002856:	490d      	ldr	r1, [pc, #52]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002858:	4313      	orrs	r3, r2
 800285a:	608b      	str	r3, [r1, #8]
 800285c:	e005      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800285e:	4b0b      	ldr	r3, [pc, #44]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	4a0a      	ldr	r2, [pc, #40]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002864:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002868:	6093      	str	r3, [r2, #8]
 800286a:	4b08      	ldr	r3, [pc, #32]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800286c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002876:	4905      	ldr	r1, [pc, #20]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002878:	4313      	orrs	r3, r2
 800287a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	42470068 	.word	0x42470068
 800288c:	40023800 	.word	0x40023800
 8002890:	40007000 	.word	0x40007000
 8002894:	42470e40 	.word	0x42470e40

08002898 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002898:	b480      	push	{r7}
 800289a:	b087      	sub	sp, #28
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d13d      	bne.n	8002932 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80028b6:	4b22      	ldr	r3, [pc, #136]	; (8002940 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028be:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d004      	beq.n	80028d0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d12f      	bne.n	800292a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80028ca:	4b1e      	ldr	r3, [pc, #120]	; (8002944 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80028cc:	617b      	str	r3, [r7, #20]
          break;
 80028ce:	e02f      	b.n	8002930 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80028d0:	4b1b      	ldr	r3, [pc, #108]	; (8002940 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028dc:	d108      	bne.n	80028f0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80028de:	4b18      	ldr	r3, [pc, #96]	; (8002940 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028e6:	4a18      	ldr	r2, [pc, #96]	; (8002948 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80028e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	e007      	b.n	8002900 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80028f0:	4b13      	ldr	r3, [pc, #76]	; (8002940 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028f8:	4a14      	ldr	r2, [pc, #80]	; (800294c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80028fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fe:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002900:	4b0f      	ldr	r3, [pc, #60]	; (8002940 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002906:	099b      	lsrs	r3, r3, #6
 8002908:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	fb02 f303 	mul.w	r3, r2, r3
 8002912:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002914:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002916:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800291a:	0f1b      	lsrs	r3, r3, #28
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	fbb2 f3f3 	udiv	r3, r2, r3
 8002926:	617b      	str	r3, [r7, #20]
          break;
 8002928:	e002      	b.n	8002930 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
          break;
 800292e:	bf00      	nop
        }
      }
      break;
 8002930:	bf00      	nop
    }
  }
  return frequency;
 8002932:	697b      	ldr	r3, [r7, #20]
}
 8002934:	4618      	mov	r0, r3
 8002936:	371c      	adds	r7, #28
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	40023800 	.word	0x40023800
 8002944:	00bb8000 	.word	0x00bb8000
 8002948:	01770000 	.word	0x01770000
 800294c:	00f42400 	.word	0x00f42400

08002950 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e022      	b.n	80029a8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d105      	bne.n	800297a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f005 fefb 	bl	8008770 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2203      	movs	r2, #3
 800297e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f814 	bl	80029b0 <HAL_SD_InitCard>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e00a      	b.n	80029a8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80029b0:	b5b0      	push	{r4, r5, r7, lr}
 80029b2:	b08e      	sub	sp, #56	; 0x38
 80029b4:	af04      	add	r7, sp, #16
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80029b8:	2300      	movs	r3, #0
 80029ba:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80029c0:	2300      	movs	r3, #0
 80029c2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80029cc:	2376      	movs	r3, #118	; 0x76
 80029ce:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681d      	ldr	r5, [r3, #0]
 80029d4:	466c      	mov	r4, sp
 80029d6:	f107 0314 	add.w	r3, r7, #20
 80029da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80029de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80029e2:	f107 0308 	add.w	r3, r7, #8
 80029e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029e8:	4628      	mov	r0, r5
 80029ea:	f002 f849 	bl	8004a80 <SDIO_Init>
 80029ee:	4603      	mov	r3, r0
 80029f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80029f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e031      	b.n	8002a64 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002a00:	4b1a      	ldr	r3, [pc, #104]	; (8002a6c <HAL_SD_InitCard+0xbc>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f002 f881 	bl	8004b12 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002a10:	4b16      	ldr	r3, [pc, #88]	; (8002a6c <HAL_SD_InitCard+0xbc>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 ff00 	bl	800381c <SD_PowerON>
 8002a1c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00b      	beq.n	8002a3c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e013      	b.n	8002a64 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 fe1f 	bl	8003680 <SD_InitCard>
 8002a42:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00b      	beq.n	8002a62 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3728      	adds	r7, #40	; 0x28
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a6c:	422580a0 	.word	0x422580a0

08002a70 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b092      	sub	sp, #72	; 0x48
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
 8002a7c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002a7e:	f7fd fd89 	bl	8000594 <HAL_GetTick>
 8002a82:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d107      	bne.n	8002aa2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a96:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e1d9      	b.n	8002e56 <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	f040 81cc 	bne.w	8002e48 <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002ab6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	441a      	add	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d907      	bls.n	8002ad4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e1c0      	b.n	8002e56 <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2203      	movs	r2, #3
 8002ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d002      	beq.n	8002af2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aee:	025b      	lsls	r3, r3, #9
 8002af0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002afa:	4618      	mov	r0, r3
 8002afc:	f002 f89c 	bl	8004c38 <SDMMC_CmdBlockLength>
 8002b00:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8002b02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00f      	beq.n	8002b28 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a9b      	ldr	r2, [pc, #620]	; (8002d7c <HAL_SD_ReadBlocks+0x30c>)
 8002b0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b16:	431a      	orrs	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e196      	b.n	8002e56 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002b28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b2c:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	025b      	lsls	r3, r3, #9
 8002b32:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002b34:	2390      	movs	r3, #144	; 0x90
 8002b36:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002b40:	2301      	movs	r3, #1
 8002b42:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f107 0214 	add.w	r2, r7, #20
 8002b4c:	4611      	mov	r1, r2
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f002 f846 	bl	8004be0 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d90a      	bls.n	8002b70 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b66:	4618      	mov	r0, r3
 8002b68:	f002 f8aa 	bl	8004cc0 <SDMMC_CmdReadMultiBlock>
 8002b6c:	6478      	str	r0, [r7, #68]	; 0x44
 8002b6e:	e009      	b.n	8002b84 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2201      	movs	r2, #1
 8002b74:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f002 f87d 	bl	8004c7c <SDMMC_CmdReadSingleBlock>
 8002b82:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d012      	beq.n	8002bb0 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a7b      	ldr	r2, [pc, #492]	; (8002d7c <HAL_SD_ReadBlocks+0x30c>)
 8002b90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e152      	b.n	8002e56 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002bb4:	e061      	b.n	8002c7a <HAL_SD_ReadBlocks+0x20a>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d03c      	beq.n	8002c3e <HAL_SD_ReadBlocks+0x1ce>
 8002bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d039      	beq.n	8002c3e <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002bca:	2300      	movs	r3, #0
 8002bcc:	643b      	str	r3, [r7, #64]	; 0x40
 8002bce:	e033      	b.n	8002c38 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f001 ff7e 	bl	8004ad6 <SDIO_ReadFIFO>
 8002bda:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be6:	3301      	adds	r3, #1
 8002be8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bec:	3b01      	subs	r3, #1
 8002bee:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf2:	0a1b      	lsrs	r3, r3, #8
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c02:	3b01      	subs	r3, #1
 8002c04:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c08:	0c1b      	lsrs	r3, r3, #16
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c0e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c12:	3301      	adds	r3, #1
 8002c14:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1e:	0e1b      	lsrs	r3, r3, #24
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c24:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c28:	3301      	adds	r3, #1
 8002c2a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8002c32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c34:	3301      	adds	r3, #1
 8002c36:	643b      	str	r3, [r7, #64]	; 0x40
 8002c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c3a:	2b07      	cmp	r3, #7
 8002c3c:	d9c8      	bls.n	8002bd0 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002c3e:	f7fd fca9 	bl	8000594 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d902      	bls.n	8002c54 <HAL_SD_ReadBlocks+0x1e4>
 8002c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d112      	bne.n	8002c7a <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a48      	ldr	r2, [pc, #288]	; (8002d7c <HAL_SD_ReadBlocks+0x30c>)
 8002c5a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e0ed      	b.n	8002e56 <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c80:	f240 332a 	movw	r3, #810	; 0x32a
 8002c84:	4013      	ands	r3, r2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d095      	beq.n	8002bb6 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d022      	beq.n	8002cde <HAL_SD_ReadBlocks+0x26e>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d91f      	bls.n	8002cde <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	2b03      	cmp	r3, #3
 8002ca4:	d01b      	beq.n	8002cde <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f002 f86e 	bl	8004d8c <SDMMC_CmdStopTransfer>
 8002cb0:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002cb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d012      	beq.n	8002cde <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a2f      	ldr	r2, [pc, #188]	; (8002d7c <HAL_SD_ReadBlocks+0x30c>)
 8002cbe:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e0bb      	b.n	8002e56 <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce4:	f003 0308 	and.w	r3, r3, #8
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d012      	beq.n	8002d12 <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a22      	ldr	r2, [pc, #136]	; (8002d7c <HAL_SD_ReadBlocks+0x30c>)
 8002cf2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf8:	f043 0208 	orr.w	r2, r3, #8
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e0a1      	b.n	8002e56 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d012      	beq.n	8002d46 <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a15      	ldr	r2, [pc, #84]	; (8002d7c <HAL_SD_ReadBlocks+0x30c>)
 8002d26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2c:	f043 0202 	orr.w	r2, r3, #2
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e087      	b.n	8002e56 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d4c:	f003 0320 	and.w	r3, r3, #32
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d064      	beq.n	8002e1e <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a08      	ldr	r2, [pc, #32]	; (8002d7c <HAL_SD_ReadBlocks+0x30c>)
 8002d5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d60:	f043 0220 	orr.w	r2, r3, #32
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e06d      	b.n	8002e56 <HAL_SD_ReadBlocks+0x3e6>
 8002d7a:	bf00      	nop
 8002d7c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f001 fea6 	bl	8004ad6 <SDIO_ReadFIFO>
 8002d8a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d92:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d96:	3301      	adds	r3, #1
 8002d98:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da2:	0a1b      	lsrs	r3, r3, #8
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dac:	3301      	adds	r3, #1
 8002dae:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db2:	3b01      	subs	r3, #1
 8002db4:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db8:	0c1b      	lsrs	r3, r3, #16
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dbe:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dce:	0e1b      	lsrs	r3, r3, #24
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd8:	3301      	adds	r3, #1
 8002dda:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dde:	3b01      	subs	r3, #1
 8002de0:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002de2:	f7fd fbd7 	bl	8000594 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d902      	bls.n	8002df8 <HAL_SD_ReadBlocks+0x388>
 8002df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d112      	bne.n	8002e1e <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a18      	ldr	r2, [pc, #96]	; (8002e60 <HAL_SD_ReadBlocks+0x3f0>)
 8002dfe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e04:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e01b      	b.n	8002e56 <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d002      	beq.n	8002e32 <HAL_SD_ReadBlocks+0x3c2>
 8002e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1a6      	bne.n	8002d80 <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f240 523a 	movw	r2, #1338	; 0x53a
 8002e3a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002e44:	2300      	movs	r3, #0
 8002e46:	e006      	b.n	8002e56 <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
  }
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3748      	adds	r7, #72	; 0x48
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	004005ff 	.word	0x004005ff

08002e64 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b092      	sub	sp, #72	; 0x48
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
 8002e70:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002e72:	f7fd fb8f 	bl	8000594 <HAL_GetTick>
 8002e76:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d107      	bne.n	8002e96 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e184      	b.n	80031a0 <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	f040 8177 	bne.w	8003192 <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002eaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	441a      	add	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d907      	bls.n	8002ec8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e16b      	b.n	80031a0 <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2203      	movs	r2, #3
 8002ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d002      	beq.n	8002ee6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8002ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee2:	025b      	lsls	r3, r3, #9
 8002ee4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f001 fea2 	bl	8004c38 <SDMMC_CmdBlockLength>
 8002ef4:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00f      	beq.n	8002f1c <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a9d      	ldr	r2, [pc, #628]	; (8003178 <HAL_SD_WriteBlocks+0x314>)
 8002f02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e141      	b.n	80031a0 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002f1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f20:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	025b      	lsls	r3, r3, #9
 8002f26:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002f28:	2390      	movs	r3, #144	; 0x90
 8002f2a:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002f34:	2301      	movs	r3, #1
 8002f36:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f107 0218 	add.w	r2, r7, #24
 8002f40:	4611      	mov	r1, r2
 8002f42:	4618      	mov	r0, r3
 8002f44:	f001 fe4c 	bl	8004be0 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d90a      	bls.n	8002f64 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2220      	movs	r2, #32
 8002f52:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f001 fef4 	bl	8004d48 <SDMMC_CmdWriteMultiBlock>
 8002f60:	6478      	str	r0, [r7, #68]	; 0x44
 8002f62:	e009      	b.n	8002f78 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2210      	movs	r2, #16
 8002f68:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f70:	4618      	mov	r0, r3
 8002f72:	f001 fec7 	bl	8004d04 <SDMMC_CmdWriteSingleBlock>
 8002f76:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d012      	beq.n	8002fa4 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a7d      	ldr	r2, [pc, #500]	; (8003178 <HAL_SD_WriteBlocks+0x314>)
 8002f84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0fd      	b.n	80031a0 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002fa8:	e065      	b.n	8003076 <HAL_SD_WriteBlocks+0x212>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d040      	beq.n	800303a <HAL_SD_WriteBlocks+0x1d6>
 8002fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d03d      	beq.n	800303a <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	643b      	str	r3, [r7, #64]	; 0x40
 8002fc2:	e037      	b.n	8003034 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8002fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fcc:	3301      	adds	r3, #1
 8002fce:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8002fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	021a      	lsls	r2, r3, #8
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fea:	3b01      	subs	r3, #1
 8002fec:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	041a      	lsls	r2, r3, #16
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003002:	3b01      	subs	r3, #1
 8003004:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	061a      	lsls	r2, r3, #24
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	4313      	orrs	r3, r2
 8003010:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003014:	3301      	adds	r3, #1
 8003016:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800301a:	3b01      	subs	r3, #1
 800301c:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f107 0214 	add.w	r2, r7, #20
 8003026:	4611      	mov	r1, r2
 8003028:	4618      	mov	r0, r3
 800302a:	f001 fd61 	bl	8004af0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800302e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003030:	3301      	adds	r3, #1
 8003032:	643b      	str	r3, [r7, #64]	; 0x40
 8003034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003036:	2b07      	cmp	r3, #7
 8003038:	d9c4      	bls.n	8002fc4 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800303a:	f7fd faab 	bl	8000594 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003046:	429a      	cmp	r2, r3
 8003048:	d902      	bls.n	8003050 <HAL_SD_WriteBlocks+0x1ec>
 800304a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800304c:	2b00      	cmp	r3, #0
 800304e:	d112      	bne.n	8003076 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a48      	ldr	r2, [pc, #288]	; (8003178 <HAL_SD_WriteBlocks+0x314>)
 8003056:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800305c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800305e:	431a      	orrs	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e094      	b.n	80031a0 <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800307c:	f240 331a 	movw	r3, #794	; 0x31a
 8003080:	4013      	ands	r3, r2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d091      	beq.n	8002faa <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800308c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003090:	2b00      	cmp	r3, #0
 8003092:	d022      	beq.n	80030da <HAL_SD_WriteBlocks+0x276>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d91f      	bls.n	80030da <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	2b03      	cmp	r3, #3
 80030a0:	d01b      	beq.n	80030da <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f001 fe70 	bl	8004d8c <SDMMC_CmdStopTransfer>
 80030ac:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80030ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d012      	beq.n	80030da <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a2f      	ldr	r2, [pc, #188]	; (8003178 <HAL_SD_WriteBlocks+0x314>)
 80030ba:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030c2:	431a      	orrs	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e062      	b.n	80031a0 <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d012      	beq.n	800310e <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a22      	ldr	r2, [pc, #136]	; (8003178 <HAL_SD_WriteBlocks+0x314>)
 80030ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f4:	f043 0208 	orr.w	r2, r3, #8
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e048      	b.n	80031a0 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d012      	beq.n	8003142 <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a15      	ldr	r2, [pc, #84]	; (8003178 <HAL_SD_WriteBlocks+0x314>)
 8003122:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003128:	f043 0202 	orr.w	r2, r3, #2
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e02e      	b.n	80031a0 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003148:	f003 0310 	and.w	r3, r3, #16
 800314c:	2b00      	cmp	r3, #0
 800314e:	d015      	beq.n	800317c <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a08      	ldr	r2, [pc, #32]	; (8003178 <HAL_SD_WriteBlocks+0x314>)
 8003156:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315c:	f043 0210 	orr.w	r2, r3, #16
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e014      	b.n	80031a0 <HAL_SD_WriteBlocks+0x33c>
 8003176:	bf00      	nop
 8003178:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f240 523a 	movw	r2, #1338	; 0x53a
 8003184:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800318e:	2300      	movs	r3, #0
 8003190:	e006      	b.n	80031a0 <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003196:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
  }
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3748      	adds	r7, #72	; 0x48
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031b6:	0f9b      	lsrs	r3, r3, #30
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031c2:	0e9b      	lsrs	r3, r3, #26
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031d4:	0e1b      	lsrs	r3, r3, #24
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	f003 0303 	and.w	r3, r3, #3
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031e6:	0c1b      	lsrs	r3, r3, #16
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031f2:	0a1b      	lsrs	r3, r3, #8
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031fe:	b2da      	uxtb	r2, r3
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003208:	0d1b      	lsrs	r3, r3, #20
 800320a:	b29a      	uxth	r2, r3
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003214:	0c1b      	lsrs	r3, r3, #16
 8003216:	b2db      	uxtb	r3, r3
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	b2da      	uxtb	r2, r3
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003226:	0bdb      	lsrs	r3, r3, #15
 8003228:	b2db      	uxtb	r3, r3
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	b2da      	uxtb	r2, r3
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003238:	0b9b      	lsrs	r3, r3, #14
 800323a:	b2db      	uxtb	r3, r3
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	b2da      	uxtb	r2, r3
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800324a:	0b5b      	lsrs	r3, r3, #13
 800324c:	b2db      	uxtb	r3, r3
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	b2da      	uxtb	r2, r3
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800325c:	0b1b      	lsrs	r3, r3, #12
 800325e:	b2db      	uxtb	r3, r3
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	b2da      	uxtb	r2, r3
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2200      	movs	r2, #0
 800326e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003274:	2b00      	cmp	r3, #0
 8003276:	d163      	bne.n	8003340 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800327c:	009a      	lsls	r2, r3, #2
 800327e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003282:	4013      	ands	r3, r2
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003288:	0f92      	lsrs	r2, r2, #30
 800328a:	431a      	orrs	r2, r3
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003294:	0edb      	lsrs	r3, r3, #27
 8003296:	b2db      	uxtb	r3, r3
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	b2da      	uxtb	r2, r3
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032a6:	0e1b      	lsrs	r3, r3, #24
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032b8:	0d5b      	lsrs	r3, r3, #21
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ca:	0c9b      	lsrs	r3, r3, #18
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032dc:	0bdb      	lsrs	r3, r3, #15
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	7e1b      	ldrb	r3, [r3, #24]
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	3302      	adds	r3, #2
 8003300:	2201      	movs	r2, #1
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800330a:	fb02 f203 	mul.w	r2, r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	7a1b      	ldrb	r3, [r3, #8]
 8003316:	b2db      	uxtb	r3, r3
 8003318:	f003 030f 	and.w	r3, r3, #15
 800331c:	2201      	movs	r2, #1
 800331e:	409a      	lsls	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800332c:	0a52      	lsrs	r2, r2, #9
 800332e:	fb02 f203 	mul.w	r2, r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800333c:	661a      	str	r2, [r3, #96]	; 0x60
 800333e:	e031      	b.n	80033a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003344:	2b01      	cmp	r3, #1
 8003346:	d11d      	bne.n	8003384 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800334c:	041b      	lsls	r3, r3, #16
 800334e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003356:	0c1b      	lsrs	r3, r3, #16
 8003358:	431a      	orrs	r2, r3
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	3301      	adds	r3, #1
 8003364:	029a      	lsls	r2, r3, #10
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003378:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	661a      	str	r2, [r3, #96]	; 0x60
 8003382:	e00f      	b.n	80033a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a58      	ldr	r2, [pc, #352]	; (80034ec <HAL_SD_GetCardCSD+0x344>)
 800338a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003390:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e09d      	b.n	80034e0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033a8:	0b9b      	lsrs	r3, r3, #14
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ba:	09db      	lsrs	r3, r3, #7
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033dc:	0fdb      	lsrs	r3, r3, #31
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e8:	0f5b      	lsrs	r3, r3, #29
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fa:	0e9b      	lsrs	r3, r3, #26
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	b2da      	uxtb	r2, r3
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340c:	0d9b      	lsrs	r3, r3, #22
 800340e:	b2db      	uxtb	r3, r3
 8003410:	f003 030f 	and.w	r3, r3, #15
 8003414:	b2da      	uxtb	r2, r3
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341e:	0d5b      	lsrs	r3, r3, #21
 8003420:	b2db      	uxtb	r3, r3
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	b2da      	uxtb	r2, r3
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343a:	0c1b      	lsrs	r3, r3, #16
 800343c:	b2db      	uxtb	r3, r3
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	b2da      	uxtb	r2, r3
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344e:	0bdb      	lsrs	r3, r3, #15
 8003450:	b2db      	uxtb	r3, r3
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	b2da      	uxtb	r2, r3
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003462:	0b9b      	lsrs	r3, r3, #14
 8003464:	b2db      	uxtb	r3, r3
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	b2da      	uxtb	r2, r3
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003476:	0b5b      	lsrs	r3, r3, #13
 8003478:	b2db      	uxtb	r3, r3
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	b2da      	uxtb	r2, r3
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348a:	0b1b      	lsrs	r3, r3, #12
 800348c:	b2db      	uxtb	r3, r3
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	b2da      	uxtb	r2, r3
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349e:	0a9b      	lsrs	r3, r3, #10
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b2:	0a1b      	lsrs	r3, r3, #8
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c6:	085b      	lsrs	r3, r3, #1
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	004005ff 	.word	0x004005ff

080034f0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003548:	b5b0      	push	{r4, r5, r7, lr}
 800354a:	b08e      	sub	sp, #56	; 0x38
 800354c:	af04      	add	r7, sp, #16
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2203      	movs	r2, #3
 8003556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355e:	2b03      	cmp	r3, #3
 8003560:	d02e      	beq.n	80035c0 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003568:	d106      	bne.n	8003578 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	639a      	str	r2, [r3, #56]	; 0x38
 8003576:	e029      	b.n	80035cc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800357e:	d10a      	bne.n	8003596 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 fa01 	bl	8003988 <SD_WideBus_Enable>
 8003586:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	639a      	str	r2, [r3, #56]	; 0x38
 8003594:	e01a      	b.n	80035cc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10a      	bne.n	80035b2 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 fa3e 	bl	8003a1e <SD_WideBus_Disable>
 80035a2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	639a      	str	r2, [r3, #56]	; 0x38
 80035b0:	e00c      	b.n	80035cc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	639a      	str	r2, [r3, #56]	; 0x38
 80035be:	e005      	b.n	80035cc <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d009      	beq.n	80035e8 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a18      	ldr	r2, [pc, #96]	; (800363c <HAL_SD_ConfigWideBusOperation+0xf4>)
 80035da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e024      	b.n	8003632 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681d      	ldr	r5, [r3, #0]
 800360e:	466c      	mov	r4, sp
 8003610:	f107 0318 	add.w	r3, r7, #24
 8003614:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003618:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800361c:	f107 030c 	add.w	r3, r7, #12
 8003620:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003622:	4628      	mov	r0, r5
 8003624:	f001 fa2c 	bl	8004a80 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3728      	adds	r7, #40	; 0x28
 8003636:	46bd      	mov	sp, r7
 8003638:	bdb0      	pop	{r4, r5, r7, pc}
 800363a:	bf00      	nop
 800363c:	004005ff 	.word	0x004005ff

08003640 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003648:	2300      	movs	r3, #0
 800364a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800364c:	f107 030c 	add.w	r3, r7, #12
 8003650:	4619      	mov	r1, r3
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f970 	bl	8003938 <SD_SendStatus>
 8003658:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	431a      	orrs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	0a5b      	lsrs	r3, r3, #9
 8003670:	f003 030f 	and.w	r3, r3, #15
 8003674:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003676:	693b      	ldr	r3, [r7, #16]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003680:	b5b0      	push	{r4, r5, r7, lr}
 8003682:	b094      	sub	sp, #80	; 0x50
 8003684:	af04      	add	r7, sp, #16
 8003686:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003688:	2301      	movs	r3, #1
 800368a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f001 fa4d 	bl	8004b30 <SDIO_GetPowerState>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d102      	bne.n	80036a2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800369c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80036a0:	e0b7      	b.n	8003812 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	d02f      	beq.n	800370a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f001 fc76 	bl	8004fa0 <SDMMC_CmdSendCID>
 80036b4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80036b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <SD_InitCard+0x40>
    {
      return errorstate;
 80036bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036be:	e0a8      	b.n	8003812 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2100      	movs	r1, #0
 80036c6:	4618      	mov	r0, r3
 80036c8:	f001 fa77 	bl	8004bba <SDIO_GetResponse>
 80036cc:	4602      	mov	r2, r0
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2104      	movs	r1, #4
 80036d8:	4618      	mov	r0, r3
 80036da:	f001 fa6e 	bl	8004bba <SDIO_GetResponse>
 80036de:	4602      	mov	r2, r0
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2108      	movs	r1, #8
 80036ea:	4618      	mov	r0, r3
 80036ec:	f001 fa65 	bl	8004bba <SDIO_GetResponse>
 80036f0:	4602      	mov	r2, r0
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	210c      	movs	r1, #12
 80036fc:	4618      	mov	r0, r3
 80036fe:	f001 fa5c 	bl	8004bba <SDIO_GetResponse>
 8003702:	4602      	mov	r2, r0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370e:	2b03      	cmp	r3, #3
 8003710:	d00d      	beq.n	800372e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f107 020e 	add.w	r2, r7, #14
 800371a:	4611      	mov	r1, r2
 800371c:	4618      	mov	r0, r3
 800371e:	f001 fc7c 	bl	800501a <SDMMC_CmdSetRelAdd>
 8003722:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <SD_InitCard+0xae>
    {
      return errorstate;
 800372a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800372c:	e071      	b.n	8003812 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003732:	2b03      	cmp	r3, #3
 8003734:	d036      	beq.n	80037a4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003736:	89fb      	ldrh	r3, [r7, #14]
 8003738:	461a      	mov	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003746:	041b      	lsls	r3, r3, #16
 8003748:	4619      	mov	r1, r3
 800374a:	4610      	mov	r0, r2
 800374c:	f001 fc46 	bl	8004fdc <SDMMC_CmdSendCSD>
 8003750:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <SD_InitCard+0xdc>
    {
      return errorstate;
 8003758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800375a:	e05a      	b.n	8003812 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2100      	movs	r1, #0
 8003762:	4618      	mov	r0, r3
 8003764:	f001 fa29 	bl	8004bba <SDIO_GetResponse>
 8003768:	4602      	mov	r2, r0
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2104      	movs	r1, #4
 8003774:	4618      	mov	r0, r3
 8003776:	f001 fa20 	bl	8004bba <SDIO_GetResponse>
 800377a:	4602      	mov	r2, r0
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2108      	movs	r1, #8
 8003786:	4618      	mov	r0, r3
 8003788:	f001 fa17 	bl	8004bba <SDIO_GetResponse>
 800378c:	4602      	mov	r2, r0
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	210c      	movs	r1, #12
 8003798:	4618      	mov	r0, r3
 800379a:	f001 fa0e 	bl	8004bba <SDIO_GetResponse>
 800379e:	4602      	mov	r2, r0
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2104      	movs	r1, #4
 80037aa:	4618      	mov	r0, r3
 80037ac:	f001 fa05 	bl	8004bba <SDIO_GetResponse>
 80037b0:	4603      	mov	r3, r0
 80037b2:	0d1a      	lsrs	r2, r3, #20
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80037b8:	f107 0310 	add.w	r3, r7, #16
 80037bc:	4619      	mov	r1, r3
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7ff fcf2 	bl	80031a8 <HAL_SD_GetCardCSD>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d002      	beq.n	80037d0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80037ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80037ce:	e020      	b.n	8003812 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6819      	ldr	r1, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d8:	041b      	lsls	r3, r3, #16
 80037da:	f04f 0400 	mov.w	r4, #0
 80037de:	461a      	mov	r2, r3
 80037e0:	4623      	mov	r3, r4
 80037e2:	4608      	mov	r0, r1
 80037e4:	f001 faf4 	bl	8004dd0 <SDMMC_CmdSelDesel>
 80037e8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80037ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <SD_InitCard+0x174>
  {
    return errorstate;
 80037f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037f2:	e00e      	b.n	8003812 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681d      	ldr	r5, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	466c      	mov	r4, sp
 80037fc:	f103 0210 	add.w	r2, r3, #16
 8003800:	ca07      	ldmia	r2, {r0, r1, r2}
 8003802:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003806:	3304      	adds	r3, #4
 8003808:	cb0e      	ldmia	r3, {r1, r2, r3}
 800380a:	4628      	mov	r0, r5
 800380c:	f001 f938 	bl	8004a80 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3740      	adds	r7, #64	; 0x40
 8003816:	46bd      	mov	sp, r7
 8003818:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800381c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003828:	2300      	movs	r3, #0
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	2300      	movs	r3, #0
 800382e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f001 faee 	bl	8004e16 <SDMMC_CmdGoIdleState>
 800383a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	e072      	b.n	800392c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f001 fb01 	bl	8004e52 <SDMMC_CmdOperCond>
 8003850:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00d      	beq.n	8003874 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f001 fad7 	bl	8004e16 <SDMMC_CmdGoIdleState>
 8003868:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d004      	beq.n	800387a <SD_PowerON+0x5e>
    {
      return errorstate;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	e05b      	b.n	800392c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800387e:	2b01      	cmp	r3, #1
 8003880:	d137      	bne.n	80038f2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2100      	movs	r1, #0
 8003888:	4618      	mov	r0, r3
 800388a:	f001 fb01 	bl	8004e90 <SDMMC_CmdAppCommand>
 800388e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d02d      	beq.n	80038f2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003896:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800389a:	e047      	b.n	800392c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2100      	movs	r1, #0
 80038a2:	4618      	mov	r0, r3
 80038a4:	f001 faf4 	bl	8004e90 <SDMMC_CmdAppCommand>
 80038a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <SD_PowerON+0x98>
    {
      return errorstate;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	e03b      	b.n	800392c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	491e      	ldr	r1, [pc, #120]	; (8003934 <SD_PowerON+0x118>)
 80038ba:	4618      	mov	r0, r3
 80038bc:	f001 fb0a 	bl	8004ed4 <SDMMC_CmdAppOperCommand>
 80038c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80038c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80038cc:	e02e      	b.n	800392c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2100      	movs	r1, #0
 80038d4:	4618      	mov	r0, r3
 80038d6:	f001 f970 	bl	8004bba <SDIO_GetResponse>
 80038da:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	0fdb      	lsrs	r3, r3, #31
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d101      	bne.n	80038e8 <SD_PowerON+0xcc>
 80038e4:	2301      	movs	r3, #1
 80038e6:	e000      	b.n	80038ea <SD_PowerON+0xce>
 80038e8:	2300      	movs	r3, #0
 80038ea:	613b      	str	r3, [r7, #16]

    count++;
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	3301      	adds	r3, #1
 80038f0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d802      	bhi.n	8003902 <SD_PowerON+0xe6>
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0cc      	beq.n	800389c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003908:	4293      	cmp	r3, r2
 800390a:	d902      	bls.n	8003912 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800390c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003910:	e00c      	b.n	800392c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	645a      	str	r2, [r3, #68]	; 0x44
 8003922:	e002      	b.n	800392a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3718      	adds	r7, #24
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	c1100000 	.word	0xc1100000

08003938 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d102      	bne.n	800394e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003948:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800394c:	e018      	b.n	8003980 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003956:	041b      	lsls	r3, r3, #16
 8003958:	4619      	mov	r1, r3
 800395a:	4610      	mov	r0, r2
 800395c:	f001 fb7e 	bl	800505c <SDMMC_CmdSendStatus>
 8003960:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <SD_SendStatus+0x34>
  {
    return errorstate;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	e009      	b.n	8003980 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2100      	movs	r1, #0
 8003972:	4618      	mov	r0, r3
 8003974:	f001 f921 	bl	8004bba <SDIO_GetResponse>
 8003978:	4602      	mov	r2, r0
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	2300      	movs	r3, #0
 8003996:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2100      	movs	r1, #0
 800399e:	4618      	mov	r0, r3
 80039a0:	f001 f90b 	bl	8004bba <SDIO_GetResponse>
 80039a4:	4603      	mov	r3, r0
 80039a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039ae:	d102      	bne.n	80039b6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80039b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039b4:	e02f      	b.n	8003a16 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80039b6:	f107 030c 	add.w	r3, r7, #12
 80039ba:	4619      	mov	r1, r3
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 f879 	bl	8003ab4 <SD_FindSCR>
 80039c2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	e023      	b.n	8003a16 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d01c      	beq.n	8003a12 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e0:	041b      	lsls	r3, r3, #16
 80039e2:	4619      	mov	r1, r3
 80039e4:	4610      	mov	r0, r2
 80039e6:	f001 fa53 	bl	8004e90 <SDMMC_CmdAppCommand>
 80039ea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	e00f      	b.n	8003a16 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2102      	movs	r1, #2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f001 fa8c 	bl	8004f1a <SDMMC_CmdBusWidth>
 8003a02:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	e003      	b.n	8003a16 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	e001      	b.n	8003a16 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003a12:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b086      	sub	sp, #24
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003a26:	2300      	movs	r3, #0
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2100      	movs	r1, #0
 8003a34:	4618      	mov	r0, r3
 8003a36:	f001 f8c0 	bl	8004bba <SDIO_GetResponse>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a44:	d102      	bne.n	8003a4c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003a46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a4a:	e02f      	b.n	8003aac <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003a4c:	f107 030c 	add.w	r3, r7, #12
 8003a50:	4619      	mov	r1, r3
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f82e 	bl	8003ab4 <SD_FindSCR>
 8003a58:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	e023      	b.n	8003aac <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d01c      	beq.n	8003aa8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a76:	041b      	lsls	r3, r3, #16
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4610      	mov	r0, r2
 8003a7c:	f001 fa08 	bl	8004e90 <SDMMC_CmdAppCommand>
 8003a80:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	e00f      	b.n	8003aac <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2100      	movs	r1, #0
 8003a92:	4618      	mov	r0, r3
 8003a94:	f001 fa41 	bl	8004f1a <SDMMC_CmdBusWidth>
 8003a98:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	e003      	b.n	8003aac <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	e001      	b.n	8003aac <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003aa8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003ab4:	b590      	push	{r4, r7, lr}
 8003ab6:	b08f      	sub	sp, #60	; 0x3c
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003abe:	f7fc fd69 	bl	8000594 <HAL_GetTick>
 8003ac2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60bb      	str	r3, [r7, #8]
 8003acc:	2300      	movs	r3, #0
 8003ace:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2108      	movs	r1, #8
 8003ada:	4618      	mov	r0, r3
 8003adc:	f001 f8ac 	bl	8004c38 <SDMMC_CmdBlockLength>
 8003ae0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <SD_FindSCR+0x38>
  {
    return errorstate;
 8003ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aea:	e0a9      	b.n	8003c40 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af4:	041b      	lsls	r3, r3, #16
 8003af6:	4619      	mov	r1, r3
 8003af8:	4610      	mov	r0, r2
 8003afa:	f001 f9c9 	bl	8004e90 <SDMMC_CmdAppCommand>
 8003afe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <SD_FindSCR+0x56>
  {
    return errorstate;
 8003b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b08:	e09a      	b.n	8003c40 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003b0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b0e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003b10:	2308      	movs	r3, #8
 8003b12:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003b14:	2330      	movs	r3, #48	; 0x30
 8003b16:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003b18:	2302      	movs	r3, #2
 8003b1a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003b20:	2301      	movs	r3, #1
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f107 0210 	add.w	r2, r7, #16
 8003b2c:	4611      	mov	r1, r2
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f001 f856 	bl	8004be0 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f001 fa10 	bl	8004f5e <SDMMC_CmdSendSCR>
 8003b3e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d022      	beq.n	8003b8c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8003b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b48:	e07a      	b.n	8003c40 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00e      	beq.n	8003b76 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6819      	ldr	r1, [r3, #0]
 8003b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	f107 0208 	add.w	r2, r7, #8
 8003b64:	18d4      	adds	r4, r2, r3
 8003b66:	4608      	mov	r0, r1
 8003b68:	f000 ffb5 	bl	8004ad6 <SDIO_ReadFIFO>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	6023      	str	r3, [r4, #0]
      index++;
 8003b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b72:	3301      	adds	r3, #1
 8003b74:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003b76:	f7fc fd0d 	bl	8000594 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b84:	d102      	bne.n	8003b8c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003b86:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003b8a:	e059      	b.n	8003c40 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b92:	f240 432a 	movw	r3, #1066	; 0x42a
 8003b96:	4013      	ands	r3, r2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0d6      	beq.n	8003b4a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d005      	beq.n	8003bb6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2208      	movs	r2, #8
 8003bb0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003bb2:	2308      	movs	r3, #8
 8003bb4:	e044      	b.n	8003c40 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d005      	beq.n	8003bd0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2202      	movs	r2, #2
 8003bca:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e037      	b.n	8003c40 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd6:	f003 0320 	and.w	r3, r3, #32
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d005      	beq.n	8003bea <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2220      	movs	r2, #32
 8003be4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003be6:	2320      	movs	r3, #32
 8003be8:	e02a      	b.n	8003c40 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f240 523a 	movw	r2, #1338	; 0x53a
 8003bf2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	061a      	lsls	r2, r3, #24
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	021b      	lsls	r3, r3, #8
 8003bfc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c00:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	0a1b      	lsrs	r3, r3, #8
 8003c06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003c0a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	0e1b      	lsrs	r3, r3, #24
 8003c10:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c14:	601a      	str	r2, [r3, #0]
    scr++;
 8003c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c18:	3304      	adds	r3, #4
 8003c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	061a      	lsls	r2, r3, #24
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	021b      	lsls	r3, r3, #8
 8003c24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c28:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	0a1b      	lsrs	r3, r3, #8
 8003c2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003c32:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	0e1b      	lsrs	r3, r3, #24
 8003c38:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	373c      	adds	r7, #60	; 0x3c
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd90      	pop	{r4, r7, pc}

08003c48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e01d      	b.n	8003c96 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d106      	bne.n	8003c74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f004 fde6 	bl	8008840 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3304      	adds	r3, #4
 8003c84:	4619      	mov	r1, r3
 8003c86:	4610      	mov	r0, r2
 8003c88:	f000 fb6e 	bl	8004368 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b082      	sub	sp, #8
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e01d      	b.n	8003cec <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d106      	bne.n	8003cca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f815 	bl	8003cf4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2202      	movs	r2, #2
 8003cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4610      	mov	r0, r2
 8003cde:	f000 fb43 	bl	8004368 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
 8003d14:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d101      	bne.n	8003d26 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8003d22:	2302      	movs	r3, #2
 8003d24:	e0f3      	b.n	8003f0e <HAL_TIM_PWM_Start_DMA+0x206>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d10b      	bne.n	8003d4a <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d104      	bne.n	8003d42 <HAL_TIM_PWM_Start_DMA+0x3a>
 8003d38:	887b      	ldrh	r3, [r7, #2]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e0e5      	b.n	8003f0e <HAL_TIM_PWM_Start_DMA+0x206>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2202      	movs	r2, #2
 8003d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2b0c      	cmp	r3, #12
 8003d4e:	f200 80ad 	bhi.w	8003eac <HAL_TIM_PWM_Start_DMA+0x1a4>
 8003d52:	a201      	add	r2, pc, #4	; (adr r2, 8003d58 <HAL_TIM_PWM_Start_DMA+0x50>)
 8003d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d58:	08003d8d 	.word	0x08003d8d
 8003d5c:	08003ead 	.word	0x08003ead
 8003d60:	08003ead 	.word	0x08003ead
 8003d64:	08003ead 	.word	0x08003ead
 8003d68:	08003dd5 	.word	0x08003dd5
 8003d6c:	08003ead 	.word	0x08003ead
 8003d70:	08003ead 	.word	0x08003ead
 8003d74:	08003ead 	.word	0x08003ead
 8003d78:	08003e1d 	.word	0x08003e1d
 8003d7c:	08003ead 	.word	0x08003ead
 8003d80:	08003ead 	.word	0x08003ead
 8003d84:	08003ead 	.word	0x08003ead
 8003d88:	08003e65 	.word	0x08003e65
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	4a61      	ldr	r2, [pc, #388]	; (8003f18 <HAL_TIM_PWM_Start_DMA+0x210>)
 8003d92:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	4a60      	ldr	r2, [pc, #384]	; (8003f1c <HAL_TIM_PWM_Start_DMA+0x214>)
 8003d9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	4a5f      	ldr	r2, [pc, #380]	; (8003f20 <HAL_TIM_PWM_Start_DMA+0x218>)
 8003da2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003da8:	6879      	ldr	r1, [r7, #4]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3334      	adds	r3, #52	; 0x34
 8003db0:	461a      	mov	r2, r3
 8003db2:	887b      	ldrh	r3, [r7, #2]
 8003db4:	f7fc fddc 	bl	8000970 <HAL_DMA_Start_IT>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e0a5      	b.n	8003f0e <HAL_TIM_PWM_Start_DMA+0x206>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68da      	ldr	r2, [r3, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dd0:	60da      	str	r2, [r3, #12]
      break;
 8003dd2:	e06c      	b.n	8003eae <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd8:	4a4f      	ldr	r2, [pc, #316]	; (8003f18 <HAL_TIM_PWM_Start_DMA+0x210>)
 8003dda:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de0:	4a4e      	ldr	r2, [pc, #312]	; (8003f1c <HAL_TIM_PWM_Start_DMA+0x214>)
 8003de2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de8:	4a4d      	ldr	r2, [pc, #308]	; (8003f20 <HAL_TIM_PWM_Start_DMA+0x218>)
 8003dea:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3338      	adds	r3, #56	; 0x38
 8003df8:	461a      	mov	r2, r3
 8003dfa:	887b      	ldrh	r3, [r7, #2]
 8003dfc:	f7fc fdb8 	bl	8000970 <HAL_DMA_Start_IT>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e081      	b.n	8003f0e <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68da      	ldr	r2, [r3, #12]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e18:	60da      	str	r2, [r3, #12]
      break;
 8003e1a:	e048      	b.n	8003eae <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e20:	4a3d      	ldr	r2, [pc, #244]	; (8003f18 <HAL_TIM_PWM_Start_DMA+0x210>)
 8003e22:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	4a3c      	ldr	r2, [pc, #240]	; (8003f1c <HAL_TIM_PWM_Start_DMA+0x214>)
 8003e2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e30:	4a3b      	ldr	r2, [pc, #236]	; (8003f20 <HAL_TIM_PWM_Start_DMA+0x218>)
 8003e32:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	333c      	adds	r3, #60	; 0x3c
 8003e40:	461a      	mov	r2, r3
 8003e42:	887b      	ldrh	r3, [r7, #2]
 8003e44:	f7fc fd94 	bl	8000970 <HAL_DMA_Start_IT>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e05d      	b.n	8003f0e <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68da      	ldr	r2, [r3, #12]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e60:	60da      	str	r2, [r3, #12]
      break;
 8003e62:	e024      	b.n	8003eae <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e68:	4a2b      	ldr	r2, [pc, #172]	; (8003f18 <HAL_TIM_PWM_Start_DMA+0x210>)
 8003e6a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e70:	4a2a      	ldr	r2, [pc, #168]	; (8003f1c <HAL_TIM_PWM_Start_DMA+0x214>)
 8003e72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e78:	4a29      	ldr	r2, [pc, #164]	; (8003f20 <HAL_TIM_PWM_Start_DMA+0x218>)
 8003e7a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	3340      	adds	r3, #64	; 0x40
 8003e88:	461a      	mov	r2, r3
 8003e8a:	887b      	ldrh	r3, [r7, #2]
 8003e8c:	f7fc fd70 	bl	8000970 <HAL_DMA_Start_IT>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e039      	b.n	8003f0e <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68da      	ldr	r2, [r3, #12]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ea8:	60da      	str	r2, [r3, #12]
      break;
 8003eaa:	e000      	b.n	8003eae <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 8003eac:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	68b9      	ldr	r1, [r7, #8]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 fd40 	bl	800493c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a18      	ldr	r2, [pc, #96]	; (8003f24 <HAL_TIM_PWM_Start_DMA+0x21c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d004      	beq.n	8003ed0 <HAL_TIM_PWM_Start_DMA+0x1c8>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a17      	ldr	r2, [pc, #92]	; (8003f28 <HAL_TIM_PWM_Start_DMA+0x220>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d101      	bne.n	8003ed4 <HAL_TIM_PWM_Start_DMA+0x1cc>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e000      	b.n	8003ed6 <HAL_TIM_PWM_Start_DMA+0x1ce>
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d007      	beq.n	8003eea <HAL_TIM_PWM_Start_DMA+0x1e2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ee8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2b06      	cmp	r3, #6
 8003efa:	d007      	beq.n	8003f0c <HAL_TIM_PWM_Start_DMA+0x204>
  {
    __HAL_TIM_ENABLE(htim);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0201 	orr.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	08004287 	.word	0x08004287
 8003f1c:	080042f7 	.word	0x080042f7
 8003f20:	08004263 	.word	0x08004263
 8003f24:	40010000 	.word	0x40010000
 8003f28:	40010400 	.word	0x40010400

08003f2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003f42:	2302      	movs	r3, #2
 8003f44:	e0b4      	b.n	80040b0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2202      	movs	r2, #2
 8003f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b0c      	cmp	r3, #12
 8003f5a:	f200 809f 	bhi.w	800409c <HAL_TIM_PWM_ConfigChannel+0x170>
 8003f5e:	a201      	add	r2, pc, #4	; (adr r2, 8003f64 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f64:	08003f99 	.word	0x08003f99
 8003f68:	0800409d 	.word	0x0800409d
 8003f6c:	0800409d 	.word	0x0800409d
 8003f70:	0800409d 	.word	0x0800409d
 8003f74:	08003fd9 	.word	0x08003fd9
 8003f78:	0800409d 	.word	0x0800409d
 8003f7c:	0800409d 	.word	0x0800409d
 8003f80:	0800409d 	.word	0x0800409d
 8003f84:	0800401b 	.word	0x0800401b
 8003f88:	0800409d 	.word	0x0800409d
 8003f8c:	0800409d 	.word	0x0800409d
 8003f90:	0800409d 	.word	0x0800409d
 8003f94:	0800405b 	.word	0x0800405b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68b9      	ldr	r1, [r7, #8]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 fa82 	bl	80044a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699a      	ldr	r2, [r3, #24]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0208 	orr.w	r2, r2, #8
 8003fb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699a      	ldr	r2, [r3, #24]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0204 	bic.w	r2, r2, #4
 8003fc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6999      	ldr	r1, [r3, #24]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	691a      	ldr	r2, [r3, #16]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	619a      	str	r2, [r3, #24]
      break;
 8003fd6:	e062      	b.n	800409e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68b9      	ldr	r1, [r7, #8]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fad2 	bl	8004588 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699a      	ldr	r2, [r3, #24]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ff2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699a      	ldr	r2, [r3, #24]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6999      	ldr	r1, [r3, #24]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	021a      	lsls	r2, r3, #8
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	619a      	str	r2, [r3, #24]
      break;
 8004018:	e041      	b.n	800409e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68b9      	ldr	r1, [r7, #8]
 8004020:	4618      	mov	r0, r3
 8004022:	f000 fb27 	bl	8004674 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	69da      	ldr	r2, [r3, #28]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f042 0208 	orr.w	r2, r2, #8
 8004034:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	69da      	ldr	r2, [r3, #28]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0204 	bic.w	r2, r2, #4
 8004044:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	69d9      	ldr	r1, [r3, #28]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	691a      	ldr	r2, [r3, #16]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	61da      	str	r2, [r3, #28]
      break;
 8004058:	e021      	b.n	800409e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68b9      	ldr	r1, [r7, #8]
 8004060:	4618      	mov	r0, r3
 8004062:	f000 fb7b 	bl	800475c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	69da      	ldr	r2, [r3, #28]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004074:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69da      	ldr	r2, [r3, #28]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004084:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	69d9      	ldr	r1, [r3, #28]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	021a      	lsls	r2, r3, #8
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	61da      	str	r2, [r3, #28]
      break;
 800409a:	e000      	b.n	800409e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800409c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d101      	bne.n	80040d0 <HAL_TIM_ConfigClockSource+0x18>
 80040cc:	2302      	movs	r3, #2
 80040ce:	e0a6      	b.n	800421e <HAL_TIM_ConfigClockSource+0x166>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b40      	cmp	r3, #64	; 0x40
 8004106:	d067      	beq.n	80041d8 <HAL_TIM_ConfigClockSource+0x120>
 8004108:	2b40      	cmp	r3, #64	; 0x40
 800410a:	d80b      	bhi.n	8004124 <HAL_TIM_ConfigClockSource+0x6c>
 800410c:	2b10      	cmp	r3, #16
 800410e:	d073      	beq.n	80041f8 <HAL_TIM_ConfigClockSource+0x140>
 8004110:	2b10      	cmp	r3, #16
 8004112:	d802      	bhi.n	800411a <HAL_TIM_ConfigClockSource+0x62>
 8004114:	2b00      	cmp	r3, #0
 8004116:	d06f      	beq.n	80041f8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004118:	e078      	b.n	800420c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800411a:	2b20      	cmp	r3, #32
 800411c:	d06c      	beq.n	80041f8 <HAL_TIM_ConfigClockSource+0x140>
 800411e:	2b30      	cmp	r3, #48	; 0x30
 8004120:	d06a      	beq.n	80041f8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004122:	e073      	b.n	800420c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004124:	2b70      	cmp	r3, #112	; 0x70
 8004126:	d00d      	beq.n	8004144 <HAL_TIM_ConfigClockSource+0x8c>
 8004128:	2b70      	cmp	r3, #112	; 0x70
 800412a:	d804      	bhi.n	8004136 <HAL_TIM_ConfigClockSource+0x7e>
 800412c:	2b50      	cmp	r3, #80	; 0x50
 800412e:	d033      	beq.n	8004198 <HAL_TIM_ConfigClockSource+0xe0>
 8004130:	2b60      	cmp	r3, #96	; 0x60
 8004132:	d041      	beq.n	80041b8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004134:	e06a      	b.n	800420c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800413a:	d066      	beq.n	800420a <HAL_TIM_ConfigClockSource+0x152>
 800413c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004140:	d017      	beq.n	8004172 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004142:	e063      	b.n	800420c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6818      	ldr	r0, [r3, #0]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	6899      	ldr	r1, [r3, #8]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f000 fbd2 	bl	80048fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004166:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	609a      	str	r2, [r3, #8]
      break;
 8004170:	e04c      	b.n	800420c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	6899      	ldr	r1, [r3, #8]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f000 fbbb 	bl	80048fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004194:	609a      	str	r2, [r3, #8]
      break;
 8004196:	e039      	b.n	800420c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6818      	ldr	r0, [r3, #0]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	6859      	ldr	r1, [r3, #4]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	461a      	mov	r2, r3
 80041a6:	f000 fb2f 	bl	8004808 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2150      	movs	r1, #80	; 0x50
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 fb88 	bl	80048c6 <TIM_ITRx_SetConfig>
      break;
 80041b6:	e029      	b.n	800420c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6818      	ldr	r0, [r3, #0]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	6859      	ldr	r1, [r3, #4]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	461a      	mov	r2, r3
 80041c6:	f000 fb4e 	bl	8004866 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2160      	movs	r1, #96	; 0x60
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 fb78 	bl	80048c6 <TIM_ITRx_SetConfig>
      break;
 80041d6:	e019      	b.n	800420c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6818      	ldr	r0, [r3, #0]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	6859      	ldr	r1, [r3, #4]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	461a      	mov	r2, r3
 80041e6:	f000 fb0f 	bl	8004808 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2140      	movs	r1, #64	; 0x40
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 fb68 	bl	80048c6 <TIM_ITRx_SetConfig>
      break;
 80041f6:	e009      	b.n	800420c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4619      	mov	r1, r3
 8004202:	4610      	mov	r0, r2
 8004204:	f000 fb5f 	bl	80048c6 <TIM_ITRx_SetConfig>
      break;
 8004208:	e000      	b.n	800420c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800420a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b084      	sub	sp, #16
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426e:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f7ff ffe8 	bl	800424e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 800427e:	bf00      	nop
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b084      	sub	sp, #16
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004292:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d103      	bne.n	80042ae <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2201      	movs	r2, #1
 80042aa:	771a      	strb	r2, [r3, #28]
 80042ac:	e019      	b.n	80042e2 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d103      	bne.n	80042c0 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2202      	movs	r2, #2
 80042bc:	771a      	strb	r2, [r3, #28]
 80042be:	e010      	b.n	80042e2 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d103      	bne.n	80042d2 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2204      	movs	r2, #4
 80042ce:	771a      	strb	r2, [r3, #28]
 80042d0:	e007      	b.n	80042e2 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d102      	bne.n	80042e2 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2208      	movs	r2, #8
 80042e0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f7ff ff9f 	bl	8004226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	771a      	strb	r2, [r3, #28]
}
 80042ee:	bf00      	nop
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b084      	sub	sp, #16
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004302:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	429a      	cmp	r2, r3
 8004314:	d103      	bne.n	800431e <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2201      	movs	r2, #1
 800431a:	771a      	strb	r2, [r3, #28]
 800431c:	e019      	b.n	8004352 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	429a      	cmp	r2, r3
 8004326:	d103      	bne.n	8004330 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2202      	movs	r2, #2
 800432c:	771a      	strb	r2, [r3, #28]
 800432e:	e010      	b.n	8004352 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	429a      	cmp	r2, r3
 8004338:	d103      	bne.n	8004342 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2204      	movs	r2, #4
 800433e:	771a      	strb	r2, [r3, #28]
 8004340:	e007      	b.n	8004352 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	429a      	cmp	r2, r3
 800434a:	d102      	bne.n	8004352 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2208      	movs	r2, #8
 8004350:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f7ff ff71 	bl	800423a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	771a      	strb	r2, [r3, #28]
}
 800435e:	bf00      	nop
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a40      	ldr	r2, [pc, #256]	; (800447c <TIM_Base_SetConfig+0x114>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d013      	beq.n	80043a8 <TIM_Base_SetConfig+0x40>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004386:	d00f      	beq.n	80043a8 <TIM_Base_SetConfig+0x40>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a3d      	ldr	r2, [pc, #244]	; (8004480 <TIM_Base_SetConfig+0x118>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d00b      	beq.n	80043a8 <TIM_Base_SetConfig+0x40>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a3c      	ldr	r2, [pc, #240]	; (8004484 <TIM_Base_SetConfig+0x11c>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d007      	beq.n	80043a8 <TIM_Base_SetConfig+0x40>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a3b      	ldr	r2, [pc, #236]	; (8004488 <TIM_Base_SetConfig+0x120>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d003      	beq.n	80043a8 <TIM_Base_SetConfig+0x40>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a3a      	ldr	r2, [pc, #232]	; (800448c <TIM_Base_SetConfig+0x124>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d108      	bne.n	80043ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a2f      	ldr	r2, [pc, #188]	; (800447c <TIM_Base_SetConfig+0x114>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d02b      	beq.n	800441a <TIM_Base_SetConfig+0xb2>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c8:	d027      	beq.n	800441a <TIM_Base_SetConfig+0xb2>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a2c      	ldr	r2, [pc, #176]	; (8004480 <TIM_Base_SetConfig+0x118>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d023      	beq.n	800441a <TIM_Base_SetConfig+0xb2>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a2b      	ldr	r2, [pc, #172]	; (8004484 <TIM_Base_SetConfig+0x11c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d01f      	beq.n	800441a <TIM_Base_SetConfig+0xb2>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a2a      	ldr	r2, [pc, #168]	; (8004488 <TIM_Base_SetConfig+0x120>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d01b      	beq.n	800441a <TIM_Base_SetConfig+0xb2>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a29      	ldr	r2, [pc, #164]	; (800448c <TIM_Base_SetConfig+0x124>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d017      	beq.n	800441a <TIM_Base_SetConfig+0xb2>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a28      	ldr	r2, [pc, #160]	; (8004490 <TIM_Base_SetConfig+0x128>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d013      	beq.n	800441a <TIM_Base_SetConfig+0xb2>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a27      	ldr	r2, [pc, #156]	; (8004494 <TIM_Base_SetConfig+0x12c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d00f      	beq.n	800441a <TIM_Base_SetConfig+0xb2>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a26      	ldr	r2, [pc, #152]	; (8004498 <TIM_Base_SetConfig+0x130>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d00b      	beq.n	800441a <TIM_Base_SetConfig+0xb2>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a25      	ldr	r2, [pc, #148]	; (800449c <TIM_Base_SetConfig+0x134>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d007      	beq.n	800441a <TIM_Base_SetConfig+0xb2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a24      	ldr	r2, [pc, #144]	; (80044a0 <TIM_Base_SetConfig+0x138>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d003      	beq.n	800441a <TIM_Base_SetConfig+0xb2>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a23      	ldr	r2, [pc, #140]	; (80044a4 <TIM_Base_SetConfig+0x13c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d108      	bne.n	800442c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	4313      	orrs	r3, r2
 800442a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a0a      	ldr	r2, [pc, #40]	; (800447c <TIM_Base_SetConfig+0x114>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d003      	beq.n	8004460 <TIM_Base_SetConfig+0xf8>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a0c      	ldr	r2, [pc, #48]	; (800448c <TIM_Base_SetConfig+0x124>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d103      	bne.n	8004468 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	691a      	ldr	r2, [r3, #16]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	615a      	str	r2, [r3, #20]
}
 800446e:	bf00      	nop
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	40010000 	.word	0x40010000
 8004480:	40000400 	.word	0x40000400
 8004484:	40000800 	.word	0x40000800
 8004488:	40000c00 	.word	0x40000c00
 800448c:	40010400 	.word	0x40010400
 8004490:	40014000 	.word	0x40014000
 8004494:	40014400 	.word	0x40014400
 8004498:	40014800 	.word	0x40014800
 800449c:	40001800 	.word	0x40001800
 80044a0:	40001c00 	.word	0x40001c00
 80044a4:	40002000 	.word	0x40002000

080044a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b087      	sub	sp, #28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	f023 0201 	bic.w	r2, r3, #1
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0303 	bic.w	r3, r3, #3
 80044de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f023 0302 	bic.w	r3, r3, #2
 80044f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a20      	ldr	r2, [pc, #128]	; (8004580 <TIM_OC1_SetConfig+0xd8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d003      	beq.n	800450c <TIM_OC1_SetConfig+0x64>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a1f      	ldr	r2, [pc, #124]	; (8004584 <TIM_OC1_SetConfig+0xdc>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d10c      	bne.n	8004526 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f023 0308 	bic.w	r3, r3, #8
 8004512:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	4313      	orrs	r3, r2
 800451c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f023 0304 	bic.w	r3, r3, #4
 8004524:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a15      	ldr	r2, [pc, #84]	; (8004580 <TIM_OC1_SetConfig+0xd8>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d003      	beq.n	8004536 <TIM_OC1_SetConfig+0x8e>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a14      	ldr	r2, [pc, #80]	; (8004584 <TIM_OC1_SetConfig+0xdc>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d111      	bne.n	800455a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800453c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004544:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4313      	orrs	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	4313      	orrs	r3, r2
 8004558:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	621a      	str	r2, [r3, #32]
}
 8004574:	bf00      	nop
 8004576:	371c      	adds	r7, #28
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	40010000 	.word	0x40010000
 8004584:	40010400 	.word	0x40010400

08004588 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	f023 0210 	bic.w	r2, r3, #16
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	021b      	lsls	r3, r3, #8
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f023 0320 	bic.w	r3, r3, #32
 80045d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	011b      	lsls	r3, r3, #4
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	4313      	orrs	r3, r2
 80045de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a22      	ldr	r2, [pc, #136]	; (800466c <TIM_OC2_SetConfig+0xe4>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d003      	beq.n	80045f0 <TIM_OC2_SetConfig+0x68>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a21      	ldr	r2, [pc, #132]	; (8004670 <TIM_OC2_SetConfig+0xe8>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d10d      	bne.n	800460c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	4313      	orrs	r3, r2
 8004602:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800460a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a17      	ldr	r2, [pc, #92]	; (800466c <TIM_OC2_SetConfig+0xe4>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d003      	beq.n	800461c <TIM_OC2_SetConfig+0x94>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a16      	ldr	r2, [pc, #88]	; (8004670 <TIM_OC2_SetConfig+0xe8>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d113      	bne.n	8004644 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004622:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800462a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	4313      	orrs	r3, r2
 8004636:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4313      	orrs	r3, r2
 8004642:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	621a      	str	r2, [r3, #32]
}
 800465e:	bf00      	nop
 8004660:	371c      	adds	r7, #28
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	40010000 	.word	0x40010000
 8004670:	40010400 	.word	0x40010400

08004674 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004674:	b480      	push	{r7}
 8004676:	b087      	sub	sp, #28
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f023 0303 	bic.w	r3, r3, #3
 80046aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	021b      	lsls	r3, r3, #8
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a21      	ldr	r2, [pc, #132]	; (8004754 <TIM_OC3_SetConfig+0xe0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d003      	beq.n	80046da <TIM_OC3_SetConfig+0x66>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a20      	ldr	r2, [pc, #128]	; (8004758 <TIM_OC3_SetConfig+0xe4>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d10d      	bne.n	80046f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	021b      	lsls	r3, r3, #8
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a16      	ldr	r2, [pc, #88]	; (8004754 <TIM_OC3_SetConfig+0xe0>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d003      	beq.n	8004706 <TIM_OC3_SetConfig+0x92>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a15      	ldr	r2, [pc, #84]	; (8004758 <TIM_OC3_SetConfig+0xe4>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d113      	bne.n	800472e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800470c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	011b      	lsls	r3, r3, #4
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	4313      	orrs	r3, r2
 8004720:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	011b      	lsls	r3, r3, #4
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	4313      	orrs	r3, r2
 800472c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	621a      	str	r2, [r3, #32]
}
 8004748:	bf00      	nop
 800474a:	371c      	adds	r7, #28
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	40010000 	.word	0x40010000
 8004758:	40010400 	.word	0x40010400

0800475c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800475c:	b480      	push	{r7}
 800475e:	b087      	sub	sp, #28
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800478a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004792:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	021b      	lsls	r3, r3, #8
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	4313      	orrs	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	031b      	lsls	r3, r3, #12
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a12      	ldr	r2, [pc, #72]	; (8004800 <TIM_OC4_SetConfig+0xa4>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d003      	beq.n	80047c4 <TIM_OC4_SetConfig+0x68>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a11      	ldr	r2, [pc, #68]	; (8004804 <TIM_OC4_SetConfig+0xa8>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d109      	bne.n	80047d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	019b      	lsls	r3, r3, #6
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	621a      	str	r2, [r3, #32]
}
 80047f2:	bf00      	nop
 80047f4:	371c      	adds	r7, #28
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	40010000 	.word	0x40010000
 8004804:	40010400 	.word	0x40010400

08004808 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004808:	b480      	push	{r7}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	f023 0201 	bic.w	r2, r3, #1
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004832:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	4313      	orrs	r3, r2
 800483c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f023 030a 	bic.w	r3, r3, #10
 8004844:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4313      	orrs	r3, r2
 800484c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	621a      	str	r2, [r3, #32]
}
 800485a:	bf00      	nop
 800485c:	371c      	adds	r7, #28
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004866:	b480      	push	{r7}
 8004868:	b087      	sub	sp, #28
 800486a:	af00      	add	r7, sp, #0
 800486c:	60f8      	str	r0, [r7, #12]
 800486e:	60b9      	str	r1, [r7, #8]
 8004870:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	f023 0210 	bic.w	r2, r3, #16
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004890:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	031b      	lsls	r3, r3, #12
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	4313      	orrs	r3, r2
 800489a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	011b      	lsls	r3, r3, #4
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	621a      	str	r2, [r3, #32]
}
 80048ba:	bf00      	nop
 80048bc:	371c      	adds	r7, #28
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b085      	sub	sp, #20
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f043 0307 	orr.w	r3, r3, #7
 80048e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	609a      	str	r2, [r3, #8]
}
 80048f0:	bf00      	nop
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004916:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	021a      	lsls	r2, r3, #8
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	431a      	orrs	r2, r3
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	4313      	orrs	r3, r2
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	4313      	orrs	r3, r2
 8004928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	609a      	str	r2, [r3, #8]
}
 8004930:	bf00      	nop
 8004932:	371c      	adds	r7, #28
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800493c:	b480      	push	{r7}
 800493e:	b087      	sub	sp, #28
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	f003 031f 	and.w	r3, r3, #31
 800494e:	2201      	movs	r2, #1
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6a1a      	ldr	r2, [r3, #32]
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	43db      	mvns	r3, r3
 800495e:	401a      	ands	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a1a      	ldr	r2, [r3, #32]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f003 031f 	and.w	r3, r3, #31
 800496e:	6879      	ldr	r1, [r7, #4]
 8004970:	fa01 f303 	lsl.w	r3, r1, r3
 8004974:	431a      	orrs	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	621a      	str	r2, [r3, #32]
}
 800497a:	bf00      	nop
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
	...

08004988 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004998:	2b01      	cmp	r3, #1
 800499a:	d101      	bne.n	80049a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800499c:	2302      	movs	r3, #2
 800499e:	e05a      	b.n	8004a56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2202      	movs	r2, #2
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a21      	ldr	r2, [pc, #132]	; (8004a64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d022      	beq.n	8004a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ec:	d01d      	beq.n	8004a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a1d      	ldr	r2, [pc, #116]	; (8004a68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d018      	beq.n	8004a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a1b      	ldr	r2, [pc, #108]	; (8004a6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d013      	beq.n	8004a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a1a      	ldr	r2, [pc, #104]	; (8004a70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d00e      	beq.n	8004a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a18      	ldr	r2, [pc, #96]	; (8004a74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d009      	beq.n	8004a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a17      	ldr	r2, [pc, #92]	; (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d004      	beq.n	8004a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a15      	ldr	r2, [pc, #84]	; (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d10c      	bne.n	8004a44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	40010000 	.word	0x40010000
 8004a68:	40000400 	.word	0x40000400
 8004a6c:	40000800 	.word	0x40000800
 8004a70:	40000c00 	.word	0x40000c00
 8004a74:	40010400 	.word	0x40010400
 8004a78:	40014000 	.word	0x40014000
 8004a7c:	40001800 	.word	0x40001800

08004a80 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004a80:	b084      	sub	sp, #16
 8004a82:	b480      	push	{r7}
 8004a84:	b085      	sub	sp, #20
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
 8004a8a:	f107 001c 	add.w	r0, r7, #28
 8004a8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004a92:	2300      	movs	r3, #0
 8004a94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004a96:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004a98:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004a9a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004a9e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004aa2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004aa6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004aaa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004aba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	b004      	add	sp, #16
 8004ad4:	4770      	bx	lr

08004ad6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b082      	sub	sp, #8
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2203      	movs	r2, #3
 8004b1e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004b20:	2002      	movs	r0, #2
 8004b22:	f7fb fd43 	bl	80005ac <HAL_Delay>
  
  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3708      	adds	r7, #8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0303 	and.w	r3, r3, #3
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004b56:	2300      	movs	r3, #0
 8004b58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004b6a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004b70:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004b76:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004b86:	f023 030f 	bic.w	r3, r3, #15
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	b2db      	uxtb	r3, r3
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b085      	sub	sp, #20
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
 8004bc2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3314      	adds	r3, #20
 8004bc8:	461a      	mov	r2, r3
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	4413      	add	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
}  
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004bea:	2300      	movs	r3, #0
 8004bec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004c06:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004c0c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004c12:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	431a      	orrs	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0

}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b088      	sub	sp, #32
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004c46:	2310      	movs	r3, #16
 8004c48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c4a:	2340      	movs	r3, #64	; 0x40
 8004c4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c58:	f107 0308 	add.w	r3, r7, #8
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7ff ff74 	bl	8004b4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c68:	2110      	movs	r1, #16
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fa40 	bl	80050f0 <SDMMC_GetCmdResp1>
 8004c70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c72:	69fb      	ldr	r3, [r7, #28]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3720      	adds	r7, #32
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b088      	sub	sp, #32
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004c8a:	2311      	movs	r3, #17
 8004c8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c8e:	2340      	movs	r3, #64	; 0x40
 8004c90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c92:	2300      	movs	r3, #0
 8004c94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c9c:	f107 0308 	add.w	r3, r7, #8
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7ff ff52 	bl	8004b4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cac:	2111      	movs	r1, #17
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 fa1e 	bl	80050f0 <SDMMC_GetCmdResp1>
 8004cb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cb6:	69fb      	ldr	r3, [r7, #28]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3720      	adds	r7, #32
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004cce:	2312      	movs	r3, #18
 8004cd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004cd2:	2340      	movs	r3, #64	; 0x40
 8004cd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004cda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cde:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ce0:	f107 0308 	add.w	r3, r7, #8
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7ff ff30 	bl	8004b4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf0:	2112      	movs	r1, #18
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f9fc 	bl	80050f0 <SDMMC_GetCmdResp1>
 8004cf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cfa:	69fb      	ldr	r3, [r7, #28]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3720      	adds	r7, #32
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b088      	sub	sp, #32
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004d12:	2318      	movs	r3, #24
 8004d14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d16:	2340      	movs	r3, #64	; 0x40
 8004d18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d24:	f107 0308 	add.w	r3, r7, #8
 8004d28:	4619      	mov	r1, r3
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7ff ff0e 	bl	8004b4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d34:	2118      	movs	r1, #24
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f9da 	bl	80050f0 <SDMMC_GetCmdResp1>
 8004d3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d3e:	69fb      	ldr	r3, [r7, #28]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3720      	adds	r7, #32
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b088      	sub	sp, #32
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004d56:	2319      	movs	r3, #25
 8004d58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d5a:	2340      	movs	r3, #64	; 0x40
 8004d5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d66:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d68:	f107 0308 	add.w	r3, r7, #8
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7ff feec 	bl	8004b4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d78:	2119      	movs	r1, #25
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f9b8 	bl	80050f0 <SDMMC_GetCmdResp1>
 8004d80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d82:	69fb      	ldr	r3, [r7, #28]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3720      	adds	r7, #32
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b088      	sub	sp, #32
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004d98:	230c      	movs	r3, #12
 8004d9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d9c:	2340      	movs	r3, #64	; 0x40
 8004d9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004da0:	2300      	movs	r3, #0
 8004da2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004da8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004daa:	f107 0308 	add.w	r3, r7, #8
 8004dae:	4619      	mov	r1, r3
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff fecb 	bl	8004b4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004db6:	4a05      	ldr	r2, [pc, #20]	; (8004dcc <SDMMC_CmdStopTransfer+0x40>)
 8004db8:	210c      	movs	r1, #12
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f998 	bl	80050f0 <SDMMC_GetCmdResp1>
 8004dc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004dc2:	69fb      	ldr	r3, [r7, #28]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3720      	adds	r7, #32
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	05f5e100 	.word	0x05f5e100

08004dd0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b08a      	sub	sp, #40	; 0x28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004de0:	2307      	movs	r3, #7
 8004de2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004de4:	2340      	movs	r3, #64	; 0x40
 8004de6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004de8:	2300      	movs	r3, #0
 8004dea:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004dec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004df0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004df2:	f107 0310 	add.w	r3, r7, #16
 8004df6:	4619      	mov	r1, r3
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f7ff fea7 	bl	8004b4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e02:	2107      	movs	r1, #7
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 f973 	bl	80050f0 <SDMMC_GetCmdResp1>
 8004e0a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3728      	adds	r7, #40	; 0x28
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b088      	sub	sp, #32
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004e22:	2300      	movs	r3, #0
 8004e24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004e26:	2300      	movs	r3, #0
 8004e28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e34:	f107 0308 	add.w	r3, r7, #8
 8004e38:	4619      	mov	r1, r3
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7ff fe86 	bl	8004b4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f92d 	bl	80050a0 <SDMMC_GetCmdError>
 8004e46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e48:	69fb      	ldr	r3, [r7, #28]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3720      	adds	r7, #32
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b088      	sub	sp, #32
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004e5a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004e5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004e60:	2308      	movs	r3, #8
 8004e62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e64:	2340      	movs	r3, #64	; 0x40
 8004e66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e72:	f107 0308 	add.w	r3, r7, #8
 8004e76:	4619      	mov	r1, r3
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7ff fe67 	bl	8004b4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 fb16 	bl	80054b0 <SDMMC_GetCmdResp7>
 8004e84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e86:	69fb      	ldr	r3, [r7, #28]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3720      	adds	r7, #32
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b088      	sub	sp, #32
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004e9e:	2337      	movs	r3, #55	; 0x37
 8004ea0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ea2:	2340      	movs	r3, #64	; 0x40
 8004ea4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004eaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004eae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004eb0:	f107 0308 	add.w	r3, r7, #8
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7ff fe48 	bl	8004b4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec0:	2137      	movs	r1, #55	; 0x37
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f914 	bl	80050f0 <SDMMC_GetCmdResp1>
 8004ec8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004eca:	69fb      	ldr	r3, [r7, #28]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3720      	adds	r7, #32
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b088      	sub	sp, #32
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ee4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ee8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004eea:	2329      	movs	r3, #41	; 0x29
 8004eec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004eee:	2340      	movs	r3, #64	; 0x40
 8004ef0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004efa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004efc:	f107 0308 	add.w	r3, r7, #8
 8004f00:	4619      	mov	r1, r3
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7ff fe22 	bl	8004b4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 fa23 	bl	8005354 <SDMMC_GetCmdResp3>
 8004f0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f10:	69fb      	ldr	r3, [r7, #28]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3720      	adds	r7, #32
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b088      	sub	sp, #32
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004f28:	2306      	movs	r3, #6
 8004f2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f2c:	2340      	movs	r3, #64	; 0x40
 8004f2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f30:	2300      	movs	r3, #0
 8004f32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f3a:	f107 0308 	add.w	r3, r7, #8
 8004f3e:	4619      	mov	r1, r3
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f7ff fe03 	bl	8004b4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f4a:	2106      	movs	r1, #6
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f8cf 	bl	80050f0 <SDMMC_GetCmdResp1>
 8004f52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f54:	69fb      	ldr	r3, [r7, #28]
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3720      	adds	r7, #32
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b088      	sub	sp, #32
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004f6a:	2333      	movs	r3, #51	; 0x33
 8004f6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f6e:	2340      	movs	r3, #64	; 0x40
 8004f70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f72:	2300      	movs	r3, #0
 8004f74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f7c:	f107 0308 	add.w	r3, r7, #8
 8004f80:	4619      	mov	r1, r3
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7ff fde2 	bl	8004b4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f8c:	2133      	movs	r1, #51	; 0x33
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f8ae 	bl	80050f0 <SDMMC_GetCmdResp1>
 8004f94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f96:	69fb      	ldr	r3, [r7, #28]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3720      	adds	r7, #32
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b088      	sub	sp, #32
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004fac:	2302      	movs	r3, #2
 8004fae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004fb0:	23c0      	movs	r3, #192	; 0xc0
 8004fb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fbc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fbe:	f107 0308 	add.w	r3, r7, #8
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7ff fdc1 	bl	8004b4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f97c 	bl	80052c8 <SDMMC_GetCmdResp2>
 8004fd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fd2:	69fb      	ldr	r3, [r7, #28]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3720      	adds	r7, #32
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b088      	sub	sp, #32
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004fea:	2309      	movs	r3, #9
 8004fec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004fee:	23c0      	movs	r3, #192	; 0xc0
 8004ff0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ffa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ffc:	f107 0308 	add.w	r3, r7, #8
 8005000:	4619      	mov	r1, r3
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7ff fda2 	bl	8004b4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f95d 	bl	80052c8 <SDMMC_GetCmdResp2>
 800500e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005010:	69fb      	ldr	r3, [r7, #28]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3720      	adds	r7, #32
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b088      	sub	sp, #32
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005024:	2300      	movs	r3, #0
 8005026:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005028:	2303      	movs	r3, #3
 800502a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800502c:	2340      	movs	r3, #64	; 0x40
 800502e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005030:	2300      	movs	r3, #0
 8005032:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005034:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005038:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800503a:	f107 0308 	add.w	r3, r7, #8
 800503e:	4619      	mov	r1, r3
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f7ff fd83 	bl	8004b4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	2103      	movs	r1, #3
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f9bc 	bl	80053c8 <SDMMC_GetCmdResp6>
 8005050:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005052:	69fb      	ldr	r3, [r7, #28]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3720      	adds	r7, #32
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b088      	sub	sp, #32
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800506a:	230d      	movs	r3, #13
 800506c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800506e:	2340      	movs	r3, #64	; 0x40
 8005070:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005072:	2300      	movs	r3, #0
 8005074:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005076:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800507a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800507c:	f107 0308 	add.w	r3, r7, #8
 8005080:	4619      	mov	r1, r3
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7ff fd62 	bl	8004b4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005088:	f241 3288 	movw	r2, #5000	; 0x1388
 800508c:	210d      	movs	r1, #13
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f82e 	bl	80050f0 <SDMMC_GetCmdResp1>
 8005094:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005096:	69fb      	ldr	r3, [r7, #28]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3720      	adds	r7, #32
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80050a0:	b490      	push	{r4, r7}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80050a8:	4b0f      	ldr	r3, [pc, #60]	; (80050e8 <SDMMC_GetCmdError+0x48>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a0f      	ldr	r2, [pc, #60]	; (80050ec <SDMMC_GetCmdError+0x4c>)
 80050ae:	fba2 2303 	umull	r2, r3, r2, r3
 80050b2:	0a5b      	lsrs	r3, r3, #9
 80050b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80050bc:	4623      	mov	r3, r4
 80050be:	1e5c      	subs	r4, r3, #1
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d102      	bne.n	80050ca <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80050c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80050c8:	e009      	b.n	80050de <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d0f2      	beq.n	80050bc <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	22c5      	movs	r2, #197	; 0xc5
 80050da:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bc90      	pop	{r4, r7}
 80050e6:	4770      	bx	lr
 80050e8:	20000008 	.word	0x20000008
 80050ec:	10624dd3 	.word	0x10624dd3

080050f0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80050f0:	b590      	push	{r4, r7, lr}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	460b      	mov	r3, r1
 80050fa:	607a      	str	r2, [r7, #4]
 80050fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80050fe:	4b6f      	ldr	r3, [pc, #444]	; (80052bc <SDMMC_GetCmdResp1+0x1cc>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a6f      	ldr	r2, [pc, #444]	; (80052c0 <SDMMC_GetCmdResp1+0x1d0>)
 8005104:	fba2 2303 	umull	r2, r3, r2, r3
 8005108:	0a5b      	lsrs	r3, r3, #9
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005110:	4623      	mov	r3, r4
 8005112:	1e5c      	subs	r4, r3, #1
 8005114:	2b00      	cmp	r3, #0
 8005116:	d102      	bne.n	800511e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005118:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800511c:	e0c9      	b.n	80052b2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005122:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0f0      	beq.n	8005110 <SDMMC_GetCmdResp1+0x20>
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1eb      	bne.n	8005110 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800513c:	f003 0304 	and.w	r3, r3, #4
 8005140:	2b00      	cmp	r3, #0
 8005142:	d004      	beq.n	800514e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2204      	movs	r2, #4
 8005148:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800514a:	2304      	movs	r3, #4
 800514c:	e0b1      	b.n	80052b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b00      	cmp	r3, #0
 8005158:	d004      	beq.n	8005164 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2201      	movs	r2, #1
 800515e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005160:	2301      	movs	r3, #1
 8005162:	e0a6      	b.n	80052b2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	22c5      	movs	r2, #197	; 0xc5
 8005168:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f7ff fd18 	bl	8004ba0 <SDIO_GetCommandResponse>
 8005170:	4603      	mov	r3, r0
 8005172:	461a      	mov	r2, r3
 8005174:	7afb      	ldrb	r3, [r7, #11]
 8005176:	4293      	cmp	r3, r2
 8005178:	d001      	beq.n	800517e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800517a:	2301      	movs	r3, #1
 800517c:	e099      	b.n	80052b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800517e:	2100      	movs	r1, #0
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f7ff fd1a 	bl	8004bba <SDIO_GetResponse>
 8005186:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	4b4e      	ldr	r3, [pc, #312]	; (80052c4 <SDMMC_GetCmdResp1+0x1d4>)
 800518c:	4013      	ands	r3, r2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8005192:	2300      	movs	r3, #0
 8005194:	e08d      	b.n	80052b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	2b00      	cmp	r3, #0
 800519a:	da02      	bge.n	80051a2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800519c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051a0:	e087      	b.n	80052b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d001      	beq.n	80051b0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80051ac:	2340      	movs	r3, #64	; 0x40
 80051ae:	e080      	b.n	80052b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80051ba:	2380      	movs	r3, #128	; 0x80
 80051bc:	e079      	b.n	80052b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80051c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051cc:	e071      	b.n	80052b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d002      	beq.n	80051de <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80051d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051dc:	e069      	b.n	80052b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80051e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051ec:	e061      	b.n	80052b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d002      	beq.n	80051fe <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80051f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80051fc:	e059      	b.n	80052b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d002      	beq.n	800520e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800520c:	e051      	b.n	80052b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d002      	beq.n	800521e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005218:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800521c:	e049      	b.n	80052b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d002      	beq.n	800522e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005228:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800522c:	e041      	b.n	80052b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d002      	beq.n	800523e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8005238:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800523c:	e039      	b.n	80052b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d002      	beq.n	800524e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005248:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800524c:	e031      	b.n	80052b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d002      	beq.n	800525e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005258:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800525c:	e029      	b.n	80052b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d002      	beq.n	800526e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005268:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800526c:	e021      	b.n	80052b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d002      	beq.n	800527e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005278:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800527c:	e019      	b.n	80052b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d002      	beq.n	800528e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005288:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800528c:	e011      	b.n	80052b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005298:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800529c:	e009      	b.n	80052b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80052a8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80052ac:	e001      	b.n	80052b2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80052ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	371c      	adds	r7, #28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd90      	pop	{r4, r7, pc}
 80052ba:	bf00      	nop
 80052bc:	20000008 	.word	0x20000008
 80052c0:	10624dd3 	.word	0x10624dd3
 80052c4:	fdffe008 	.word	0xfdffe008

080052c8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80052c8:	b490      	push	{r4, r7}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80052d0:	4b1e      	ldr	r3, [pc, #120]	; (800534c <SDMMC_GetCmdResp2+0x84>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a1e      	ldr	r2, [pc, #120]	; (8005350 <SDMMC_GetCmdResp2+0x88>)
 80052d6:	fba2 2303 	umull	r2, r3, r2, r3
 80052da:	0a5b      	lsrs	r3, r3, #9
 80052dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80052e0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80052e4:	4623      	mov	r3, r4
 80052e6:	1e5c      	subs	r4, r3, #1
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d102      	bne.n	80052f2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80052ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80052f0:	e026      	b.n	8005340 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d0f0      	beq.n	80052e4 <SDMMC_GetCmdResp2+0x1c>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1eb      	bne.n	80052e4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d004      	beq.n	8005322 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2204      	movs	r2, #4
 800531c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800531e:	2304      	movs	r3, #4
 8005320:	e00e      	b.n	8005340 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d004      	beq.n	8005338 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005334:	2301      	movs	r3, #1
 8005336:	e003      	b.n	8005340 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	22c5      	movs	r2, #197	; 0xc5
 800533c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bc90      	pop	{r4, r7}
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	20000008 	.word	0x20000008
 8005350:	10624dd3 	.word	0x10624dd3

08005354 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005354:	b490      	push	{r4, r7}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800535c:	4b18      	ldr	r3, [pc, #96]	; (80053c0 <SDMMC_GetCmdResp3+0x6c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a18      	ldr	r2, [pc, #96]	; (80053c4 <SDMMC_GetCmdResp3+0x70>)
 8005362:	fba2 2303 	umull	r2, r3, r2, r3
 8005366:	0a5b      	lsrs	r3, r3, #9
 8005368:	f241 3288 	movw	r2, #5000	; 0x1388
 800536c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005370:	4623      	mov	r3, r4
 8005372:	1e5c      	subs	r4, r3, #1
 8005374:	2b00      	cmp	r3, #0
 8005376:	d102      	bne.n	800537e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005378:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800537c:	e01b      	b.n	80053b6 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005382:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0f0      	beq.n	8005370 <SDMMC_GetCmdResp3+0x1c>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1eb      	bne.n	8005370 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d004      	beq.n	80053ae <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2204      	movs	r2, #4
 80053a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80053aa:	2304      	movs	r3, #4
 80053ac:	e003      	b.n	80053b6 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	22c5      	movs	r2, #197	; 0xc5
 80053b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bc90      	pop	{r4, r7}
 80053be:	4770      	bx	lr
 80053c0:	20000008 	.word	0x20000008
 80053c4:	10624dd3 	.word	0x10624dd3

080053c8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80053c8:	b590      	push	{r4, r7, lr}
 80053ca:	b087      	sub	sp, #28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	460b      	mov	r3, r1
 80053d2:	607a      	str	r2, [r7, #4]
 80053d4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80053d6:	4b34      	ldr	r3, [pc, #208]	; (80054a8 <SDMMC_GetCmdResp6+0xe0>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a34      	ldr	r2, [pc, #208]	; (80054ac <SDMMC_GetCmdResp6+0xe4>)
 80053dc:	fba2 2303 	umull	r2, r3, r2, r3
 80053e0:	0a5b      	lsrs	r3, r3, #9
 80053e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80053ea:	4623      	mov	r3, r4
 80053ec:	1e5c      	subs	r4, r3, #1
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d102      	bne.n	80053f8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80053f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80053f6:	e052      	b.n	800549e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053fc:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005404:	2b00      	cmp	r3, #0
 8005406:	d0f0      	beq.n	80053ea <SDMMC_GetCmdResp6+0x22>
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1eb      	bne.n	80053ea <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005416:	f003 0304 	and.w	r3, r3, #4
 800541a:	2b00      	cmp	r3, #0
 800541c:	d004      	beq.n	8005428 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2204      	movs	r2, #4
 8005422:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005424:	2304      	movs	r3, #4
 8005426:	e03a      	b.n	800549e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	d004      	beq.n	800543e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2201      	movs	r2, #1
 8005438:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800543a:	2301      	movs	r3, #1
 800543c:	e02f      	b.n	800549e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f7ff fbae 	bl	8004ba0 <SDIO_GetCommandResponse>
 8005444:	4603      	mov	r3, r0
 8005446:	461a      	mov	r2, r3
 8005448:	7afb      	ldrb	r3, [r7, #11]
 800544a:	4293      	cmp	r3, r2
 800544c:	d001      	beq.n	8005452 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800544e:	2301      	movs	r3, #1
 8005450:	e025      	b.n	800549e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	22c5      	movs	r2, #197	; 0xc5
 8005456:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005458:	2100      	movs	r1, #0
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f7ff fbad 	bl	8004bba <SDIO_GetResponse>
 8005460:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d106      	bne.n	800547a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	0c1b      	lsrs	r3, r3, #16
 8005470:	b29a      	uxth	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005476:	2300      	movs	r3, #0
 8005478:	e011      	b.n	800549e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d002      	beq.n	800548a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005484:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005488:	e009      	b.n	800549e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005498:	e001      	b.n	800549e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800549a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800549e:	4618      	mov	r0, r3
 80054a0:	371c      	adds	r7, #28
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd90      	pop	{r4, r7, pc}
 80054a6:	bf00      	nop
 80054a8:	20000008 	.word	0x20000008
 80054ac:	10624dd3 	.word	0x10624dd3

080054b0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80054b0:	b490      	push	{r4, r7}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80054b8:	4b21      	ldr	r3, [pc, #132]	; (8005540 <SDMMC_GetCmdResp7+0x90>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a21      	ldr	r2, [pc, #132]	; (8005544 <SDMMC_GetCmdResp7+0x94>)
 80054be:	fba2 2303 	umull	r2, r3, r2, r3
 80054c2:	0a5b      	lsrs	r3, r3, #9
 80054c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80054cc:	4623      	mov	r3, r4
 80054ce:	1e5c      	subs	r4, r3, #1
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d102      	bne.n	80054da <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80054d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80054d8:	e02c      	b.n	8005534 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054de:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0f0      	beq.n	80054cc <SDMMC_GetCmdResp7+0x1c>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1eb      	bne.n	80054cc <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f8:	f003 0304 	and.w	r3, r3, #4
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d004      	beq.n	800550a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2204      	movs	r2, #4
 8005504:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005506:	2304      	movs	r3, #4
 8005508:	e014      	b.n	8005534 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d004      	beq.n	8005520 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800551c:	2301      	movs	r3, #1
 800551e:	e009      	b.n	8005534 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2240      	movs	r2, #64	; 0x40
 8005530:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005532:	2300      	movs	r3, #0
  
}
 8005534:	4618      	mov	r0, r3
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bc90      	pop	{r4, r7}
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	20000008 	.word	0x20000008
 8005544:	10624dd3 	.word	0x10624dd3

08005548 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	4603      	mov	r3, r0
 8005550:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005552:	79fb      	ldrb	r3, [r7, #7]
 8005554:	4a08      	ldr	r2, [pc, #32]	; (8005578 <disk_status+0x30>)
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	79fa      	ldrb	r2, [r7, #7]
 8005560:	4905      	ldr	r1, [pc, #20]	; (8005578 <disk_status+0x30>)
 8005562:	440a      	add	r2, r1
 8005564:	7a12      	ldrb	r2, [r2, #8]
 8005566:	4610      	mov	r0, r2
 8005568:	4798      	blx	r3
 800556a:	4603      	mov	r3, r0
 800556c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800556e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	20000050 	.word	0x20000050

0800557c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	4603      	mov	r3, r0
 8005584:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800558a:	79fb      	ldrb	r3, [r7, #7]
 800558c:	4a0d      	ldr	r2, [pc, #52]	; (80055c4 <disk_initialize+0x48>)
 800558e:	5cd3      	ldrb	r3, [r2, r3]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d111      	bne.n	80055b8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005594:	79fb      	ldrb	r3, [r7, #7]
 8005596:	4a0b      	ldr	r2, [pc, #44]	; (80055c4 <disk_initialize+0x48>)
 8005598:	2101      	movs	r1, #1
 800559a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800559c:	79fb      	ldrb	r3, [r7, #7]
 800559e:	4a09      	ldr	r2, [pc, #36]	; (80055c4 <disk_initialize+0x48>)
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	79fa      	ldrb	r2, [r7, #7]
 80055aa:	4906      	ldr	r1, [pc, #24]	; (80055c4 <disk_initialize+0x48>)
 80055ac:	440a      	add	r2, r1
 80055ae:	7a12      	ldrb	r2, [r2, #8]
 80055b0:	4610      	mov	r0, r2
 80055b2:	4798      	blx	r3
 80055b4:	4603      	mov	r3, r0
 80055b6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	20000050 	.word	0x20000050

080055c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80055c8:	b590      	push	{r4, r7, lr}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60b9      	str	r1, [r7, #8]
 80055d0:	607a      	str	r2, [r7, #4]
 80055d2:	603b      	str	r3, [r7, #0]
 80055d4:	4603      	mov	r3, r0
 80055d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80055d8:	7bfb      	ldrb	r3, [r7, #15]
 80055da:	4a0a      	ldr	r2, [pc, #40]	; (8005604 <disk_read+0x3c>)
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4413      	add	r3, r2
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	689c      	ldr	r4, [r3, #8]
 80055e4:	7bfb      	ldrb	r3, [r7, #15]
 80055e6:	4a07      	ldr	r2, [pc, #28]	; (8005604 <disk_read+0x3c>)
 80055e8:	4413      	add	r3, r2
 80055ea:	7a18      	ldrb	r0, [r3, #8]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	68b9      	ldr	r1, [r7, #8]
 80055f2:	47a0      	blx	r4
 80055f4:	4603      	mov	r3, r0
 80055f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80055f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	371c      	adds	r7, #28
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd90      	pop	{r4, r7, pc}
 8005602:	bf00      	nop
 8005604:	20000050 	.word	0x20000050

08005608 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005608:	b590      	push	{r4, r7, lr}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	60b9      	str	r1, [r7, #8]
 8005610:	607a      	str	r2, [r7, #4]
 8005612:	603b      	str	r3, [r7, #0]
 8005614:	4603      	mov	r3, r0
 8005616:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005618:	7bfb      	ldrb	r3, [r7, #15]
 800561a:	4a0a      	ldr	r2, [pc, #40]	; (8005644 <disk_write+0x3c>)
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	68dc      	ldr	r4, [r3, #12]
 8005624:	7bfb      	ldrb	r3, [r7, #15]
 8005626:	4a07      	ldr	r2, [pc, #28]	; (8005644 <disk_write+0x3c>)
 8005628:	4413      	add	r3, r2
 800562a:	7a18      	ldrb	r0, [r3, #8]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	68b9      	ldr	r1, [r7, #8]
 8005632:	47a0      	blx	r4
 8005634:	4603      	mov	r3, r0
 8005636:	75fb      	strb	r3, [r7, #23]
  return res;
 8005638:	7dfb      	ldrb	r3, [r7, #23]
}
 800563a:	4618      	mov	r0, r3
 800563c:	371c      	adds	r7, #28
 800563e:	46bd      	mov	sp, r7
 8005640:	bd90      	pop	{r4, r7, pc}
 8005642:	bf00      	nop
 8005644:	20000050 	.word	0x20000050

08005648 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	3301      	adds	r3, #1
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005658:	89fb      	ldrh	r3, [r7, #14]
 800565a:	021b      	lsls	r3, r3, #8
 800565c:	b21a      	sxth	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	b21b      	sxth	r3, r3
 8005664:	4313      	orrs	r3, r2
 8005666:	b21b      	sxth	r3, r3
 8005668:	81fb      	strh	r3, [r7, #14]
	return rv;
 800566a:	89fb      	ldrh	r3, [r7, #14]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3714      	adds	r7, #20
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	3303      	adds	r3, #3
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	021b      	lsls	r3, r3, #8
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	3202      	adds	r2, #2
 8005690:	7812      	ldrb	r2, [r2, #0]
 8005692:	4313      	orrs	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	021b      	lsls	r3, r3, #8
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	3201      	adds	r2, #1
 800569e:	7812      	ldrb	r2, [r2, #0]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	021b      	lsls	r3, r3, #8
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	7812      	ldrb	r2, [r2, #0]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]
	return rv;
 80056b0:	68fb      	ldr	r3, [r7, #12]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3714      	adds	r7, #20
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
 80056c6:	460b      	mov	r3, r1
 80056c8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	1c5a      	adds	r2, r3, #1
 80056ce:	607a      	str	r2, [r7, #4]
 80056d0:	887a      	ldrh	r2, [r7, #2]
 80056d2:	b2d2      	uxtb	r2, r2
 80056d4:	701a      	strb	r2, [r3, #0]
 80056d6:	887b      	ldrh	r3, [r7, #2]
 80056d8:	0a1b      	lsrs	r3, r3, #8
 80056da:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	1c5a      	adds	r2, r3, #1
 80056e0:	607a      	str	r2, [r7, #4]
 80056e2:	887a      	ldrh	r2, [r7, #2]
 80056e4:	b2d2      	uxtb	r2, r2
 80056e6:	701a      	strb	r2, [r3, #0]
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	1c5a      	adds	r2, r3, #1
 8005702:	607a      	str	r2, [r7, #4]
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	b2d2      	uxtb	r2, r2
 8005708:	701a      	strb	r2, [r3, #0]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	0a1b      	lsrs	r3, r3, #8
 800570e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	607a      	str	r2, [r7, #4]
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	b2d2      	uxtb	r2, r2
 800571a:	701a      	strb	r2, [r3, #0]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	0a1b      	lsrs	r3, r3, #8
 8005720:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	1c5a      	adds	r2, r3, #1
 8005726:	607a      	str	r2, [r7, #4]
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	b2d2      	uxtb	r2, r2
 800572c:	701a      	strb	r2, [r3, #0]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	0a1b      	lsrs	r3, r3, #8
 8005732:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	1c5a      	adds	r2, r3, #1
 8005738:	607a      	str	r2, [r7, #4]
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	b2d2      	uxtb	r2, r2
 800573e:	701a      	strb	r2, [r3, #0]
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00d      	beq.n	8005782 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	1c53      	adds	r3, r2, #1
 800576a:	613b      	str	r3, [r7, #16]
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	1c59      	adds	r1, r3, #1
 8005770:	6179      	str	r1, [r7, #20]
 8005772:	7812      	ldrb	r2, [r2, #0]
 8005774:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	3b01      	subs	r3, #1
 800577a:	607b      	str	r3, [r7, #4]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1f1      	bne.n	8005766 <mem_cpy+0x1a>
	}
}
 8005782:	bf00      	nop
 8005784:	371c      	adds	r7, #28
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800578e:	b480      	push	{r7}
 8005790:	b087      	sub	sp, #28
 8005792:	af00      	add	r7, sp, #0
 8005794:	60f8      	str	r0, [r7, #12]
 8005796:	60b9      	str	r1, [r7, #8]
 8005798:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	1c5a      	adds	r2, r3, #1
 80057a2:	617a      	str	r2, [r7, #20]
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	b2d2      	uxtb	r2, r2
 80057a8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	3b01      	subs	r3, #1
 80057ae:	607b      	str	r3, [r7, #4]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1f3      	bne.n	800579e <mem_set+0x10>
}
 80057b6:	bf00      	nop
 80057b8:	371c      	adds	r7, #28
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80057c2:	b480      	push	{r7}
 80057c4:	b089      	sub	sp, #36	; 0x24
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	60f8      	str	r0, [r7, #12]
 80057ca:	60b9      	str	r1, [r7, #8]
 80057cc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	61fb      	str	r3, [r7, #28]
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80057d6:	2300      	movs	r3, #0
 80057d8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	1c5a      	adds	r2, r3, #1
 80057de:	61fa      	str	r2, [r7, #28]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	4619      	mov	r1, r3
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	1c5a      	adds	r2, r3, #1
 80057e8:	61ba      	str	r2, [r7, #24]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	1acb      	subs	r3, r1, r3
 80057ee:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3b01      	subs	r3, #1
 80057f4:	607b      	str	r3, [r7, #4]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <mem_cmp+0x40>
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d0eb      	beq.n	80057da <mem_cmp+0x18>

	return r;
 8005802:	697b      	ldr	r3, [r7, #20]
}
 8005804:	4618      	mov	r0, r3
 8005806:	3724      	adds	r7, #36	; 0x24
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800581a:	e002      	b.n	8005822 <chk_chr+0x12>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	3301      	adds	r3, #1
 8005820:	607b      	str	r3, [r7, #4]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d005      	beq.n	8005836 <chk_chr+0x26>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	461a      	mov	r2, r3
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	4293      	cmp	r3, r2
 8005834:	d1f2      	bne.n	800581c <chk_chr+0xc>
	return *str;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	781b      	ldrb	r3, [r3, #0]
}
 800583a:	4618      	mov	r0, r3
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
	...

08005848 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005852:	2300      	movs	r3, #0
 8005854:	60bb      	str	r3, [r7, #8]
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	60fb      	str	r3, [r7, #12]
 800585a:	e029      	b.n	80058b0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800585c:	4a27      	ldr	r2, [pc, #156]	; (80058fc <chk_lock+0xb4>)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	011b      	lsls	r3, r3, #4
 8005862:	4413      	add	r3, r2
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d01d      	beq.n	80058a6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800586a:	4a24      	ldr	r2, [pc, #144]	; (80058fc <chk_lock+0xb4>)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	011b      	lsls	r3, r3, #4
 8005870:	4413      	add	r3, r2
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	429a      	cmp	r2, r3
 800587a:	d116      	bne.n	80058aa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800587c:	4a1f      	ldr	r2, [pc, #124]	; (80058fc <chk_lock+0xb4>)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	011b      	lsls	r3, r3, #4
 8005882:	4413      	add	r3, r2
 8005884:	3304      	adds	r3, #4
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800588c:	429a      	cmp	r2, r3
 800588e:	d10c      	bne.n	80058aa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005890:	4a1a      	ldr	r2, [pc, #104]	; (80058fc <chk_lock+0xb4>)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	011b      	lsls	r3, r3, #4
 8005896:	4413      	add	r3, r2
 8005898:	3308      	adds	r3, #8
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d102      	bne.n	80058aa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80058a4:	e007      	b.n	80058b6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80058a6:	2301      	movs	r3, #1
 80058a8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	3301      	adds	r3, #1
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d9d2      	bls.n	800585c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d109      	bne.n	80058d0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d102      	bne.n	80058c8 <chk_lock+0x80>
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d101      	bne.n	80058cc <chk_lock+0x84>
 80058c8:	2300      	movs	r3, #0
 80058ca:	e010      	b.n	80058ee <chk_lock+0xa6>
 80058cc:	2312      	movs	r3, #18
 80058ce:	e00e      	b.n	80058ee <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d108      	bne.n	80058e8 <chk_lock+0xa0>
 80058d6:	4a09      	ldr	r2, [pc, #36]	; (80058fc <chk_lock+0xb4>)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	011b      	lsls	r3, r3, #4
 80058dc:	4413      	add	r3, r2
 80058de:	330c      	adds	r3, #12
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058e6:	d101      	bne.n	80058ec <chk_lock+0xa4>
 80058e8:	2310      	movs	r3, #16
 80058ea:	e000      	b.n	80058ee <chk_lock+0xa6>
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	20000030 	.word	0x20000030

08005900 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005906:	2300      	movs	r3, #0
 8005908:	607b      	str	r3, [r7, #4]
 800590a:	e002      	b.n	8005912 <enq_lock+0x12>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	3301      	adds	r3, #1
 8005910:	607b      	str	r3, [r7, #4]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d806      	bhi.n	8005926 <enq_lock+0x26>
 8005918:	4a09      	ldr	r2, [pc, #36]	; (8005940 <enq_lock+0x40>)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	011b      	lsls	r3, r3, #4
 800591e:	4413      	add	r3, r2
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1f2      	bne.n	800590c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b02      	cmp	r3, #2
 800592a:	bf14      	ite	ne
 800592c:	2301      	movne	r3, #1
 800592e:	2300      	moveq	r3, #0
 8005930:	b2db      	uxtb	r3, r3
}
 8005932:	4618      	mov	r0, r3
 8005934:	370c      	adds	r7, #12
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	20000030 	.word	0x20000030

08005944 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800594e:	2300      	movs	r3, #0
 8005950:	60fb      	str	r3, [r7, #12]
 8005952:	e01f      	b.n	8005994 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005954:	4a41      	ldr	r2, [pc, #260]	; (8005a5c <inc_lock+0x118>)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	011b      	lsls	r3, r3, #4
 800595a:	4413      	add	r3, r2
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	429a      	cmp	r2, r3
 8005964:	d113      	bne.n	800598e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005966:	4a3d      	ldr	r2, [pc, #244]	; (8005a5c <inc_lock+0x118>)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	011b      	lsls	r3, r3, #4
 800596c:	4413      	add	r3, r2
 800596e:	3304      	adds	r3, #4
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005976:	429a      	cmp	r2, r3
 8005978:	d109      	bne.n	800598e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800597a:	4a38      	ldr	r2, [pc, #224]	; (8005a5c <inc_lock+0x118>)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	011b      	lsls	r3, r3, #4
 8005980:	4413      	add	r3, r2
 8005982:	3308      	adds	r3, #8
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800598a:	429a      	cmp	r2, r3
 800598c:	d006      	beq.n	800599c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	3301      	adds	r3, #1
 8005992:	60fb      	str	r3, [r7, #12]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d9dc      	bls.n	8005954 <inc_lock+0x10>
 800599a:	e000      	b.n	800599e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800599c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d132      	bne.n	8005a0a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80059a4:	2300      	movs	r3, #0
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	e002      	b.n	80059b0 <inc_lock+0x6c>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	3301      	adds	r3, #1
 80059ae:	60fb      	str	r3, [r7, #12]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d806      	bhi.n	80059c4 <inc_lock+0x80>
 80059b6:	4a29      	ldr	r2, [pc, #164]	; (8005a5c <inc_lock+0x118>)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	011b      	lsls	r3, r3, #4
 80059bc:	4413      	add	r3, r2
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1f2      	bne.n	80059aa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d101      	bne.n	80059ce <inc_lock+0x8a>
 80059ca:	2300      	movs	r3, #0
 80059cc:	e040      	b.n	8005a50 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	4922      	ldr	r1, [pc, #136]	; (8005a5c <inc_lock+0x118>)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	011b      	lsls	r3, r3, #4
 80059d8:	440b      	add	r3, r1
 80059da:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689a      	ldr	r2, [r3, #8]
 80059e0:	491e      	ldr	r1, [pc, #120]	; (8005a5c <inc_lock+0x118>)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	011b      	lsls	r3, r3, #4
 80059e6:	440b      	add	r3, r1
 80059e8:	3304      	adds	r3, #4
 80059ea:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	695a      	ldr	r2, [r3, #20]
 80059f0:	491a      	ldr	r1, [pc, #104]	; (8005a5c <inc_lock+0x118>)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	011b      	lsls	r3, r3, #4
 80059f6:	440b      	add	r3, r1
 80059f8:	3308      	adds	r3, #8
 80059fa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80059fc:	4a17      	ldr	r2, [pc, #92]	; (8005a5c <inc_lock+0x118>)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	011b      	lsls	r3, r3, #4
 8005a02:	4413      	add	r3, r2
 8005a04:	330c      	adds	r3, #12
 8005a06:	2200      	movs	r2, #0
 8005a08:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d009      	beq.n	8005a24 <inc_lock+0xe0>
 8005a10:	4a12      	ldr	r2, [pc, #72]	; (8005a5c <inc_lock+0x118>)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	011b      	lsls	r3, r3, #4
 8005a16:	4413      	add	r3, r2
 8005a18:	330c      	adds	r3, #12
 8005a1a:	881b      	ldrh	r3, [r3, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d001      	beq.n	8005a24 <inc_lock+0xe0>
 8005a20:	2300      	movs	r3, #0
 8005a22:	e015      	b.n	8005a50 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d108      	bne.n	8005a3c <inc_lock+0xf8>
 8005a2a:	4a0c      	ldr	r2, [pc, #48]	; (8005a5c <inc_lock+0x118>)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	011b      	lsls	r3, r3, #4
 8005a30:	4413      	add	r3, r2
 8005a32:	330c      	adds	r3, #12
 8005a34:	881b      	ldrh	r3, [r3, #0]
 8005a36:	3301      	adds	r3, #1
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	e001      	b.n	8005a40 <inc_lock+0xfc>
 8005a3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a40:	4906      	ldr	r1, [pc, #24]	; (8005a5c <inc_lock+0x118>)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	011b      	lsls	r3, r3, #4
 8005a46:	440b      	add	r3, r1
 8005a48:	330c      	adds	r3, #12
 8005a4a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	3301      	adds	r3, #1
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3714      	adds	r7, #20
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	20000030 	.word	0x20000030

08005a60 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005a68:	2300      	movs	r3, #0
 8005a6a:	60fb      	str	r3, [r7, #12]
 8005a6c:	e010      	b.n	8005a90 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005a6e:	4a0d      	ldr	r2, [pc, #52]	; (8005aa4 <clear_lock+0x44>)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	011b      	lsls	r3, r3, #4
 8005a74:	4413      	add	r3, r2
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d105      	bne.n	8005a8a <clear_lock+0x2a>
 8005a7e:	4a09      	ldr	r2, [pc, #36]	; (8005aa4 <clear_lock+0x44>)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	011b      	lsls	r3, r3, #4
 8005a84:	4413      	add	r3, r2
 8005a86:	2200      	movs	r2, #0
 8005a88:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	60fb      	str	r3, [r7, #12]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d9eb      	bls.n	8005a6e <clear_lock+0xe>
	}
}
 8005a96:	bf00      	nop
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	20000030 	.word	0x20000030

08005aa8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	78db      	ldrb	r3, [r3, #3]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d034      	beq.n	8005b26 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	7858      	ldrb	r0, [r3, #1]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005acc:	2301      	movs	r3, #1
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	f7ff fd9a 	bl	8005608 <disk_write>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d002      	beq.n	8005ae0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	73fb      	strb	r3, [r7, #15]
 8005ade:	e022      	b.n	8005b26 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	1ad2      	subs	r2, r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d217      	bcs.n	8005b26 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	789b      	ldrb	r3, [r3, #2]
 8005afa:	613b      	str	r3, [r7, #16]
 8005afc:	e010      	b.n	8005b20 <sync_window+0x78>
					wsect += fs->fsize;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	4413      	add	r3, r2
 8005b06:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	7858      	ldrb	r0, [r3, #1]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005b12:	2301      	movs	r3, #1
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	f7ff fd77 	bl	8005608 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	613b      	str	r3, [r7, #16]
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d8eb      	bhi.n	8005afe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3718      	adds	r7, #24
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d01b      	beq.n	8005b80 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f7ff ffad 	bl	8005aa8 <sync_window>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005b52:	7bfb      	ldrb	r3, [r7, #15]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d113      	bne.n	8005b80 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	7858      	ldrb	r0, [r3, #1]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005b62:	2301      	movs	r3, #1
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	f7ff fd2f 	bl	80055c8 <disk_read>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d004      	beq.n	8005b7a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005b70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b74:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8005b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	3b02      	subs	r3, #2
 8005b98:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	3b02      	subs	r3, #2
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d301      	bcc.n	8005baa <clust2sect+0x20>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	e008      	b.n	8005bbc <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	895b      	ldrh	r3, [r3, #10]
 8005bae:	461a      	mov	r2, r3
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	fb03 f202 	mul.w	r2, r3, r2
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bba:	4413      	add	r3, r2
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d904      	bls.n	8005be8 <get_fat+0x20>
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d302      	bcc.n	8005bee <get_fat+0x26>
		val = 1;	/* Internal error */
 8005be8:	2301      	movs	r3, #1
 8005bea:	617b      	str	r3, [r7, #20]
 8005bec:	e08c      	b.n	8005d08 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005bee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bf2:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d045      	beq.n	8005c88 <get_fat+0xc0>
 8005bfc:	2b03      	cmp	r3, #3
 8005bfe:	d05d      	beq.n	8005cbc <get_fat+0xf4>
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d177      	bne.n	8005cf4 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	60fb      	str	r3, [r7, #12]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	085b      	lsrs	r3, r3, #1
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4413      	add	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	6a1a      	ldr	r2, [r3, #32]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	0a5b      	lsrs	r3, r3, #9
 8005c1a:	4413      	add	r3, r2
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	6938      	ldr	r0, [r7, #16]
 8005c20:	f7ff ff86 	bl	8005b30 <move_window>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d167      	bne.n	8005cfa <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	1c5a      	adds	r2, r3, #1
 8005c2e:	60fa      	str	r2, [r7, #12]
 8005c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	4413      	add	r3, r2
 8005c38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c3c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	6a1a      	ldr	r2, [r3, #32]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	0a5b      	lsrs	r3, r3, #9
 8005c46:	4413      	add	r3, r2
 8005c48:	4619      	mov	r1, r3
 8005c4a:	6938      	ldr	r0, [r7, #16]
 8005c4c:	f7ff ff70 	bl	8005b30 <move_window>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d153      	bne.n	8005cfe <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c64:	021b      	lsls	r3, r3, #8
 8005c66:	461a      	mov	r2, r3
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d002      	beq.n	8005c7e <get_fat+0xb6>
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	091b      	lsrs	r3, r3, #4
 8005c7c:	e002      	b.n	8005c84 <get_fat+0xbc>
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c84:	617b      	str	r3, [r7, #20]
			break;
 8005c86:	e03f      	b.n	8005d08 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	6a1a      	ldr	r2, [r3, #32]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	0a1b      	lsrs	r3, r3, #8
 8005c90:	4413      	add	r3, r2
 8005c92:	4619      	mov	r1, r3
 8005c94:	6938      	ldr	r0, [r7, #16]
 8005c96:	f7ff ff4b 	bl	8005b30 <move_window>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d130      	bne.n	8005d02 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005cae:	4413      	add	r3, r2
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7ff fcc9 	bl	8005648 <ld_word>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	617b      	str	r3, [r7, #20]
			break;
 8005cba:	e025      	b.n	8005d08 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	6a1a      	ldr	r2, [r3, #32]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	09db      	lsrs	r3, r3, #7
 8005cc4:	4413      	add	r3, r2
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	6938      	ldr	r0, [r7, #16]
 8005cca:	f7ff ff31 	bl	8005b30 <move_window>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d118      	bne.n	8005d06 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005ce2:	4413      	add	r3, r2
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7ff fcc7 	bl	8005678 <ld_dword>
 8005cea:	4603      	mov	r3, r0
 8005cec:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005cf0:	617b      	str	r3, [r7, #20]
			break;
 8005cf2:	e009      	b.n	8005d08 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	617b      	str	r3, [r7, #20]
 8005cf8:	e006      	b.n	8005d08 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005cfa:	bf00      	nop
 8005cfc:	e004      	b.n	8005d08 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005cfe:	bf00      	nop
 8005d00:	e002      	b.n	8005d08 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005d02:	bf00      	nop
 8005d04:	e000      	b.n	8005d08 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005d06:	bf00      	nop
		}
	}

	return val;
 8005d08:	697b      	ldr	r3, [r7, #20]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3718      	adds	r7, #24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005d12:	b590      	push	{r4, r7, lr}
 8005d14:	b089      	sub	sp, #36	; 0x24
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	60f8      	str	r0, [r7, #12]
 8005d1a:	60b9      	str	r1, [r7, #8]
 8005d1c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005d1e:	2302      	movs	r3, #2
 8005d20:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	f240 80d6 	bls.w	8005ed6 <put_fat+0x1c4>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	f080 80d0 	bcs.w	8005ed6 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d073      	beq.n	8005e26 <put_fat+0x114>
 8005d3e:	2b03      	cmp	r3, #3
 8005d40:	f000 8091 	beq.w	8005e66 <put_fat+0x154>
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	f040 80c6 	bne.w	8005ed6 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	61bb      	str	r3, [r7, #24]
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	085b      	lsrs	r3, r3, #1
 8005d52:	69ba      	ldr	r2, [r7, #24]
 8005d54:	4413      	add	r3, r2
 8005d56:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6a1a      	ldr	r2, [r3, #32]
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	0a5b      	lsrs	r3, r3, #9
 8005d60:	4413      	add	r3, r2
 8005d62:	4619      	mov	r1, r3
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f7ff fee3 	bl	8005b30 <move_window>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005d6e:	7ffb      	ldrb	r3, [r7, #31]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f040 80a9 	bne.w	8005ec8 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	1c59      	adds	r1, r3, #1
 8005d80:	61b9      	str	r1, [r7, #24]
 8005d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d86:	4413      	add	r3, r2
 8005d88:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00d      	beq.n	8005db0 <put_fat+0x9e>
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	b25b      	sxtb	r3, r3
 8005d9a:	f003 030f 	and.w	r3, r3, #15
 8005d9e:	b25a      	sxtb	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	011b      	lsls	r3, r3, #4
 8005da6:	b25b      	sxtb	r3, r3
 8005da8:	4313      	orrs	r3, r2
 8005daa:	b25b      	sxtb	r3, r3
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	e001      	b.n	8005db4 <put_fat+0xa2>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6a1a      	ldr	r2, [r3, #32]
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	0a5b      	lsrs	r3, r3, #9
 8005dc6:	4413      	add	r3, r2
 8005dc8:	4619      	mov	r1, r3
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f7ff feb0 	bl	8005b30 <move_window>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005dd4:	7ffb      	ldrb	r3, [r7, #31]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d178      	bne.n	8005ecc <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de6:	4413      	add	r3, r2
 8005de8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d003      	beq.n	8005dfc <put_fat+0xea>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	091b      	lsrs	r3, r3, #4
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	e00e      	b.n	8005e1a <put_fat+0x108>
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	b25b      	sxtb	r3, r3
 8005e02:	f023 030f 	bic.w	r3, r3, #15
 8005e06:	b25a      	sxtb	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	0a1b      	lsrs	r3, r3, #8
 8005e0c:	b25b      	sxtb	r3, r3
 8005e0e:	f003 030f 	and.w	r3, r3, #15
 8005e12:	b25b      	sxtb	r3, r3
 8005e14:	4313      	orrs	r3, r2
 8005e16:	b25b      	sxtb	r3, r3
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2201      	movs	r2, #1
 8005e22:	70da      	strb	r2, [r3, #3]
			break;
 8005e24:	e057      	b.n	8005ed6 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6a1a      	ldr	r2, [r3, #32]
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	0a1b      	lsrs	r3, r3, #8
 8005e2e:	4413      	add	r3, r2
 8005e30:	4619      	mov	r1, r3
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f7ff fe7c 	bl	8005b30 <move_window>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005e3c:	7ffb      	ldrb	r3, [r7, #31]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d146      	bne.n	8005ed0 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	005b      	lsls	r3, r3, #1
 8005e4c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005e50:	4413      	add	r3, r2
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	b292      	uxth	r2, r2
 8005e56:	4611      	mov	r1, r2
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7ff fc30 	bl	80056be <st_word>
			fs->wflag = 1;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2201      	movs	r2, #1
 8005e62:	70da      	strb	r2, [r3, #3]
			break;
 8005e64:	e037      	b.n	8005ed6 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6a1a      	ldr	r2, [r3, #32]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	09db      	lsrs	r3, r3, #7
 8005e6e:	4413      	add	r3, r2
 8005e70:	4619      	mov	r1, r3
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f7ff fe5c 	bl	8005b30 <move_window>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005e7c:	7ffb      	ldrb	r3, [r7, #31]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d128      	bne.n	8005ed4 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005e96:	4413      	add	r3, r2
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7ff fbed 	bl	8005678 <ld_dword>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005ea4:	4323      	orrs	r3, r4
 8005ea6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005eb6:	4413      	add	r3, r2
 8005eb8:	6879      	ldr	r1, [r7, #4]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7ff fc1a 	bl	80056f4 <st_dword>
			fs->wflag = 1;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	70da      	strb	r2, [r3, #3]
			break;
 8005ec6:	e006      	b.n	8005ed6 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005ec8:	bf00      	nop
 8005eca:	e004      	b.n	8005ed6 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005ecc:	bf00      	nop
 8005ece:	e002      	b.n	8005ed6 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005ed0:	bf00      	nop
 8005ed2:	e000      	b.n	8005ed6 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005ed4:	bf00      	nop
		}
	}
	return res;
 8005ed6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3724      	adds	r7, #36	; 0x24
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd90      	pop	{r4, r7, pc}

08005ee0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b088      	sub	sp, #32
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005eec:	2300      	movs	r3, #0
 8005eee:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d904      	bls.n	8005f06 <remove_chain+0x26>
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d301      	bcc.n	8005f0a <remove_chain+0x2a>
 8005f06:	2302      	movs	r3, #2
 8005f08:	e04b      	b.n	8005fa2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00c      	beq.n	8005f2a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005f10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f14:	6879      	ldr	r1, [r7, #4]
 8005f16:	69b8      	ldr	r0, [r7, #24]
 8005f18:	f7ff fefb 	bl	8005d12 <put_fat>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005f20:	7ffb      	ldrb	r3, [r7, #31]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <remove_chain+0x4a>
 8005f26:	7ffb      	ldrb	r3, [r7, #31]
 8005f28:	e03b      	b.n	8005fa2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005f2a:	68b9      	ldr	r1, [r7, #8]
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f7ff fe4b 	bl	8005bc8 <get_fat>
 8005f32:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d031      	beq.n	8005f9e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d101      	bne.n	8005f44 <remove_chain+0x64>
 8005f40:	2302      	movs	r3, #2
 8005f42:	e02e      	b.n	8005fa2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f4a:	d101      	bne.n	8005f50 <remove_chain+0x70>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e028      	b.n	8005fa2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005f50:	2200      	movs	r2, #0
 8005f52:	68b9      	ldr	r1, [r7, #8]
 8005f54:	69b8      	ldr	r0, [r7, #24]
 8005f56:	f7ff fedc 	bl	8005d12 <put_fat>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005f5e:	7ffb      	ldrb	r3, [r7, #31]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d001      	beq.n	8005f68 <remove_chain+0x88>
 8005f64:	7ffb      	ldrb	r3, [r7, #31]
 8005f66:	e01c      	b.n	8005fa2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	691a      	ldr	r2, [r3, #16]
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	3b02      	subs	r3, #2
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d20b      	bcs.n	8005f8e <remove_chain+0xae>
			fs->free_clst++;
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	1c5a      	adds	r2, r3, #1
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	791b      	ldrb	r3, [r3, #4]
 8005f84:	f043 0301 	orr.w	r3, r3, #1
 8005f88:	b2da      	uxtb	r2, r3
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d3c6      	bcc.n	8005f2a <remove_chain+0x4a>
 8005f9c:	e000      	b.n	8005fa0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005f9e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3720      	adds	r7, #32
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b088      	sub	sp, #32
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10d      	bne.n	8005fdc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d004      	beq.n	8005fd6 <create_chain+0x2c>
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	695b      	ldr	r3, [r3, #20]
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d31b      	bcc.n	800600e <create_chain+0x64>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	61bb      	str	r3, [r7, #24]
 8005fda:	e018      	b.n	800600e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005fdc:	6839      	ldr	r1, [r7, #0]
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7ff fdf2 	bl	8005bc8 <get_fat>
 8005fe4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d801      	bhi.n	8005ff0 <create_chain+0x46>
 8005fec:	2301      	movs	r3, #1
 8005fee:	e070      	b.n	80060d2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ff6:	d101      	bne.n	8005ffc <create_chain+0x52>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	e06a      	b.n	80060d2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	429a      	cmp	r2, r3
 8006004:	d201      	bcs.n	800600a <create_chain+0x60>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	e063      	b.n	80060d2 <create_chain+0x128>
		scl = clst;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	3301      	adds	r3, #1
 8006016:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	69fa      	ldr	r2, [r7, #28]
 800601e:	429a      	cmp	r2, r3
 8006020:	d307      	bcc.n	8006032 <create_chain+0x88>
				ncl = 2;
 8006022:	2302      	movs	r3, #2
 8006024:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006026:	69fa      	ldr	r2, [r7, #28]
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	429a      	cmp	r2, r3
 800602c:	d901      	bls.n	8006032 <create_chain+0x88>
 800602e:	2300      	movs	r3, #0
 8006030:	e04f      	b.n	80060d2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006032:	69f9      	ldr	r1, [r7, #28]
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7ff fdc7 	bl	8005bc8 <get_fat>
 800603a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00e      	beq.n	8006060 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d003      	beq.n	8006050 <create_chain+0xa6>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800604e:	d101      	bne.n	8006054 <create_chain+0xaa>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	e03e      	b.n	80060d2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006054:	69fa      	ldr	r2, [r7, #28]
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	429a      	cmp	r2, r3
 800605a:	d1da      	bne.n	8006012 <create_chain+0x68>
 800605c:	2300      	movs	r3, #0
 800605e:	e038      	b.n	80060d2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006060:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006062:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006066:	69f9      	ldr	r1, [r7, #28]
 8006068:	6938      	ldr	r0, [r7, #16]
 800606a:	f7ff fe52 	bl	8005d12 <put_fat>
 800606e:	4603      	mov	r3, r0
 8006070:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006072:	7dfb      	ldrb	r3, [r7, #23]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d109      	bne.n	800608c <create_chain+0xe2>
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d006      	beq.n	800608c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800607e:	69fa      	ldr	r2, [r7, #28]
 8006080:	6839      	ldr	r1, [r7, #0]
 8006082:	6938      	ldr	r0, [r7, #16]
 8006084:	f7ff fe45 	bl	8005d12 <put_fat>
 8006088:	4603      	mov	r3, r0
 800608a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800608c:	7dfb      	ldrb	r3, [r7, #23]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d116      	bne.n	80060c0 <create_chain+0x116>
		fs->last_clst = ncl;
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	69fa      	ldr	r2, [r7, #28]
 8006096:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	691a      	ldr	r2, [r3, #16]
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	3b02      	subs	r3, #2
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d804      	bhi.n	80060b0 <create_chain+0x106>
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	1e5a      	subs	r2, r3, #1
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	791b      	ldrb	r3, [r3, #4]
 80060b4:	f043 0301 	orr.w	r3, r3, #1
 80060b8:	b2da      	uxtb	r2, r3
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	711a      	strb	r2, [r3, #4]
 80060be:	e007      	b.n	80060d0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80060c0:	7dfb      	ldrb	r3, [r7, #23]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d102      	bne.n	80060cc <create_chain+0x122>
 80060c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060ca:	e000      	b.n	80060ce <create_chain+0x124>
 80060cc:	2301      	movs	r3, #1
 80060ce:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80060d0:	69fb      	ldr	r3, [r7, #28]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3720      	adds	r7, #32
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80060da:	b480      	push	{r7}
 80060dc:	b087      	sub	sp, #28
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
 80060e2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ee:	3304      	adds	r3, #4
 80060f0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	0a5b      	lsrs	r3, r3, #9
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	8952      	ldrh	r2, [r2, #10]
 80060fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80060fe:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	1d1a      	adds	r2, r3, #4
 8006104:	613a      	str	r2, [r7, #16]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <clmt_clust+0x3a>
 8006110:	2300      	movs	r3, #0
 8006112:	e010      	b.n	8006136 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	429a      	cmp	r2, r3
 800611a:	d307      	bcc.n	800612c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	617b      	str	r3, [r7, #20]
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	3304      	adds	r3, #4
 8006128:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800612a:	e7e9      	b.n	8006100 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800612c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	4413      	add	r3, r2
}
 8006136:	4618      	mov	r0, r3
 8006138:	371c      	adds	r7, #28
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b086      	sub	sp, #24
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
 800614a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006158:	d204      	bcs.n	8006164 <dir_sdi+0x22>
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	f003 031f 	and.w	r3, r3, #31
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006164:	2302      	movs	r3, #2
 8006166:	e063      	b.n	8006230 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	683a      	ldr	r2, [r7, #0]
 800616c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d106      	bne.n	8006188 <dir_sdi+0x46>
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	2b02      	cmp	r3, #2
 8006180:	d902      	bls.n	8006188 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006186:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10c      	bne.n	80061a8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	095b      	lsrs	r3, r3, #5
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	8912      	ldrh	r2, [r2, #8]
 8006196:	4293      	cmp	r3, r2
 8006198:	d301      	bcc.n	800619e <dir_sdi+0x5c>
 800619a:	2302      	movs	r3, #2
 800619c:	e048      	b.n	8006230 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	61da      	str	r2, [r3, #28]
 80061a6:	e029      	b.n	80061fc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	895b      	ldrh	r3, [r3, #10]
 80061ac:	025b      	lsls	r3, r3, #9
 80061ae:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80061b0:	e019      	b.n	80061e6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6979      	ldr	r1, [r7, #20]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7ff fd06 	bl	8005bc8 <get_fat>
 80061bc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061c4:	d101      	bne.n	80061ca <dir_sdi+0x88>
 80061c6:	2301      	movs	r3, #1
 80061c8:	e032      	b.n	8006230 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d904      	bls.n	80061da <dir_sdi+0x98>
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d301      	bcc.n	80061de <dir_sdi+0x9c>
 80061da:	2302      	movs	r3, #2
 80061dc:	e028      	b.n	8006230 <dir_sdi+0xee>
			ofs -= csz;
 80061de:	683a      	ldr	r2, [r7, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80061e6:	683a      	ldr	r2, [r7, #0]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d2e1      	bcs.n	80061b2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80061ee:	6979      	ldr	r1, [r7, #20]
 80061f0:	6938      	ldr	r0, [r7, #16]
 80061f2:	f7ff fcca 	bl	8005b8a <clust2sect>
 80061f6:	4602      	mov	r2, r0
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <dir_sdi+0xcc>
 800620a:	2302      	movs	r3, #2
 800620c:	e010      	b.n	8006230 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	69da      	ldr	r2, [r3, #28]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	0a5b      	lsrs	r3, r3, #9
 8006216:	441a      	add	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006228:	441a      	add	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3718      	adds	r7, #24
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	3320      	adds	r3, #32
 800624e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	69db      	ldr	r3, [r3, #28]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d003      	beq.n	8006260 <dir_next+0x28>
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800625e:	d301      	bcc.n	8006264 <dir_next+0x2c>
 8006260:	2304      	movs	r3, #4
 8006262:	e0aa      	b.n	80063ba <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800626a:	2b00      	cmp	r3, #0
 800626c:	f040 8098 	bne.w	80063a0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	69db      	ldr	r3, [r3, #28]
 8006274:	1c5a      	adds	r2, r3, #1
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10b      	bne.n	800629a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	095b      	lsrs	r3, r3, #5
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	8912      	ldrh	r2, [r2, #8]
 800628a:	4293      	cmp	r3, r2
 800628c:	f0c0 8088 	bcc.w	80063a0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	61da      	str	r2, [r3, #28]
 8006296:	2304      	movs	r3, #4
 8006298:	e08f      	b.n	80063ba <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	0a5b      	lsrs	r3, r3, #9
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	8952      	ldrh	r2, [r2, #10]
 80062a2:	3a01      	subs	r2, #1
 80062a4:	4013      	ands	r3, r2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d17a      	bne.n	80063a0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	4619      	mov	r1, r3
 80062b2:	4610      	mov	r0, r2
 80062b4:	f7ff fc88 	bl	8005bc8 <get_fat>
 80062b8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d801      	bhi.n	80062c4 <dir_next+0x8c>
 80062c0:	2302      	movs	r3, #2
 80062c2:	e07a      	b.n	80063ba <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062ca:	d101      	bne.n	80062d0 <dir_next+0x98>
 80062cc:	2301      	movs	r3, #1
 80062ce:	e074      	b.n	80063ba <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d358      	bcc.n	800638c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d104      	bne.n	80062ea <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	61da      	str	r2, [r3, #28]
 80062e6:	2304      	movs	r3, #4
 80062e8:	e067      	b.n	80063ba <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	4619      	mov	r1, r3
 80062f2:	4610      	mov	r0, r2
 80062f4:	f7ff fe59 	bl	8005faa <create_chain>
 80062f8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <dir_next+0xcc>
 8006300:	2307      	movs	r3, #7
 8006302:	e05a      	b.n	80063ba <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d101      	bne.n	800630e <dir_next+0xd6>
 800630a:	2302      	movs	r3, #2
 800630c:	e055      	b.n	80063ba <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006314:	d101      	bne.n	800631a <dir_next+0xe2>
 8006316:	2301      	movs	r3, #1
 8006318:	e04f      	b.n	80063ba <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f7ff fbc4 	bl	8005aa8 <sync_window>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <dir_next+0xf2>
 8006326:	2301      	movs	r3, #1
 8006328:	e047      	b.n	80063ba <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	3330      	adds	r3, #48	; 0x30
 800632e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006332:	2100      	movs	r1, #0
 8006334:	4618      	mov	r0, r3
 8006336:	f7ff fa2a 	bl	800578e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800633a:	2300      	movs	r3, #0
 800633c:	613b      	str	r3, [r7, #16]
 800633e:	6979      	ldr	r1, [r7, #20]
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f7ff fc22 	bl	8005b8a <clust2sect>
 8006346:	4602      	mov	r2, r0
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	62da      	str	r2, [r3, #44]	; 0x2c
 800634c:	e012      	b.n	8006374 <dir_next+0x13c>
						fs->wflag = 1;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2201      	movs	r2, #1
 8006352:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f7ff fba7 	bl	8005aa8 <sync_window>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <dir_next+0x12c>
 8006360:	2301      	movs	r3, #1
 8006362:	e02a      	b.n	80063ba <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	3301      	adds	r3, #1
 8006368:	613b      	str	r3, [r7, #16]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636e:	1c5a      	adds	r2, r3, #1
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	62da      	str	r2, [r3, #44]	; 0x2c
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	895b      	ldrh	r3, [r3, #10]
 8006378:	461a      	mov	r2, r3
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	4293      	cmp	r3, r2
 800637e:	d3e6      	bcc.n	800634e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	1ad2      	subs	r2, r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006392:	6979      	ldr	r1, [r7, #20]
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f7ff fbf8 	bl	8005b8a <clust2sect>
 800639a:	4602      	mov	r2, r0
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063b2:	441a      	add	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b086      	sub	sp, #24
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
 80063ca:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80063d2:	2100      	movs	r1, #0
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f7ff feb4 	bl	8006142 <dir_sdi>
 80063da:	4603      	mov	r3, r0
 80063dc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80063de:	7dfb      	ldrb	r3, [r7, #23]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d12b      	bne.n	800643c <dir_alloc+0x7a>
		n = 0;
 80063e4:	2300      	movs	r3, #0
 80063e6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	69db      	ldr	r3, [r3, #28]
 80063ec:	4619      	mov	r1, r3
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f7ff fb9e 	bl	8005b30 <move_window>
 80063f4:	4603      	mov	r3, r0
 80063f6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80063f8:	7dfb      	ldrb	r3, [r7, #23]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d11d      	bne.n	800643a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	2be5      	cmp	r3, #229	; 0xe5
 8006406:	d004      	beq.n	8006412 <dir_alloc+0x50>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d107      	bne.n	8006422 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	3301      	adds	r3, #1
 8006416:	613b      	str	r3, [r7, #16]
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	429a      	cmp	r2, r3
 800641e:	d102      	bne.n	8006426 <dir_alloc+0x64>
 8006420:	e00c      	b.n	800643c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006422:	2300      	movs	r3, #0
 8006424:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006426:	2101      	movs	r1, #1
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f7ff ff05 	bl	8006238 <dir_next>
 800642e:	4603      	mov	r3, r0
 8006430:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006432:	7dfb      	ldrb	r3, [r7, #23]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d0d7      	beq.n	80063e8 <dir_alloc+0x26>
 8006438:	e000      	b.n	800643c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800643a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800643c:	7dfb      	ldrb	r3, [r7, #23]
 800643e:	2b04      	cmp	r3, #4
 8006440:	d101      	bne.n	8006446 <dir_alloc+0x84>
 8006442:	2307      	movs	r3, #7
 8006444:	75fb      	strb	r3, [r7, #23]
	return res;
 8006446:	7dfb      	ldrb	r3, [r7, #23]
}
 8006448:	4618      	mov	r0, r3
 800644a:	3718      	adds	r7, #24
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	331a      	adds	r3, #26
 800645e:	4618      	mov	r0, r3
 8006460:	f7ff f8f2 	bl	8005648 <ld_word>
 8006464:	4603      	mov	r3, r0
 8006466:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	2b03      	cmp	r3, #3
 800646e:	d109      	bne.n	8006484 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	3314      	adds	r3, #20
 8006474:	4618      	mov	r0, r3
 8006476:	f7ff f8e7 	bl	8005648 <ld_word>
 800647a:	4603      	mov	r3, r0
 800647c:	041b      	lsls	r3, r3, #16
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	4313      	orrs	r3, r2
 8006482:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006484:	68fb      	ldr	r3, [r7, #12]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b084      	sub	sp, #16
 8006492:	af00      	add	r7, sp, #0
 8006494:	60f8      	str	r0, [r7, #12]
 8006496:	60b9      	str	r1, [r7, #8]
 8006498:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	331a      	adds	r3, #26
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	b292      	uxth	r2, r2
 80064a2:	4611      	mov	r1, r2
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7ff f90a 	bl	80056be <st_word>
	if (fs->fs_type == FS_FAT32) {
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	2b03      	cmp	r3, #3
 80064b0:	d109      	bne.n	80064c6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	f103 0214 	add.w	r2, r3, #20
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	0c1b      	lsrs	r3, r3, #16
 80064bc:	b29b      	uxth	r3, r3
 80064be:	4619      	mov	r1, r3
 80064c0:	4610      	mov	r0, r2
 80064c2:	f7ff f8fc 	bl	80056be <st_word>
	}
}
 80064c6:	bf00      	nop
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b086      	sub	sp, #24
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80064dc:	2100      	movs	r1, #0
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7ff fe2f 	bl	8006142 <dir_sdi>
 80064e4:	4603      	mov	r3, r0
 80064e6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80064e8:	7dfb      	ldrb	r3, [r7, #23]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d001      	beq.n	80064f2 <dir_find+0x24>
 80064ee:	7dfb      	ldrb	r3, [r7, #23]
 80064f0:	e03e      	b.n	8006570 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	69db      	ldr	r3, [r3, #28]
 80064f6:	4619      	mov	r1, r3
 80064f8:	6938      	ldr	r0, [r7, #16]
 80064fa:	f7ff fb19 	bl	8005b30 <move_window>
 80064fe:	4603      	mov	r3, r0
 8006500:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006502:	7dfb      	ldrb	r3, [r7, #23]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d12f      	bne.n	8006568 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006510:	7bfb      	ldrb	r3, [r7, #15]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d102      	bne.n	800651c <dir_find+0x4e>
 8006516:	2304      	movs	r3, #4
 8006518:	75fb      	strb	r3, [r7, #23]
 800651a:	e028      	b.n	800656e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a1b      	ldr	r3, [r3, #32]
 8006520:	330b      	adds	r3, #11
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006528:	b2da      	uxtb	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	330b      	adds	r3, #11
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	f003 0308 	and.w	r3, r3, #8
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10a      	bne.n	8006554 <dir_find+0x86>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a18      	ldr	r0, [r3, #32]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	3324      	adds	r3, #36	; 0x24
 8006546:	220b      	movs	r2, #11
 8006548:	4619      	mov	r1, r3
 800654a:	f7ff f93a 	bl	80057c2 <mem_cmp>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00b      	beq.n	800656c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006554:	2100      	movs	r1, #0
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f7ff fe6e 	bl	8006238 <dir_next>
 800655c:	4603      	mov	r3, r0
 800655e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006560:	7dfb      	ldrb	r3, [r7, #23]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d0c5      	beq.n	80064f2 <dir_find+0x24>
 8006566:	e002      	b.n	800656e <dir_find+0xa0>
		if (res != FR_OK) break;
 8006568:	bf00      	nop
 800656a:	e000      	b.n	800656e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800656c:	bf00      	nop

	return res;
 800656e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3718      	adds	r7, #24
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006586:	2101      	movs	r1, #1
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f7ff ff1a 	bl	80063c2 <dir_alloc>
 800658e:	4603      	mov	r3, r0
 8006590:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006592:	7bfb      	ldrb	r3, [r7, #15]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d11c      	bne.n	80065d2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	69db      	ldr	r3, [r3, #28]
 800659c:	4619      	mov	r1, r3
 800659e:	68b8      	ldr	r0, [r7, #8]
 80065a0:	f7ff fac6 	bl	8005b30 <move_window>
 80065a4:	4603      	mov	r3, r0
 80065a6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80065a8:	7bfb      	ldrb	r3, [r7, #15]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d111      	bne.n	80065d2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	2220      	movs	r2, #32
 80065b4:	2100      	movs	r1, #0
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7ff f8e9 	bl	800578e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a18      	ldr	r0, [r3, #32]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	3324      	adds	r3, #36	; 0x24
 80065c4:	220b      	movs	r2, #11
 80065c6:	4619      	mov	r1, r3
 80065c8:	f7ff f8c0 	bl	800574c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2201      	movs	r2, #1
 80065d0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80065d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b088      	sub	sp, #32
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	60fb      	str	r3, [r7, #12]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	3324      	adds	r3, #36	; 0x24
 80065f0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80065f2:	220b      	movs	r2, #11
 80065f4:	2120      	movs	r1, #32
 80065f6:	68b8      	ldr	r0, [r7, #8]
 80065f8:	f7ff f8c9 	bl	800578e <mem_set>
	si = i = 0; ni = 8;
 80065fc:	2300      	movs	r3, #0
 80065fe:	613b      	str	r3, [r7, #16]
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	617b      	str	r3, [r7, #20]
 8006604:	2308      	movs	r3, #8
 8006606:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	617a      	str	r2, [r7, #20]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	4413      	add	r3, r2
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006616:	7ffb      	ldrb	r3, [r7, #31]
 8006618:	2b20      	cmp	r3, #32
 800661a:	d94e      	bls.n	80066ba <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800661c:	7ffb      	ldrb	r3, [r7, #31]
 800661e:	2b2f      	cmp	r3, #47	; 0x2f
 8006620:	d006      	beq.n	8006630 <create_name+0x54>
 8006622:	7ffb      	ldrb	r3, [r7, #31]
 8006624:	2b5c      	cmp	r3, #92	; 0x5c
 8006626:	d110      	bne.n	800664a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006628:	e002      	b.n	8006630 <create_name+0x54>
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	3301      	adds	r3, #1
 800662e:	617b      	str	r3, [r7, #20]
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	4413      	add	r3, r2
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	2b2f      	cmp	r3, #47	; 0x2f
 800663a:	d0f6      	beq.n	800662a <create_name+0x4e>
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	4413      	add	r3, r2
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	2b5c      	cmp	r3, #92	; 0x5c
 8006646:	d0f0      	beq.n	800662a <create_name+0x4e>
			break;
 8006648:	e038      	b.n	80066bc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800664a:	7ffb      	ldrb	r3, [r7, #31]
 800664c:	2b2e      	cmp	r3, #46	; 0x2e
 800664e:	d003      	beq.n	8006658 <create_name+0x7c>
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	429a      	cmp	r2, r3
 8006656:	d30c      	bcc.n	8006672 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	2b0b      	cmp	r3, #11
 800665c:	d002      	beq.n	8006664 <create_name+0x88>
 800665e:	7ffb      	ldrb	r3, [r7, #31]
 8006660:	2b2e      	cmp	r3, #46	; 0x2e
 8006662:	d001      	beq.n	8006668 <create_name+0x8c>
 8006664:	2306      	movs	r3, #6
 8006666:	e044      	b.n	80066f2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006668:	2308      	movs	r3, #8
 800666a:	613b      	str	r3, [r7, #16]
 800666c:	230b      	movs	r3, #11
 800666e:	61bb      	str	r3, [r7, #24]
			continue;
 8006670:	e022      	b.n	80066b8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006672:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006676:	2b00      	cmp	r3, #0
 8006678:	da04      	bge.n	8006684 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800667a:	7ffb      	ldrb	r3, [r7, #31]
 800667c:	3b80      	subs	r3, #128	; 0x80
 800667e:	4a1f      	ldr	r2, [pc, #124]	; (80066fc <create_name+0x120>)
 8006680:	5cd3      	ldrb	r3, [r2, r3]
 8006682:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006684:	7ffb      	ldrb	r3, [r7, #31]
 8006686:	4619      	mov	r1, r3
 8006688:	481d      	ldr	r0, [pc, #116]	; (8006700 <create_name+0x124>)
 800668a:	f7ff f8c1 	bl	8005810 <chk_chr>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d001      	beq.n	8006698 <create_name+0xbc>
 8006694:	2306      	movs	r3, #6
 8006696:	e02c      	b.n	80066f2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006698:	7ffb      	ldrb	r3, [r7, #31]
 800669a:	2b60      	cmp	r3, #96	; 0x60
 800669c:	d905      	bls.n	80066aa <create_name+0xce>
 800669e:	7ffb      	ldrb	r3, [r7, #31]
 80066a0:	2b7a      	cmp	r3, #122	; 0x7a
 80066a2:	d802      	bhi.n	80066aa <create_name+0xce>
 80066a4:	7ffb      	ldrb	r3, [r7, #31]
 80066a6:	3b20      	subs	r3, #32
 80066a8:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	1c5a      	adds	r2, r3, #1
 80066ae:	613a      	str	r2, [r7, #16]
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	4413      	add	r3, r2
 80066b4:	7ffa      	ldrb	r2, [r7, #31]
 80066b6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80066b8:	e7a6      	b.n	8006608 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80066ba:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	441a      	add	r2, r3
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d101      	bne.n	80066d0 <create_name+0xf4>
 80066cc:	2306      	movs	r3, #6
 80066ce:	e010      	b.n	80066f2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	2be5      	cmp	r3, #229	; 0xe5
 80066d6:	d102      	bne.n	80066de <create_name+0x102>
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	2205      	movs	r2, #5
 80066dc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80066de:	7ffb      	ldrb	r3, [r7, #31]
 80066e0:	2b20      	cmp	r3, #32
 80066e2:	d801      	bhi.n	80066e8 <create_name+0x10c>
 80066e4:	2204      	movs	r2, #4
 80066e6:	e000      	b.n	80066ea <create_name+0x10e>
 80066e8:	2200      	movs	r2, #0
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	330b      	adds	r3, #11
 80066ee:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80066f0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3720      	adds	r7, #32
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	08008b24 	.word	0x08008b24
 8006700:	08008ad0 	.word	0x08008ad0

08006704 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006718:	e002      	b.n	8006720 <follow_path+0x1c>
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	3301      	adds	r3, #1
 800671e:	603b      	str	r3, [r7, #0]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	2b2f      	cmp	r3, #47	; 0x2f
 8006726:	d0f8      	beq.n	800671a <follow_path+0x16>
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	2b5c      	cmp	r3, #92	; 0x5c
 800672e:	d0f4      	beq.n	800671a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	2200      	movs	r2, #0
 8006734:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	2b1f      	cmp	r3, #31
 800673c:	d80a      	bhi.n	8006754 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2280      	movs	r2, #128	; 0x80
 8006742:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006746:	2100      	movs	r1, #0
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f7ff fcfa 	bl	8006142 <dir_sdi>
 800674e:	4603      	mov	r3, r0
 8006750:	75fb      	strb	r3, [r7, #23]
 8006752:	e043      	b.n	80067dc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006754:	463b      	mov	r3, r7
 8006756:	4619      	mov	r1, r3
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f7ff ff3f 	bl	80065dc <create_name>
 800675e:	4603      	mov	r3, r0
 8006760:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006762:	7dfb      	ldrb	r3, [r7, #23]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d134      	bne.n	80067d2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f7ff feb0 	bl	80064ce <dir_find>
 800676e:	4603      	mov	r3, r0
 8006770:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006778:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800677a:	7dfb      	ldrb	r3, [r7, #23]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00a      	beq.n	8006796 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006780:	7dfb      	ldrb	r3, [r7, #23]
 8006782:	2b04      	cmp	r3, #4
 8006784:	d127      	bne.n	80067d6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006786:	7afb      	ldrb	r3, [r7, #11]
 8006788:	f003 0304 	and.w	r3, r3, #4
 800678c:	2b00      	cmp	r3, #0
 800678e:	d122      	bne.n	80067d6 <follow_path+0xd2>
 8006790:	2305      	movs	r3, #5
 8006792:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006794:	e01f      	b.n	80067d6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006796:	7afb      	ldrb	r3, [r7, #11]
 8006798:	f003 0304 	and.w	r3, r3, #4
 800679c:	2b00      	cmp	r3, #0
 800679e:	d11c      	bne.n	80067da <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	799b      	ldrb	r3, [r3, #6]
 80067a4:	f003 0310 	and.w	r3, r3, #16
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d102      	bne.n	80067b2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80067ac:	2305      	movs	r3, #5
 80067ae:	75fb      	strb	r3, [r7, #23]
 80067b0:	e014      	b.n	80067dc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	695b      	ldr	r3, [r3, #20]
 80067bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067c0:	4413      	add	r3, r2
 80067c2:	4619      	mov	r1, r3
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f7ff fe43 	bl	8006450 <ld_clust>
 80067ca:	4602      	mov	r2, r0
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80067d0:	e7c0      	b.n	8006754 <follow_path+0x50>
			if (res != FR_OK) break;
 80067d2:	bf00      	nop
 80067d4:	e002      	b.n	80067dc <follow_path+0xd8>
				break;
 80067d6:	bf00      	nop
 80067d8:	e000      	b.n	80067dc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80067da:	bf00      	nop
			}
		}
	}

	return res;
 80067dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3718      	adds	r7, #24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b087      	sub	sp, #28
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80067ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067f2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d031      	beq.n	8006860 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	617b      	str	r3, [r7, #20]
 8006802:	e002      	b.n	800680a <get_ldnumber+0x24>
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	3301      	adds	r3, #1
 8006808:	617b      	str	r3, [r7, #20]
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	2b20      	cmp	r3, #32
 8006810:	d903      	bls.n	800681a <get_ldnumber+0x34>
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	2b3a      	cmp	r3, #58	; 0x3a
 8006818:	d1f4      	bne.n	8006804 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	2b3a      	cmp	r3, #58	; 0x3a
 8006820:	d11c      	bne.n	800685c <get_ldnumber+0x76>
			tp = *path;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	1c5a      	adds	r2, r3, #1
 800682c:	60fa      	str	r2, [r7, #12]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	3b30      	subs	r3, #48	; 0x30
 8006832:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	2b09      	cmp	r3, #9
 8006838:	d80e      	bhi.n	8006858 <get_ldnumber+0x72>
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	429a      	cmp	r2, r3
 8006840:	d10a      	bne.n	8006858 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d107      	bne.n	8006858 <get_ldnumber+0x72>
					vol = (int)i;
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	3301      	adds	r3, #1
 8006850:	617b      	str	r3, [r7, #20]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	e002      	b.n	8006862 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800685c:	2300      	movs	r3, #0
 800685e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006860:	693b      	ldr	r3, [r7, #16]
}
 8006862:	4618      	mov	r0, r3
 8006864:	371c      	adds	r7, #28
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
	...

08006870 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	70da      	strb	r2, [r3, #3]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006886:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006888:	6839      	ldr	r1, [r7, #0]
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f7ff f950 	bl	8005b30 <move_window>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d001      	beq.n	800689a <check_fs+0x2a>
 8006896:	2304      	movs	r3, #4
 8006898:	e038      	b.n	800690c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	3330      	adds	r3, #48	; 0x30
 800689e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7fe fed0 	bl	8005648 <ld_word>
 80068a8:	4603      	mov	r3, r0
 80068aa:	461a      	mov	r2, r3
 80068ac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d001      	beq.n	80068b8 <check_fs+0x48>
 80068b4:	2303      	movs	r3, #3
 80068b6:	e029      	b.n	800690c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80068be:	2be9      	cmp	r3, #233	; 0xe9
 80068c0:	d009      	beq.n	80068d6 <check_fs+0x66>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80068c8:	2beb      	cmp	r3, #235	; 0xeb
 80068ca:	d11e      	bne.n	800690a <check_fs+0x9a>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80068d2:	2b90      	cmp	r3, #144	; 0x90
 80068d4:	d119      	bne.n	800690a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	3330      	adds	r3, #48	; 0x30
 80068da:	3336      	adds	r3, #54	; 0x36
 80068dc:	4618      	mov	r0, r3
 80068de:	f7fe fecb 	bl	8005678 <ld_dword>
 80068e2:	4603      	mov	r3, r0
 80068e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80068e8:	4a0a      	ldr	r2, [pc, #40]	; (8006914 <check_fs+0xa4>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d101      	bne.n	80068f2 <check_fs+0x82>
 80068ee:	2300      	movs	r3, #0
 80068f0:	e00c      	b.n	800690c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	3330      	adds	r3, #48	; 0x30
 80068f6:	3352      	adds	r3, #82	; 0x52
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7fe febd 	bl	8005678 <ld_dword>
 80068fe:	4602      	mov	r2, r0
 8006900:	4b05      	ldr	r3, [pc, #20]	; (8006918 <check_fs+0xa8>)
 8006902:	429a      	cmp	r2, r3
 8006904:	d101      	bne.n	800690a <check_fs+0x9a>
 8006906:	2300      	movs	r3, #0
 8006908:	e000      	b.n	800690c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800690a:	2302      	movs	r3, #2
}
 800690c:	4618      	mov	r0, r3
 800690e:	3708      	adds	r7, #8
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	00544146 	.word	0x00544146
 8006918:	33544146 	.word	0x33544146

0800691c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b096      	sub	sp, #88	; 0x58
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	4613      	mov	r3, r2
 8006928:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	2200      	movs	r2, #0
 800692e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f7ff ff58 	bl	80067e6 <get_ldnumber>
 8006936:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800693a:	2b00      	cmp	r3, #0
 800693c:	da01      	bge.n	8006942 <find_volume+0x26>
 800693e:	230b      	movs	r3, #11
 8006940:	e22e      	b.n	8006da0 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006942:	4aa8      	ldr	r2, [pc, #672]	; (8006be4 <find_volume+0x2c8>)
 8006944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800694a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800694c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <find_volume+0x3a>
 8006952:	230c      	movs	r3, #12
 8006954:	e224      	b.n	8006da0 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800695a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800695c:	79fb      	ldrb	r3, [r7, #7]
 800695e:	f023 0301 	bic.w	r3, r3, #1
 8006962:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d01a      	beq.n	80069a2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800696c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696e:	785b      	ldrb	r3, [r3, #1]
 8006970:	4618      	mov	r0, r3
 8006972:	f7fe fde9 	bl	8005548 <disk_status>
 8006976:	4603      	mov	r3, r0
 8006978:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800697c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	2b00      	cmp	r3, #0
 8006986:	d10c      	bne.n	80069a2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006988:	79fb      	ldrb	r3, [r7, #7]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d007      	beq.n	800699e <find_volume+0x82>
 800698e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006992:	f003 0304 	and.w	r3, r3, #4
 8006996:	2b00      	cmp	r3, #0
 8006998:	d001      	beq.n	800699e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800699a:	230a      	movs	r3, #10
 800699c:	e200      	b.n	8006da0 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800699e:	2300      	movs	r3, #0
 80069a0:	e1fe      	b.n	8006da0 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80069a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a4:	2200      	movs	r2, #0
 80069a6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80069a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069aa:	b2da      	uxtb	r2, r3
 80069ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80069b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b2:	785b      	ldrb	r3, [r3, #1]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7fe fde1 	bl	800557c <disk_initialize>
 80069ba:	4603      	mov	r3, r0
 80069bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80069c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80069c4:	f003 0301 	and.w	r3, r3, #1
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d001      	beq.n	80069d0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80069cc:	2303      	movs	r3, #3
 80069ce:	e1e7      	b.n	8006da0 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80069d0:	79fb      	ldrb	r3, [r7, #7]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d007      	beq.n	80069e6 <find_volume+0xca>
 80069d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80069da:	f003 0304 	and.w	r3, r3, #4
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d001      	beq.n	80069e6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80069e2:	230a      	movs	r3, #10
 80069e4:	e1dc      	b.n	8006da0 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80069e6:	2300      	movs	r3, #0
 80069e8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80069ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80069ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80069ee:	f7ff ff3f 	bl	8006870 <check_fs>
 80069f2:	4603      	mov	r3, r0
 80069f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80069f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d14b      	bne.n	8006a98 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006a00:	2300      	movs	r3, #0
 8006a02:	643b      	str	r3, [r7, #64]	; 0x40
 8006a04:	e01f      	b.n	8006a46 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a08:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a0e:	011b      	lsls	r3, r3, #4
 8006a10:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006a14:	4413      	add	r3, r2
 8006a16:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1a:	3304      	adds	r3, #4
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d006      	beq.n	8006a30 <find_volume+0x114>
 8006a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a24:	3308      	adds	r3, #8
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fe fe26 	bl	8005678 <ld_dword>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	e000      	b.n	8006a32 <find_volume+0x116>
 8006a30:	2200      	movs	r2, #0
 8006a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006a3a:	440b      	add	r3, r1
 8006a3c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a42:	3301      	adds	r3, #1
 8006a44:	643b      	str	r3, [r7, #64]	; 0x40
 8006a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a48:	2b03      	cmp	r3, #3
 8006a4a:	d9dc      	bls.n	8006a06 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d002      	beq.n	8006a5c <find_volume+0x140>
 8006a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006a64:	4413      	add	r3, r2
 8006a66:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006a6a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006a6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d005      	beq.n	8006a7e <find_volume+0x162>
 8006a72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006a74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a76:	f7ff fefb 	bl	8006870 <check_fs>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	e000      	b.n	8006a80 <find_volume+0x164>
 8006a7e:	2303      	movs	r3, #3
 8006a80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006a84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d905      	bls.n	8006a98 <find_volume+0x17c>
 8006a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a8e:	3301      	adds	r3, #1
 8006a90:	643b      	str	r3, [r7, #64]	; 0x40
 8006a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a94:	2b03      	cmp	r3, #3
 8006a96:	d9e1      	bls.n	8006a5c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006a98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a9c:	2b04      	cmp	r3, #4
 8006a9e:	d101      	bne.n	8006aa4 <find_volume+0x188>
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e17d      	b.n	8006da0 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006aa4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d901      	bls.n	8006ab0 <find_volume+0x194>
 8006aac:	230d      	movs	r3, #13
 8006aae:	e177      	b.n	8006da0 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab2:	3330      	adds	r3, #48	; 0x30
 8006ab4:	330b      	adds	r3, #11
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7fe fdc6 	bl	8005648 <ld_word>
 8006abc:	4603      	mov	r3, r0
 8006abe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ac2:	d001      	beq.n	8006ac8 <find_volume+0x1ac>
 8006ac4:	230d      	movs	r3, #13
 8006ac6:	e16b      	b.n	8006da0 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aca:	3330      	adds	r3, #48	; 0x30
 8006acc:	3316      	adds	r3, #22
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fe fdba 	bl	8005648 <ld_word>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d106      	bne.n	8006aec <find_volume+0x1d0>
 8006ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae0:	3330      	adds	r3, #48	; 0x30
 8006ae2:	3324      	adds	r3, #36	; 0x24
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7fe fdc7 	bl	8005678 <ld_dword>
 8006aea:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006af0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afe:	789b      	ldrb	r3, [r3, #2]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d005      	beq.n	8006b10 <find_volume+0x1f4>
 8006b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b06:	789b      	ldrb	r3, [r3, #2]
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d001      	beq.n	8006b10 <find_volume+0x1f4>
 8006b0c:	230d      	movs	r3, #13
 8006b0e:	e147      	b.n	8006da0 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b12:	789b      	ldrb	r3, [r3, #2]
 8006b14:	461a      	mov	r2, r3
 8006b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b18:	fb02 f303 	mul.w	r3, r2, r3
 8006b1c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b28:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2c:	895b      	ldrh	r3, [r3, #10]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d008      	beq.n	8006b44 <find_volume+0x228>
 8006b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b34:	895b      	ldrh	r3, [r3, #10]
 8006b36:	461a      	mov	r2, r3
 8006b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3a:	895b      	ldrh	r3, [r3, #10]
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	4013      	ands	r3, r2
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d001      	beq.n	8006b48 <find_volume+0x22c>
 8006b44:	230d      	movs	r3, #13
 8006b46:	e12b      	b.n	8006da0 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4a:	3330      	adds	r3, #48	; 0x30
 8006b4c:	3311      	adds	r3, #17
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7fe fd7a 	bl	8005648 <ld_word>
 8006b54:	4603      	mov	r3, r0
 8006b56:	461a      	mov	r2, r3
 8006b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5e:	891b      	ldrh	r3, [r3, #8]
 8006b60:	f003 030f 	and.w	r3, r3, #15
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <find_volume+0x252>
 8006b6a:	230d      	movs	r3, #13
 8006b6c:	e118      	b.n	8006da0 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b70:	3330      	adds	r3, #48	; 0x30
 8006b72:	3313      	adds	r3, #19
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7fe fd67 	bl	8005648 <ld_word>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d106      	bne.n	8006b92 <find_volume+0x276>
 8006b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b86:	3330      	adds	r3, #48	; 0x30
 8006b88:	3320      	adds	r3, #32
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7fe fd74 	bl	8005678 <ld_dword>
 8006b90:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b94:	3330      	adds	r3, #48	; 0x30
 8006b96:	330e      	adds	r3, #14
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7fe fd55 	bl	8005648 <ld_word>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006ba2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d101      	bne.n	8006bac <find_volume+0x290>
 8006ba8:	230d      	movs	r3, #13
 8006baa:	e0f9      	b.n	8006da0 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006bac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb0:	4413      	add	r3, r2
 8006bb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bb4:	8912      	ldrh	r2, [r2, #8]
 8006bb6:	0912      	lsrs	r2, r2, #4
 8006bb8:	b292      	uxth	r2, r2
 8006bba:	4413      	add	r3, r2
 8006bbc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006bbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d201      	bcs.n	8006bca <find_volume+0x2ae>
 8006bc6:	230d      	movs	r3, #13
 8006bc8:	e0ea      	b.n	8006da0 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006bca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bd2:	8952      	ldrh	r2, [r2, #10]
 8006bd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bd8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d103      	bne.n	8006be8 <find_volume+0x2cc>
 8006be0:	230d      	movs	r3, #13
 8006be2:	e0dd      	b.n	8006da0 <find_volume+0x484>
 8006be4:	20000028 	.word	0x20000028
		fmt = FS_FAT32;
 8006be8:	2303      	movs	r3, #3
 8006bea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d802      	bhi.n	8006bfe <find_volume+0x2e2>
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c00:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d802      	bhi.n	8006c0e <find_volume+0x2f2>
 8006c08:	2301      	movs	r3, #1
 8006c0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	1c9a      	adds	r2, r3, #2
 8006c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c14:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c1a:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006c1c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c20:	441a      	add	r2, r3
 8006c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c24:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006c26:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2a:	441a      	add	r2, r3
 8006c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2e:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8006c30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c34:	2b03      	cmp	r3, #3
 8006c36:	d11e      	bne.n	8006c76 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3a:	3330      	adds	r3, #48	; 0x30
 8006c3c:	332a      	adds	r3, #42	; 0x2a
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fe fd02 	bl	8005648 <ld_word>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d001      	beq.n	8006c4e <find_volume+0x332>
 8006c4a:	230d      	movs	r3, #13
 8006c4c:	e0a8      	b.n	8006da0 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c50:	891b      	ldrh	r3, [r3, #8]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <find_volume+0x33e>
 8006c56:	230d      	movs	r3, #13
 8006c58:	e0a2      	b.n	8006da0 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5c:	3330      	adds	r3, #48	; 0x30
 8006c5e:	332c      	adds	r3, #44	; 0x2c
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7fe fd09 	bl	8005678 <ld_dword>
 8006c66:	4602      	mov	r2, r0
 8006c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	647b      	str	r3, [r7, #68]	; 0x44
 8006c74:	e01f      	b.n	8006cb6 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c78:	891b      	ldrh	r3, [r3, #8]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d101      	bne.n	8006c82 <find_volume+0x366>
 8006c7e:	230d      	movs	r3, #13
 8006c80:	e08e      	b.n	8006da0 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c84:	6a1a      	ldr	r2, [r3, #32]
 8006c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c88:	441a      	add	r2, r3
 8006c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006c8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d103      	bne.n	8006c9e <find_volume+0x382>
 8006c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	005b      	lsls	r3, r3, #1
 8006c9c:	e00a      	b.n	8006cb4 <find_volume+0x398>
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca0:	695a      	ldr	r2, [r3, #20]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	005b      	lsls	r3, r3, #1
 8006ca6:	4413      	add	r3, r2
 8006ca8:	085a      	lsrs	r2, r3, #1
 8006caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006cb4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb8:	699a      	ldr	r2, [r3, #24]
 8006cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cbc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006cc0:	0a5b      	lsrs	r3, r3, #9
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d201      	bcs.n	8006cca <find_volume+0x3ae>
 8006cc6:	230d      	movs	r3, #13
 8006cc8:	e06a      	b.n	8006da0 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ccc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cd0:	611a      	str	r2, [r3, #16]
 8006cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd4:	691a      	ldr	r2, [r3, #16]
 8006cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd8:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cdc:	2280      	movs	r2, #128	; 0x80
 8006cde:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006ce0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ce4:	2b03      	cmp	r3, #3
 8006ce6:	d149      	bne.n	8006d7c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cea:	3330      	adds	r3, #48	; 0x30
 8006cec:	3330      	adds	r3, #48	; 0x30
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7fe fcaa 	bl	8005648 <ld_word>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d140      	bne.n	8006d7c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	4619      	mov	r1, r3
 8006d00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d02:	f7fe ff15 	bl	8005b30 <move_window>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d137      	bne.n	8006d7c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8006d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0e:	2200      	movs	r2, #0
 8006d10:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d14:	3330      	adds	r3, #48	; 0x30
 8006d16:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7fe fc94 	bl	8005648 <ld_word>
 8006d20:	4603      	mov	r3, r0
 8006d22:	461a      	mov	r2, r3
 8006d24:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d127      	bne.n	8006d7c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2e:	3330      	adds	r3, #48	; 0x30
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7fe fca1 	bl	8005678 <ld_dword>
 8006d36:	4602      	mov	r2, r0
 8006d38:	4b1b      	ldr	r3, [pc, #108]	; (8006da8 <find_volume+0x48c>)
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d11e      	bne.n	8006d7c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d40:	3330      	adds	r3, #48	; 0x30
 8006d42:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fe fc96 	bl	8005678 <ld_dword>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	4b17      	ldr	r3, [pc, #92]	; (8006dac <find_volume+0x490>)
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d113      	bne.n	8006d7c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d56:	3330      	adds	r3, #48	; 0x30
 8006d58:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7fe fc8b 	bl	8005678 <ld_dword>
 8006d62:	4602      	mov	r2, r0
 8006d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d66:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6a:	3330      	adds	r3, #48	; 0x30
 8006d6c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7fe fc81 	bl	8005678 <ld_dword>
 8006d76:	4602      	mov	r2, r0
 8006d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7a:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006d82:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006d84:	4b0a      	ldr	r3, [pc, #40]	; (8006db0 <find_volume+0x494>)
 8006d86:	881b      	ldrh	r3, [r3, #0]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	4b08      	ldr	r3, [pc, #32]	; (8006db0 <find_volume+0x494>)
 8006d8e:	801a      	strh	r2, [r3, #0]
 8006d90:	4b07      	ldr	r3, [pc, #28]	; (8006db0 <find_volume+0x494>)
 8006d92:	881a      	ldrh	r2, [r3, #0]
 8006d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d96:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006d98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d9a:	f7fe fe61 	bl	8005a60 <clear_lock>
#endif
	return FR_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3758      	adds	r7, #88	; 0x58
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	41615252 	.word	0x41615252
 8006dac:	61417272 	.word	0x61417272
 8006db0:	2000002c 	.word	0x2000002c

08006db4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006dbe:	2309      	movs	r3, #9
 8006dc0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d01c      	beq.n	8006e02 <validate+0x4e>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d018      	beq.n	8006e02 <validate+0x4e>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d013      	beq.n	8006e02 <validate+0x4e>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	889a      	ldrh	r2, [r3, #4]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	88db      	ldrh	r3, [r3, #6]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d10c      	bne.n	8006e02 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	785b      	ldrb	r3, [r3, #1]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7fe fbaa 	bl	8005548 <disk_status>
 8006df4:	4603      	mov	r3, r0
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d101      	bne.n	8006e02 <validate+0x4e>
			res = FR_OK;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d102      	bne.n	8006e0e <validate+0x5a>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	e000      	b.n	8006e10 <validate+0x5c>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	683a      	ldr	r2, [r7, #0]
 8006e12:	6013      	str	r3, [r2, #0]
	return res;
 8006e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
	...

08006e20 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b088      	sub	sp, #32
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006e32:	f107 0310 	add.w	r3, r7, #16
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7ff fcd5 	bl	80067e6 <get_ldnumber>
 8006e3c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	da01      	bge.n	8006e48 <f_mount+0x28>
 8006e44:	230b      	movs	r3, #11
 8006e46:	e02b      	b.n	8006ea0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006e48:	4a17      	ldr	r2, [pc, #92]	; (8006ea8 <f_mount+0x88>)
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e50:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d005      	beq.n	8006e64 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006e58:	69b8      	ldr	r0, [r7, #24]
 8006e5a:	f7fe fe01 	bl	8005a60 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	2200      	movs	r2, #0
 8006e62:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d002      	beq.n	8006e70 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	490d      	ldr	r1, [pc, #52]	; (8006ea8 <f_mount+0x88>)
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d002      	beq.n	8006e86 <f_mount+0x66>
 8006e80:	79fb      	ldrb	r3, [r7, #7]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d001      	beq.n	8006e8a <f_mount+0x6a>
 8006e86:	2300      	movs	r3, #0
 8006e88:	e00a      	b.n	8006ea0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006e8a:	f107 010c 	add.w	r1, r7, #12
 8006e8e:	f107 0308 	add.w	r3, r7, #8
 8006e92:	2200      	movs	r2, #0
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7ff fd41 	bl	800691c <find_volume>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3720      	adds	r7, #32
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	20000028 	.word	0x20000028

08006eac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b098      	sub	sp, #96	; 0x60
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d101      	bne.n	8006ec4 <f_open+0x18>
 8006ec0:	2309      	movs	r3, #9
 8006ec2:	e1ad      	b.n	8007220 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006ec4:	79fb      	ldrb	r3, [r7, #7]
 8006ec6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006eca:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006ecc:	79fa      	ldrb	r2, [r7, #7]
 8006ece:	f107 0110 	add.w	r1, r7, #16
 8006ed2:	f107 0308 	add.w	r3, r7, #8
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7ff fd20 	bl	800691c <find_volume>
 8006edc:	4603      	mov	r3, r0
 8006ede:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006ee2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f040 8191 	bne.w	800720e <f_open+0x362>
		dj.obj.fs = fs;
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	f107 0314 	add.w	r3, r7, #20
 8006ef6:	4611      	mov	r1, r2
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7ff fc03 	bl	8006704 <follow_path>
 8006efe:	4603      	mov	r3, r0
 8006f00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006f04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d11a      	bne.n	8006f42 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006f0c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006f10:	b25b      	sxtb	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	da03      	bge.n	8006f1e <f_open+0x72>
				res = FR_INVALID_NAME;
 8006f16:	2306      	movs	r3, #6
 8006f18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006f1c:	e011      	b.n	8006f42 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006f1e:	79fb      	ldrb	r3, [r7, #7]
 8006f20:	f023 0301 	bic.w	r3, r3, #1
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	bf14      	ite	ne
 8006f28:	2301      	movne	r3, #1
 8006f2a:	2300      	moveq	r3, #0
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	461a      	mov	r2, r3
 8006f30:	f107 0314 	add.w	r3, r7, #20
 8006f34:	4611      	mov	r1, r2
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7fe fc86 	bl	8005848 <chk_lock>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006f42:	79fb      	ldrb	r3, [r7, #7]
 8006f44:	f003 031c 	and.w	r3, r3, #28
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d07f      	beq.n	800704c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006f4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d017      	beq.n	8006f84 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006f54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f58:	2b04      	cmp	r3, #4
 8006f5a:	d10e      	bne.n	8006f7a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006f5c:	f7fe fcd0 	bl	8005900 <enq_lock>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d006      	beq.n	8006f74 <f_open+0xc8>
 8006f66:	f107 0314 	add.w	r3, r7, #20
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7ff fb04 	bl	8006578 <dir_register>
 8006f70:	4603      	mov	r3, r0
 8006f72:	e000      	b.n	8006f76 <f_open+0xca>
 8006f74:	2312      	movs	r3, #18
 8006f76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006f7a:	79fb      	ldrb	r3, [r7, #7]
 8006f7c:	f043 0308 	orr.w	r3, r3, #8
 8006f80:	71fb      	strb	r3, [r7, #7]
 8006f82:	e010      	b.n	8006fa6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006f84:	7ebb      	ldrb	r3, [r7, #26]
 8006f86:	f003 0311 	and.w	r3, r3, #17
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d003      	beq.n	8006f96 <f_open+0xea>
					res = FR_DENIED;
 8006f8e:	2307      	movs	r3, #7
 8006f90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006f94:	e007      	b.n	8006fa6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006f96:	79fb      	ldrb	r3, [r7, #7]
 8006f98:	f003 0304 	and.w	r3, r3, #4
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d002      	beq.n	8006fa6 <f_open+0xfa>
 8006fa0:	2308      	movs	r3, #8
 8006fa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006fa6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d168      	bne.n	8007080 <f_open+0x1d4>
 8006fae:	79fb      	ldrb	r3, [r7, #7]
 8006fb0:	f003 0308 	and.w	r3, r3, #8
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d063      	beq.n	8007080 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006fb8:	f000 fd7e 	bl	8007ab8 <get_fattime>
 8006fbc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fc0:	330e      	adds	r3, #14
 8006fc2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7fe fb95 	bl	80056f4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fcc:	3316      	adds	r3, #22
 8006fce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7fe fb8f 	bl	80056f4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fd8:	330b      	adds	r3, #11
 8006fda:	2220      	movs	r2, #32
 8006fdc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fe2:	4611      	mov	r1, r2
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7ff fa33 	bl	8006450 <ld_clust>
 8006fea:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7ff fa4b 	bl	800648e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ffa:	331c      	adds	r3, #28
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7fe fb78 	bl	80056f4 <st_dword>
					fs->wflag = 1;
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	2201      	movs	r2, #1
 8007008:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800700a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800700c:	2b00      	cmp	r3, #0
 800700e:	d037      	beq.n	8007080 <f_open+0x1d4>
						dw = fs->winsect;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007014:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007016:	f107 0314 	add.w	r3, r7, #20
 800701a:	2200      	movs	r2, #0
 800701c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800701e:	4618      	mov	r0, r3
 8007020:	f7fe ff5e 	bl	8005ee0 <remove_chain>
 8007024:	4603      	mov	r3, r0
 8007026:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800702a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800702e:	2b00      	cmp	r3, #0
 8007030:	d126      	bne.n	8007080 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007036:	4618      	mov	r0, r3
 8007038:	f7fe fd7a 	bl	8005b30 <move_window>
 800703c:	4603      	mov	r3, r0
 800703e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007046:	3a01      	subs	r2, #1
 8007048:	60da      	str	r2, [r3, #12]
 800704a:	e019      	b.n	8007080 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800704c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007050:	2b00      	cmp	r3, #0
 8007052:	d115      	bne.n	8007080 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007054:	7ebb      	ldrb	r3, [r7, #26]
 8007056:	f003 0310 	and.w	r3, r3, #16
 800705a:	2b00      	cmp	r3, #0
 800705c:	d003      	beq.n	8007066 <f_open+0x1ba>
					res = FR_NO_FILE;
 800705e:	2304      	movs	r3, #4
 8007060:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007064:	e00c      	b.n	8007080 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007066:	79fb      	ldrb	r3, [r7, #7]
 8007068:	f003 0302 	and.w	r3, r3, #2
 800706c:	2b00      	cmp	r3, #0
 800706e:	d007      	beq.n	8007080 <f_open+0x1d4>
 8007070:	7ebb      	ldrb	r3, [r7, #26]
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	2b00      	cmp	r3, #0
 8007078:	d002      	beq.n	8007080 <f_open+0x1d4>
						res = FR_DENIED;
 800707a:	2307      	movs	r3, #7
 800707c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007080:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007084:	2b00      	cmp	r3, #0
 8007086:	d128      	bne.n	80070da <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007088:	79fb      	ldrb	r3, [r7, #7]
 800708a:	f003 0308 	and.w	r3, r3, #8
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007092:	79fb      	ldrb	r3, [r7, #7]
 8007094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007098:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80070a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80070a8:	79fb      	ldrb	r3, [r7, #7]
 80070aa:	f023 0301 	bic.w	r3, r3, #1
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	bf14      	ite	ne
 80070b2:	2301      	movne	r3, #1
 80070b4:	2300      	moveq	r3, #0
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	461a      	mov	r2, r3
 80070ba:	f107 0314 	add.w	r3, r7, #20
 80070be:	4611      	mov	r1, r2
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7fe fc3f 	bl	8005944 <inc_lock>
 80070c6:	4602      	mov	r2, r0
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d102      	bne.n	80070da <f_open+0x22e>
 80070d4:	2302      	movs	r3, #2
 80070d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80070da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f040 8095 	bne.w	800720e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070e8:	4611      	mov	r1, r2
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7ff f9b0 	bl	8006450 <ld_clust>
 80070f0:	4602      	mov	r2, r0
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80070f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f8:	331c      	adds	r3, #28
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fe fabc 	bl	8005678 <ld_dword>
 8007100:	4602      	mov	r2, r0
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	88da      	ldrh	r2, [r3, #6]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	79fa      	ldrb	r2, [r7, #7]
 800711e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	3330      	adds	r3, #48	; 0x30
 8007136:	f44f 7200 	mov.w	r2, #512	; 0x200
 800713a:	2100      	movs	r1, #0
 800713c:	4618      	mov	r0, r3
 800713e:	f7fe fb26 	bl	800578e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007142:	79fb      	ldrb	r3, [r7, #7]
 8007144:	f003 0320 	and.w	r3, r3, #32
 8007148:	2b00      	cmp	r3, #0
 800714a:	d060      	beq.n	800720e <f_open+0x362>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d05c      	beq.n	800720e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	68da      	ldr	r2, [r3, #12]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	895b      	ldrh	r3, [r3, #10]
 8007160:	025b      	lsls	r3, r3, #9
 8007162:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	657b      	str	r3, [r7, #84]	; 0x54
 8007170:	e016      	b.n	80071a0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007176:	4618      	mov	r0, r3
 8007178:	f7fe fd26 	bl	8005bc8 <get_fat>
 800717c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800717e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007180:	2b01      	cmp	r3, #1
 8007182:	d802      	bhi.n	800718a <f_open+0x2de>
 8007184:	2302      	movs	r3, #2
 8007186:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800718a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800718c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007190:	d102      	bne.n	8007198 <f_open+0x2ec>
 8007192:	2301      	movs	r3, #1
 8007194:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007198:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800719a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	657b      	str	r3, [r7, #84]	; 0x54
 80071a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d103      	bne.n	80071b0 <f_open+0x304>
 80071a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80071aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d8e0      	bhi.n	8007172 <f_open+0x2c6>
				}
				fp->clust = clst;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071b4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80071b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d127      	bne.n	800720e <f_open+0x362>
 80071be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d022      	beq.n	800720e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7fe fcdc 	bl	8005b8a <clust2sect>
 80071d2:	6478      	str	r0, [r7, #68]	; 0x44
 80071d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d103      	bne.n	80071e2 <f_open+0x336>
						res = FR_INT_ERR;
 80071da:	2302      	movs	r3, #2
 80071dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80071e0:	e015      	b.n	800720e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80071e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071e4:	0a5a      	lsrs	r2, r3, #9
 80071e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071e8:	441a      	add	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	7858      	ldrb	r0, [r3, #1]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6a1a      	ldr	r2, [r3, #32]
 80071fc:	2301      	movs	r3, #1
 80071fe:	f7fe f9e3 	bl	80055c8 <disk_read>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <f_open+0x362>
 8007208:	2301      	movs	r3, #1
 800720a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800720e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007212:	2b00      	cmp	r3, #0
 8007214:	d002      	beq.n	800721c <f_open+0x370>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2200      	movs	r2, #0
 800721a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800721c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007220:	4618      	mov	r0, r3
 8007222:	3760      	adds	r7, #96	; 0x60
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b08e      	sub	sp, #56	; 0x38
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
 8007234:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	2200      	movs	r2, #0
 800723e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f107 0214 	add.w	r2, r7, #20
 8007246:	4611      	mov	r1, r2
 8007248:	4618      	mov	r0, r3
 800724a:	f7ff fdb3 	bl	8006db4 <validate>
 800724e:	4603      	mov	r3, r0
 8007250:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007254:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007258:	2b00      	cmp	r3, #0
 800725a:	d107      	bne.n	800726c <f_read+0x44>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	7d5b      	ldrb	r3, [r3, #21]
 8007260:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007264:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007268:	2b00      	cmp	r3, #0
 800726a:	d002      	beq.n	8007272 <f_read+0x4a>
 800726c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007270:	e115      	b.n	800749e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	7d1b      	ldrb	r3, [r3, #20]
 8007276:	f003 0301 	and.w	r3, r3, #1
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <f_read+0x5a>
 800727e:	2307      	movs	r3, #7
 8007280:	e10d      	b.n	800749e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	68da      	ldr	r2, [r3, #12]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	699b      	ldr	r3, [r3, #24]
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	6a3b      	ldr	r3, [r7, #32]
 8007292:	429a      	cmp	r2, r3
 8007294:	f240 80fe 	bls.w	8007494 <f_read+0x26c>
 8007298:	6a3b      	ldr	r3, [r7, #32]
 800729a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800729c:	e0fa      	b.n	8007494 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	699b      	ldr	r3, [r3, #24]
 80072a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f040 80c6 	bne.w	8007438 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	0a5b      	lsrs	r3, r3, #9
 80072b2:	697a      	ldr	r2, [r7, #20]
 80072b4:	8952      	ldrh	r2, [r2, #10]
 80072b6:	3a01      	subs	r2, #1
 80072b8:	4013      	ands	r3, r2
 80072ba:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d12f      	bne.n	8007322 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d103      	bne.n	80072d2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	633b      	str	r3, [r7, #48]	; 0x30
 80072d0:	e013      	b.n	80072fa <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d007      	beq.n	80072ea <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	4619      	mov	r1, r3
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f7fe fefa 	bl	80060da <clmt_clust>
 80072e6:	6338      	str	r0, [r7, #48]	; 0x30
 80072e8:	e007      	b.n	80072fa <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	69db      	ldr	r3, [r3, #28]
 80072f0:	4619      	mov	r1, r3
 80072f2:	4610      	mov	r0, r2
 80072f4:	f7fe fc68 	bl	8005bc8 <get_fat>
 80072f8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80072fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d804      	bhi.n	800730a <f_read+0xe2>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2202      	movs	r2, #2
 8007304:	755a      	strb	r2, [r3, #21]
 8007306:	2302      	movs	r3, #2
 8007308:	e0c9      	b.n	800749e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800730a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007310:	d104      	bne.n	800731c <f_read+0xf4>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2201      	movs	r2, #1
 8007316:	755a      	strb	r2, [r3, #21]
 8007318:	2301      	movs	r3, #1
 800731a:	e0c0      	b.n	800749e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007320:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	69db      	ldr	r3, [r3, #28]
 8007328:	4619      	mov	r1, r3
 800732a:	4610      	mov	r0, r2
 800732c:	f7fe fc2d 	bl	8005b8a <clust2sect>
 8007330:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d104      	bne.n	8007342 <f_read+0x11a>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2202      	movs	r2, #2
 800733c:	755a      	strb	r2, [r3, #21]
 800733e:	2302      	movs	r3, #2
 8007340:	e0ad      	b.n	800749e <f_read+0x276>
			sect += csect;
 8007342:	69ba      	ldr	r2, [r7, #24]
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	4413      	add	r3, r2
 8007348:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	0a5b      	lsrs	r3, r3, #9
 800734e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007352:	2b00      	cmp	r3, #0
 8007354:	d039      	beq.n	80073ca <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007356:	69fa      	ldr	r2, [r7, #28]
 8007358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735a:	4413      	add	r3, r2
 800735c:	697a      	ldr	r2, [r7, #20]
 800735e:	8952      	ldrh	r2, [r2, #10]
 8007360:	4293      	cmp	r3, r2
 8007362:	d905      	bls.n	8007370 <f_read+0x148>
					cc = fs->csize - csect;
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	895b      	ldrh	r3, [r3, #10]
 8007368:	461a      	mov	r2, r3
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	7858      	ldrb	r0, [r3, #1]
 8007374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007376:	69ba      	ldr	r2, [r7, #24]
 8007378:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800737a:	f7fe f925 	bl	80055c8 <disk_read>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d004      	beq.n	800738e <f_read+0x166>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2201      	movs	r2, #1
 8007388:	755a      	strb	r2, [r3, #21]
 800738a:	2301      	movs	r3, #1
 800738c:	e087      	b.n	800749e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	7d1b      	ldrb	r3, [r3, #20]
 8007392:	b25b      	sxtb	r3, r3
 8007394:	2b00      	cmp	r3, #0
 8007396:	da14      	bge.n	80073c2 <f_read+0x19a>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6a1a      	ldr	r2, [r3, #32]
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d90d      	bls.n	80073c2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6a1a      	ldr	r2, [r3, #32]
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	025b      	lsls	r3, r3, #9
 80073b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073b2:	18d0      	adds	r0, r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	3330      	adds	r3, #48	; 0x30
 80073b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073bc:	4619      	mov	r1, r3
 80073be:	f7fe f9c5 	bl	800574c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80073c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c4:	025b      	lsls	r3, r3, #9
 80073c6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80073c8:	e050      	b.n	800746c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	69ba      	ldr	r2, [r7, #24]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d02e      	beq.n	8007432 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	7d1b      	ldrb	r3, [r3, #20]
 80073d8:	b25b      	sxtb	r3, r3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	da18      	bge.n	8007410 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	7858      	ldrb	r0, [r3, #1]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6a1a      	ldr	r2, [r3, #32]
 80073ec:	2301      	movs	r3, #1
 80073ee:	f7fe f90b 	bl	8005608 <disk_write>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d004      	beq.n	8007402 <f_read+0x1da>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2201      	movs	r2, #1
 80073fc:	755a      	strb	r2, [r3, #21]
 80073fe:	2301      	movs	r3, #1
 8007400:	e04d      	b.n	800749e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	7d1b      	ldrb	r3, [r3, #20]
 8007406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800740a:	b2da      	uxtb	r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	7858      	ldrb	r0, [r3, #1]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800741a:	2301      	movs	r3, #1
 800741c:	69ba      	ldr	r2, [r7, #24]
 800741e:	f7fe f8d3 	bl	80055c8 <disk_read>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d004      	beq.n	8007432 <f_read+0x20a>
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2201      	movs	r2, #1
 800742c:	755a      	strb	r2, [r3, #21]
 800742e:	2301      	movs	r3, #1
 8007430:	e035      	b.n	800749e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	69ba      	ldr	r2, [r7, #24]
 8007436:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007440:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007444:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007446:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	429a      	cmp	r2, r3
 800744c:	d901      	bls.n	8007452 <f_read+0x22a>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	699b      	ldr	r3, [r3, #24]
 800745c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007460:	4413      	add	r3, r2
 8007462:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007464:	4619      	mov	r1, r3
 8007466:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007468:	f7fe f970 	bl	800574c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800746c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800746e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007470:	4413      	add	r3, r2
 8007472:	627b      	str	r3, [r7, #36]	; 0x24
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	699a      	ldr	r2, [r3, #24]
 8007478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747a:	441a      	add	r2, r3
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	619a      	str	r2, [r3, #24]
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007486:	441a      	add	r2, r3
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	601a      	str	r2, [r3, #0]
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	f47f af01 	bne.w	800729e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3738      	adds	r7, #56	; 0x38
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b090      	sub	sp, #64	; 0x40
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
 80074ae:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f107 0208 	add.w	r2, r7, #8
 80074b6:	4611      	mov	r1, r2
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7ff fc7b 	bl	8006db4 <validate>
 80074be:	4603      	mov	r3, r0
 80074c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80074c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d103      	bne.n	80074d4 <f_lseek+0x2e>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	7d5b      	ldrb	r3, [r3, #21]
 80074d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80074d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d002      	beq.n	80074e2 <f_lseek+0x3c>
 80074dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80074e0:	e1e6      	b.n	80078b0 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f000 80d1 	beq.w	800768e <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074f2:	d15a      	bne.n	80075aa <f_lseek+0x104>
			tbl = fp->cltbl;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f8:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80074fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fc:	1d1a      	adds	r2, r3, #4
 80074fe:	627a      	str	r2, [r7, #36]	; 0x24
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	617b      	str	r3, [r7, #20]
 8007504:	2302      	movs	r3, #2
 8007506:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	2b00      	cmp	r3, #0
 8007512:	d03a      	beq.n	800758a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007516:	613b      	str	r3, [r7, #16]
 8007518:	2300      	movs	r3, #0
 800751a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800751c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751e:	3302      	adds	r3, #2
 8007520:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8007522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007524:	60fb      	str	r3, [r7, #12]
 8007526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007528:	3301      	adds	r3, #1
 800752a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007530:	4618      	mov	r0, r3
 8007532:	f7fe fb49 	bl	8005bc8 <get_fat>
 8007536:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8007538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753a:	2b01      	cmp	r3, #1
 800753c:	d804      	bhi.n	8007548 <f_lseek+0xa2>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2202      	movs	r2, #2
 8007542:	755a      	strb	r2, [r3, #21]
 8007544:	2302      	movs	r3, #2
 8007546:	e1b3      	b.n	80078b0 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800754e:	d104      	bne.n	800755a <f_lseek+0xb4>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	755a      	strb	r2, [r3, #21]
 8007556:	2301      	movs	r3, #1
 8007558:	e1aa      	b.n	80078b0 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	3301      	adds	r3, #1
 800755e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007560:	429a      	cmp	r2, r3
 8007562:	d0de      	beq.n	8007522 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	429a      	cmp	r2, r3
 800756a:	d809      	bhi.n	8007580 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	1d1a      	adds	r2, r3, #4
 8007570:	627a      	str	r2, [r7, #36]	; 0x24
 8007572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007574:	601a      	str	r2, [r3, #0]
 8007576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007578:	1d1a      	adds	r2, r3, #4
 800757a:	627a      	str	r2, [r7, #36]	; 0x24
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	695b      	ldr	r3, [r3, #20]
 8007584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007586:	429a      	cmp	r2, r3
 8007588:	d3c4      	bcc.n	8007514 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007590:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8007592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	429a      	cmp	r2, r3
 8007598:	d803      	bhi.n	80075a2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800759a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759c:	2200      	movs	r2, #0
 800759e:	601a      	str	r2, [r3, #0]
 80075a0:	e184      	b.n	80078ac <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80075a2:	2311      	movs	r3, #17
 80075a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80075a8:	e180      	b.n	80078ac <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	683a      	ldr	r2, [r7, #0]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d902      	bls.n	80075ba <f_lseek+0x114>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	683a      	ldr	r2, [r7, #0]
 80075be:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f000 8172 	beq.w	80078ac <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	3b01      	subs	r3, #1
 80075cc:	4619      	mov	r1, r3
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f7fe fd83 	bl	80060da <clmt_clust>
 80075d4:	4602      	mov	r2, r0
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	69db      	ldr	r3, [r3, #28]
 80075e0:	4619      	mov	r1, r3
 80075e2:	4610      	mov	r0, r2
 80075e4:	f7fe fad1 	bl	8005b8a <clust2sect>
 80075e8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d104      	bne.n	80075fa <f_lseek+0x154>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2202      	movs	r2, #2
 80075f4:	755a      	strb	r2, [r3, #21]
 80075f6:	2302      	movs	r3, #2
 80075f8:	e15a      	b.n	80078b0 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	3b01      	subs	r3, #1
 80075fe:	0a5b      	lsrs	r3, r3, #9
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	8952      	ldrh	r2, [r2, #10]
 8007604:	3a01      	subs	r2, #1
 8007606:	4013      	ands	r3, r2
 8007608:	69ba      	ldr	r2, [r7, #24]
 800760a:	4413      	add	r3, r2
 800760c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007616:	2b00      	cmp	r3, #0
 8007618:	f000 8148 	beq.w	80078ac <f_lseek+0x406>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a1b      	ldr	r3, [r3, #32]
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	429a      	cmp	r2, r3
 8007624:	f000 8142 	beq.w	80078ac <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	7d1b      	ldrb	r3, [r3, #20]
 800762c:	b25b      	sxtb	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	da18      	bge.n	8007664 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	7858      	ldrb	r0, [r3, #1]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a1a      	ldr	r2, [r3, #32]
 8007640:	2301      	movs	r3, #1
 8007642:	f7fd ffe1 	bl	8005608 <disk_write>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d004      	beq.n	8007656 <f_lseek+0x1b0>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	755a      	strb	r2, [r3, #21]
 8007652:	2301      	movs	r3, #1
 8007654:	e12c      	b.n	80078b0 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	7d1b      	ldrb	r3, [r3, #20]
 800765a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800765e:	b2da      	uxtb	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	7858      	ldrb	r0, [r3, #1]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800766e:	2301      	movs	r3, #1
 8007670:	69ba      	ldr	r2, [r7, #24]
 8007672:	f7fd ffa9 	bl	80055c8 <disk_read>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d004      	beq.n	8007686 <f_lseek+0x1e0>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	755a      	strb	r2, [r3, #21]
 8007682:	2301      	movs	r3, #1
 8007684:	e114      	b.n	80078b0 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	69ba      	ldr	r2, [r7, #24]
 800768a:	621a      	str	r2, [r3, #32]
 800768c:	e10e      	b.n	80078ac <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	429a      	cmp	r2, r3
 8007696:	d908      	bls.n	80076aa <f_lseek+0x204>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	7d1b      	ldrb	r3, [r3, #20]
 800769c:	f003 0302 	and.w	r3, r3, #2
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d102      	bne.n	80076aa <f_lseek+0x204>
			ofs = fp->obj.objsize;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80076b0:	2300      	movs	r3, #0
 80076b2:	637b      	str	r3, [r7, #52]	; 0x34
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076b8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f000 80a7 	beq.w	8007810 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	895b      	ldrh	r3, [r3, #10]
 80076c6:	025b      	lsls	r3, r3, #9
 80076c8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80076ca:	6a3b      	ldr	r3, [r7, #32]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d01b      	beq.n	8007708 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	1e5a      	subs	r2, r3, #1
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80076da:	6a3b      	ldr	r3, [r7, #32]
 80076dc:	1e59      	subs	r1, r3, #1
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d30f      	bcc.n	8007708 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80076e8:	6a3b      	ldr	r3, [r7, #32]
 80076ea:	1e5a      	subs	r2, r3, #1
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	425b      	negs	r3, r3
 80076f0:	401a      	ands	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	699b      	ldr	r3, [r3, #24]
 80076fa:	683a      	ldr	r2, [r7, #0]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	69db      	ldr	r3, [r3, #28]
 8007704:	63bb      	str	r3, [r7, #56]	; 0x38
 8007706:	e022      	b.n	800774e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800770e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007710:	2b00      	cmp	r3, #0
 8007712:	d119      	bne.n	8007748 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2100      	movs	r1, #0
 8007718:	4618      	mov	r0, r3
 800771a:	f7fe fc46 	bl	8005faa <create_chain>
 800771e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007722:	2b01      	cmp	r3, #1
 8007724:	d104      	bne.n	8007730 <f_lseek+0x28a>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2202      	movs	r2, #2
 800772a:	755a      	strb	r2, [r3, #21]
 800772c:	2302      	movs	r3, #2
 800772e:	e0bf      	b.n	80078b0 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007736:	d104      	bne.n	8007742 <f_lseek+0x29c>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	755a      	strb	r2, [r3, #21]
 800773e:	2301      	movs	r3, #1
 8007740:	e0b6      	b.n	80078b0 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007746:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800774c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800774e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007750:	2b00      	cmp	r3, #0
 8007752:	d05d      	beq.n	8007810 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8007754:	e03a      	b.n	80077cc <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8007756:	683a      	ldr	r2, [r7, #0]
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	1ad3      	subs	r3, r2, r3
 800775c:	603b      	str	r3, [r7, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	699a      	ldr	r2, [r3, #24]
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	441a      	add	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	7d1b      	ldrb	r3, [r3, #20]
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00b      	beq.n	800778e <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800777a:	4618      	mov	r0, r3
 800777c:	f7fe fc15 	bl	8005faa <create_chain>
 8007780:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8007782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007784:	2b00      	cmp	r3, #0
 8007786:	d108      	bne.n	800779a <f_lseek+0x2f4>
							ofs = 0; break;
 8007788:	2300      	movs	r3, #0
 800778a:	603b      	str	r3, [r7, #0]
 800778c:	e022      	b.n	80077d4 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007792:	4618      	mov	r0, r3
 8007794:	f7fe fa18 	bl	8005bc8 <get_fat>
 8007798:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800779a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077a0:	d104      	bne.n	80077ac <f_lseek+0x306>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2201      	movs	r2, #1
 80077a6:	755a      	strb	r2, [r3, #21]
 80077a8:	2301      	movs	r3, #1
 80077aa:	e081      	b.n	80078b0 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80077ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d904      	bls.n	80077bc <f_lseek+0x316>
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d304      	bcc.n	80077c6 <f_lseek+0x320>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2202      	movs	r2, #2
 80077c0:	755a      	strb	r2, [r3, #21]
 80077c2:	2302      	movs	r3, #2
 80077c4:	e074      	b.n	80078b0 <f_lseek+0x40a>
					fp->clust = clst;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077ca:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80077cc:	683a      	ldr	r2, [r7, #0]
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d8c0      	bhi.n	8007756 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	699a      	ldr	r2, [r3, #24]
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	441a      	add	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d012      	beq.n	8007810 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fe f9cb 	bl	8005b8a <clust2sect>
 80077f4:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80077f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d104      	bne.n	8007806 <f_lseek+0x360>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2202      	movs	r2, #2
 8007800:	755a      	strb	r2, [r3, #21]
 8007802:	2302      	movs	r3, #2
 8007804:	e054      	b.n	80078b0 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	0a5b      	lsrs	r3, r3, #9
 800780a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800780c:	4413      	add	r3, r2
 800780e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	699a      	ldr	r2, [r3, #24]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	429a      	cmp	r2, r3
 800781a:	d90a      	bls.n	8007832 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	699a      	ldr	r2, [r3, #24]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	7d1b      	ldrb	r3, [r3, #20]
 8007828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800782c:	b2da      	uxtb	r2, r3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800783a:	2b00      	cmp	r3, #0
 800783c:	d036      	beq.n	80078ac <f_lseek+0x406>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a1b      	ldr	r3, [r3, #32]
 8007842:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007844:	429a      	cmp	r2, r3
 8007846:	d031      	beq.n	80078ac <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	7d1b      	ldrb	r3, [r3, #20]
 800784c:	b25b      	sxtb	r3, r3
 800784e:	2b00      	cmp	r3, #0
 8007850:	da18      	bge.n	8007884 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	7858      	ldrb	r0, [r3, #1]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6a1a      	ldr	r2, [r3, #32]
 8007860:	2301      	movs	r3, #1
 8007862:	f7fd fed1 	bl	8005608 <disk_write>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d004      	beq.n	8007876 <f_lseek+0x3d0>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	755a      	strb	r2, [r3, #21]
 8007872:	2301      	movs	r3, #1
 8007874:	e01c      	b.n	80078b0 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	7d1b      	ldrb	r3, [r3, #20]
 800787a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800787e:	b2da      	uxtb	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	7858      	ldrb	r0, [r3, #1]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800788e:	2301      	movs	r3, #1
 8007890:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007892:	f7fd fe99 	bl	80055c8 <disk_read>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d004      	beq.n	80078a6 <f_lseek+0x400>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	755a      	strb	r2, [r3, #21]
 80078a2:	2301      	movs	r3, #1
 80078a4:	e004      	b.n	80078b0 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078aa:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80078ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3740      	adds	r7, #64	; 0x40
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b087      	sub	sp, #28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	4613      	mov	r3, r2
 80078c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80078c6:	2301      	movs	r3, #1
 80078c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80078ca:	2300      	movs	r3, #0
 80078cc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80078ce:	4b1f      	ldr	r3, [pc, #124]	; (800794c <FATFS_LinkDriverEx+0x94>)
 80078d0:	7a5b      	ldrb	r3, [r3, #9]
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d131      	bne.n	800793c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80078d8:	4b1c      	ldr	r3, [pc, #112]	; (800794c <FATFS_LinkDriverEx+0x94>)
 80078da:	7a5b      	ldrb	r3, [r3, #9]
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	461a      	mov	r2, r3
 80078e0:	4b1a      	ldr	r3, [pc, #104]	; (800794c <FATFS_LinkDriverEx+0x94>)
 80078e2:	2100      	movs	r1, #0
 80078e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80078e6:	4b19      	ldr	r3, [pc, #100]	; (800794c <FATFS_LinkDriverEx+0x94>)
 80078e8:	7a5b      	ldrb	r3, [r3, #9]
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	4a17      	ldr	r2, [pc, #92]	; (800794c <FATFS_LinkDriverEx+0x94>)
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	4413      	add	r3, r2
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80078f6:	4b15      	ldr	r3, [pc, #84]	; (800794c <FATFS_LinkDriverEx+0x94>)
 80078f8:	7a5b      	ldrb	r3, [r3, #9]
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	461a      	mov	r2, r3
 80078fe:	4b13      	ldr	r3, [pc, #76]	; (800794c <FATFS_LinkDriverEx+0x94>)
 8007900:	4413      	add	r3, r2
 8007902:	79fa      	ldrb	r2, [r7, #7]
 8007904:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007906:	4b11      	ldr	r3, [pc, #68]	; (800794c <FATFS_LinkDriverEx+0x94>)
 8007908:	7a5b      	ldrb	r3, [r3, #9]
 800790a:	b2db      	uxtb	r3, r3
 800790c:	1c5a      	adds	r2, r3, #1
 800790e:	b2d1      	uxtb	r1, r2
 8007910:	4a0e      	ldr	r2, [pc, #56]	; (800794c <FATFS_LinkDriverEx+0x94>)
 8007912:	7251      	strb	r1, [r2, #9]
 8007914:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007916:	7dbb      	ldrb	r3, [r7, #22]
 8007918:	3330      	adds	r3, #48	; 0x30
 800791a:	b2da      	uxtb	r2, r3
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	3301      	adds	r3, #1
 8007924:	223a      	movs	r2, #58	; 0x3a
 8007926:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	3302      	adds	r3, #2
 800792c:	222f      	movs	r2, #47	; 0x2f
 800792e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	3303      	adds	r3, #3
 8007934:	2200      	movs	r2, #0
 8007936:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007938:	2300      	movs	r3, #0
 800793a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800793c:	7dfb      	ldrb	r3, [r7, #23]
}
 800793e:	4618      	mov	r0, r3
 8007940:	371c      	adds	r7, #28
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	20000050 	.word	0x20000050

08007950 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800795a:	2200      	movs	r2, #0
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f7ff ffaa 	bl	80078b8 <FATFS_LinkDriverEx>
 8007964:	4603      	mov	r3, r0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
	...

08007970 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007976:	2300      	movs	r3, #0
 8007978:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800797a:	f000 f879 	bl	8007a70 <BSP_SD_IsDetected>
 800797e:	4603      	mov	r3, r0
 8007980:	2b01      	cmp	r3, #1
 8007982:	d001      	beq.n	8007988 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e012      	b.n	80079ae <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007988:	480b      	ldr	r0, [pc, #44]	; (80079b8 <BSP_SD_Init+0x48>)
 800798a:	f7fa ffe1 	bl	8002950 <HAL_SD_Init>
 800798e:	4603      	mov	r3, r0
 8007990:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007992:	79fb      	ldrb	r3, [r7, #7]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d109      	bne.n	80079ac <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8007998:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800799c:	4806      	ldr	r0, [pc, #24]	; (80079b8 <BSP_SD_Init+0x48>)
 800799e:	f7fb fdd3 	bl	8003548 <HAL_SD_ConfigWideBusOperation>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80079ac:	79fb      	ldrb	r3, [r7, #7]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	200045c4 	.word	0x200045c4

080079bc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b088      	sub	sp, #32
 80079c0:	af02      	add	r7, sp, #8
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]
 80079c8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80079ca:	2300      	movs	r3, #0
 80079cc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	9300      	str	r3, [sp, #0]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	68f9      	ldr	r1, [r7, #12]
 80079d8:	4806      	ldr	r0, [pc, #24]	; (80079f4 <BSP_SD_ReadBlocks+0x38>)
 80079da:	f7fb f849 	bl	8002a70 <HAL_SD_ReadBlocks>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d001      	beq.n	80079e8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 80079e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3718      	adds	r7, #24
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	200045c4 	.word	0x200045c4

080079f8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b088      	sub	sp, #32
 80079fc:	af02      	add	r7, sp, #8
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]
 8007a04:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007a06:	2300      	movs	r3, #0
 8007a08:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	9300      	str	r3, [sp, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	68f9      	ldr	r1, [r7, #12]
 8007a14:	4806      	ldr	r0, [pc, #24]	; (8007a30 <BSP_SD_WriteBlocks+0x38>)
 8007a16:	f7fb fa25 	bl	8002e64 <HAL_SD_WriteBlocks>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d001      	beq.n	8007a24 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8007a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3718      	adds	r7, #24
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	200045c4 	.word	0x200045c4

08007a34 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007a38:	4805      	ldr	r0, [pc, #20]	; (8007a50 <BSP_SD_GetCardState+0x1c>)
 8007a3a:	f7fb fe01 	bl	8003640 <HAL_SD_GetCardState>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b04      	cmp	r3, #4
 8007a42:	bf14      	ite	ne
 8007a44:	2301      	movne	r3, #1
 8007a46:	2300      	moveq	r3, #0
 8007a48:	b2db      	uxtb	r3, r3
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	200045c4 	.word	0x200045c4

08007a54 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007a5c:	6879      	ldr	r1, [r7, #4]
 8007a5e:	4803      	ldr	r0, [pc, #12]	; (8007a6c <BSP_SD_GetCardInfo+0x18>)
 8007a60:	f7fb fd46 	bl	80034f0 <HAL_SD_GetCardInfo>
}
 8007a64:	bf00      	nop
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	200045c4 	.word	0x200045c4

08007a70 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007a76:	2301      	movs	r3, #1
 8007a78:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8007a7a:	f000 f825 	bl	8007ac8 <BSP_PlatformIsDetected>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d101      	bne.n	8007a88 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007a84:	2300      	movs	r3, #0
 8007a86:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007a88:	79fb      	ldrb	r3, [r7, #7]
 8007a8a:	b2db      	uxtb	r3, r3
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3708      	adds	r7, #8
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007a98:	4904      	ldr	r1, [pc, #16]	; (8007aac <MX_FATFS_Init+0x18>)
 8007a9a:	4805      	ldr	r0, [pc, #20]	; (8007ab0 <MX_FATFS_Init+0x1c>)
 8007a9c:	f7ff ff58 	bl	8007950 <FATFS_LinkDriver>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	4b03      	ldr	r3, [pc, #12]	; (8007ab4 <MX_FATFS_Init+0x20>)
 8007aa6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8007aa8:	bf00      	nop
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	20000068 	.word	0x20000068
 8007ab0:	08008ba4 	.word	0x08008ba4
 8007ab4:	20000064 	.word	0x20000064

08007ab8 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007abc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007ad2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007ad6:	4806      	ldr	r0, [pc, #24]	; (8007af0 <BSP_PlatformIsDetected+0x28>)
 8007ad8:	f7f9 fba4 	bl	8001224 <HAL_GPIO_ReadPin>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d001      	beq.n	8007ae6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8007ae6:	79fb      	ldrb	r3, [r7, #7]
}  
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	40020000 	.word	0x40020000

08007af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	f5ad 6d0a 	sub.w	sp, sp, #2208	; 0x8a0
 8007afa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007afc:	f7f8 fce4 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007b00:	f000 f982 	bl	8007e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007b04:	f000 fb1a 	bl	800813c <MX_GPIO_Init>
  MX_DMA_Init();
 8007b08:	f000 faf0 	bl	80080ec <MX_DMA_Init>
  MX_I2C1_Init();
 8007b0c:	f000 f9fc 	bl	8007f08 <MX_I2C1_Init>
  MX_I2S2_Init();
 8007b10:	f000 fa28 	bl	8007f64 <MX_I2S2_Init>
  MX_SDIO_SD_Init();
 8007b14:	f000 fa54 	bl	8007fc0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8007b18:	f7ff ffbc 	bl	8007a94 <MX_FATFS_Init>
  MX_TIM3_Init();
 8007b1c:	f000 fa70 	bl	8008000 <MX_TIM3_Init>
#define ZERO (AUTORELOAD - 76) // This gives a HIGH signal of 350ns (and stays 900ns LOW)
#define ONE 76                 // This gives a HIGH signal of 950ns (and stays 300ns LOW)

#define BREAK 0               // This stays 1250ns LOW

__HAL_TIM_SET_PRESCALER(&htim3, PRESCALER);
 8007b20:	4bb0      	ldr	r3, [pc, #704]	; (8007de4 <main+0x2f0>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2200      	movs	r2, #0
 8007b26:	629a      	str	r2, [r3, #40]	; 0x28
__HAL_TIM_SET_AUTORELOAD(&htim3, AUTORELOAD);
 8007b28:	4bae      	ldr	r3, [pc, #696]	; (8007de4 <main+0x2f0>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2268      	movs	r2, #104	; 0x68
 8007b2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8007b30:	4bac      	ldr	r3, [pc, #688]	; (8007de4 <main+0x2f0>)
 8007b32:	2268      	movs	r2, #104	; 0x68
 8007b34:	60da      	str	r2, [r3, #12]

// 4 LED WS2812 strip. Each LED has 3 values G,R,B , each 8 bit. So each LED has 24Bit. The last "Dummy" LED is the break signal (8bit).

// Naive PWM signal set.
uint32_t fData[] = {
 8007b36:	463b      	mov	r3, r7
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f44f 630a 	mov.w	r3, #2208	; 0x8a0
 8007b3e:	461a      	mov	r2, r3
 8007b40:	2100      	movs	r1, #0
 8007b42:	f000 ffb1 	bl	8008aa8 <memset>
 8007b46:	463b      	mov	r3, r7
 8007b48:	221c      	movs	r2, #28
 8007b4a:	601a      	str	r2, [r3, #0]
 8007b4c:	463b      	mov	r3, r7
 8007b4e:	221c      	movs	r2, #28
 8007b50:	605a      	str	r2, [r3, #4]
 8007b52:	463b      	mov	r3, r7
 8007b54:	221c      	movs	r2, #28
 8007b56:	609a      	str	r2, [r3, #8]
 8007b58:	463b      	mov	r3, r7
 8007b5a:	221c      	movs	r2, #28
 8007b5c:	60da      	str	r2, [r3, #12]
 8007b5e:	463b      	mov	r3, r7
 8007b60:	221c      	movs	r2, #28
 8007b62:	611a      	str	r2, [r3, #16]
 8007b64:	463b      	mov	r3, r7
 8007b66:	221c      	movs	r2, #28
 8007b68:	615a      	str	r2, [r3, #20]
 8007b6a:	463b      	mov	r3, r7
 8007b6c:	221c      	movs	r2, #28
 8007b6e:	619a      	str	r2, [r3, #24]
 8007b70:	463b      	mov	r3, r7
 8007b72:	221c      	movs	r2, #28
 8007b74:	61da      	str	r2, [r3, #28]
 8007b76:	463b      	mov	r3, r7
 8007b78:	221c      	movs	r2, #28
 8007b7a:	621a      	str	r2, [r3, #32]
 8007b7c:	463b      	mov	r3, r7
 8007b7e:	221c      	movs	r2, #28
 8007b80:	625a      	str	r2, [r3, #36]	; 0x24
 8007b82:	463b      	mov	r3, r7
 8007b84:	224c      	movs	r2, #76	; 0x4c
 8007b86:	629a      	str	r2, [r3, #40]	; 0x28
 8007b88:	463b      	mov	r3, r7
 8007b8a:	224c      	movs	r2, #76	; 0x4c
 8007b8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8007b8e:	463b      	mov	r3, r7
 8007b90:	224c      	movs	r2, #76	; 0x4c
 8007b92:	631a      	str	r2, [r3, #48]	; 0x30
 8007b94:	463b      	mov	r3, r7
 8007b96:	224c      	movs	r2, #76	; 0x4c
 8007b98:	635a      	str	r2, [r3, #52]	; 0x34
 8007b9a:	463b      	mov	r3, r7
 8007b9c:	224c      	movs	r2, #76	; 0x4c
 8007b9e:	639a      	str	r2, [r3, #56]	; 0x38
 8007ba0:	463b      	mov	r3, r7
 8007ba2:	224c      	movs	r2, #76	; 0x4c
 8007ba4:	63da      	str	r2, [r3, #60]	; 0x3c
 8007ba6:	463b      	mov	r3, r7
 8007ba8:	221c      	movs	r2, #28
 8007baa:	641a      	str	r2, [r3, #64]	; 0x40
 8007bac:	463b      	mov	r3, r7
 8007bae:	221c      	movs	r2, #28
 8007bb0:	645a      	str	r2, [r3, #68]	; 0x44
 8007bb2:	463b      	mov	r3, r7
 8007bb4:	221c      	movs	r2, #28
 8007bb6:	649a      	str	r2, [r3, #72]	; 0x48
 8007bb8:	463b      	mov	r3, r7
 8007bba:	221c      	movs	r2, #28
 8007bbc:	64da      	str	r2, [r3, #76]	; 0x4c
 8007bbe:	463b      	mov	r3, r7
 8007bc0:	221c      	movs	r2, #28
 8007bc2:	651a      	str	r2, [r3, #80]	; 0x50
 8007bc4:	463b      	mov	r3, r7
 8007bc6:	221c      	movs	r2, #28
 8007bc8:	655a      	str	r2, [r3, #84]	; 0x54
 8007bca:	463b      	mov	r3, r7
 8007bcc:	221c      	movs	r2, #28
 8007bce:	659a      	str	r2, [r3, #88]	; 0x58
 8007bd0:	463b      	mov	r3, r7
 8007bd2:	221c      	movs	r2, #28
 8007bd4:	65da      	str	r2, [r3, #92]	; 0x5c
 8007bd6:	463b      	mov	r3, r7
 8007bd8:	224c      	movs	r2, #76	; 0x4c
 8007bda:	661a      	str	r2, [r3, #96]	; 0x60
 8007bdc:	463b      	mov	r3, r7
 8007bde:	221c      	movs	r2, #28
 8007be0:	665a      	str	r2, [r3, #100]	; 0x64
 8007be2:	463b      	mov	r3, r7
 8007be4:	221c      	movs	r2, #28
 8007be6:	669a      	str	r2, [r3, #104]	; 0x68
 8007be8:	463b      	mov	r3, r7
 8007bea:	221c      	movs	r2, #28
 8007bec:	66da      	str	r2, [r3, #108]	; 0x6c
 8007bee:	463b      	mov	r3, r7
 8007bf0:	221c      	movs	r2, #28
 8007bf2:	671a      	str	r2, [r3, #112]	; 0x70
 8007bf4:	463b      	mov	r3, r7
 8007bf6:	221c      	movs	r2, #28
 8007bf8:	675a      	str	r2, [r3, #116]	; 0x74
 8007bfa:	463b      	mov	r3, r7
 8007bfc:	221c      	movs	r2, #28
 8007bfe:	679a      	str	r2, [r3, #120]	; 0x78
 8007c00:	463b      	mov	r3, r7
 8007c02:	221c      	movs	r2, #28
 8007c04:	67da      	str	r2, [r3, #124]	; 0x7c
 8007c06:	463b      	mov	r3, r7
 8007c08:	221c      	movs	r2, #28
 8007c0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8007c0e:	463b      	mov	r3, r7
 8007c10:	221c      	movs	r2, #28
 8007c12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8007c16:	463b      	mov	r3, r7
 8007c18:	221c      	movs	r2, #28
 8007c1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8007c1e:	463b      	mov	r3, r7
 8007c20:	221c      	movs	r2, #28
 8007c22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8007c26:	463b      	mov	r3, r7
 8007c28:	221c      	movs	r2, #28
 8007c2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8007c2e:	463b      	mov	r3, r7
 8007c30:	221c      	movs	r2, #28
 8007c32:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8007c36:	463b      	mov	r3, r7
 8007c38:	221c      	movs	r2, #28
 8007c3a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8007c3e:	463b      	mov	r3, r7
 8007c40:	221c      	movs	r2, #28
 8007c42:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8007c46:	463b      	mov	r3, r7
 8007c48:	221c      	movs	r2, #28
 8007c4a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8007c4e:	463b      	mov	r3, r7
 8007c50:	221c      	movs	r2, #28
 8007c52:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8007c56:	463b      	mov	r3, r7
 8007c58:	224c      	movs	r2, #76	; 0x4c
 8007c5a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8007c5e:	463b      	mov	r3, r7
 8007c60:	224c      	movs	r2, #76	; 0x4c
 8007c62:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8007c66:	463b      	mov	r3, r7
 8007c68:	224c      	movs	r2, #76	; 0x4c
 8007c6a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8007c6e:	463b      	mov	r3, r7
 8007c70:	224c      	movs	r2, #76	; 0x4c
 8007c72:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8007c76:	463b      	mov	r3, r7
 8007c78:	224c      	movs	r2, #76	; 0x4c
 8007c7a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8007c7e:	463b      	mov	r3, r7
 8007c80:	224c      	movs	r2, #76	; 0x4c
 8007c82:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8007c86:	463b      	mov	r3, r7
 8007c88:	221c      	movs	r2, #28
 8007c8a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8007c8e:	463b      	mov	r3, r7
 8007c90:	221c      	movs	r2, #28
 8007c92:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8007c96:	463b      	mov	r3, r7
 8007c98:	221c      	movs	r2, #28
 8007c9a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8007c9e:	463b      	mov	r3, r7
 8007ca0:	224c      	movs	r2, #76	; 0x4c
 8007ca2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8007ca6:	463b      	mov	r3, r7
 8007ca8:	224c      	movs	r2, #76	; 0x4c
 8007caa:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8007cae:	463b      	mov	r3, r7
 8007cb0:	224c      	movs	r2, #76	; 0x4c
 8007cb2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8007cb6:	463b      	mov	r3, r7
 8007cb8:	224c      	movs	r2, #76	; 0x4c
 8007cba:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8007cbe:	463b      	mov	r3, r7
 8007cc0:	224c      	movs	r2, #76	; 0x4c
 8007cc2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8007cc6:	463b      	mov	r3, r7
 8007cc8:	221c      	movs	r2, #28
 8007cca:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007cce:	463b      	mov	r3, r7
 8007cd0:	221c      	movs	r2, #28
 8007cd2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8007cd6:	463b      	mov	r3, r7
 8007cd8:	221c      	movs	r2, #28
 8007cda:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8007cde:	463b      	mov	r3, r7
 8007ce0:	221c      	movs	r2, #28
 8007ce2:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 8007ce6:	463b      	mov	r3, r7
 8007ce8:	221c      	movs	r2, #28
 8007cea:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8007cee:	463b      	mov	r3, r7
 8007cf0:	221c      	movs	r2, #28
 8007cf2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8007cf6:	463b      	mov	r3, r7
 8007cf8:	221c      	movs	r2, #28
 8007cfa:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 8007cfe:	463b      	mov	r3, r7
 8007d00:	221c      	movs	r2, #28
 8007d02:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 8007d06:	463b      	mov	r3, r7
 8007d08:	221c      	movs	r2, #28
 8007d0a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007d0e:	463b      	mov	r3, r7
 8007d10:	221c      	movs	r2, #28
 8007d12:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8007d16:	463b      	mov	r3, r7
 8007d18:	221c      	movs	r2, #28
 8007d1a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8007d1e:	463b      	mov	r3, r7
 8007d20:	221c      	movs	r2, #28
 8007d22:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8007d26:	463b      	mov	r3, r7
 8007d28:	221c      	movs	r2, #28
 8007d2a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8007d2e:	463b      	mov	r3, r7
 8007d30:	221c      	movs	r2, #28
 8007d32:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8007d36:	463b      	mov	r3, r7
 8007d38:	221c      	movs	r2, #28
 8007d3a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8007d3e:	463b      	mov	r3, r7
 8007d40:	221c      	movs	r2, #28
 8007d42:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c





  HAL_Delay(300);
 8007d46:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007d4a:	f7f8 fc2f 	bl	80005ac <HAL_Delay>

  fr = f_mount(&myFAT, (TCHAR const*)SDPath, 1);
 8007d4e:	2201      	movs	r2, #1
 8007d50:	4925      	ldr	r1, [pc, #148]	; (8007de8 <main+0x2f4>)
 8007d52:	4826      	ldr	r0, [pc, #152]	; (8007dec <main+0x2f8>)
 8007d54:	f7ff f864 	bl	8006e20 <f_mount>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	4b24      	ldr	r3, [pc, #144]	; (8007df0 <main+0x2fc>)
 8007d5e:	701a      	strb	r2, [r3, #0]

  /*## Open and create a text file #################################*/
  HAL_Delay(300);
 8007d60:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007d64:	f7f8 fc22 	bl	80005ac <HAL_Delay>

  fr = f_open(&fil, "001.wav", FA_READ);
 8007d68:	2201      	movs	r2, #1
 8007d6a:	4922      	ldr	r1, [pc, #136]	; (8007df4 <main+0x300>)
 8007d6c:	4822      	ldr	r0, [pc, #136]	; (8007df8 <main+0x304>)
 8007d6e:	f7ff f89d 	bl	8006eac <f_open>
 8007d72:	4603      	mov	r3, r0
 8007d74:	461a      	mov	r2, r3
 8007d76:	4b1e      	ldr	r3, [pc, #120]	; (8007df0 <main+0x2fc>)
 8007d78:	701a      	strb	r2, [r3, #0]
  if (fr) return (int)fr;
 8007d7a:	4b1d      	ldr	r3, [pc, #116]	; (8007df0 <main+0x2fc>)
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d002      	beq.n	8007d88 <main+0x294>
 8007d82:	4b1b      	ldr	r3, [pc, #108]	; (8007df0 <main+0x2fc>)
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	e027      	b.n	8007dd8 <main+0x2e4>
//  WaveDataLength = f_size(&fil);

  // start circular dma
  f_rewind(&fil);
 8007d88:	2100      	movs	r1, #0
 8007d8a:	481b      	ldr	r0, [pc, #108]	; (8007df8 <main+0x304>)
 8007d8c:	f7ff fb8b 	bl	80074a6 <f_lseek>
  f_read(&fil, &dma_buffer[0], AUDIO_BUFFER_SIZE*2, &br);
 8007d90:	4b1a      	ldr	r3, [pc, #104]	; (8007dfc <main+0x308>)
 8007d92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007d96:	491a      	ldr	r1, [pc, #104]	; (8007e00 <main+0x30c>)
 8007d98:	4817      	ldr	r0, [pc, #92]	; (8007df8 <main+0x304>)
 8007d9a:	f7ff fa45 	bl	8007228 <f_read>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(GPIOA, SENSOR_Pin) == GPIO_PIN_SET)
 8007d9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007da2:	4818      	ldr	r0, [pc, #96]	; (8007e04 <main+0x310>)
 8007da4:	f7f9 fa3e 	bl	8001224 <HAL_GPIO_ReadPin>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d10d      	bne.n	8007dca <main+0x2d6>
	  {
//		  uint32_t ws2812_buffer[2] = {42, 21};
		  HAL_GPIO_WritePin(GPIOA, LED_STATUS_Pin, GPIO_PIN_SET);
 8007dae:	2201      	movs	r2, #1
 8007db0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007db4:	4813      	ldr	r0, [pc, #76]	; (8007e04 <main+0x310>)
 8007db6:	f7f9 fa4d 	bl	8001254 <HAL_GPIO_WritePin>
		  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, fData, sizeof(fData) / sizeof(uint32_t));
 8007dba:	463a      	mov	r2, r7
 8007dbc:	f44f 730a 	mov.w	r3, #552	; 0x228
 8007dc0:	2104      	movs	r1, #4
 8007dc2:	4808      	ldr	r0, [pc, #32]	; (8007de4 <main+0x2f0>)
 8007dc4:	f7fb ffa0 	bl	8003d08 <HAL_TIM_PWM_Start_DMA>
 8007dc8:	e7e9      	b.n	8007d9e <main+0x2aa>
//		  AudioRemSize = WaveDataLength - br;
//		  StartAudioBuffers(&hi2s2);
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOA, LED_STATUS_Pin, GPIO_PIN_RESET);
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007dd0:	480c      	ldr	r0, [pc, #48]	; (8007e04 <main+0x310>)
 8007dd2:	f7f9 fa3f 	bl	8001254 <HAL_GPIO_WritePin>
	  if (HAL_GPIO_ReadPin(GPIOA, SENSOR_Pin) == GPIO_PIN_SET)
 8007dd6:	e7e2      	b.n	8007d9e <main+0x2aa>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f507 670a 	add.w	r7, r7, #2208	; 0x8a0
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	20000520 	.word	0x20000520
 8007de8:	20000068 	.word	0x20000068
 8007dec:	20004648 	.word	0x20004648
 8007df0:	200045c0 	.word	0x200045c0
 8007df4:	08008b14 	.word	0x08008b14
 8007df8:	200048d8 	.word	0x200048d8
 8007dfc:	2000005c 	.word	0x2000005c
 8007e00:	20000560 	.word	0x20000560
 8007e04:	40020000 	.word	0x40020000

08007e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b098      	sub	sp, #96	; 0x60
 8007e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007e0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e12:	2230      	movs	r2, #48	; 0x30
 8007e14:	2100      	movs	r1, #0
 8007e16:	4618      	mov	r0, r3
 8007e18:	f000 fe46 	bl	8008aa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007e1c:	f107 031c 	add.w	r3, r7, #28
 8007e20:	2200      	movs	r2, #0
 8007e22:	601a      	str	r2, [r3, #0]
 8007e24:	605a      	str	r2, [r3, #4]
 8007e26:	609a      	str	r2, [r3, #8]
 8007e28:	60da      	str	r2, [r3, #12]
 8007e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007e2c:	f107 030c 	add.w	r3, r7, #12
 8007e30:	2200      	movs	r2, #0
 8007e32:	601a      	str	r2, [r3, #0]
 8007e34:	605a      	str	r2, [r3, #4]
 8007e36:	609a      	str	r2, [r3, #8]
 8007e38:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	60bb      	str	r3, [r7, #8]
 8007e3e:	4b30      	ldr	r3, [pc, #192]	; (8007f00 <SystemClock_Config+0xf8>)
 8007e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e42:	4a2f      	ldr	r2, [pc, #188]	; (8007f00 <SystemClock_Config+0xf8>)
 8007e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e48:	6413      	str	r3, [r2, #64]	; 0x40
 8007e4a:	4b2d      	ldr	r3, [pc, #180]	; (8007f00 <SystemClock_Config+0xf8>)
 8007e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e52:	60bb      	str	r3, [r7, #8]
 8007e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007e56:	2300      	movs	r3, #0
 8007e58:	607b      	str	r3, [r7, #4]
 8007e5a:	4b2a      	ldr	r3, [pc, #168]	; (8007f04 <SystemClock_Config+0xfc>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a29      	ldr	r2, [pc, #164]	; (8007f04 <SystemClock_Config+0xfc>)
 8007e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e64:	6013      	str	r3, [r2, #0]
 8007e66:	4b27      	ldr	r3, [pc, #156]	; (8007f04 <SystemClock_Config+0xfc>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e6e:	607b      	str	r3, [r7, #4]
 8007e70:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007e72:	2301      	movs	r3, #1
 8007e74:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007e76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e7a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007e80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007e84:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8007e86:	230c      	movs	r3, #12
 8007e88:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 164;
 8007e8a:	23a4      	movs	r3, #164	; 0xa4
 8007e8c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007e8e:	2302      	movs	r3, #2
 8007e90:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007e92:	2307      	movs	r3, #7
 8007e94:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007e96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7f9 ffc2 	bl	8001e24 <HAL_RCC_OscConfig>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d001      	beq.n	8007eaa <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8007ea6:	f000 fa6b 	bl	8008380 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007eaa:	230f      	movs	r3, #15
 8007eac:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007eae:	2302      	movs	r3, #2
 8007eb0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007eb6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007eba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ec0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007ec2:	f107 031c 	add.w	r3, r7, #28
 8007ec6:	2105      	movs	r1, #5
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7fa fa1b 	bl	8002304 <HAL_RCC_ClockConfig>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d001      	beq.n	8007ed8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8007ed4:	f000 fa54 	bl	8008380 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 120;
 8007edc:	2378      	movs	r3, #120	; 0x78
 8007ede:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 5;
 8007ee0:	2305      	movs	r3, #5
 8007ee2:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007ee4:	f107 030c 	add.w	r3, r7, #12
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7fa fbf3 	bl	80026d4 <HAL_RCCEx_PeriphCLKConfig>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d001      	beq.n	8007ef8 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8007ef4:	f000 fa44 	bl	8008380 <Error_Handler>
  }
}
 8007ef8:	bf00      	nop
 8007efa:	3760      	adds	r7, #96	; 0x60
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	40023800 	.word	0x40023800
 8007f04:	40007000 	.word	0x40007000

08007f08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007f0c:	4b12      	ldr	r3, [pc, #72]	; (8007f58 <MX_I2C1_Init+0x50>)
 8007f0e:	4a13      	ldr	r2, [pc, #76]	; (8007f5c <MX_I2C1_Init+0x54>)
 8007f10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8007f12:	4b11      	ldr	r3, [pc, #68]	; (8007f58 <MX_I2C1_Init+0x50>)
 8007f14:	4a12      	ldr	r2, [pc, #72]	; (8007f60 <MX_I2C1_Init+0x58>)
 8007f16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007f18:	4b0f      	ldr	r3, [pc, #60]	; (8007f58 <MX_I2C1_Init+0x50>)
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007f1e:	4b0e      	ldr	r3, [pc, #56]	; (8007f58 <MX_I2C1_Init+0x50>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007f24:	4b0c      	ldr	r3, [pc, #48]	; (8007f58 <MX_I2C1_Init+0x50>)
 8007f26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007f2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007f2c:	4b0a      	ldr	r3, [pc, #40]	; (8007f58 <MX_I2C1_Init+0x50>)
 8007f2e:	2200      	movs	r2, #0
 8007f30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007f32:	4b09      	ldr	r3, [pc, #36]	; (8007f58 <MX_I2C1_Init+0x50>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007f38:	4b07      	ldr	r3, [pc, #28]	; (8007f58 <MX_I2C1_Init+0x50>)
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007f3e:	4b06      	ldr	r3, [pc, #24]	; (8007f58 <MX_I2C1_Init+0x50>)
 8007f40:	2200      	movs	r2, #0
 8007f42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007f44:	4804      	ldr	r0, [pc, #16]	; (8007f58 <MX_I2C1_Init+0x50>)
 8007f46:	f7f9 f99f 	bl	8001288 <HAL_I2C_Init>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d001      	beq.n	8007f54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007f50:	f000 fa16 	bl	8008380 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007f54:	bf00      	nop
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	200004cc 	.word	0x200004cc
 8007f5c:	40005400 	.word	0x40005400
 8007f60:	000186a0 	.word	0x000186a0

08007f64 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8007f68:	4b13      	ldr	r3, [pc, #76]	; (8007fb8 <MX_I2S2_Init+0x54>)
 8007f6a:	4a14      	ldr	r2, [pc, #80]	; (8007fbc <MX_I2S2_Init+0x58>)
 8007f6c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8007f6e:	4b12      	ldr	r3, [pc, #72]	; (8007fb8 <MX_I2S2_Init+0x54>)
 8007f70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f74:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8007f76:	4b10      	ldr	r3, [pc, #64]	; (8007fb8 <MX_I2S2_Init+0x54>)
 8007f78:	2200      	movs	r2, #0
 8007f7a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8007f7c:	4b0e      	ldr	r3, [pc, #56]	; (8007fb8 <MX_I2S2_Init+0x54>)
 8007f7e:	2200      	movs	r2, #0
 8007f80:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8007f82:	4b0d      	ldr	r3, [pc, #52]	; (8007fb8 <MX_I2S2_Init+0x54>)
 8007f84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f88:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8007f8a:	4b0b      	ldr	r3, [pc, #44]	; (8007fb8 <MX_I2S2_Init+0x54>)
 8007f8c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8007f90:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8007f92:	4b09      	ldr	r3, [pc, #36]	; (8007fb8 <MX_I2S2_Init+0x54>)
 8007f94:	2200      	movs	r2, #0
 8007f96:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8007f98:	4b07      	ldr	r3, [pc, #28]	; (8007fb8 <MX_I2S2_Init+0x54>)
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8007f9e:	4b06      	ldr	r3, [pc, #24]	; (8007fb8 <MX_I2S2_Init+0x54>)
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8007fa4:	4804      	ldr	r0, [pc, #16]	; (8007fb8 <MX_I2S2_Init+0x54>)
 8007fa6:	f7f9 faa7 	bl	80014f8 <HAL_I2S_Init>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d001      	beq.n	8007fb4 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8007fb0:	f000 f9e6 	bl	8008380 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8007fb4:	bf00      	nop
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	20004b08 	.word	0x20004b08
 8007fbc:	40003800 	.word	0x40003800

08007fc0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8007fc4:	4b0c      	ldr	r3, [pc, #48]	; (8007ff8 <MX_SDIO_SD_Init+0x38>)
 8007fc6:	4a0d      	ldr	r2, [pc, #52]	; (8007ffc <MX_SDIO_SD_Init+0x3c>)
 8007fc8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8007fca:	4b0b      	ldr	r3, [pc, #44]	; (8007ff8 <MX_SDIO_SD_Init+0x38>)
 8007fcc:	2200      	movs	r2, #0
 8007fce:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8007fd0:	4b09      	ldr	r3, [pc, #36]	; (8007ff8 <MX_SDIO_SD_Init+0x38>)
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007fd6:	4b08      	ldr	r3, [pc, #32]	; (8007ff8 <MX_SDIO_SD_Init+0x38>)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8007fdc:	4b06      	ldr	r3, [pc, #24]	; (8007ff8 <MX_SDIO_SD_Init+0x38>)
 8007fde:	2200      	movs	r2, #0
 8007fe0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007fe2:	4b05      	ldr	r3, [pc, #20]	; (8007ff8 <MX_SDIO_SD_Init+0x38>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 32;
 8007fe8:	4b03      	ldr	r3, [pc, #12]	; (8007ff8 <MX_SDIO_SD_Init+0x38>)
 8007fea:	2220      	movs	r2, #32
 8007fec:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8007fee:	bf00      	nop
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr
 8007ff8:	200045c4 	.word	0x200045c4
 8007ffc:	40012c00 	.word	0x40012c00

08008000 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b08e      	sub	sp, #56	; 0x38
 8008004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008006:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800800a:	2200      	movs	r2, #0
 800800c:	601a      	str	r2, [r3, #0]
 800800e:	605a      	str	r2, [r3, #4]
 8008010:	609a      	str	r2, [r3, #8]
 8008012:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008014:	f107 0320 	add.w	r3, r7, #32
 8008018:	2200      	movs	r2, #0
 800801a:	601a      	str	r2, [r3, #0]
 800801c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800801e:	1d3b      	adds	r3, r7, #4
 8008020:	2200      	movs	r2, #0
 8008022:	601a      	str	r2, [r3, #0]
 8008024:	605a      	str	r2, [r3, #4]
 8008026:	609a      	str	r2, [r3, #8]
 8008028:	60da      	str	r2, [r3, #12]
 800802a:	611a      	str	r2, [r3, #16]
 800802c:	615a      	str	r2, [r3, #20]
 800802e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008030:	4b2c      	ldr	r3, [pc, #176]	; (80080e4 <MX_TIM3_Init+0xe4>)
 8008032:	4a2d      	ldr	r2, [pc, #180]	; (80080e8 <MX_TIM3_Init+0xe8>)
 8008034:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8008036:	4b2b      	ldr	r3, [pc, #172]	; (80080e4 <MX_TIM3_Init+0xe4>)
 8008038:	2200      	movs	r2, #0
 800803a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800803c:	4b29      	ldr	r3, [pc, #164]	; (80080e4 <MX_TIM3_Init+0xe4>)
 800803e:	2200      	movs	r2, #0
 8008040:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 104;
 8008042:	4b28      	ldr	r3, [pc, #160]	; (80080e4 <MX_TIM3_Init+0xe4>)
 8008044:	2268      	movs	r2, #104	; 0x68
 8008046:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008048:	4b26      	ldr	r3, [pc, #152]	; (80080e4 <MX_TIM3_Init+0xe4>)
 800804a:	2200      	movs	r2, #0
 800804c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800804e:	4b25      	ldr	r3, [pc, #148]	; (80080e4 <MX_TIM3_Init+0xe4>)
 8008050:	2280      	movs	r2, #128	; 0x80
 8008052:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8008054:	4823      	ldr	r0, [pc, #140]	; (80080e4 <MX_TIM3_Init+0xe4>)
 8008056:	f7fb fdf7 	bl	8003c48 <HAL_TIM_Base_Init>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8008060:	f000 f98e 	bl	8008380 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008068:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800806a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800806e:	4619      	mov	r1, r3
 8008070:	481c      	ldr	r0, [pc, #112]	; (80080e4 <MX_TIM3_Init+0xe4>)
 8008072:	f7fc f821 	bl	80040b8 <HAL_TIM_ConfigClockSource>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d001      	beq.n	8008080 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800807c:	f000 f980 	bl	8008380 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008080:	4818      	ldr	r0, [pc, #96]	; (80080e4 <MX_TIM3_Init+0xe4>)
 8008082:	f7fb fe0c 	bl	8003c9e <HAL_TIM_PWM_Init>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d001      	beq.n	8008090 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800808c:	f000 f978 	bl	8008380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008090:	2300      	movs	r3, #0
 8008092:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008094:	2300      	movs	r3, #0
 8008096:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008098:	f107 0320 	add.w	r3, r7, #32
 800809c:	4619      	mov	r1, r3
 800809e:	4811      	ldr	r0, [pc, #68]	; (80080e4 <MX_TIM3_Init+0xe4>)
 80080a0:	f7fc fc72 	bl	8004988 <HAL_TIMEx_MasterConfigSynchronization>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d001      	beq.n	80080ae <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80080aa:	f000 f969 	bl	8008380 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80080ae:	2370      	movs	r3, #112	; 0x70
 80080b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80080b2:	2300      	movs	r3, #0
 80080b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80080b6:	2302      	movs	r3, #2
 80080b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80080ba:	2300      	movs	r3, #0
 80080bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80080be:	1d3b      	adds	r3, r7, #4
 80080c0:	2204      	movs	r2, #4
 80080c2:	4619      	mov	r1, r3
 80080c4:	4807      	ldr	r0, [pc, #28]	; (80080e4 <MX_TIM3_Init+0xe4>)
 80080c6:	f7fb ff31 	bl	8003f2c <HAL_TIM_PWM_ConfigChannel>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d001      	beq.n	80080d4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80080d0:	f000 f956 	bl	8008380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80080d4:	4803      	ldr	r0, [pc, #12]	; (80080e4 <MX_TIM3_Init+0xe4>)
 80080d6:	f000 fc07 	bl	80088e8 <HAL_TIM_MspPostInit>

}
 80080da:	bf00      	nop
 80080dc:	3738      	adds	r7, #56	; 0x38
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	20000520 	.word	0x20000520
 80080e8:	40000400 	.word	0x40000400

080080ec <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80080f2:	2300      	movs	r3, #0
 80080f4:	607b      	str	r3, [r7, #4]
 80080f6:	4b10      	ldr	r3, [pc, #64]	; (8008138 <MX_DMA_Init+0x4c>)
 80080f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080fa:	4a0f      	ldr	r2, [pc, #60]	; (8008138 <MX_DMA_Init+0x4c>)
 80080fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008100:	6313      	str	r3, [r2, #48]	; 0x30
 8008102:	4b0d      	ldr	r3, [pc, #52]	; (8008138 <MX_DMA_Init+0x4c>)
 8008104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008106:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800810a:	607b      	str	r3, [r7, #4]
 800810c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800810e:	2200      	movs	r2, #0
 8008110:	2100      	movs	r1, #0
 8008112:	200f      	movs	r0, #15
 8008114:	f7f8 fb47 	bl	80007a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8008118:	200f      	movs	r0, #15
 800811a:	f7f8 fb60 	bl	80007de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800811e:	2200      	movs	r2, #0
 8008120:	2100      	movs	r1, #0
 8008122:	2010      	movs	r0, #16
 8008124:	f7f8 fb3f 	bl	80007a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8008128:	2010      	movs	r0, #16
 800812a:	f7f8 fb58 	bl	80007de <HAL_NVIC_EnableIRQ>

}
 800812e:	bf00      	nop
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	40023800 	.word	0x40023800

0800813c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b08c      	sub	sp, #48	; 0x30
 8008140:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008142:	f107 031c 	add.w	r3, r7, #28
 8008146:	2200      	movs	r2, #0
 8008148:	601a      	str	r2, [r3, #0]
 800814a:	605a      	str	r2, [r3, #4]
 800814c:	609a      	str	r2, [r3, #8]
 800814e:	60da      	str	r2, [r3, #12]
 8008150:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008152:	2300      	movs	r3, #0
 8008154:	61bb      	str	r3, [r7, #24]
 8008156:	4b72      	ldr	r3, [pc, #456]	; (8008320 <MX_GPIO_Init+0x1e4>)
 8008158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800815a:	4a71      	ldr	r2, [pc, #452]	; (8008320 <MX_GPIO_Init+0x1e4>)
 800815c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008160:	6313      	str	r3, [r2, #48]	; 0x30
 8008162:	4b6f      	ldr	r3, [pc, #444]	; (8008320 <MX_GPIO_Init+0x1e4>)
 8008164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800816a:	61bb      	str	r3, [r7, #24]
 800816c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800816e:	2300      	movs	r3, #0
 8008170:	617b      	str	r3, [r7, #20]
 8008172:	4b6b      	ldr	r3, [pc, #428]	; (8008320 <MX_GPIO_Init+0x1e4>)
 8008174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008176:	4a6a      	ldr	r2, [pc, #424]	; (8008320 <MX_GPIO_Init+0x1e4>)
 8008178:	f043 0304 	orr.w	r3, r3, #4
 800817c:	6313      	str	r3, [r2, #48]	; 0x30
 800817e:	4b68      	ldr	r3, [pc, #416]	; (8008320 <MX_GPIO_Init+0x1e4>)
 8008180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008182:	f003 0304 	and.w	r3, r3, #4
 8008186:	617b      	str	r3, [r7, #20]
 8008188:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800818a:	2300      	movs	r3, #0
 800818c:	613b      	str	r3, [r7, #16]
 800818e:	4b64      	ldr	r3, [pc, #400]	; (8008320 <MX_GPIO_Init+0x1e4>)
 8008190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008192:	4a63      	ldr	r2, [pc, #396]	; (8008320 <MX_GPIO_Init+0x1e4>)
 8008194:	f043 0301 	orr.w	r3, r3, #1
 8008198:	6313      	str	r3, [r2, #48]	; 0x30
 800819a:	4b61      	ldr	r3, [pc, #388]	; (8008320 <MX_GPIO_Init+0x1e4>)
 800819c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800819e:	f003 0301 	and.w	r3, r3, #1
 80081a2:	613b      	str	r3, [r7, #16]
 80081a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80081a6:	2300      	movs	r3, #0
 80081a8:	60fb      	str	r3, [r7, #12]
 80081aa:	4b5d      	ldr	r3, [pc, #372]	; (8008320 <MX_GPIO_Init+0x1e4>)
 80081ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ae:	4a5c      	ldr	r2, [pc, #368]	; (8008320 <MX_GPIO_Init+0x1e4>)
 80081b0:	f043 0302 	orr.w	r3, r3, #2
 80081b4:	6313      	str	r3, [r2, #48]	; 0x30
 80081b6:	4b5a      	ldr	r3, [pc, #360]	; (8008320 <MX_GPIO_Init+0x1e4>)
 80081b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ba:	f003 0302 	and.w	r3, r3, #2
 80081be:	60fb      	str	r3, [r7, #12]
 80081c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80081c2:	2300      	movs	r3, #0
 80081c4:	60bb      	str	r3, [r7, #8]
 80081c6:	4b56      	ldr	r3, [pc, #344]	; (8008320 <MX_GPIO_Init+0x1e4>)
 80081c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ca:	4a55      	ldr	r2, [pc, #340]	; (8008320 <MX_GPIO_Init+0x1e4>)
 80081cc:	f043 0310 	orr.w	r3, r3, #16
 80081d0:	6313      	str	r3, [r2, #48]	; 0x30
 80081d2:	4b53      	ldr	r3, [pc, #332]	; (8008320 <MX_GPIO_Init+0x1e4>)
 80081d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d6:	f003 0310 	and.w	r3, r3, #16
 80081da:	60bb      	str	r3, [r7, #8]
 80081dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80081de:	2300      	movs	r3, #0
 80081e0:	607b      	str	r3, [r7, #4]
 80081e2:	4b4f      	ldr	r3, [pc, #316]	; (8008320 <MX_GPIO_Init+0x1e4>)
 80081e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e6:	4a4e      	ldr	r2, [pc, #312]	; (8008320 <MX_GPIO_Init+0x1e4>)
 80081e8:	f043 0308 	orr.w	r3, r3, #8
 80081ec:	6313      	str	r3, [r2, #48]	; 0x30
 80081ee:	4b4c      	ldr	r3, [pc, #304]	; (8008320 <MX_GPIO_Init+0x1e4>)
 80081f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f2:	f003 0308 	and.w	r3, r3, #8
 80081f6:	607b      	str	r3, [r7, #4]
 80081f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MIDI_OUT_Pin|LED_STATUS_Pin, GPIO_PIN_RESET);
 80081fa:	2200      	movs	r2, #0
 80081fc:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008200:	4848      	ldr	r0, [pc, #288]	; (8008324 <MX_GPIO_Init+0x1e8>)
 8008202:	f7f9 f827 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_A_Pin|LCD_B_Pin, GPIO_PIN_RESET);
 8008206:	2200      	movs	r2, #0
 8008208:	2130      	movs	r1, #48	; 0x30
 800820a:	4847      	ldr	r0, [pc, #284]	; (8008328 <MX_GPIO_Init+0x1ec>)
 800820c:	f7f9 f822 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_C_Pin|LCD_D_Pin|GPIO1_Pin|GPIO2_Pin, GPIO_PIN_RESET);
 8008210:	2200      	movs	r2, #0
 8008212:	f24c 0103 	movw	r1, #49155	; 0xc003
 8008216:	4845      	ldr	r0, [pc, #276]	; (800832c <MX_GPIO_Init+0x1f0>)
 8008218:	f7f9 f81c 	bl	8001254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_E_Pin|LCD_F_Pin|LCD_G_Pin|LCD_DP_Pin 
 800821c:	2200      	movs	r2, #0
 800821e:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 8008222:	4843      	ldr	r0, [pc, #268]	; (8008330 <MX_GPIO_Init+0x1f4>)
 8008224:	f7f9 f816 	bl	8001254 <HAL_GPIO_WritePin>
                          |LCD_DIG1CC_Pin|LCD_DIG2CC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO3_Pin|GPIO4_Pin|GPIO5_Pin|GPIO6_Pin 
 8008228:	2200      	movs	r2, #0
 800822a:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
 800822e:	4841      	ldr	r0, [pc, #260]	; (8008334 <MX_GPIO_Init+0x1f8>)
 8008230:	f7f9 f810 	bl	8001254 <HAL_GPIO_WritePin>
                          |GPIO7_Pin|GPIO8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : MIDI_OUT_Pin LED_STATUS_Pin */
  GPIO_InitStruct.Pin = MIDI_OUT_Pin|LED_STATUS_Pin;
 8008234:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8008238:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800823a:	2301      	movs	r3, #1
 800823c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800823e:	2300      	movs	r3, #0
 8008240:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008242:	2300      	movs	r3, #0
 8008244:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008246:	f107 031c 	add.w	r3, r7, #28
 800824a:	4619      	mov	r1, r3
 800824c:	4835      	ldr	r0, [pc, #212]	; (8008324 <MX_GPIO_Init+0x1e8>)
 800824e:	f7f8 fe4f 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_A_Pin LCD_B_Pin */
  GPIO_InitStruct.Pin = LCD_A_Pin|LCD_B_Pin;
 8008252:	2330      	movs	r3, #48	; 0x30
 8008254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008256:	2301      	movs	r3, #1
 8008258:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800825a:	2300      	movs	r3, #0
 800825c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800825e:	2300      	movs	r3, #0
 8008260:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008262:	f107 031c 	add.w	r3, r7, #28
 8008266:	4619      	mov	r1, r3
 8008268:	482f      	ldr	r0, [pc, #188]	; (8008328 <MX_GPIO_Init+0x1ec>)
 800826a:	f7f8 fe41 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_C_Pin LCD_D_Pin GPIO1_Pin GPIO2_Pin */
  GPIO_InitStruct.Pin = LCD_C_Pin|LCD_D_Pin|GPIO1_Pin|GPIO2_Pin;
 800826e:	f24c 0303 	movw	r3, #49155	; 0xc003
 8008272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008274:	2301      	movs	r3, #1
 8008276:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008278:	2300      	movs	r3, #0
 800827a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800827c:	2300      	movs	r3, #0
 800827e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008280:	f107 031c 	add.w	r3, r7, #28
 8008284:	4619      	mov	r1, r3
 8008286:	4829      	ldr	r0, [pc, #164]	; (800832c <MX_GPIO_Init+0x1f0>)
 8008288:	f7f8 fe32 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_E_Pin LCD_F_Pin LCD_G_Pin LCD_DP_Pin 
                           LCD_DIG1CC_Pin LCD_DIG2CC_Pin */
  GPIO_InitStruct.Pin = LCD_E_Pin|LCD_F_Pin|LCD_G_Pin|LCD_DP_Pin 
 800828c:	f44f 53fc 	mov.w	r3, #8064	; 0x1f80
 8008290:	61fb      	str	r3, [r7, #28]
                          |LCD_DIG1CC_Pin|LCD_DIG2CC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008292:	2301      	movs	r3, #1
 8008294:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008296:	2300      	movs	r3, #0
 8008298:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800829a:	2300      	movs	r3, #0
 800829c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800829e:	f107 031c 	add.w	r3, r7, #28
 80082a2:	4619      	mov	r1, r3
 80082a4:	4822      	ldr	r0, [pc, #136]	; (8008330 <MX_GPIO_Init+0x1f4>)
 80082a6:	f7f8 fe23 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_PREV_Pin B_NEXT_Pin B_STOP_Pin */
  GPIO_InitStruct.Pin = B_PREV_Pin|B_NEXT_Pin|B_STOP_Pin;
 80082aa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80082ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082b0:	2300      	movs	r3, #0
 80082b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80082b4:	2301      	movs	r3, #1
 80082b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80082b8:	f107 031c 	add.w	r3, r7, #28
 80082bc:	4619      	mov	r1, r3
 80082be:	481c      	ldr	r0, [pc, #112]	; (8008330 <MX_GPIO_Init+0x1f4>)
 80082c0:	f7f8 fe16 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO3_Pin GPIO4_Pin GPIO5_Pin GPIO6_Pin 
                           GPIO7_Pin GPIO8_Pin */
  GPIO_InitStruct.Pin = GPIO3_Pin|GPIO4_Pin|GPIO5_Pin|GPIO6_Pin 
 80082c4:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 80082c8:	61fb      	str	r3, [r7, #28]
                          |GPIO7_Pin|GPIO8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082ca:	2301      	movs	r3, #1
 80082cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082ce:	2300      	movs	r3, #0
 80082d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082d2:	2300      	movs	r3, #0
 80082d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80082d6:	f107 031c 	add.w	r3, r7, #28
 80082da:	4619      	mov	r1, r3
 80082dc:	4815      	ldr	r0, [pc, #84]	; (8008334 <MX_GPIO_Init+0x1f8>)
 80082de:	f7f8 fe07 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CD_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin;
 80082e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082e8:	2300      	movs	r3, #0
 80082ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082ec:	2300      	movs	r3, #0
 80082ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 80082f0:	f107 031c 	add.w	r3, r7, #28
 80082f4:	4619      	mov	r1, r3
 80082f6:	480b      	ldr	r0, [pc, #44]	; (8008324 <MX_GPIO_Init+0x1e8>)
 80082f8:	f7f8 fdfa 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SENSOR_Pin */
  GPIO_InitStruct.Pin = SENSOR_Pin;
 80082fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008302:	2300      	movs	r3, #0
 8008304:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008306:	2301      	movs	r3, #1
 8008308:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SENSOR_GPIO_Port, &GPIO_InitStruct);
 800830a:	f107 031c 	add.w	r3, r7, #28
 800830e:	4619      	mov	r1, r3
 8008310:	4804      	ldr	r0, [pc, #16]	; (8008324 <MX_GPIO_Init+0x1e8>)
 8008312:	f7f8 fded 	bl	8000ef0 <HAL_GPIO_Init>

}
 8008316:	bf00      	nop
 8008318:	3730      	adds	r7, #48	; 0x30
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	40023800 	.word	0x40023800
 8008324:	40020000 	.word	0x40020000
 8008328:	40020800 	.word	0x40020800
 800832c:	40020400 	.word	0x40020400
 8008330:	40021000 	.word	0x40021000
 8008334:	40020c00 	.word	0x40020c00

08008338 <HAL_I2S_TxCpltCallback>:
//  AudioRemSize = WaveDataLength - br;
  HAL_I2S_Transmit_DMA (hi2s,  dma_buffer, AUDIO_BUFFER_SIZE);
}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  // second half finished, filling it up again while first  half is playing
//  FillBuffer  (&(dma_buffer [AUDIO_BUFFER_SIZE  >> 1]), AUDIO_BUFFER_SIZE >> 1);
    f_read(&fil,
 8008340:	4b0b      	ldr	r3, [pc, #44]	; (8008370 <HAL_I2S_TxCpltCallback+0x38>)
 8008342:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008346:	490b      	ldr	r1, [pc, #44]	; (8008374 <HAL_I2S_TxCpltCallback+0x3c>)
 8008348:	480b      	ldr	r0, [pc, #44]	; (8008378 <HAL_I2S_TxCpltCallback+0x40>)
 800834a:	f7fe ff6d 	bl	8007228 <f_read>
//    else
//    {
//      AudioRemSize = 0;
//    }

	HAL_GPIO_WritePin(GPIOE, LCD_G_Pin, GPIO_PIN_SET);
 800834e:	2201      	movs	r2, #1
 8008350:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008354:	4809      	ldr	r0, [pc, #36]	; (800837c <HAL_I2S_TxCpltCallback+0x44>)
 8008356:	f7f8 ff7d 	bl	8001254 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, LCD_F_Pin, GPIO_PIN_RESET);
 800835a:	2200      	movs	r2, #0
 800835c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008360:	4806      	ldr	r0, [pc, #24]	; (800837c <HAL_I2S_TxCpltCallback+0x44>)
 8008362:	f7f8 ff77 	bl	8001254 <HAL_GPIO_WritePin>
}
 8008366:	bf00      	nop
 8008368:	3708      	adds	r7, #8
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	2000005c 	.word	0x2000005c
 8008374:	20002560 	.word	0x20002560
 8008378:	200048d8 	.word	0x200048d8
 800837c:	40021000 	.word	0x40021000

08008380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008380:	b480      	push	{r7}
 8008382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008384:	bf00      	nop
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
	...

08008390 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	4603      	mov	r3, r0
 8008398:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800839a:	4b0b      	ldr	r3, [pc, #44]	; (80083c8 <SD_CheckStatus+0x38>)
 800839c:	2201      	movs	r2, #1
 800839e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80083a0:	f7ff fb48 	bl	8007a34 <BSP_SD_GetCardState>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d107      	bne.n	80083ba <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80083aa:	4b07      	ldr	r3, [pc, #28]	; (80083c8 <SD_CheckStatus+0x38>)
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	f023 0301 	bic.w	r3, r3, #1
 80083b4:	b2da      	uxtb	r2, r3
 80083b6:	4b04      	ldr	r3, [pc, #16]	; (80083c8 <SD_CheckStatus+0x38>)
 80083b8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80083ba:	4b03      	ldr	r3, [pc, #12]	; (80083c8 <SD_CheckStatus+0x38>)
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	b2db      	uxtb	r3, r3
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3708      	adds	r7, #8
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	20000005 	.word	0x20000005

080083cc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	4603      	mov	r3, r0
 80083d4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 80083d6:	4b0b      	ldr	r3, [pc, #44]	; (8008404 <SD_initialize+0x38>)
 80083d8:	2201      	movs	r2, #1
 80083da:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80083dc:	f7ff fac8 	bl	8007970 <BSP_SD_Init>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d107      	bne.n	80083f6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80083e6:	79fb      	ldrb	r3, [r7, #7]
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7ff ffd1 	bl	8008390 <SD_CheckStatus>
 80083ee:	4603      	mov	r3, r0
 80083f0:	461a      	mov	r2, r3
 80083f2:	4b04      	ldr	r3, [pc, #16]	; (8008404 <SD_initialize+0x38>)
 80083f4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80083f6:	4b03      	ldr	r3, [pc, #12]	; (8008404 <SD_initialize+0x38>)
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	b2db      	uxtb	r3, r3
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	20000005 	.word	0x20000005

08008408 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	4603      	mov	r3, r0
 8008410:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008412:	79fb      	ldrb	r3, [r7, #7]
 8008414:	4618      	mov	r0, r3
 8008416:	f7ff ffbb 	bl	8008390 <SD_CheckStatus>
 800841a:	4603      	mov	r3, r0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3708      	adds	r7, #8
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b086      	sub	sp, #24
 8008428:	af00      	add	r7, sp, #0
 800842a:	60b9      	str	r1, [r7, #8]
 800842c:	607a      	str	r2, [r7, #4]
 800842e:	603b      	str	r3, [r7, #0]
 8008430:	4603      	mov	r3, r0
 8008432:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8008438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800843c:	683a      	ldr	r2, [r7, #0]
 800843e:	6879      	ldr	r1, [r7, #4]
 8008440:	68b8      	ldr	r0, [r7, #8]
 8008442:	f7ff fabb 	bl	80079bc <BSP_SD_ReadBlocks>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d107      	bne.n	800845c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800844c:	bf00      	nop
 800844e:	f7ff faf1 	bl	8007a34 <BSP_SD_GetCardState>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d1fa      	bne.n	800844e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8008458:	2300      	movs	r3, #0
 800845a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800845c:	7dfb      	ldrb	r3, [r7, #23]
}
 800845e:	4618      	mov	r0, r3
 8008460:	3718      	adds	r7, #24
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b086      	sub	sp, #24
 800846a:	af00      	add	r7, sp, #0
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	607a      	str	r2, [r7, #4]
 8008470:	603b      	str	r3, [r7, #0]
 8008472:	4603      	mov	r3, r0
 8008474:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800847a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	6879      	ldr	r1, [r7, #4]
 8008482:	68b8      	ldr	r0, [r7, #8]
 8008484:	f7ff fab8 	bl	80079f8 <BSP_SD_WriteBlocks>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d107      	bne.n	800849e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800848e:	bf00      	nop
 8008490:	f7ff fad0 	bl	8007a34 <BSP_SD_GetCardState>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1fa      	bne.n	8008490 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800849a:	2300      	movs	r3, #0
 800849c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800849e:	7dfb      	ldrb	r3, [r7, #23]
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3718      	adds	r7, #24
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b08c      	sub	sp, #48	; 0x30
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	4603      	mov	r3, r0
 80084b0:	603a      	str	r2, [r7, #0]
 80084b2:	71fb      	strb	r3, [r7, #7]
 80084b4:	460b      	mov	r3, r1
 80084b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80084be:	4b25      	ldr	r3, [pc, #148]	; (8008554 <SD_ioctl+0xac>)
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	f003 0301 	and.w	r3, r3, #1
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d001      	beq.n	80084d0 <SD_ioctl+0x28>
 80084cc:	2303      	movs	r3, #3
 80084ce:	e03c      	b.n	800854a <SD_ioctl+0xa2>

  switch (cmd)
 80084d0:	79bb      	ldrb	r3, [r7, #6]
 80084d2:	2b03      	cmp	r3, #3
 80084d4:	d834      	bhi.n	8008540 <SD_ioctl+0x98>
 80084d6:	a201      	add	r2, pc, #4	; (adr r2, 80084dc <SD_ioctl+0x34>)
 80084d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084dc:	080084ed 	.word	0x080084ed
 80084e0:	080084f5 	.word	0x080084f5
 80084e4:	0800850d 	.word	0x0800850d
 80084e8:	08008527 	.word	0x08008527
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80084ec:	2300      	movs	r3, #0
 80084ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80084f2:	e028      	b.n	8008546 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80084f4:	f107 030c 	add.w	r3, r7, #12
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7ff faab 	bl	8007a54 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80084fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008504:	2300      	movs	r3, #0
 8008506:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800850a:	e01c      	b.n	8008546 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800850c:	f107 030c 	add.w	r3, r7, #12
 8008510:	4618      	mov	r0, r3
 8008512:	f7ff fa9f 	bl	8007a54 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008518:	b29a      	uxth	r2, r3
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800851e:	2300      	movs	r3, #0
 8008520:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008524:	e00f      	b.n	8008546 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008526:	f107 030c 	add.w	r3, r7, #12
 800852a:	4618      	mov	r0, r3
 800852c:	f7ff fa92 	bl	8007a54 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008532:	0a5a      	lsrs	r2, r3, #9
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008538:	2300      	movs	r3, #0
 800853a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800853e:	e002      	b.n	8008546 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008540:	2304      	movs	r3, #4
 8008542:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8008546:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800854a:	4618      	mov	r0, r3
 800854c:	3730      	adds	r7, #48	; 0x30
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	20000005 	.word	0x20000005

08008558 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800855e:	2300      	movs	r3, #0
 8008560:	607b      	str	r3, [r7, #4]
 8008562:	4b10      	ldr	r3, [pc, #64]	; (80085a4 <HAL_MspInit+0x4c>)
 8008564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008566:	4a0f      	ldr	r2, [pc, #60]	; (80085a4 <HAL_MspInit+0x4c>)
 8008568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800856c:	6453      	str	r3, [r2, #68]	; 0x44
 800856e:	4b0d      	ldr	r3, [pc, #52]	; (80085a4 <HAL_MspInit+0x4c>)
 8008570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008576:	607b      	str	r3, [r7, #4]
 8008578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800857a:	2300      	movs	r3, #0
 800857c:	603b      	str	r3, [r7, #0]
 800857e:	4b09      	ldr	r3, [pc, #36]	; (80085a4 <HAL_MspInit+0x4c>)
 8008580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008582:	4a08      	ldr	r2, [pc, #32]	; (80085a4 <HAL_MspInit+0x4c>)
 8008584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008588:	6413      	str	r3, [r2, #64]	; 0x40
 800858a:	4b06      	ldr	r3, [pc, #24]	; (80085a4 <HAL_MspInit+0x4c>)
 800858c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008592:	603b      	str	r3, [r7, #0]
 8008594:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008596:	bf00      	nop
 8008598:	370c      	adds	r7, #12
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop
 80085a4:	40023800 	.word	0x40023800

080085a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b08a      	sub	sp, #40	; 0x28
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085b0:	f107 0314 	add.w	r3, r7, #20
 80085b4:	2200      	movs	r2, #0
 80085b6:	601a      	str	r2, [r3, #0]
 80085b8:	605a      	str	r2, [r3, #4]
 80085ba:	609a      	str	r2, [r3, #8]
 80085bc:	60da      	str	r2, [r3, #12]
 80085be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a19      	ldr	r2, [pc, #100]	; (800862c <HAL_I2C_MspInit+0x84>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d12b      	bne.n	8008622 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80085ca:	2300      	movs	r3, #0
 80085cc:	613b      	str	r3, [r7, #16]
 80085ce:	4b18      	ldr	r3, [pc, #96]	; (8008630 <HAL_I2C_MspInit+0x88>)
 80085d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d2:	4a17      	ldr	r2, [pc, #92]	; (8008630 <HAL_I2C_MspInit+0x88>)
 80085d4:	f043 0302 	orr.w	r3, r3, #2
 80085d8:	6313      	str	r3, [r2, #48]	; 0x30
 80085da:	4b15      	ldr	r3, [pc, #84]	; (8008630 <HAL_I2C_MspInit+0x88>)
 80085dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085de:	f003 0302 	and.w	r3, r3, #2
 80085e2:	613b      	str	r3, [r7, #16]
 80085e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80085e6:	23c0      	movs	r3, #192	; 0xc0
 80085e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80085ea:	2312      	movs	r3, #18
 80085ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80085ee:	2301      	movs	r3, #1
 80085f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085f2:	2303      	movs	r3, #3
 80085f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80085f6:	2304      	movs	r3, #4
 80085f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80085fa:	f107 0314 	add.w	r3, r7, #20
 80085fe:	4619      	mov	r1, r3
 8008600:	480c      	ldr	r0, [pc, #48]	; (8008634 <HAL_I2C_MspInit+0x8c>)
 8008602:	f7f8 fc75 	bl	8000ef0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008606:	2300      	movs	r3, #0
 8008608:	60fb      	str	r3, [r7, #12]
 800860a:	4b09      	ldr	r3, [pc, #36]	; (8008630 <HAL_I2C_MspInit+0x88>)
 800860c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860e:	4a08      	ldr	r2, [pc, #32]	; (8008630 <HAL_I2C_MspInit+0x88>)
 8008610:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008614:	6413      	str	r3, [r2, #64]	; 0x40
 8008616:	4b06      	ldr	r3, [pc, #24]	; (8008630 <HAL_I2C_MspInit+0x88>)
 8008618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800861e:	60fb      	str	r3, [r7, #12]
 8008620:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008622:	bf00      	nop
 8008624:	3728      	adds	r7, #40	; 0x28
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	40005400 	.word	0x40005400
 8008630:	40023800 	.word	0x40023800
 8008634:	40020400 	.word	0x40020400

08008638 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b08a      	sub	sp, #40	; 0x28
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008640:	f107 0314 	add.w	r3, r7, #20
 8008644:	2200      	movs	r2, #0
 8008646:	601a      	str	r2, [r3, #0]
 8008648:	605a      	str	r2, [r3, #4]
 800864a:	609a      	str	r2, [r3, #8]
 800864c:	60da      	str	r2, [r3, #12]
 800864e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a40      	ldr	r2, [pc, #256]	; (8008758 <HAL_I2S_MspInit+0x120>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d17a      	bne.n	8008750 <HAL_I2S_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800865a:	2300      	movs	r3, #0
 800865c:	613b      	str	r3, [r7, #16]
 800865e:	4b3f      	ldr	r3, [pc, #252]	; (800875c <HAL_I2S_MspInit+0x124>)
 8008660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008662:	4a3e      	ldr	r2, [pc, #248]	; (800875c <HAL_I2S_MspInit+0x124>)
 8008664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008668:	6413      	str	r3, [r2, #64]	; 0x40
 800866a:	4b3c      	ldr	r3, [pc, #240]	; (800875c <HAL_I2S_MspInit+0x124>)
 800866c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008672:	613b      	str	r3, [r7, #16]
 8008674:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008676:	2300      	movs	r3, #0
 8008678:	60fb      	str	r3, [r7, #12]
 800867a:	4b38      	ldr	r3, [pc, #224]	; (800875c <HAL_I2S_MspInit+0x124>)
 800867c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800867e:	4a37      	ldr	r2, [pc, #220]	; (800875c <HAL_I2S_MspInit+0x124>)
 8008680:	f043 0304 	orr.w	r3, r3, #4
 8008684:	6313      	str	r3, [r2, #48]	; 0x30
 8008686:	4b35      	ldr	r3, [pc, #212]	; (800875c <HAL_I2S_MspInit+0x124>)
 8008688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868a:	f003 0304 	and.w	r3, r3, #4
 800868e:	60fb      	str	r3, [r7, #12]
 8008690:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008692:	2300      	movs	r3, #0
 8008694:	60bb      	str	r3, [r7, #8]
 8008696:	4b31      	ldr	r3, [pc, #196]	; (800875c <HAL_I2S_MspInit+0x124>)
 8008698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800869a:	4a30      	ldr	r2, [pc, #192]	; (800875c <HAL_I2S_MspInit+0x124>)
 800869c:	f043 0302 	orr.w	r3, r3, #2
 80086a0:	6313      	str	r3, [r2, #48]	; 0x30
 80086a2:	4b2e      	ldr	r3, [pc, #184]	; (800875c <HAL_I2S_MspInit+0x124>)
 80086a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a6:	f003 0302 	and.w	r3, r3, #2
 80086aa:	60bb      	str	r3, [r7, #8]
 80086ac:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PC6     ------> I2S2_MCK
    PB9     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80086ae:	2348      	movs	r3, #72	; 0x48
 80086b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086b2:	2302      	movs	r3, #2
 80086b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086b6:	2300      	movs	r3, #0
 80086b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086ba:	2300      	movs	r3, #0
 80086bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80086be:	2305      	movs	r3, #5
 80086c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80086c2:	f107 0314 	add.w	r3, r7, #20
 80086c6:	4619      	mov	r1, r3
 80086c8:	4825      	ldr	r0, [pc, #148]	; (8008760 <HAL_I2S_MspInit+0x128>)
 80086ca:	f7f8 fc11 	bl	8000ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80086ce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80086d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086d4:	2302      	movs	r3, #2
 80086d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086d8:	2300      	movs	r3, #0
 80086da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086dc:	2300      	movs	r3, #0
 80086de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80086e0:	2305      	movs	r3, #5
 80086e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80086e4:	f107 0314 	add.w	r3, r7, #20
 80086e8:	4619      	mov	r1, r3
 80086ea:	481e      	ldr	r0, [pc, #120]	; (8008764 <HAL_I2S_MspInit+0x12c>)
 80086ec:	f7f8 fc00 	bl	8000ef0 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80086f0:	4b1d      	ldr	r3, [pc, #116]	; (8008768 <HAL_I2S_MspInit+0x130>)
 80086f2:	4a1e      	ldr	r2, [pc, #120]	; (800876c <HAL_I2S_MspInit+0x134>)
 80086f4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80086f6:	4b1c      	ldr	r3, [pc, #112]	; (8008768 <HAL_I2S_MspInit+0x130>)
 80086f8:	2200      	movs	r2, #0
 80086fa:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80086fc:	4b1a      	ldr	r3, [pc, #104]	; (8008768 <HAL_I2S_MspInit+0x130>)
 80086fe:	2240      	movs	r2, #64	; 0x40
 8008700:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008702:	4b19      	ldr	r3, [pc, #100]	; (8008768 <HAL_I2S_MspInit+0x130>)
 8008704:	2200      	movs	r2, #0
 8008706:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008708:	4b17      	ldr	r3, [pc, #92]	; (8008768 <HAL_I2S_MspInit+0x130>)
 800870a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800870e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008710:	4b15      	ldr	r3, [pc, #84]	; (8008768 <HAL_I2S_MspInit+0x130>)
 8008712:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008716:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008718:	4b13      	ldr	r3, [pc, #76]	; (8008768 <HAL_I2S_MspInit+0x130>)
 800871a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800871e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8008720:	4b11      	ldr	r3, [pc, #68]	; (8008768 <HAL_I2S_MspInit+0x130>)
 8008722:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008726:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008728:	4b0f      	ldr	r3, [pc, #60]	; (8008768 <HAL_I2S_MspInit+0x130>)
 800872a:	2200      	movs	r2, #0
 800872c:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800872e:	4b0e      	ldr	r3, [pc, #56]	; (8008768 <HAL_I2S_MspInit+0x130>)
 8008730:	2200      	movs	r2, #0
 8008732:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8008734:	480c      	ldr	r0, [pc, #48]	; (8008768 <HAL_I2S_MspInit+0x130>)
 8008736:	f7f8 f86d 	bl	8000814 <HAL_DMA_Init>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d001      	beq.n	8008744 <HAL_I2S_MspInit+0x10c>
    {
      Error_Handler();
 8008740:	f7ff fe1e 	bl	8008380 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4a08      	ldr	r2, [pc, #32]	; (8008768 <HAL_I2S_MspInit+0x130>)
 8008748:	639a      	str	r2, [r3, #56]	; 0x38
 800874a:	4a07      	ldr	r2, [pc, #28]	; (8008768 <HAL_I2S_MspInit+0x130>)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8008750:	bf00      	nop
 8008752:	3728      	adds	r7, #40	; 0x28
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	40003800 	.word	0x40003800
 800875c:	40023800 	.word	0x40023800
 8008760:	40020800 	.word	0x40020800
 8008764:	40020400 	.word	0x40020400
 8008768:	20004878 	.word	0x20004878
 800876c:	40026070 	.word	0x40026070

08008770 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b08a      	sub	sp, #40	; 0x28
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008778:	f107 0314 	add.w	r3, r7, #20
 800877c:	2200      	movs	r2, #0
 800877e:	601a      	str	r2, [r3, #0]
 8008780:	605a      	str	r2, [r3, #4]
 8008782:	609a      	str	r2, [r3, #8]
 8008784:	60da      	str	r2, [r3, #12]
 8008786:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a28      	ldr	r2, [pc, #160]	; (8008830 <HAL_SD_MspInit+0xc0>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d14a      	bne.n	8008828 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8008792:	2300      	movs	r3, #0
 8008794:	613b      	str	r3, [r7, #16]
 8008796:	4b27      	ldr	r3, [pc, #156]	; (8008834 <HAL_SD_MspInit+0xc4>)
 8008798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800879a:	4a26      	ldr	r2, [pc, #152]	; (8008834 <HAL_SD_MspInit+0xc4>)
 800879c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80087a0:	6453      	str	r3, [r2, #68]	; 0x44
 80087a2:	4b24      	ldr	r3, [pc, #144]	; (8008834 <HAL_SD_MspInit+0xc4>)
 80087a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087aa:	613b      	str	r3, [r7, #16]
 80087ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80087ae:	2300      	movs	r3, #0
 80087b0:	60fb      	str	r3, [r7, #12]
 80087b2:	4b20      	ldr	r3, [pc, #128]	; (8008834 <HAL_SD_MspInit+0xc4>)
 80087b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b6:	4a1f      	ldr	r2, [pc, #124]	; (8008834 <HAL_SD_MspInit+0xc4>)
 80087b8:	f043 0304 	orr.w	r3, r3, #4
 80087bc:	6313      	str	r3, [r2, #48]	; 0x30
 80087be:	4b1d      	ldr	r3, [pc, #116]	; (8008834 <HAL_SD_MspInit+0xc4>)
 80087c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c2:	f003 0304 	and.w	r3, r3, #4
 80087c6:	60fb      	str	r3, [r7, #12]
 80087c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80087ca:	2300      	movs	r3, #0
 80087cc:	60bb      	str	r3, [r7, #8]
 80087ce:	4b19      	ldr	r3, [pc, #100]	; (8008834 <HAL_SD_MspInit+0xc4>)
 80087d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d2:	4a18      	ldr	r2, [pc, #96]	; (8008834 <HAL_SD_MspInit+0xc4>)
 80087d4:	f043 0308 	orr.w	r3, r3, #8
 80087d8:	6313      	str	r3, [r2, #48]	; 0x30
 80087da:	4b16      	ldr	r3, [pc, #88]	; (8008834 <HAL_SD_MspInit+0xc4>)
 80087dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087de:	f003 0308 	and.w	r3, r3, #8
 80087e2:	60bb      	str	r3, [r7, #8]
 80087e4:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80087e6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80087ea:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087ec:	2302      	movs	r3, #2
 80087ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087f0:	2300      	movs	r3, #0
 80087f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087f4:	2303      	movs	r3, #3
 80087f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80087f8:	230c      	movs	r3, #12
 80087fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80087fc:	f107 0314 	add.w	r3, r7, #20
 8008800:	4619      	mov	r1, r3
 8008802:	480d      	ldr	r0, [pc, #52]	; (8008838 <HAL_SD_MspInit+0xc8>)
 8008804:	f7f8 fb74 	bl	8000ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008808:	2304      	movs	r3, #4
 800880a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800880c:	2302      	movs	r3, #2
 800880e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008810:	2300      	movs	r3, #0
 8008812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008814:	2303      	movs	r3, #3
 8008816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8008818:	230c      	movs	r3, #12
 800881a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800881c:	f107 0314 	add.w	r3, r7, #20
 8008820:	4619      	mov	r1, r3
 8008822:	4806      	ldr	r0, [pc, #24]	; (800883c <HAL_SD_MspInit+0xcc>)
 8008824:	f7f8 fb64 	bl	8000ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8008828:	bf00      	nop
 800882a:	3728      	adds	r7, #40	; 0x28
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	40012c00 	.word	0x40012c00
 8008834:	40023800 	.word	0x40023800
 8008838:	40020800 	.word	0x40020800
 800883c:	40020c00 	.word	0x40020c00

08008840 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a22      	ldr	r2, [pc, #136]	; (80088d8 <HAL_TIM_Base_MspInit+0x98>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d13e      	bne.n	80088d0 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008852:	2300      	movs	r3, #0
 8008854:	60fb      	str	r3, [r7, #12]
 8008856:	4b21      	ldr	r3, [pc, #132]	; (80088dc <HAL_TIM_Base_MspInit+0x9c>)
 8008858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885a:	4a20      	ldr	r2, [pc, #128]	; (80088dc <HAL_TIM_Base_MspInit+0x9c>)
 800885c:	f043 0302 	orr.w	r3, r3, #2
 8008860:	6413      	str	r3, [r2, #64]	; 0x40
 8008862:	4b1e      	ldr	r3, [pc, #120]	; (80088dc <HAL_TIM_Base_MspInit+0x9c>)
 8008864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008866:	f003 0302 	and.w	r3, r3, #2
 800886a:	60fb      	str	r3, [r7, #12]
 800886c:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 800886e:	4b1c      	ldr	r3, [pc, #112]	; (80088e0 <HAL_TIM_Base_MspInit+0xa0>)
 8008870:	4a1c      	ldr	r2, [pc, #112]	; (80088e4 <HAL_TIM_Base_MspInit+0xa4>)
 8008872:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 8008874:	4b1a      	ldr	r3, [pc, #104]	; (80088e0 <HAL_TIM_Base_MspInit+0xa0>)
 8008876:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800887a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800887c:	4b18      	ldr	r3, [pc, #96]	; (80088e0 <HAL_TIM_Base_MspInit+0xa0>)
 800887e:	2240      	movs	r2, #64	; 0x40
 8008880:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8008882:	4b17      	ldr	r3, [pc, #92]	; (80088e0 <HAL_TIM_Base_MspInit+0xa0>)
 8008884:	2200      	movs	r2, #0
 8008886:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8008888:	4b15      	ldr	r3, [pc, #84]	; (80088e0 <HAL_TIM_Base_MspInit+0xa0>)
 800888a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800888e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008890:	4b13      	ldr	r3, [pc, #76]	; (80088e0 <HAL_TIM_Base_MspInit+0xa0>)
 8008892:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008896:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008898:	4b11      	ldr	r3, [pc, #68]	; (80088e0 <HAL_TIM_Base_MspInit+0xa0>)
 800889a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800889e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 80088a0:	4b0f      	ldr	r3, [pc, #60]	; (80088e0 <HAL_TIM_Base_MspInit+0xa0>)
 80088a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088a6:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80088a8:	4b0d      	ldr	r3, [pc, #52]	; (80088e0 <HAL_TIM_Base_MspInit+0xa0>)
 80088aa:	2200      	movs	r2, #0
 80088ac:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80088ae:	4b0c      	ldr	r3, [pc, #48]	; (80088e0 <HAL_TIM_Base_MspInit+0xa0>)
 80088b0:	2200      	movs	r2, #0
 80088b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80088b4:	480a      	ldr	r0, [pc, #40]	; (80088e0 <HAL_TIM_Base_MspInit+0xa0>)
 80088b6:	f7f7 ffad 	bl	8000814 <HAL_DMA_Init>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d001      	beq.n	80088c4 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 80088c0:	f7ff fd5e 	bl	8008380 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4a06      	ldr	r2, [pc, #24]	; (80088e0 <HAL_TIM_Base_MspInit+0xa0>)
 80088c8:	629a      	str	r2, [r3, #40]	; 0x28
 80088ca:	4a05      	ldr	r2, [pc, #20]	; (80088e0 <HAL_TIM_Base_MspInit+0xa0>)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80088d0:	bf00      	nop
 80088d2:	3710      	adds	r7, #16
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	40000400 	.word	0x40000400
 80088dc:	40023800 	.word	0x40023800
 80088e0:	20004560 	.word	0x20004560
 80088e4:	40026088 	.word	0x40026088

080088e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b088      	sub	sp, #32
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088f0:	f107 030c 	add.w	r3, r7, #12
 80088f4:	2200      	movs	r2, #0
 80088f6:	601a      	str	r2, [r3, #0]
 80088f8:	605a      	str	r2, [r3, #4]
 80088fa:	609a      	str	r2, [r3, #8]
 80088fc:	60da      	str	r2, [r3, #12]
 80088fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a12      	ldr	r2, [pc, #72]	; (8008950 <HAL_TIM_MspPostInit+0x68>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d11d      	bne.n	8008946 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800890a:	2300      	movs	r3, #0
 800890c:	60bb      	str	r3, [r7, #8]
 800890e:	4b11      	ldr	r3, [pc, #68]	; (8008954 <HAL_TIM_MspPostInit+0x6c>)
 8008910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008912:	4a10      	ldr	r2, [pc, #64]	; (8008954 <HAL_TIM_MspPostInit+0x6c>)
 8008914:	f043 0301 	orr.w	r3, r3, #1
 8008918:	6313      	str	r3, [r2, #48]	; 0x30
 800891a:	4b0e      	ldr	r3, [pc, #56]	; (8008954 <HAL_TIM_MspPostInit+0x6c>)
 800891c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891e:	f003 0301 	and.w	r3, r3, #1
 8008922:	60bb      	str	r3, [r7, #8]
 8008924:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = WS2812_Pin;
 8008926:	2380      	movs	r3, #128	; 0x80
 8008928:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800892a:	2302      	movs	r3, #2
 800892c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800892e:	2302      	movs	r3, #2
 8008930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008932:	2302      	movs	r3, #2
 8008934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008936:	2302      	movs	r3, #2
 8008938:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 800893a:	f107 030c 	add.w	r3, r7, #12
 800893e:	4619      	mov	r1, r3
 8008940:	4805      	ldr	r0, [pc, #20]	; (8008958 <HAL_TIM_MspPostInit+0x70>)
 8008942:	f7f8 fad5 	bl	8000ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8008946:	bf00      	nop
 8008948:	3720      	adds	r7, #32
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	40000400 	.word	0x40000400
 8008954:	40023800 	.word	0x40023800
 8008958:	40020000 	.word	0x40020000

0800895c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800895c:	b480      	push	{r7}
 800895e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008960:	bf00      	nop
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr

0800896a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800896a:	b480      	push	{r7}
 800896c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800896e:	e7fe      	b.n	800896e <HardFault_Handler+0x4>

08008970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008970:	b480      	push	{r7}
 8008972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008974:	e7fe      	b.n	8008974 <MemManage_Handler+0x4>

08008976 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008976:	b480      	push	{r7}
 8008978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800897a:	e7fe      	b.n	800897a <BusFault_Handler+0x4>

0800897c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800897c:	b480      	push	{r7}
 800897e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008980:	e7fe      	b.n	8008980 <UsageFault_Handler+0x4>

08008982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008982:	b480      	push	{r7}
 8008984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008986:	bf00      	nop
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008990:	b480      	push	{r7}
 8008992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008994:	bf00      	nop
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr

0800899e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800899e:	b480      	push	{r7}
 80089a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80089a2:	bf00      	nop
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80089b0:	f7f7 fddc 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80089b4:	bf00      	nop
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80089bc:	4802      	ldr	r0, [pc, #8]	; (80089c8 <DMA1_Stream4_IRQHandler+0x10>)
 80089be:	f7f8 f82f 	bl	8000a20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80089c2:	bf00      	nop
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	20004878 	.word	0x20004878

080089cc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 80089d0:	4802      	ldr	r0, [pc, #8]	; (80089dc <DMA1_Stream5_IRQHandler+0x10>)
 80089d2:	f7f8 f825 	bl	8000a20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80089d6:	bf00      	nop
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	20004560 	.word	0x20004560

080089e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80089e0:	b480      	push	{r7}
 80089e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80089e4:	4b08      	ldr	r3, [pc, #32]	; (8008a08 <SystemInit+0x28>)
 80089e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089ea:	4a07      	ldr	r2, [pc, #28]	; (8008a08 <SystemInit+0x28>)
 80089ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80089f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80089f4:	4b04      	ldr	r3, [pc, #16]	; (8008a08 <SystemInit+0x28>)
 80089f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80089fa:	609a      	str	r2, [r3, #8]
#endif
}
 80089fc:	bf00      	nop
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	e000ed00 	.word	0xe000ed00

08008a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008a44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008a10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008a12:	e003      	b.n	8008a1c <LoopCopyDataInit>

08008a14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008a14:	4b0c      	ldr	r3, [pc, #48]	; (8008a48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008a16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008a18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008a1a:	3104      	adds	r1, #4

08008a1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008a1c:	480b      	ldr	r0, [pc, #44]	; (8008a4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008a1e:	4b0c      	ldr	r3, [pc, #48]	; (8008a50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008a20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008a22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008a24:	d3f6      	bcc.n	8008a14 <CopyDataInit>
  ldr  r2, =_sbss
 8008a26:	4a0b      	ldr	r2, [pc, #44]	; (8008a54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008a28:	e002      	b.n	8008a30 <LoopFillZerobss>

08008a2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008a2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008a2c:	f842 3b04 	str.w	r3, [r2], #4

08008a30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008a30:	4b09      	ldr	r3, [pc, #36]	; (8008a58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008a32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008a34:	d3f9      	bcc.n	8008a2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008a36:	f7ff ffd3 	bl	80089e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008a3a:	f000 f811 	bl	8008a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008a3e:	f7ff f859 	bl	8007af4 <main>
  bx  lr    
 8008a42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008a44:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008a48:	08008be0 	.word	0x08008be0
  ldr  r0, =_sdata
 8008a4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008a50:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8008a54:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8008a58:	20004b50 	.word	0x20004b50

08008a5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008a5c:	e7fe      	b.n	8008a5c <ADC_IRQHandler>
	...

08008a60 <__libc_init_array>:
 8008a60:	b570      	push	{r4, r5, r6, lr}
 8008a62:	4e0d      	ldr	r6, [pc, #52]	; (8008a98 <__libc_init_array+0x38>)
 8008a64:	4c0d      	ldr	r4, [pc, #52]	; (8008a9c <__libc_init_array+0x3c>)
 8008a66:	1ba4      	subs	r4, r4, r6
 8008a68:	10a4      	asrs	r4, r4, #2
 8008a6a:	2500      	movs	r5, #0
 8008a6c:	42a5      	cmp	r5, r4
 8008a6e:	d109      	bne.n	8008a84 <__libc_init_array+0x24>
 8008a70:	4e0b      	ldr	r6, [pc, #44]	; (8008aa0 <__libc_init_array+0x40>)
 8008a72:	4c0c      	ldr	r4, [pc, #48]	; (8008aa4 <__libc_init_array+0x44>)
 8008a74:	f000 f820 	bl	8008ab8 <_init>
 8008a78:	1ba4      	subs	r4, r4, r6
 8008a7a:	10a4      	asrs	r4, r4, #2
 8008a7c:	2500      	movs	r5, #0
 8008a7e:	42a5      	cmp	r5, r4
 8008a80:	d105      	bne.n	8008a8e <__libc_init_array+0x2e>
 8008a82:	bd70      	pop	{r4, r5, r6, pc}
 8008a84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008a88:	4798      	blx	r3
 8008a8a:	3501      	adds	r5, #1
 8008a8c:	e7ee      	b.n	8008a6c <__libc_init_array+0xc>
 8008a8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008a92:	4798      	blx	r3
 8008a94:	3501      	adds	r5, #1
 8008a96:	e7f2      	b.n	8008a7e <__libc_init_array+0x1e>
 8008a98:	08008bd8 	.word	0x08008bd8
 8008a9c:	08008bd8 	.word	0x08008bd8
 8008aa0:	08008bd8 	.word	0x08008bd8
 8008aa4:	08008bdc 	.word	0x08008bdc

08008aa8 <memset>:
 8008aa8:	4402      	add	r2, r0
 8008aaa:	4603      	mov	r3, r0
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d100      	bne.n	8008ab2 <memset+0xa>
 8008ab0:	4770      	bx	lr
 8008ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ab6:	e7f9      	b.n	8008aac <memset+0x4>

08008ab8 <_init>:
 8008ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aba:	bf00      	nop
 8008abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008abe:	bc08      	pop	{r3}
 8008ac0:	469e      	mov	lr, r3
 8008ac2:	4770      	bx	lr

08008ac4 <_fini>:
 8008ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac6:	bf00      	nop
 8008ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aca:	bc08      	pop	{r3}
 8008acc:	469e      	mov	lr, r3
 8008ace:	4770      	bx	lr
