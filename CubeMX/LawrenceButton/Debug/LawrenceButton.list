
LawrenceButton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aba8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  0800ad38  0800ad38  0001ad38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afa8  0800afa8  0002022c  2**0
                  CONTENTS
  4 .ARM          00000008  0800afa8  0800afa8  0001afa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800afb0  0800afb0  0002022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afb0  0800afb0  0001afb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afb4  0800afb4  0001afb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  0800afb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c804  2000022c  0800b1e4  0002022c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000ca30  0800b1e4  0002ca30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000194a6  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032cb  00000000  00000000  00039702  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001580  00000000  00000000  0003c9d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001410  00000000  00000000  0003df50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000247e0  00000000  00000000  0003f360  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000134b7  00000000  00000000  00063b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d339c  00000000  00000000  00076ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014a393  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ee8  00000000  00000000  0014a410  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000022c 	.word	0x2000022c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ad20 	.word	0x0800ad20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000230 	.word	0x20000230
 80001cc:	0800ad20 	.word	0x0800ad20

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000574:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <HAL_Init+0x40>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <HAL_Init+0x40>)
 800057a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800057e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <HAL_Init+0x40>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <HAL_Init+0x40>)
 8000586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800058a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <HAL_Init+0x40>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <HAL_Init+0x40>)
 8000592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000598:	2003      	movs	r0, #3
 800059a:	f000 f94d 	bl	8000838 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800059e:	2000      	movs	r0, #0
 80005a0:	f000 f808 	bl	80005b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a4:	f009 fba4 	bl	8009cf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40023c00 	.word	0x40023c00

080005b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <HAL_InitTick+0x54>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_InitTick+0x58>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	4619      	mov	r1, r3
 80005c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 f965 	bl	80008a2 <HAL_SYSTICK_Config>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005de:	2301      	movs	r3, #1
 80005e0:	e00e      	b.n	8000600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2b0f      	cmp	r3, #15
 80005e6:	d80a      	bhi.n	80005fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e8:	2200      	movs	r2, #0
 80005ea:	6879      	ldr	r1, [r7, #4]
 80005ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005f0:	f000 f92d 	bl	800084e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f4:	4a06      	ldr	r2, [pc, #24]	; (8000610 <HAL_InitTick+0x5c>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005fa:	2300      	movs	r3, #0
 80005fc:	e000      	b.n	8000600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
}
 8000600:	4618      	mov	r0, r3
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000058 	.word	0x20000058
 800060c:	20000004 	.word	0x20000004
 8000610:	20000000 	.word	0x20000000

08000614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_IncTick+0x20>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <HAL_IncTick+0x24>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4413      	add	r3, r2
 8000624:	4a04      	ldr	r2, [pc, #16]	; (8000638 <HAL_IncTick+0x24>)
 8000626:	6013      	str	r3, [r2, #0]
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	20000004 	.word	0x20000004
 8000638:	20007a54 	.word	0x20007a54

0800063c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return uwTick;
 8000640:	4b03      	ldr	r3, [pc, #12]	; (8000650 <HAL_GetTick+0x14>)
 8000642:	681b      	ldr	r3, [r3, #0]
}
 8000644:	4618      	mov	r0, r3
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	20007a54 	.word	0x20007a54

08000654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800065c:	f7ff ffee 	bl	800063c <HAL_GetTick>
 8000660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800066c:	d005      	beq.n	800067a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <HAL_Delay+0x40>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	461a      	mov	r2, r3
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	4413      	add	r3, r2
 8000678:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800067a:	bf00      	nop
 800067c:	f7ff ffde 	bl	800063c <HAL_GetTick>
 8000680:	4602      	mov	r2, r0
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	429a      	cmp	r2, r3
 800068a:	d8f7      	bhi.n	800067c <HAL_Delay+0x28>
  {
  }
}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000004 	.word	0x20000004

08000698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f003 0307 	and.w	r3, r3, #7
 80006a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <__NVIC_SetPriorityGrouping+0x44>)
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006b4:	4013      	ands	r3, r2
 80006b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ca:	4a04      	ldr	r2, [pc, #16]	; (80006dc <__NVIC_SetPriorityGrouping+0x44>)
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	60d3      	str	r3, [r2, #12]
}
 80006d0:	bf00      	nop
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <__NVIC_GetPriorityGrouping+0x18>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	0a1b      	lsrs	r3, r3, #8
 80006ea:	f003 0307 	and.w	r3, r3, #7
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070a:	2b00      	cmp	r3, #0
 800070c:	db0b      	blt.n	8000726 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	f003 021f 	and.w	r2, r3, #31
 8000714:	4907      	ldr	r1, [pc, #28]	; (8000734 <__NVIC_EnableIRQ+0x38>)
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	095b      	lsrs	r3, r3, #5
 800071c:	2001      	movs	r0, #1
 800071e:	fa00 f202 	lsl.w	r2, r0, r2
 8000722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000e100 	.word	0xe000e100

08000738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	6039      	str	r1, [r7, #0]
 8000742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000748:	2b00      	cmp	r3, #0
 800074a:	db0a      	blt.n	8000762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	b2da      	uxtb	r2, r3
 8000750:	490c      	ldr	r1, [pc, #48]	; (8000784 <__NVIC_SetPriority+0x4c>)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	0112      	lsls	r2, r2, #4
 8000758:	b2d2      	uxtb	r2, r2
 800075a:	440b      	add	r3, r1
 800075c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000760:	e00a      	b.n	8000778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4908      	ldr	r1, [pc, #32]	; (8000788 <__NVIC_SetPriority+0x50>)
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	f003 030f 	and.w	r3, r3, #15
 800076e:	3b04      	subs	r3, #4
 8000770:	0112      	lsls	r2, r2, #4
 8000772:	b2d2      	uxtb	r2, r2
 8000774:	440b      	add	r3, r1
 8000776:	761a      	strb	r2, [r3, #24]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000e100 	.word	0xe000e100
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800078c:	b480      	push	{r7}
 800078e:	b089      	sub	sp, #36	; 0x24
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	f1c3 0307 	rsb	r3, r3, #7
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	bf28      	it	cs
 80007aa:	2304      	movcs	r3, #4
 80007ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	3304      	adds	r3, #4
 80007b2:	2b06      	cmp	r3, #6
 80007b4:	d902      	bls.n	80007bc <NVIC_EncodePriority+0x30>
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3b03      	subs	r3, #3
 80007ba:	e000      	b.n	80007be <NVIC_EncodePriority+0x32>
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	43da      	mvns	r2, r3
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	401a      	ands	r2, r3
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	fa01 f303 	lsl.w	r3, r1, r3
 80007de:	43d9      	mvns	r1, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e4:	4313      	orrs	r3, r2
         );
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3724      	adds	r7, #36	; 0x24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
	...

080007f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3b01      	subs	r3, #1
 8000800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000804:	d301      	bcc.n	800080a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000806:	2301      	movs	r3, #1
 8000808:	e00f      	b.n	800082a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800080a:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <SysTick_Config+0x40>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3b01      	subs	r3, #1
 8000810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000812:	210f      	movs	r1, #15
 8000814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000818:	f7ff ff8e 	bl	8000738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <SysTick_Config+0x40>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000822:	4b04      	ldr	r3, [pc, #16]	; (8000834 <SysTick_Config+0x40>)
 8000824:	2207      	movs	r2, #7
 8000826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000828:	2300      	movs	r3, #0
}
 800082a:	4618      	mov	r0, r3
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	e000e010 	.word	0xe000e010

08000838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff ff29 	bl	8000698 <__NVIC_SetPriorityGrouping>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800084e:	b580      	push	{r7, lr}
 8000850:	b086      	sub	sp, #24
 8000852:	af00      	add	r7, sp, #0
 8000854:	4603      	mov	r3, r0
 8000856:	60b9      	str	r1, [r7, #8]
 8000858:	607a      	str	r2, [r7, #4]
 800085a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000860:	f7ff ff3e 	bl	80006e0 <__NVIC_GetPriorityGrouping>
 8000864:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	68b9      	ldr	r1, [r7, #8]
 800086a:	6978      	ldr	r0, [r7, #20]
 800086c:	f7ff ff8e 	bl	800078c <NVIC_EncodePriority>
 8000870:	4602      	mov	r2, r0
 8000872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000876:	4611      	mov	r1, r2
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ff5d 	bl	8000738 <__NVIC_SetPriority>
}
 800087e:	bf00      	nop
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
 800088c:	4603      	mov	r3, r0
 800088e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff31 	bl	80006fc <__NVIC_EnableIRQ>
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff ffa2 	bl	80007f4 <SysTick_Config>
 80008b0:	4603      	mov	r3, r0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80008c8:	f7ff feb8 	bl	800063c <HAL_GetTick>
 80008cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d101      	bne.n	80008d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80008d4:	2301      	movs	r3, #1
 80008d6:	e099      	b.n	8000a0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2200      	movs	r2, #0
 80008dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2202      	movs	r2, #2
 80008e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f022 0201 	bic.w	r2, r2, #1
 80008f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80008f8:	e00f      	b.n	800091a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80008fa:	f7ff fe9f 	bl	800063c <HAL_GetTick>
 80008fe:	4602      	mov	r2, r0
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	1ad3      	subs	r3, r2, r3
 8000904:	2b05      	cmp	r3, #5
 8000906:	d908      	bls.n	800091a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2220      	movs	r2, #32
 800090c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2203      	movs	r2, #3
 8000912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000916:	2303      	movs	r3, #3
 8000918:	e078      	b.n	8000a0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	2b00      	cmp	r3, #0
 8000926:	d1e8      	bne.n	80008fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000930:	697a      	ldr	r2, [r7, #20]
 8000932:	4b38      	ldr	r3, [pc, #224]	; (8000a14 <HAL_DMA_Init+0x158>)
 8000934:	4013      	ands	r3, r2
 8000936:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	685a      	ldr	r2, [r3, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000946:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	691b      	ldr	r3, [r3, #16]
 800094c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000952:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800095e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6a1b      	ldr	r3, [r3, #32]
 8000964:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000966:	697a      	ldr	r2, [r7, #20]
 8000968:	4313      	orrs	r3, r2
 800096a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000970:	2b04      	cmp	r3, #4
 8000972:	d107      	bne.n	8000984 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097c:	4313      	orrs	r3, r2
 800097e:	697a      	ldr	r2, [r7, #20]
 8000980:	4313      	orrs	r3, r2
 8000982:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	697a      	ldr	r2, [r7, #20]
 800098a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	f023 0307 	bic.w	r3, r3, #7
 800099a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a0:	697a      	ldr	r2, [r7, #20]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	d117      	bne.n	80009de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b2:	697a      	ldr	r2, [r7, #20]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d00e      	beq.n	80009de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f000 fadf 	bl	8000f84 <DMA_CheckFifoParam>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d008      	beq.n	80009de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2240      	movs	r2, #64	; 0x40
 80009d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2201      	movs	r2, #1
 80009d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80009da:	2301      	movs	r3, #1
 80009dc:	e016      	b.n	8000a0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	697a      	ldr	r2, [r7, #20]
 80009e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f000 fa96 	bl	8000f18 <DMA_CalcBaseAndBitshift>
 80009ec:	4603      	mov	r3, r0
 80009ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009f4:	223f      	movs	r2, #63	; 0x3f
 80009f6:	409a      	lsls	r2, r3
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2200      	movs	r2, #0
 8000a00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2201      	movs	r2, #1
 8000a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000a0a:	2300      	movs	r3, #0
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3718      	adds	r7, #24
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	f010803f 	.word	0xf010803f

08000a18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
 8000a24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a26:	2300      	movs	r3, #0
 8000a28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d101      	bne.n	8000a3e <HAL_DMA_Start_IT+0x26>
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	e040      	b.n	8000ac0 <HAL_DMA_Start_IT+0xa8>
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	2201      	movs	r2, #1
 8000a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d12f      	bne.n	8000ab2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	2202      	movs	r2, #2
 8000a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	68b9      	ldr	r1, [r7, #8]
 8000a66:	68f8      	ldr	r0, [r7, #12]
 8000a68:	f000 fa28 	bl	8000ebc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a70:	223f      	movs	r2, #63	; 0x3f
 8000a72:	409a      	lsls	r2, r3
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f042 0216 	orr.w	r2, r2, #22
 8000a86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d007      	beq.n	8000aa0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f042 0208 	orr.w	r2, r2, #8
 8000a9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f042 0201 	orr.w	r2, r2, #1
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	e005      	b.n	8000abe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000aba:	2302      	movs	r3, #2
 8000abc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000ad6:	f7ff fdb1 	bl	800063c <HAL_GetTick>
 8000ada:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d008      	beq.n	8000afa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2280      	movs	r2, #128	; 0x80
 8000aec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2200      	movs	r2, #0
 8000af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e052      	b.n	8000ba0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f022 0216 	bic.w	r2, r2, #22
 8000b08:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	695a      	ldr	r2, [r3, #20]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b18:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d103      	bne.n	8000b2a <HAL_DMA_Abort+0x62>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d007      	beq.n	8000b3a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f022 0208 	bic.w	r2, r2, #8
 8000b38:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f022 0201 	bic.w	r2, r2, #1
 8000b48:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000b4a:	e013      	b.n	8000b74 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000b4c:	f7ff fd76 	bl	800063c <HAL_GetTick>
 8000b50:	4602      	mov	r2, r0
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	2b05      	cmp	r3, #5
 8000b58:	d90c      	bls.n	8000b74 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2220      	movs	r2, #32
 8000b5e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2200      	movs	r2, #0
 8000b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2203      	movs	r2, #3
 8000b6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8000b70:	2303      	movs	r3, #3
 8000b72:	e015      	b.n	8000ba0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d1e4      	bne.n	8000b4c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b86:	223f      	movs	r2, #63	; 0x3f
 8000b88:	409a      	lsls	r2, r3
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2200      	movs	r2, #0
 8000b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8000b9e:	2300      	movs	r3, #0
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000bb4:	4b92      	ldr	r3, [pc, #584]	; (8000e00 <HAL_DMA_IRQHandler+0x258>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a92      	ldr	r2, [pc, #584]	; (8000e04 <HAL_DMA_IRQHandler+0x25c>)
 8000bba:	fba2 2303 	umull	r2, r3, r2, r3
 8000bbe:	0a9b      	lsrs	r3, r3, #10
 8000bc0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bd2:	2208      	movs	r2, #8
 8000bd4:	409a      	lsls	r2, r3
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d01a      	beq.n	8000c14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d013      	beq.n	8000c14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f022 0204 	bic.w	r2, r2, #4
 8000bfa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c00:	2208      	movs	r2, #8
 8000c02:	409a      	lsls	r2, r3
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c0c:	f043 0201 	orr.w	r2, r3, #1
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c18:	2201      	movs	r2, #1
 8000c1a:	409a      	lsls	r2, r3
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d012      	beq.n	8000c4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d00b      	beq.n	8000c4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c36:	2201      	movs	r2, #1
 8000c38:	409a      	lsls	r2, r3
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c42:	f043 0202 	orr.w	r2, r3, #2
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c4e:	2204      	movs	r2, #4
 8000c50:	409a      	lsls	r2, r3
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	4013      	ands	r3, r2
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d012      	beq.n	8000c80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f003 0302 	and.w	r3, r3, #2
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d00b      	beq.n	8000c80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c6c:	2204      	movs	r2, #4
 8000c6e:	409a      	lsls	r2, r3
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c78:	f043 0204 	orr.w	r2, r3, #4
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c84:	2210      	movs	r2, #16
 8000c86:	409a      	lsls	r2, r3
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d043      	beq.n	8000d18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f003 0308 	and.w	r3, r3, #8
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d03c      	beq.n	8000d18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ca2:	2210      	movs	r2, #16
 8000ca4:	409a      	lsls	r2, r3
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d018      	beq.n	8000cea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d108      	bne.n	8000cd8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d024      	beq.n	8000d18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	4798      	blx	r3
 8000cd6:	e01f      	b.n	8000d18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d01b      	beq.n	8000d18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	4798      	blx	r3
 8000ce8:	e016      	b.n	8000d18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d107      	bne.n	8000d08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f022 0208 	bic.w	r2, r2, #8
 8000d06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d003      	beq.n	8000d18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d1c:	2220      	movs	r2, #32
 8000d1e:	409a      	lsls	r2, r3
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4013      	ands	r3, r2
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	f000 808e 	beq.w	8000e46 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f003 0310 	and.w	r3, r3, #16
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	f000 8086 	beq.w	8000e46 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d3e:	2220      	movs	r2, #32
 8000d40:	409a      	lsls	r2, r3
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b05      	cmp	r3, #5
 8000d50:	d136      	bne.n	8000dc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f022 0216 	bic.w	r2, r2, #22
 8000d60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	695a      	ldr	r2, [r3, #20]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d103      	bne.n	8000d82 <HAL_DMA_IRQHandler+0x1da>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d007      	beq.n	8000d92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f022 0208 	bic.w	r2, r2, #8
 8000d90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d96:	223f      	movs	r2, #63	; 0x3f
 8000d98:	409a      	lsls	r2, r3
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2200      	movs	r2, #0
 8000da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2201      	movs	r2, #1
 8000daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d07d      	beq.n	8000eb2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	4798      	blx	r3
        }
        return;
 8000dbe:	e078      	b.n	8000eb2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d01c      	beq.n	8000e08 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d108      	bne.n	8000dee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d030      	beq.n	8000e46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	4798      	blx	r3
 8000dec:	e02b      	b.n	8000e46 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d027      	beq.n	8000e46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	4798      	blx	r3
 8000dfe:	e022      	b.n	8000e46 <HAL_DMA_IRQHandler+0x29e>
 8000e00:	20000058 	.word	0x20000058
 8000e04:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d10f      	bne.n	8000e36 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f022 0210 	bic.w	r2, r2, #16
 8000e24:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2201      	movs	r2, #1
 8000e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d003      	beq.n	8000e46 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d032      	beq.n	8000eb4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d022      	beq.n	8000ea0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2205      	movs	r2, #5
 8000e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f022 0201 	bic.w	r2, r2, #1
 8000e70:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	3301      	adds	r3, #1
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	697a      	ldr	r2, [r7, #20]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d307      	bcc.n	8000e8e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1f2      	bne.n	8000e72 <HAL_DMA_IRQHandler+0x2ca>
 8000e8c:	e000      	b.n	8000e90 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8000e8e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d005      	beq.n	8000eb4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	4798      	blx	r3
 8000eb0:	e000      	b.n	8000eb4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8000eb2:	bf00      	nop
    }
  }
}
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop

08000ebc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
 8000ec8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000ed8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	2b40      	cmp	r3, #64	; 0x40
 8000ee8:	d108      	bne.n	8000efc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8000efa:	e007      	b.n	8000f0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	68ba      	ldr	r2, [r7, #8]
 8000f02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	60da      	str	r2, [r3, #12]
}
 8000f0c:	bf00      	nop
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	3b10      	subs	r3, #16
 8000f28:	4a14      	ldr	r2, [pc, #80]	; (8000f7c <DMA_CalcBaseAndBitshift+0x64>)
 8000f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2e:	091b      	lsrs	r3, r3, #4
 8000f30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000f32:	4a13      	ldr	r2, [pc, #76]	; (8000f80 <DMA_CalcBaseAndBitshift+0x68>)
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2b03      	cmp	r3, #3
 8000f44:	d909      	bls.n	8000f5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000f4e:	f023 0303 	bic.w	r3, r3, #3
 8000f52:	1d1a      	adds	r2, r3, #4
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	659a      	str	r2, [r3, #88]	; 0x58
 8000f58:	e007      	b.n	8000f6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000f62:	f023 0303 	bic.w	r3, r3, #3
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	aaaaaaab 	.word	0xaaaaaaab
 8000f80:	0800ada8 	.word	0x0800ada8

08000f84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d11f      	bne.n	8000fde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	d855      	bhi.n	8001050 <DMA_CheckFifoParam+0xcc>
 8000fa4:	a201      	add	r2, pc, #4	; (adr r2, 8000fac <DMA_CheckFifoParam+0x28>)
 8000fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000faa:	bf00      	nop
 8000fac:	08000fbd 	.word	0x08000fbd
 8000fb0:	08000fcf 	.word	0x08000fcf
 8000fb4:	08000fbd 	.word	0x08000fbd
 8000fb8:	08001051 	.word	0x08001051
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d045      	beq.n	8001054 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000fcc:	e042      	b.n	8001054 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000fd6:	d13f      	bne.n	8001058 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000fdc:	e03c      	b.n	8001058 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fe6:	d121      	bne.n	800102c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d836      	bhi.n	800105c <DMA_CheckFifoParam+0xd8>
 8000fee:	a201      	add	r2, pc, #4	; (adr r2, 8000ff4 <DMA_CheckFifoParam+0x70>)
 8000ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff4:	08001005 	.word	0x08001005
 8000ff8:	0800100b 	.word	0x0800100b
 8000ffc:	08001005 	.word	0x08001005
 8001000:	0800101d 	.word	0x0800101d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	73fb      	strb	r3, [r7, #15]
      break;
 8001008:	e02f      	b.n	800106a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d024      	beq.n	8001060 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800101a:	e021      	b.n	8001060 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001020:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001024:	d11e      	bne.n	8001064 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800102a:	e01b      	b.n	8001064 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	2b02      	cmp	r3, #2
 8001030:	d902      	bls.n	8001038 <DMA_CheckFifoParam+0xb4>
 8001032:	2b03      	cmp	r3, #3
 8001034:	d003      	beq.n	800103e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001036:	e018      	b.n	800106a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	73fb      	strb	r3, [r7, #15]
      break;
 800103c:	e015      	b.n	800106a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001042:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d00e      	beq.n	8001068 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	73fb      	strb	r3, [r7, #15]
      break;
 800104e:	e00b      	b.n	8001068 <DMA_CheckFifoParam+0xe4>
      break;
 8001050:	bf00      	nop
 8001052:	e00a      	b.n	800106a <DMA_CheckFifoParam+0xe6>
      break;
 8001054:	bf00      	nop
 8001056:	e008      	b.n	800106a <DMA_CheckFifoParam+0xe6>
      break;
 8001058:	bf00      	nop
 800105a:	e006      	b.n	800106a <DMA_CheckFifoParam+0xe6>
      break;
 800105c:	bf00      	nop
 800105e:	e004      	b.n	800106a <DMA_CheckFifoParam+0xe6>
      break;
 8001060:	bf00      	nop
 8001062:	e002      	b.n	800106a <DMA_CheckFifoParam+0xe6>
      break;   
 8001064:	bf00      	nop
 8001066:	e000      	b.n	800106a <DMA_CheckFifoParam+0xe6>
      break;
 8001068:	bf00      	nop
    }
  } 
  
  return status; 
 800106a:	7bfb      	ldrb	r3, [r7, #15]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	; 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	e16b      	b.n	800136c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001094:	2201      	movs	r2, #1
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	f040 815a 	bne.w	8001366 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d00b      	beq.n	80010d2 <HAL_GPIO_Init+0x5a>
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d007      	beq.n	80010d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010c6:	2b11      	cmp	r3, #17
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	2b12      	cmp	r3, #18
 80010d0:	d130      	bne.n	8001134 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	2203      	movs	r2, #3
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	68da      	ldr	r2, [r3, #12]
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001108:	2201      	movs	r2, #1
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	091b      	lsrs	r3, r3, #4
 800111e:	f003 0201 	and.w	r2, r3, #1
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	2203      	movs	r2, #3
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	689a      	ldr	r2, [r3, #8]
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b02      	cmp	r3, #2
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0xfc>
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2b12      	cmp	r3, #18
 8001172:	d123      	bne.n	80011bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	08da      	lsrs	r2, r3, #3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3208      	adds	r2, #8
 800117c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	f003 0307 	and.w	r3, r3, #7
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	220f      	movs	r2, #15
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	691a      	ldr	r2, [r3, #16]
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	08da      	lsrs	r2, r3, #3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3208      	adds	r2, #8
 80011b6:	69b9      	ldr	r1, [r7, #24]
 80011b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	2203      	movs	r2, #3
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 0203 	and.w	r2, r3, #3
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f000 80b4 	beq.w	8001366 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b5f      	ldr	r3, [pc, #380]	; (8001380 <HAL_GPIO_Init+0x308>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	4a5e      	ldr	r2, [pc, #376]	; (8001380 <HAL_GPIO_Init+0x308>)
 8001208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800120c:	6453      	str	r3, [r2, #68]	; 0x44
 800120e:	4b5c      	ldr	r3, [pc, #368]	; (8001380 <HAL_GPIO_Init+0x308>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800121a:	4a5a      	ldr	r2, [pc, #360]	; (8001384 <HAL_GPIO_Init+0x30c>)
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	089b      	lsrs	r3, r3, #2
 8001220:	3302      	adds	r3, #2
 8001222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	220f      	movs	r2, #15
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a51      	ldr	r2, [pc, #324]	; (8001388 <HAL_GPIO_Init+0x310>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d02b      	beq.n	800129e <HAL_GPIO_Init+0x226>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a50      	ldr	r2, [pc, #320]	; (800138c <HAL_GPIO_Init+0x314>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d025      	beq.n	800129a <HAL_GPIO_Init+0x222>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a4f      	ldr	r2, [pc, #316]	; (8001390 <HAL_GPIO_Init+0x318>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d01f      	beq.n	8001296 <HAL_GPIO_Init+0x21e>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a4e      	ldr	r2, [pc, #312]	; (8001394 <HAL_GPIO_Init+0x31c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d019      	beq.n	8001292 <HAL_GPIO_Init+0x21a>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a4d      	ldr	r2, [pc, #308]	; (8001398 <HAL_GPIO_Init+0x320>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d013      	beq.n	800128e <HAL_GPIO_Init+0x216>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4c      	ldr	r2, [pc, #304]	; (800139c <HAL_GPIO_Init+0x324>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d00d      	beq.n	800128a <HAL_GPIO_Init+0x212>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4b      	ldr	r2, [pc, #300]	; (80013a0 <HAL_GPIO_Init+0x328>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d007      	beq.n	8001286 <HAL_GPIO_Init+0x20e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4a      	ldr	r2, [pc, #296]	; (80013a4 <HAL_GPIO_Init+0x32c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d101      	bne.n	8001282 <HAL_GPIO_Init+0x20a>
 800127e:	2307      	movs	r3, #7
 8001280:	e00e      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 8001282:	2308      	movs	r3, #8
 8001284:	e00c      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 8001286:	2306      	movs	r3, #6
 8001288:	e00a      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 800128a:	2305      	movs	r3, #5
 800128c:	e008      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 800128e:	2304      	movs	r3, #4
 8001290:	e006      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 8001292:	2303      	movs	r3, #3
 8001294:	e004      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 8001296:	2302      	movs	r3, #2
 8001298:	e002      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 800129a:	2301      	movs	r3, #1
 800129c:	e000      	b.n	80012a0 <HAL_GPIO_Init+0x228>
 800129e:	2300      	movs	r3, #0
 80012a0:	69fa      	ldr	r2, [r7, #28]
 80012a2:	f002 0203 	and.w	r2, r2, #3
 80012a6:	0092      	lsls	r2, r2, #2
 80012a8:	4093      	lsls	r3, r2
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012b0:	4934      	ldr	r1, [pc, #208]	; (8001384 <HAL_GPIO_Init+0x30c>)
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	089b      	lsrs	r3, r3, #2
 80012b6:	3302      	adds	r3, #2
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012be:	4b3a      	ldr	r3, [pc, #232]	; (80013a8 <HAL_GPIO_Init+0x330>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012e2:	4a31      	ldr	r2, [pc, #196]	; (80013a8 <HAL_GPIO_Init+0x330>)
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012e8:	4b2f      	ldr	r3, [pc, #188]	; (80013a8 <HAL_GPIO_Init+0x330>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800130c:	4a26      	ldr	r2, [pc, #152]	; (80013a8 <HAL_GPIO_Init+0x330>)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001312:	4b25      	ldr	r3, [pc, #148]	; (80013a8 <HAL_GPIO_Init+0x330>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001336:	4a1c      	ldr	r2, [pc, #112]	; (80013a8 <HAL_GPIO_Init+0x330>)
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800133c:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <HAL_GPIO_Init+0x330>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	43db      	mvns	r3, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4013      	ands	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001360:	4a11      	ldr	r2, [pc, #68]	; (80013a8 <HAL_GPIO_Init+0x330>)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3301      	adds	r3, #1
 800136a:	61fb      	str	r3, [r7, #28]
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	2b0f      	cmp	r3, #15
 8001370:	f67f ae90 	bls.w	8001094 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001374:	bf00      	nop
 8001376:	3724      	adds	r7, #36	; 0x24
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	40023800 	.word	0x40023800
 8001384:	40013800 	.word	0x40013800
 8001388:	40020000 	.word	0x40020000
 800138c:	40020400 	.word	0x40020400
 8001390:	40020800 	.word	0x40020800
 8001394:	40020c00 	.word	0x40020c00
 8001398:	40021000 	.word	0x40021000
 800139c:	40021400 	.word	0x40021400
 80013a0:	40021800 	.word	0x40021800
 80013a4:	40021c00 	.word	0x40021c00
 80013a8:	40013c00 	.word	0x40013c00

080013ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691a      	ldr	r2, [r3, #16]
 80013bc:	887b      	ldrh	r3, [r7, #2]
 80013be:	4013      	ands	r3, r2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d002      	beq.n	80013ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013c4:	2301      	movs	r3, #1
 80013c6:	73fb      	strb	r3, [r7, #15]
 80013c8:	e001      	b.n	80013ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013ca:	2300      	movs	r3, #0
 80013cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	807b      	strh	r3, [r7, #2]
 80013e8:	4613      	mov	r3, r2
 80013ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013ec:	787b      	ldrb	r3, [r7, #1]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013f2:	887a      	ldrh	r2, [r7, #2]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013f8:	e003      	b.n	8001402 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013fa:	887b      	ldrh	r3, [r7, #2]
 80013fc:	041a      	lsls	r2, r3, #16
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	619a      	str	r2, [r3, #24]
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800141c:	695a      	ldr	r2, [r3, #20]
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	4013      	ands	r3, r2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d006      	beq.n	8001434 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001426:	4a05      	ldr	r2, [pc, #20]	; (800143c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800142c:	88fb      	ldrh	r3, [r7, #6]
 800142e:	4618      	mov	r0, r3
 8001430:	f008 f82c 	bl	800948c <HAL_GPIO_EXTI_Callback>
  }
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40013c00 	.word	0x40013c00

08001440 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e11f      	b.n	8001692 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d106      	bne.n	800146c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f008 fc8c 	bl	8009d84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2224      	movs	r2, #36	; 0x24
 8001470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0201 	bic.w	r2, r2, #1
 8001482:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001492:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014a4:	f001 fff6 	bl	8003494 <HAL_RCC_GetPCLK1Freq>
 80014a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	4a7b      	ldr	r2, [pc, #492]	; (800169c <HAL_I2C_Init+0x25c>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d807      	bhi.n	80014c4 <HAL_I2C_Init+0x84>
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4a7a      	ldr	r2, [pc, #488]	; (80016a0 <HAL_I2C_Init+0x260>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	bf94      	ite	ls
 80014bc:	2301      	movls	r3, #1
 80014be:	2300      	movhi	r3, #0
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	e006      	b.n	80014d2 <HAL_I2C_Init+0x92>
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4a77      	ldr	r2, [pc, #476]	; (80016a4 <HAL_I2C_Init+0x264>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	bf94      	ite	ls
 80014cc:	2301      	movls	r3, #1
 80014ce:	2300      	movhi	r3, #0
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e0db      	b.n	8001692 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4a72      	ldr	r2, [pc, #456]	; (80016a8 <HAL_I2C_Init+0x268>)
 80014de:	fba2 2303 	umull	r2, r3, r2, r3
 80014e2:	0c9b      	lsrs	r3, r3, #18
 80014e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68ba      	ldr	r2, [r7, #8]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6a1b      	ldr	r3, [r3, #32]
 8001500:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	4a64      	ldr	r2, [pc, #400]	; (800169c <HAL_I2C_Init+0x25c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d802      	bhi.n	8001514 <HAL_I2C_Init+0xd4>
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	3301      	adds	r3, #1
 8001512:	e009      	b.n	8001528 <HAL_I2C_Init+0xe8>
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800151a:	fb02 f303 	mul.w	r3, r2, r3
 800151e:	4a63      	ldr	r2, [pc, #396]	; (80016ac <HAL_I2C_Init+0x26c>)
 8001520:	fba2 2303 	umull	r2, r3, r2, r3
 8001524:	099b      	lsrs	r3, r3, #6
 8001526:	3301      	adds	r3, #1
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	6812      	ldr	r2, [r2, #0]
 800152c:	430b      	orrs	r3, r1
 800152e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800153a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	4956      	ldr	r1, [pc, #344]	; (800169c <HAL_I2C_Init+0x25c>)
 8001544:	428b      	cmp	r3, r1
 8001546:	d80d      	bhi.n	8001564 <HAL_I2C_Init+0x124>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	1e59      	subs	r1, r3, #1
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	fbb1 f3f3 	udiv	r3, r1, r3
 8001556:	3301      	adds	r3, #1
 8001558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800155c:	2b04      	cmp	r3, #4
 800155e:	bf38      	it	cc
 8001560:	2304      	movcc	r3, #4
 8001562:	e04f      	b.n	8001604 <HAL_I2C_Init+0x1c4>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d111      	bne.n	8001590 <HAL_I2C_Init+0x150>
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	1e58      	subs	r0, r3, #1
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6859      	ldr	r1, [r3, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	440b      	add	r3, r1
 800157a:	fbb0 f3f3 	udiv	r3, r0, r3
 800157e:	3301      	adds	r3, #1
 8001580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001584:	2b00      	cmp	r3, #0
 8001586:	bf0c      	ite	eq
 8001588:	2301      	moveq	r3, #1
 800158a:	2300      	movne	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	e012      	b.n	80015b6 <HAL_I2C_Init+0x176>
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	1e58      	subs	r0, r3, #1
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6859      	ldr	r1, [r3, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	440b      	add	r3, r1
 800159e:	0099      	lsls	r1, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015a6:	3301      	adds	r3, #1
 80015a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	bf0c      	ite	eq
 80015b0:	2301      	moveq	r3, #1
 80015b2:	2300      	movne	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_I2C_Init+0x17e>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e022      	b.n	8001604 <HAL_I2C_Init+0x1c4>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d10e      	bne.n	80015e4 <HAL_I2C_Init+0x1a4>
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	1e58      	subs	r0, r3, #1
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6859      	ldr	r1, [r3, #4]
 80015ce:	460b      	mov	r3, r1
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	440b      	add	r3, r1
 80015d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80015d8:	3301      	adds	r3, #1
 80015da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015e2:	e00f      	b.n	8001604 <HAL_I2C_Init+0x1c4>
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	1e58      	subs	r0, r3, #1
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6859      	ldr	r1, [r3, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	0099      	lsls	r1, r3, #2
 80015f4:	440b      	add	r3, r1
 80015f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015fa:	3301      	adds	r3, #1
 80015fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001600:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	6809      	ldr	r1, [r1, #0]
 8001608:	4313      	orrs	r3, r2
 800160a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69da      	ldr	r2, [r3, #28]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	430a      	orrs	r2, r1
 8001626:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001632:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6911      	ldr	r1, [r2, #16]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	68d2      	ldr	r2, [r2, #12]
 800163e:	4311      	orrs	r1, r2
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6812      	ldr	r2, [r2, #0]
 8001644:	430b      	orrs	r3, r1
 8001646:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	695a      	ldr	r2, [r3, #20]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	430a      	orrs	r2, r1
 8001662:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 0201 	orr.w	r2, r2, #1
 8001672:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2220      	movs	r2, #32
 800167e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	000186a0 	.word	0x000186a0
 80016a0:	001e847f 	.word	0x001e847f
 80016a4:	003d08ff 	.word	0x003d08ff
 80016a8:	431bde83 	.word	0x431bde83
 80016ac:	10624dd3 	.word	0x10624dd3

080016b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af02      	add	r7, sp, #8
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	461a      	mov	r2, r3
 80016bc:	460b      	mov	r3, r1
 80016be:	817b      	strh	r3, [r7, #10]
 80016c0:	4613      	mov	r3, r2
 80016c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016c4:	f7fe ffba 	bl	800063c <HAL_GetTick>
 80016c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b20      	cmp	r3, #32
 80016d4:	f040 80e0 	bne.w	8001898 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	2319      	movs	r3, #25
 80016de:	2201      	movs	r2, #1
 80016e0:	4970      	ldr	r1, [pc, #448]	; (80018a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f000 f964 	bl	80019b0 <I2C_WaitOnFlagUntilTimeout>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80016ee:	2302      	movs	r3, #2
 80016f0:	e0d3      	b.n	800189a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d101      	bne.n	8001700 <HAL_I2C_Master_Transmit+0x50>
 80016fc:	2302      	movs	r3, #2
 80016fe:	e0cc      	b.n	800189a <HAL_I2C_Master_Transmit+0x1ea>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b01      	cmp	r3, #1
 8001714:	d007      	beq.n	8001726 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f042 0201 	orr.w	r2, r2, #1
 8001724:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001734:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2221      	movs	r2, #33	; 0x21
 800173a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2210      	movs	r2, #16
 8001742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2200      	movs	r2, #0
 800174a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	893a      	ldrh	r2, [r7, #8]
 8001756:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800175c:	b29a      	uxth	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4a50      	ldr	r2, [pc, #320]	; (80018a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001766:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001768:	8979      	ldrh	r1, [r7, #10]
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	6a3a      	ldr	r2, [r7, #32]
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f000 f89c 	bl	80018ac <I2C_MasterRequestWrite>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e08d      	b.n	800189a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001794:	e066      	b.n	8001864 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	6a39      	ldr	r1, [r7, #32]
 800179a:	68f8      	ldr	r0, [r7, #12]
 800179c:	f000 f9de 	bl	8001b5c <I2C_WaitOnTXEFlagUntilTimeout>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00d      	beq.n	80017c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	d107      	bne.n	80017be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e06b      	b.n	800189a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c6:	781a      	ldrb	r2, [r3, #0]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017dc:	b29b      	uxth	r3, r3
 80017de:	3b01      	subs	r3, #1
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ea:	3b01      	subs	r3, #1
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d11b      	bne.n	8001838 <HAL_I2C_Master_Transmit+0x188>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001804:	2b00      	cmp	r3, #0
 8001806:	d017      	beq.n	8001838 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180c:	781a      	ldrb	r2, [r3, #0]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	1c5a      	adds	r2, r3, #1
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001822:	b29b      	uxth	r3, r3
 8001824:	3b01      	subs	r3, #1
 8001826:	b29a      	uxth	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001830:	3b01      	subs	r3, #1
 8001832:	b29a      	uxth	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	6a39      	ldr	r1, [r7, #32]
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f000 f9ce 	bl	8001bde <I2C_WaitOnBTFFlagUntilTimeout>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00d      	beq.n	8001864 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	2b04      	cmp	r3, #4
 800184e:	d107      	bne.n	8001860 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800185e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e01a      	b.n	800189a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001868:	2b00      	cmp	r3, #0
 800186a:	d194      	bne.n	8001796 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800187a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2220      	movs	r2, #32
 8001880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	e000      	b.n	800189a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001898:	2302      	movs	r3, #2
  }
}
 800189a:	4618      	mov	r0, r3
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	00100002 	.word	0x00100002
 80018a8:	ffff0000 	.word	0xffff0000

080018ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b088      	sub	sp, #32
 80018b0:	af02      	add	r7, sp, #8
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	607a      	str	r2, [r7, #4]
 80018b6:	603b      	str	r3, [r7, #0]
 80018b8:	460b      	mov	r3, r1
 80018ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d006      	beq.n	80018d6 <I2C_MasterRequestWrite+0x2a>
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d003      	beq.n	80018d6 <I2C_MasterRequestWrite+0x2a>
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80018d4:	d108      	bne.n	80018e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	e00b      	b.n	8001900 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ec:	2b12      	cmp	r3, #18
 80018ee:	d107      	bne.n	8001900 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f000 f84f 	bl	80019b0 <I2C_WaitOnFlagUntilTimeout>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d00d      	beq.n	8001934 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001926:	d103      	bne.n	8001930 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800192e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e035      	b.n	80019a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800193c:	d108      	bne.n	8001950 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800193e:	897b      	ldrh	r3, [r7, #10]
 8001940:	b2db      	uxtb	r3, r3
 8001942:	461a      	mov	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800194c:	611a      	str	r2, [r3, #16]
 800194e:	e01b      	b.n	8001988 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001950:	897b      	ldrh	r3, [r7, #10]
 8001952:	11db      	asrs	r3, r3, #7
 8001954:	b2db      	uxtb	r3, r3
 8001956:	f003 0306 	and.w	r3, r3, #6
 800195a:	b2db      	uxtb	r3, r3
 800195c:	f063 030f 	orn	r3, r3, #15
 8001960:	b2da      	uxtb	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	490e      	ldr	r1, [pc, #56]	; (80019a8 <I2C_MasterRequestWrite+0xfc>)
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f000 f875 	bl	8001a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e010      	b.n	80019a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800197e:	897b      	ldrh	r3, [r7, #10]
 8001980:	b2da      	uxtb	r2, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	4907      	ldr	r1, [pc, #28]	; (80019ac <I2C_MasterRequestWrite+0x100>)
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f000 f865 	bl	8001a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	00010008 	.word	0x00010008
 80019ac:	00010002 	.word	0x00010002

080019b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	4613      	mov	r3, r2
 80019be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019c0:	e025      	b.n	8001a0e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019c8:	d021      	beq.n	8001a0e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019ca:	f7fe fe37 	bl	800063c <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d302      	bcc.n	80019e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d116      	bne.n	8001a0e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2200      	movs	r2, #0
 80019e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2220      	movs	r2, #32
 80019ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f043 0220 	orr.w	r2, r3, #32
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e023      	b.n	8001a56 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	0c1b      	lsrs	r3, r3, #16
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d10d      	bne.n	8001a34 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	43da      	mvns	r2, r3
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	4013      	ands	r3, r2
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	bf0c      	ite	eq
 8001a2a:	2301      	moveq	r3, #1
 8001a2c:	2300      	movne	r3, #0
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	461a      	mov	r2, r3
 8001a32:	e00c      	b.n	8001a4e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	43da      	mvns	r2, r3
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	bf0c      	ite	eq
 8001a46:	2301      	moveq	r3, #1
 8001a48:	2300      	movne	r3, #0
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d0b6      	beq.n	80019c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b084      	sub	sp, #16
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	60f8      	str	r0, [r7, #12]
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a6c:	e051      	b.n	8001b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a7c:	d123      	bne.n	8001ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a8c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a96:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2220      	movs	r2, #32
 8001aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	f043 0204 	orr.w	r2, r3, #4
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e046      	b.n	8001b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001acc:	d021      	beq.n	8001b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ace:	f7fe fdb5 	bl	800063c <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d302      	bcc.n	8001ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d116      	bne.n	8001b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2220      	movs	r2, #32
 8001aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	f043 0220 	orr.w	r2, r3, #32
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e020      	b.n	8001b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	0c1b      	lsrs	r3, r3, #16
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d10c      	bne.n	8001b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	43da      	mvns	r2, r3
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	4013      	ands	r3, r2
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	bf14      	ite	ne
 8001b2e:	2301      	movne	r3, #1
 8001b30:	2300      	moveq	r3, #0
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	e00b      	b.n	8001b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	43da      	mvns	r2, r3
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	4013      	ands	r3, r2
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	bf14      	ite	ne
 8001b48:	2301      	movne	r3, #1
 8001b4a:	2300      	moveq	r3, #0
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d18d      	bne.n	8001a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b68:	e02d      	b.n	8001bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f000 f878 	bl	8001c60 <I2C_IsAcknowledgeFailed>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e02d      	b.n	8001bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b80:	d021      	beq.n	8001bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b82:	f7fe fd5b 	bl	800063c <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d302      	bcc.n	8001b98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d116      	bne.n	8001bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2220      	movs	r2, #32
 8001ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	f043 0220 	orr.w	r2, r3, #32
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e007      	b.n	8001bd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd0:	2b80      	cmp	r3, #128	; 0x80
 8001bd2:	d1ca      	bne.n	8001b6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b084      	sub	sp, #16
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	60f8      	str	r0, [r7, #12]
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001bea:	e02d      	b.n	8001c48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f000 f837 	bl	8001c60 <I2C_IsAcknowledgeFailed>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e02d      	b.n	8001c58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c02:	d021      	beq.n	8001c48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c04:	f7fe fd1a 	bl	800063c <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d302      	bcc.n	8001c1a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d116      	bne.n	8001c48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2220      	movs	r2, #32
 8001c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	f043 0220 	orr.w	r2, r3, #32
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e007      	b.n	8001c58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	f003 0304 	and.w	r3, r3, #4
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d1ca      	bne.n	8001bec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c76:	d11b      	bne.n	8001cb0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	f043 0204 	orr.w	r2, r3, #4
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e000      	b.n	8001cb2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
	...

08001cc0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e128      	b.n	8001f24 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d109      	bne.n	8001cf2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a90      	ldr	r2, [pc, #576]	; (8001f2c <HAL_I2S_Init+0x26c>)
 8001cea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f008 f891 	bl	8009e14 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6812      	ldr	r2, [r2, #0]
 8001d04:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001d08:	f023 030f 	bic.w	r3, r3, #15
 8001d0c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2202      	movs	r2, #2
 8001d14:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d060      	beq.n	8001de0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d102      	bne.n	8001d2c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001d26:	2310      	movs	r3, #16
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	e001      	b.n	8001d30 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001d2c:	2320      	movs	r3, #32
 8001d2e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b20      	cmp	r3, #32
 8001d36:	d802      	bhi.n	8001d3e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001d3e:	2001      	movs	r0, #1
 8001d40:	f001 fc9e 	bl	8003680 <HAL_RCCEx_GetPeriphCLKFreq>
 8001d44:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d4e:	d125      	bne.n	8001d9c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d010      	beq.n	8001d7a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d62:	4613      	mov	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d74:	3305      	adds	r3, #5
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	e01f      	b.n	8001dba <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d96:	3305      	adds	r3, #5
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	e00e      	b.n	8001dba <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001da4:	4613      	mov	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	461a      	mov	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db6:	3305      	adds	r3, #5
 8001db8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4a5c      	ldr	r2, [pc, #368]	; (8001f30 <HAL_I2S_Init+0x270>)
 8001dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc2:	08db      	lsrs	r3, r3, #3
 8001dc4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	085b      	lsrs	r3, r3, #1
 8001dd6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	021b      	lsls	r3, r3, #8
 8001ddc:	61bb      	str	r3, [r7, #24]
 8001dde:	e003      	b.n	8001de8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001de0:	2302      	movs	r3, #2
 8001de2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d902      	bls.n	8001df4 <HAL_I2S_Init+0x134>
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	2bff      	cmp	r3, #255	; 0xff
 8001df2:	d907      	bls.n	8001e04 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df8:	f043 0210 	orr.w	r2, r3, #16
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e08f      	b.n	8001f24 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691a      	ldr	r2, [r3, #16]
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	ea42 0103 	orr.w	r1, r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	69fa      	ldr	r2, [r7, #28]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001e22:	f023 030f 	bic.w	r3, r3, #15
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6851      	ldr	r1, [r2, #4]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6892      	ldr	r2, [r2, #8]
 8001e2e:	4311      	orrs	r1, r2
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	68d2      	ldr	r2, [r2, #12]
 8001e34:	4311      	orrs	r1, r2
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6992      	ldr	r2, [r2, #24]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e46:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d161      	bne.n	8001f14 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a38      	ldr	r2, [pc, #224]	; (8001f34 <HAL_I2S_Init+0x274>)
 8001e54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a37      	ldr	r2, [pc, #220]	; (8001f38 <HAL_I2S_Init+0x278>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d101      	bne.n	8001e64 <HAL_I2S_Init+0x1a4>
 8001e60:	4b36      	ldr	r3, [pc, #216]	; (8001f3c <HAL_I2S_Init+0x27c>)
 8001e62:	e001      	b.n	8001e68 <HAL_I2S_Init+0x1a8>
 8001e64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6812      	ldr	r2, [r2, #0]
 8001e6e:	4932      	ldr	r1, [pc, #200]	; (8001f38 <HAL_I2S_Init+0x278>)
 8001e70:	428a      	cmp	r2, r1
 8001e72:	d101      	bne.n	8001e78 <HAL_I2S_Init+0x1b8>
 8001e74:	4a31      	ldr	r2, [pc, #196]	; (8001f3c <HAL_I2S_Init+0x27c>)
 8001e76:	e001      	b.n	8001e7c <HAL_I2S_Init+0x1bc>
 8001e78:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001e7c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001e80:	f023 030f 	bic.w	r3, r3, #15
 8001e84:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a2b      	ldr	r2, [pc, #172]	; (8001f38 <HAL_I2S_Init+0x278>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d101      	bne.n	8001e94 <HAL_I2S_Init+0x1d4>
 8001e90:	4b2a      	ldr	r3, [pc, #168]	; (8001f3c <HAL_I2S_Init+0x27c>)
 8001e92:	e001      	b.n	8001e98 <HAL_I2S_Init+0x1d8>
 8001e94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e98:	2202      	movs	r2, #2
 8001e9a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a25      	ldr	r2, [pc, #148]	; (8001f38 <HAL_I2S_Init+0x278>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d101      	bne.n	8001eaa <HAL_I2S_Init+0x1ea>
 8001ea6:	4b25      	ldr	r3, [pc, #148]	; (8001f3c <HAL_I2S_Init+0x27c>)
 8001ea8:	e001      	b.n	8001eae <HAL_I2S_Init+0x1ee>
 8001eaa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eba:	d003      	beq.n	8001ec4 <HAL_I2S_Init+0x204>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d103      	bne.n	8001ecc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001ec4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	e001      	b.n	8001ed0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	b299      	uxth	r1, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001ee6:	4303      	orrs	r3, r0
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	430b      	orrs	r3, r1
 8001eec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	897b      	ldrh	r3, [r7, #10]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001efc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a0d      	ldr	r2, [pc, #52]	; (8001f38 <HAL_I2S_Init+0x278>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d101      	bne.n	8001f0c <HAL_I2S_Init+0x24c>
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <HAL_I2S_Init+0x27c>)
 8001f0a:	e001      	b.n	8001f10 <HAL_I2S_Init+0x250>
 8001f0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f10:	897a      	ldrh	r2, [r7, #10]
 8001f12:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3720      	adds	r7, #32
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	080025d1 	.word	0x080025d1
 8001f30:	cccccccd 	.word	0xcccccccd
 8001f34:	08002759 	.word	0x08002759
 8001f38:	40003800 	.word	0x40003800
 8001f3c:	40003400 	.word	0x40003400

08001f40 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <HAL_I2S_Transmit_DMA+0x1a>
 8001f54:	88fb      	ldrh	r3, [r7, #6]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e08e      	b.n	800207c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_I2S_Transmit_DMA+0x2e>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e086      	b.n	800207c <HAL_I2S_Transmit_DMA+0x13c>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d005      	beq.n	8001f8e <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e076      	b.n	800207c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2203      	movs	r2, #3
 8001f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	d002      	beq.n	8001fba <HAL_I2S_Transmit_DMA+0x7a>
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	2b05      	cmp	r3, #5
 8001fb8:	d10a      	bne.n	8001fd0 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8001fba:	88fb      	ldrh	r3, [r7, #6]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8001fc4:	88fb      	ldrh	r3, [r7, #6]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fce:	e005      	b.n	8001fdc <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	88fa      	ldrh	r2, [r7, #6]
 8001fd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	88fa      	ldrh	r2, [r7, #6]
 8001fda:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe0:	4a28      	ldr	r2, [pc, #160]	; (8002084 <HAL_I2S_Transmit_DMA+0x144>)
 8001fe2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe8:	4a27      	ldr	r2, [pc, #156]	; (8002088 <HAL_I2S_Transmit_DMA+0x148>)
 8001fea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff0:	4a26      	ldr	r2, [pc, #152]	; (800208c <HAL_I2S_Transmit_DMA+0x14c>)
 8001ff2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8001ffc:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002004:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800200a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800200c:	f7fe fd04 	bl	8000a18 <HAL_DMA_Start_IT>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00f      	beq.n	8002036 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	f043 0208 	orr.w	r2, r3, #8
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e022      	b.n	800207c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002040:	2b00      	cmp	r3, #0
 8002042:	d107      	bne.n	8002054 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	69da      	ldr	r2, [r3, #28]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002052:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d107      	bne.n	8002072 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f042 0202 	orr.w	r2, r2, #2
 8002070:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	080024af 	.word	0x080024af
 8002088:	0800246d 	.word	0x0800246d
 800208c:	080024cb 	.word	0x080024cb

08002090 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020a4:	d004      	beq.n	80020b0 <HAL_I2S_DMAStop+0x20>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f040 80d1 	bne.w	8002252 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00f      	beq.n	80020d8 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe fd03 	bl	8000ac8 <HAL_DMA_Abort>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d007      	beq.n	80020d8 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020cc:	f043 0208 	orr.w	r2, r3, #8
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80020d8:	2364      	movs	r3, #100	; 0x64
 80020da:	2201      	movs	r2, #1
 80020dc:	2102      	movs	r1, #2
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 fb00 	bl	80026e4 <I2S_WaitFlagStateUntilTimeout>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00b      	beq.n	8002102 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	f043 0201 	orr.w	r2, r3, #1
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002102:	2364      	movs	r3, #100	; 0x64
 8002104:	2200      	movs	r2, #0
 8002106:	2180      	movs	r1, #128	; 0x80
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 faeb 	bl	80026e4 <I2S_WaitFlagStateUntilTimeout>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00b      	beq.n	800212c <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002118:	f043 0201 	orr.w	r2, r3, #1
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	69da      	ldr	r2, [r3, #28]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800213a:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0202 	bic.w	r2, r2, #2
 8002158:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b05      	cmp	r3, #5
 8002164:	f040 8165 	bne.w	8002432 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00f      	beq.n	8002190 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe fca7 	bl	8000ac8 <HAL_DMA_Abort>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d007      	beq.n	8002190 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002184:	f043 0208 	orr.w	r2, r3, #8
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a8a      	ldr	r2, [pc, #552]	; (80023c0 <HAL_I2S_DMAStop+0x330>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d101      	bne.n	800219e <HAL_I2S_DMAStop+0x10e>
 800219a:	4b8a      	ldr	r3, [pc, #552]	; (80023c4 <HAL_I2S_DMAStop+0x334>)
 800219c:	e001      	b.n	80021a2 <HAL_I2S_DMAStop+0x112>
 800219e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021a2:	69da      	ldr	r2, [r3, #28]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4985      	ldr	r1, [pc, #532]	; (80023c0 <HAL_I2S_DMAStop+0x330>)
 80021aa:	428b      	cmp	r3, r1
 80021ac:	d101      	bne.n	80021b2 <HAL_I2S_DMAStop+0x122>
 80021ae:	4b85      	ldr	r3, [pc, #532]	; (80023c4 <HAL_I2S_DMAStop+0x334>)
 80021b0:	e001      	b.n	80021b6 <HAL_I2S_DMAStop+0x126>
 80021b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ba:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 80021bc:	2300      	movs	r3, #0
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a7e      	ldr	r2, [pc, #504]	; (80023c0 <HAL_I2S_DMAStop+0x330>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d101      	bne.n	80021ce <HAL_I2S_DMAStop+0x13e>
 80021ca:	4b7e      	ldr	r3, [pc, #504]	; (80023c4 <HAL_I2S_DMAStop+0x334>)
 80021cc:	e001      	b.n	80021d2 <HAL_I2S_DMAStop+0x142>
 80021ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a79      	ldr	r2, [pc, #484]	; (80023c0 <HAL_I2S_DMAStop+0x330>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d101      	bne.n	80021e4 <HAL_I2S_DMAStop+0x154>
 80021e0:	4b78      	ldr	r3, [pc, #480]	; (80023c4 <HAL_I2S_DMAStop+0x334>)
 80021e2:	e001      	b.n	80021e8 <HAL_I2S_DMAStop+0x158>
 80021e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a73      	ldr	r2, [pc, #460]	; (80023c0 <HAL_I2S_DMAStop+0x330>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d101      	bne.n	80021fc <HAL_I2S_DMAStop+0x16c>
 80021f8:	4b72      	ldr	r3, [pc, #456]	; (80023c4 <HAL_I2S_DMAStop+0x334>)
 80021fa:	e001      	b.n	8002200 <HAL_I2S_DMAStop+0x170>
 80021fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	496e      	ldr	r1, [pc, #440]	; (80023c0 <HAL_I2S_DMAStop+0x330>)
 8002208:	428b      	cmp	r3, r1
 800220a:	d101      	bne.n	8002210 <HAL_I2S_DMAStop+0x180>
 800220c:	4b6d      	ldr	r3, [pc, #436]	; (80023c4 <HAL_I2S_DMAStop+0x334>)
 800220e:	e001      	b.n	8002214 <HAL_I2S_DMAStop+0x184>
 8002210:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002214:	f022 0201 	bic.w	r2, r2, #1
 8002218:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10c      	bne.n	800223c <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800223a:	e0fa      	b.n	8002432 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a5f      	ldr	r2, [pc, #380]	; (80023c0 <HAL_I2S_DMAStop+0x330>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d101      	bne.n	800224a <HAL_I2S_DMAStop+0x1ba>
 8002246:	4b5f      	ldr	r3, [pc, #380]	; (80023c4 <HAL_I2S_DMAStop+0x334>)
 8002248:	e001      	b.n	800224e <HAL_I2S_DMAStop+0x1be>
 800224a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800224e:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002250:	e0ef      	b.n	8002432 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800225a:	d005      	beq.n	8002268 <HAL_I2S_DMAStop+0x1d8>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002264:	f040 80e5 	bne.w	8002432 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00f      	beq.n	8002290 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe fc27 	bl	8000ac8 <HAL_DMA_Abort>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d007      	beq.n	8002290 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002284:	f043 0208 	orr.w	r2, r3, #8
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b05      	cmp	r3, #5
 800229a:	f040 809a 	bne.w	80023d2 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00f      	beq.n	80022c6 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe fc0c 	bl	8000ac8 <HAL_DMA_Abort>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d007      	beq.n	80022c6 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	f043 0208 	orr.w	r2, r3, #8
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 80022c6:	f7fe f9b9 	bl	800063c <HAL_GetTick>
 80022ca:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80022cc:	e012      	b.n	80022f4 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80022ce:	f7fe f9b5 	bl	800063c <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b64      	cmp	r3, #100	; 0x64
 80022da:	d90b      	bls.n	80022f4 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e0:	f043 0201 	orr.w	r2, r3, #1
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a31      	ldr	r2, [pc, #196]	; (80023c0 <HAL_I2S_DMAStop+0x330>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d101      	bne.n	8002302 <HAL_I2S_DMAStop+0x272>
 80022fe:	4b31      	ldr	r3, [pc, #196]	; (80023c4 <HAL_I2S_DMAStop+0x334>)
 8002300:	e001      	b.n	8002306 <HAL_I2S_DMAStop+0x276>
 8002302:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b02      	cmp	r3, #2
 800230e:	d1de      	bne.n	80022ce <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002310:	e012      	b.n	8002338 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8002312:	f7fe f993 	bl	800063c <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b64      	cmp	r3, #100	; 0x64
 800231e:	d90b      	bls.n	8002338 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002324:	f043 0201 	orr.w	r2, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a20      	ldr	r2, [pc, #128]	; (80023c0 <HAL_I2S_DMAStop+0x330>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d101      	bne.n	8002346 <HAL_I2S_DMAStop+0x2b6>
 8002342:	4b20      	ldr	r3, [pc, #128]	; (80023c4 <HAL_I2S_DMAStop+0x334>)
 8002344:	e001      	b.n	800234a <HAL_I2S_DMAStop+0x2ba>
 8002346:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002350:	2b80      	cmp	r3, #128	; 0x80
 8002352:	d0de      	beq.n	8002312 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a19      	ldr	r2, [pc, #100]	; (80023c0 <HAL_I2S_DMAStop+0x330>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d101      	bne.n	8002362 <HAL_I2S_DMAStop+0x2d2>
 800235e:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <HAL_I2S_DMAStop+0x334>)
 8002360:	e001      	b.n	8002366 <HAL_I2S_DMAStop+0x2d6>
 8002362:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002366:	69da      	ldr	r2, [r3, #28]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4914      	ldr	r1, [pc, #80]	; (80023c0 <HAL_I2S_DMAStop+0x330>)
 800236e:	428b      	cmp	r3, r1
 8002370:	d101      	bne.n	8002376 <HAL_I2S_DMAStop+0x2e6>
 8002372:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <HAL_I2S_DMAStop+0x334>)
 8002374:	e001      	b.n	800237a <HAL_I2S_DMAStop+0x2ea>
 8002376:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800237a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800237e:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8002380:	2300      	movs	r3, #0
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a0d      	ldr	r2, [pc, #52]	; (80023c0 <HAL_I2S_DMAStop+0x330>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d101      	bne.n	8002392 <HAL_I2S_DMAStop+0x302>
 800238e:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <HAL_I2S_DMAStop+0x334>)
 8002390:	e001      	b.n	8002396 <HAL_I2S_DMAStop+0x306>
 8002392:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a07      	ldr	r2, [pc, #28]	; (80023c0 <HAL_I2S_DMAStop+0x330>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d101      	bne.n	80023aa <HAL_I2S_DMAStop+0x31a>
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <HAL_I2S_DMAStop+0x334>)
 80023a8:	e001      	b.n	80023ae <HAL_I2S_DMAStop+0x31e>
 80023aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4902      	ldr	r1, [pc, #8]	; (80023c0 <HAL_I2S_DMAStop+0x330>)
 80023b6:	428b      	cmp	r3, r1
 80023b8:	d106      	bne.n	80023c8 <HAL_I2S_DMAStop+0x338>
 80023ba:	4b02      	ldr	r3, [pc, #8]	; (80023c4 <HAL_I2S_DMAStop+0x334>)
 80023bc:	e006      	b.n	80023cc <HAL_I2S_DMAStop+0x33c>
 80023be:	bf00      	nop
 80023c0:	40003800 	.word	0x40003800
 80023c4:	40003400 	.word	0x40003400
 80023c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023cc:	f022 0202 	bic.w	r2, r2, #2
 80023d0:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	69da      	ldr	r2, [r3, #28]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023e0:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80023e2:	2300      	movs	r3, #0
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0201 	bic.w	r2, r2, #1
 8002406:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002410:	d10c      	bne.n	800242c <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	77fb      	strb	r3, [r7, #31]
 800242a:	e002      	b.n	8002432 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 800243a:	7ffb      	ldrb	r3, [r7, #31]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3720      	adds	r7, #32
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002478:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10e      	bne.n	80024a0 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0202 	bic.w	r2, r2, #2
 8002490:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f007 fa29 	bl	80098f8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80024a6:	bf00      	nop
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b084      	sub	sp, #16
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ba:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f007 f9fd 	bl	80098bc <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80024c2:	bf00      	nop
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b084      	sub	sp, #16
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0203 	bic.w	r2, r2, #3
 80024e6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002500:	f043 0208 	orr.w	r2, r3, #8
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f7ff ffa5 	bl	8002458 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800250e:	bf00      	nop
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	881a      	ldrh	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	1c9a      	adds	r2, r3, #2
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002538:	b29b      	uxth	r3, r3
 800253a:	3b01      	subs	r3, #1
 800253c:	b29a      	uxth	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002546:	b29b      	uxth	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10e      	bne.n	800256a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800255a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f007 f9c7 	bl	80098f8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	b292      	uxth	r2, r2
 8002586:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258c:	1c9a      	adds	r2, r3, #2
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002596:	b29b      	uxth	r3, r3
 8002598:	3b01      	subs	r3, #1
 800259a:	b29a      	uxth	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10e      	bne.n	80025c8 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80025b8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff ff3e 	bl	8002444 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d13a      	bne.n	8002662 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d109      	bne.n	800260a <I2S_IRQHandler+0x3a>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002600:	2b40      	cmp	r3, #64	; 0x40
 8002602:	d102      	bne.n	800260a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff ffb4 	bl	8002572 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002610:	2b40      	cmp	r3, #64	; 0x40
 8002612:	d126      	bne.n	8002662 <I2S_IRQHandler+0x92>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 0320 	and.w	r3, r3, #32
 800261e:	2b20      	cmp	r3, #32
 8002620:	d11f      	bne.n	8002662 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002630:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002632:	2300      	movs	r3, #0
 8002634:	613b      	str	r3, [r7, #16]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002654:	f043 0202 	orr.w	r2, r3, #2
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7ff fefb 	bl	8002458 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b03      	cmp	r3, #3
 800266c:	d136      	bne.n	80026dc <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b02      	cmp	r3, #2
 8002676:	d109      	bne.n	800268c <I2S_IRQHandler+0xbc>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002682:	2b80      	cmp	r3, #128	; 0x80
 8002684:	d102      	bne.n	800268c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7ff ff45 	bl	8002516 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b08      	cmp	r3, #8
 8002694:	d122      	bne.n	80026dc <I2S_IRQHandler+0x10c>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0320 	and.w	r3, r3, #32
 80026a0:	2b20      	cmp	r3, #32
 80026a2:	d11b      	bne.n	80026dc <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80026b2:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80026b4:	2300      	movs	r3, #0
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f043 0204 	orr.w	r2, r3, #4
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff febe 	bl	8002458 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80026dc:	bf00      	nop
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	4613      	mov	r3, r2
 80026f2:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80026f4:	f7fd ffa2 	bl	800063c <HAL_GetTick>
 80026f8:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80026fa:	e018      	b.n	800272e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002702:	d014      	beq.n	800272e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8002704:	f7fd ff9a 	bl	800063c <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d902      	bls.n	800271a <I2S_WaitFlagStateUntilTimeout+0x36>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d109      	bne.n	800272e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e00f      	b.n	800274e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	4013      	ands	r3, r2
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	429a      	cmp	r2, r3
 800273c:	bf0c      	ite	eq
 800273e:	2301      	moveq	r3, #1
 8002740:	2300      	movne	r3, #0
 8002742:	b2db      	uxtb	r3, r3
 8002744:	461a      	mov	r2, r3
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	429a      	cmp	r2, r3
 800274a:	d1d7      	bne.n	80026fc <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b088      	sub	sp, #32
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4aa2      	ldr	r2, [pc, #648]	; (80029f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d101      	bne.n	8002776 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002772:	4ba2      	ldr	r3, [pc, #648]	; (80029fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002774:	e001      	b.n	800277a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002776:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a9b      	ldr	r2, [pc, #620]	; (80029f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d101      	bne.n	8002794 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002790:	4b9a      	ldr	r3, [pc, #616]	; (80029fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002792:	e001      	b.n	8002798 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002794:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027a4:	d004      	beq.n	80027b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f040 8099 	bne.w	80028e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d107      	bne.n	80027ca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f925 	bl	8002a14 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d107      	bne.n	80027e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d002      	beq.n	80027e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f9c8 	bl	8002b74 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ea:	2b40      	cmp	r3, #64	; 0x40
 80027ec:	d13a      	bne.n	8002864 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	f003 0320 	and.w	r3, r3, #32
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d035      	beq.n	8002864 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a7e      	ldr	r2, [pc, #504]	; (80029f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d101      	bne.n	8002806 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002802:	4b7e      	ldr	r3, [pc, #504]	; (80029fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002804:	e001      	b.n	800280a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002806:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4979      	ldr	r1, [pc, #484]	; (80029f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002812:	428b      	cmp	r3, r1
 8002814:	d101      	bne.n	800281a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002816:	4b79      	ldr	r3, [pc, #484]	; (80029fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002818:	e001      	b.n	800281e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800281a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800281e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002822:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002832:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002834:	2300      	movs	r3, #0
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	f043 0202 	orr.w	r2, r3, #2
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7ff fdfa 	bl	8002458 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b08      	cmp	r3, #8
 800286c:	f040 80be 	bne.w	80029ec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f003 0320 	and.w	r3, r3, #32
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 80b8 	beq.w	80029ec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800288a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a59      	ldr	r2, [pc, #356]	; (80029f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d101      	bne.n	800289a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002896:	4b59      	ldr	r3, [pc, #356]	; (80029fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002898:	e001      	b.n	800289e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800289a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4954      	ldr	r1, [pc, #336]	; (80029f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80028a6:	428b      	cmp	r3, r1
 80028a8:	d101      	bne.n	80028ae <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80028aa:	4b54      	ldr	r3, [pc, #336]	; (80029fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80028ac:	e001      	b.n	80028b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80028ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80028b6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80028b8:	2300      	movs	r3, #0
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	60bb      	str	r3, [r7, #8]
 80028c4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	f043 0204 	orr.w	r2, r3, #4
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff fdbc 	bl	8002458 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80028e0:	e084      	b.n	80029ec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d107      	bne.n	80028fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f8be 	bl	8002a78 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b01      	cmp	r3, #1
 8002904:	d107      	bne.n	8002916 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290c:	2b00      	cmp	r3, #0
 800290e:	d002      	beq.n	8002916 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f8fd 	bl	8002b10 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291c:	2b40      	cmp	r3, #64	; 0x40
 800291e:	d12f      	bne.n	8002980 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	2b00      	cmp	r3, #0
 8002928:	d02a      	beq.n	8002980 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002938:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a2e      	ldr	r2, [pc, #184]	; (80029f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d101      	bne.n	8002948 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002944:	4b2d      	ldr	r3, [pc, #180]	; (80029fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002946:	e001      	b.n	800294c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002948:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4929      	ldr	r1, [pc, #164]	; (80029f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002954:	428b      	cmp	r3, r1
 8002956:	d101      	bne.n	800295c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002958:	4b28      	ldr	r3, [pc, #160]	; (80029fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800295a:	e001      	b.n	8002960 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800295c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002960:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002964:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002972:	f043 0202 	orr.w	r2, r3, #2
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7ff fd6c 	bl	8002458 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b08      	cmp	r3, #8
 8002988:	d131      	bne.n	80029ee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	f003 0320 	and.w	r3, r3, #32
 8002990:	2b00      	cmp	r3, #0
 8002992:	d02c      	beq.n	80029ee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a17      	ldr	r2, [pc, #92]	; (80029f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d101      	bne.n	80029a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800299e:	4b17      	ldr	r3, [pc, #92]	; (80029fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80029a0:	e001      	b.n	80029a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80029a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4912      	ldr	r1, [pc, #72]	; (80029f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80029ae:	428b      	cmp	r3, r1
 80029b0:	d101      	bne.n	80029b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80029b2:	4b12      	ldr	r3, [pc, #72]	; (80029fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80029b4:	e001      	b.n	80029ba <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80029b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80029be:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029ce:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029dc:	f043 0204 	orr.w	r2, r3, #4
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff fd37 	bl	8002458 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80029ea:	e000      	b.n	80029ee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80029ec:	bf00      	nop
}
 80029ee:	bf00      	nop
 80029f0:	3720      	adds	r7, #32
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40003800 	.word	0x40003800
 80029fc:	40003400 	.word	0x40003400

08002a00 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	1c99      	adds	r1, r3, #2
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6251      	str	r1, [r2, #36]	; 0x24
 8002a26:	881a      	ldrh	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d113      	bne.n	8002a6e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a54:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d106      	bne.n	8002a6e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff ffc9 	bl	8002a00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
	...

08002a78 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	1c99      	adds	r1, r3, #2
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6251      	str	r1, [r2, #36]	; 0x24
 8002a8a:	8819      	ldrh	r1, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a1d      	ldr	r2, [pc, #116]	; (8002b08 <I2SEx_TxISR_I2SExt+0x90>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d101      	bne.n	8002a9a <I2SEx_TxISR_I2SExt+0x22>
 8002a96:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <I2SEx_TxISR_I2SExt+0x94>)
 8002a98:	e001      	b.n	8002a9e <I2SEx_TxISR_I2SExt+0x26>
 8002a9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a9e:	460a      	mov	r2, r1
 8002aa0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d121      	bne.n	8002afe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a12      	ldr	r2, [pc, #72]	; (8002b08 <I2SEx_TxISR_I2SExt+0x90>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d101      	bne.n	8002ac8 <I2SEx_TxISR_I2SExt+0x50>
 8002ac4:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <I2SEx_TxISR_I2SExt+0x94>)
 8002ac6:	e001      	b.n	8002acc <I2SEx_TxISR_I2SExt+0x54>
 8002ac8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	490d      	ldr	r1, [pc, #52]	; (8002b08 <I2SEx_TxISR_I2SExt+0x90>)
 8002ad4:	428b      	cmp	r3, r1
 8002ad6:	d101      	bne.n	8002adc <I2SEx_TxISR_I2SExt+0x64>
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <I2SEx_TxISR_I2SExt+0x94>)
 8002ada:	e001      	b.n	8002ae0 <I2SEx_TxISR_I2SExt+0x68>
 8002adc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ae0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ae4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d106      	bne.n	8002afe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff ff81 	bl	8002a00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40003800 	.word	0x40003800
 8002b0c:	40003400 	.word	0x40003400

08002b10 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68d8      	ldr	r0, [r3, #12]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b22:	1c99      	adds	r1, r3, #2
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002b28:	b282      	uxth	r2, r0
 8002b2a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d113      	bne.n	8002b6c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b52:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d106      	bne.n	8002b6c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff ff4a 	bl	8002a00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b6c:	bf00      	nop
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a20      	ldr	r2, [pc, #128]	; (8002c04 <I2SEx_RxISR_I2SExt+0x90>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d101      	bne.n	8002b8a <I2SEx_RxISR_I2SExt+0x16>
 8002b86:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <I2SEx_RxISR_I2SExt+0x94>)
 8002b88:	e001      	b.n	8002b8e <I2SEx_RxISR_I2SExt+0x1a>
 8002b8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b8e:	68d8      	ldr	r0, [r3, #12]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b94:	1c99      	adds	r1, r3, #2
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002b9a:	b282      	uxth	r2, r0
 8002b9c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d121      	bne.n	8002bfa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a12      	ldr	r2, [pc, #72]	; (8002c04 <I2SEx_RxISR_I2SExt+0x90>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d101      	bne.n	8002bc4 <I2SEx_RxISR_I2SExt+0x50>
 8002bc0:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <I2SEx_RxISR_I2SExt+0x94>)
 8002bc2:	e001      	b.n	8002bc8 <I2SEx_RxISR_I2SExt+0x54>
 8002bc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	490d      	ldr	r1, [pc, #52]	; (8002c04 <I2SEx_RxISR_I2SExt+0x90>)
 8002bd0:	428b      	cmp	r3, r1
 8002bd2:	d101      	bne.n	8002bd8 <I2SEx_RxISR_I2SExt+0x64>
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <I2SEx_RxISR_I2SExt+0x94>)
 8002bd6:	e001      	b.n	8002bdc <I2SEx_RxISR_I2SExt+0x68>
 8002bd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bdc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002be0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d106      	bne.n	8002bfa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff ff03 	bl	8002a00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40003800 	.word	0x40003800
 8002c08:	40003400 	.word	0x40003400

08002c0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e25b      	b.n	80030d6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d075      	beq.n	8002d16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c2a:	4ba3      	ldr	r3, [pc, #652]	; (8002eb8 <HAL_RCC_OscConfig+0x2ac>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d00c      	beq.n	8002c50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c36:	4ba0      	ldr	r3, [pc, #640]	; (8002eb8 <HAL_RCC_OscConfig+0x2ac>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c3e:	2b08      	cmp	r3, #8
 8002c40:	d112      	bne.n	8002c68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c42:	4b9d      	ldr	r3, [pc, #628]	; (8002eb8 <HAL_RCC_OscConfig+0x2ac>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c4e:	d10b      	bne.n	8002c68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c50:	4b99      	ldr	r3, [pc, #612]	; (8002eb8 <HAL_RCC_OscConfig+0x2ac>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d05b      	beq.n	8002d14 <HAL_RCC_OscConfig+0x108>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d157      	bne.n	8002d14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e236      	b.n	80030d6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c70:	d106      	bne.n	8002c80 <HAL_RCC_OscConfig+0x74>
 8002c72:	4b91      	ldr	r3, [pc, #580]	; (8002eb8 <HAL_RCC_OscConfig+0x2ac>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a90      	ldr	r2, [pc, #576]	; (8002eb8 <HAL_RCC_OscConfig+0x2ac>)
 8002c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	e01d      	b.n	8002cbc <HAL_RCC_OscConfig+0xb0>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c88:	d10c      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x98>
 8002c8a:	4b8b      	ldr	r3, [pc, #556]	; (8002eb8 <HAL_RCC_OscConfig+0x2ac>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a8a      	ldr	r2, [pc, #552]	; (8002eb8 <HAL_RCC_OscConfig+0x2ac>)
 8002c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	4b88      	ldr	r3, [pc, #544]	; (8002eb8 <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a87      	ldr	r2, [pc, #540]	; (8002eb8 <HAL_RCC_OscConfig+0x2ac>)
 8002c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	e00b      	b.n	8002cbc <HAL_RCC_OscConfig+0xb0>
 8002ca4:	4b84      	ldr	r3, [pc, #528]	; (8002eb8 <HAL_RCC_OscConfig+0x2ac>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a83      	ldr	r2, [pc, #524]	; (8002eb8 <HAL_RCC_OscConfig+0x2ac>)
 8002caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cae:	6013      	str	r3, [r2, #0]
 8002cb0:	4b81      	ldr	r3, [pc, #516]	; (8002eb8 <HAL_RCC_OscConfig+0x2ac>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a80      	ldr	r2, [pc, #512]	; (8002eb8 <HAL_RCC_OscConfig+0x2ac>)
 8002cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d013      	beq.n	8002cec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc4:	f7fd fcba 	bl	800063c <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ccc:	f7fd fcb6 	bl	800063c <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b64      	cmp	r3, #100	; 0x64
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e1fb      	b.n	80030d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cde:	4b76      	ldr	r3, [pc, #472]	; (8002eb8 <HAL_RCC_OscConfig+0x2ac>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0f0      	beq.n	8002ccc <HAL_RCC_OscConfig+0xc0>
 8002cea:	e014      	b.n	8002d16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cec:	f7fd fca6 	bl	800063c <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cf4:	f7fd fca2 	bl	800063c <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b64      	cmp	r3, #100	; 0x64
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e1e7      	b.n	80030d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d06:	4b6c      	ldr	r3, [pc, #432]	; (8002eb8 <HAL_RCC_OscConfig+0x2ac>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_OscConfig+0xe8>
 8002d12:	e000      	b.n	8002d16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d063      	beq.n	8002dea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d22:	4b65      	ldr	r3, [pc, #404]	; (8002eb8 <HAL_RCC_OscConfig+0x2ac>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 030c 	and.w	r3, r3, #12
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00b      	beq.n	8002d46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d2e:	4b62      	ldr	r3, [pc, #392]	; (8002eb8 <HAL_RCC_OscConfig+0x2ac>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d11c      	bne.n	8002d74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d3a:	4b5f      	ldr	r3, [pc, #380]	; (8002eb8 <HAL_RCC_OscConfig+0x2ac>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d116      	bne.n	8002d74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d46:	4b5c      	ldr	r3, [pc, #368]	; (8002eb8 <HAL_RCC_OscConfig+0x2ac>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d005      	beq.n	8002d5e <HAL_RCC_OscConfig+0x152>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d001      	beq.n	8002d5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e1bb      	b.n	80030d6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5e:	4b56      	ldr	r3, [pc, #344]	; (8002eb8 <HAL_RCC_OscConfig+0x2ac>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	4952      	ldr	r1, [pc, #328]	; (8002eb8 <HAL_RCC_OscConfig+0x2ac>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d72:	e03a      	b.n	8002dea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d020      	beq.n	8002dbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d7c:	4b4f      	ldr	r3, [pc, #316]	; (8002ebc <HAL_RCC_OscConfig+0x2b0>)
 8002d7e:	2201      	movs	r2, #1
 8002d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d82:	f7fd fc5b 	bl	800063c <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d8a:	f7fd fc57 	bl	800063c <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e19c      	b.n	80030d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9c:	4b46      	ldr	r3, [pc, #280]	; (8002eb8 <HAL_RCC_OscConfig+0x2ac>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da8:	4b43      	ldr	r3, [pc, #268]	; (8002eb8 <HAL_RCC_OscConfig+0x2ac>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	4940      	ldr	r1, [pc, #256]	; (8002eb8 <HAL_RCC_OscConfig+0x2ac>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	600b      	str	r3, [r1, #0]
 8002dbc:	e015      	b.n	8002dea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dbe:	4b3f      	ldr	r3, [pc, #252]	; (8002ebc <HAL_RCC_OscConfig+0x2b0>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc4:	f7fd fc3a 	bl	800063c <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dcc:	f7fd fc36 	bl	800063c <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e17b      	b.n	80030d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dde:	4b36      	ldr	r3, [pc, #216]	; (8002eb8 <HAL_RCC_OscConfig+0x2ac>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f0      	bne.n	8002dcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d030      	beq.n	8002e58 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d016      	beq.n	8002e2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dfe:	4b30      	ldr	r3, [pc, #192]	; (8002ec0 <HAL_RCC_OscConfig+0x2b4>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e04:	f7fd fc1a 	bl	800063c <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e0c:	f7fd fc16 	bl	800063c <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e15b      	b.n	80030d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e1e:	4b26      	ldr	r3, [pc, #152]	; (8002eb8 <HAL_RCC_OscConfig+0x2ac>)
 8002e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCC_OscConfig+0x200>
 8002e2a:	e015      	b.n	8002e58 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e2c:	4b24      	ldr	r3, [pc, #144]	; (8002ec0 <HAL_RCC_OscConfig+0x2b4>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e32:	f7fd fc03 	bl	800063c <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e3a:	f7fd fbff 	bl	800063c <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e144      	b.n	80030d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e4c:	4b1a      	ldr	r3, [pc, #104]	; (8002eb8 <HAL_RCC_OscConfig+0x2ac>)
 8002e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1f0      	bne.n	8002e3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 80a0 	beq.w	8002fa6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e66:	2300      	movs	r3, #0
 8002e68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e6a:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <HAL_RCC_OscConfig+0x2ac>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10f      	bne.n	8002e96 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	4b0f      	ldr	r3, [pc, #60]	; (8002eb8 <HAL_RCC_OscConfig+0x2ac>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	4a0e      	ldr	r2, [pc, #56]	; (8002eb8 <HAL_RCC_OscConfig+0x2ac>)
 8002e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e84:	6413      	str	r3, [r2, #64]	; 0x40
 8002e86:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <HAL_RCC_OscConfig+0x2ac>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e92:	2301      	movs	r3, #1
 8002e94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e96:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <HAL_RCC_OscConfig+0x2b8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d121      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ea2:	4b08      	ldr	r3, [pc, #32]	; (8002ec4 <HAL_RCC_OscConfig+0x2b8>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a07      	ldr	r2, [pc, #28]	; (8002ec4 <HAL_RCC_OscConfig+0x2b8>)
 8002ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eae:	f7fd fbc5 	bl	800063c <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb4:	e011      	b.n	8002eda <HAL_RCC_OscConfig+0x2ce>
 8002eb6:	bf00      	nop
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	42470000 	.word	0x42470000
 8002ec0:	42470e80 	.word	0x42470e80
 8002ec4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ec8:	f7fd fbb8 	bl	800063c <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e0fd      	b.n	80030d6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eda:	4b81      	ldr	r3, [pc, #516]	; (80030e0 <HAL_RCC_OscConfig+0x4d4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0f0      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d106      	bne.n	8002efc <HAL_RCC_OscConfig+0x2f0>
 8002eee:	4b7d      	ldr	r3, [pc, #500]	; (80030e4 <HAL_RCC_OscConfig+0x4d8>)
 8002ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef2:	4a7c      	ldr	r2, [pc, #496]	; (80030e4 <HAL_RCC_OscConfig+0x4d8>)
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8002efa:	e01c      	b.n	8002f36 <HAL_RCC_OscConfig+0x32a>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	2b05      	cmp	r3, #5
 8002f02:	d10c      	bne.n	8002f1e <HAL_RCC_OscConfig+0x312>
 8002f04:	4b77      	ldr	r3, [pc, #476]	; (80030e4 <HAL_RCC_OscConfig+0x4d8>)
 8002f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f08:	4a76      	ldr	r2, [pc, #472]	; (80030e4 <HAL_RCC_OscConfig+0x4d8>)
 8002f0a:	f043 0304 	orr.w	r3, r3, #4
 8002f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f10:	4b74      	ldr	r3, [pc, #464]	; (80030e4 <HAL_RCC_OscConfig+0x4d8>)
 8002f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f14:	4a73      	ldr	r2, [pc, #460]	; (80030e4 <HAL_RCC_OscConfig+0x4d8>)
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f1c:	e00b      	b.n	8002f36 <HAL_RCC_OscConfig+0x32a>
 8002f1e:	4b71      	ldr	r3, [pc, #452]	; (80030e4 <HAL_RCC_OscConfig+0x4d8>)
 8002f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f22:	4a70      	ldr	r2, [pc, #448]	; (80030e4 <HAL_RCC_OscConfig+0x4d8>)
 8002f24:	f023 0301 	bic.w	r3, r3, #1
 8002f28:	6713      	str	r3, [r2, #112]	; 0x70
 8002f2a:	4b6e      	ldr	r3, [pc, #440]	; (80030e4 <HAL_RCC_OscConfig+0x4d8>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2e:	4a6d      	ldr	r2, [pc, #436]	; (80030e4 <HAL_RCC_OscConfig+0x4d8>)
 8002f30:	f023 0304 	bic.w	r3, r3, #4
 8002f34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d015      	beq.n	8002f6a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3e:	f7fd fb7d 	bl	800063c <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f44:	e00a      	b.n	8002f5c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f46:	f7fd fb79 	bl	800063c <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e0bc      	b.n	80030d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5c:	4b61      	ldr	r3, [pc, #388]	; (80030e4 <HAL_RCC_OscConfig+0x4d8>)
 8002f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0ee      	beq.n	8002f46 <HAL_RCC_OscConfig+0x33a>
 8002f68:	e014      	b.n	8002f94 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f6a:	f7fd fb67 	bl	800063c <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f70:	e00a      	b.n	8002f88 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f72:	f7fd fb63 	bl	800063c <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e0a6      	b.n	80030d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f88:	4b56      	ldr	r3, [pc, #344]	; (80030e4 <HAL_RCC_OscConfig+0x4d8>)
 8002f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1ee      	bne.n	8002f72 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f94:	7dfb      	ldrb	r3, [r7, #23]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d105      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f9a:	4b52      	ldr	r3, [pc, #328]	; (80030e4 <HAL_RCC_OscConfig+0x4d8>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	4a51      	ldr	r2, [pc, #324]	; (80030e4 <HAL_RCC_OscConfig+0x4d8>)
 8002fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fa4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 8092 	beq.w	80030d4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fb0:	4b4c      	ldr	r3, [pc, #304]	; (80030e4 <HAL_RCC_OscConfig+0x4d8>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 030c 	and.w	r3, r3, #12
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d05c      	beq.n	8003076 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d141      	bne.n	8003048 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc4:	4b48      	ldr	r3, [pc, #288]	; (80030e8 <HAL_RCC_OscConfig+0x4dc>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fca:	f7fd fb37 	bl	800063c <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd2:	f7fd fb33 	bl	800063c <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e078      	b.n	80030d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe4:	4b3f      	ldr	r3, [pc, #252]	; (80030e4 <HAL_RCC_OscConfig+0x4d8>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1f0      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69da      	ldr	r2, [r3, #28]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	019b      	lsls	r3, r3, #6
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003006:	085b      	lsrs	r3, r3, #1
 8003008:	3b01      	subs	r3, #1
 800300a:	041b      	lsls	r3, r3, #16
 800300c:	431a      	orrs	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003012:	061b      	lsls	r3, r3, #24
 8003014:	4933      	ldr	r1, [pc, #204]	; (80030e4 <HAL_RCC_OscConfig+0x4d8>)
 8003016:	4313      	orrs	r3, r2
 8003018:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800301a:	4b33      	ldr	r3, [pc, #204]	; (80030e8 <HAL_RCC_OscConfig+0x4dc>)
 800301c:	2201      	movs	r2, #1
 800301e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003020:	f7fd fb0c 	bl	800063c <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003028:	f7fd fb08 	bl	800063c <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e04d      	b.n	80030d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800303a:	4b2a      	ldr	r3, [pc, #168]	; (80030e4 <HAL_RCC_OscConfig+0x4d8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0f0      	beq.n	8003028 <HAL_RCC_OscConfig+0x41c>
 8003046:	e045      	b.n	80030d4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003048:	4b27      	ldr	r3, [pc, #156]	; (80030e8 <HAL_RCC_OscConfig+0x4dc>)
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304e:	f7fd faf5 	bl	800063c <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003056:	f7fd faf1 	bl	800063c <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e036      	b.n	80030d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003068:	4b1e      	ldr	r3, [pc, #120]	; (80030e4 <HAL_RCC_OscConfig+0x4d8>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1f0      	bne.n	8003056 <HAL_RCC_OscConfig+0x44a>
 8003074:	e02e      	b.n	80030d4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e029      	b.n	80030d6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003082:	4b18      	ldr	r3, [pc, #96]	; (80030e4 <HAL_RCC_OscConfig+0x4d8>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	429a      	cmp	r2, r3
 8003094:	d11c      	bne.n	80030d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d115      	bne.n	80030d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030aa:	4013      	ands	r3, r2
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d10d      	bne.n	80030d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80030be:	429a      	cmp	r2, r3
 80030c0:	d106      	bne.n	80030d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d001      	beq.n	80030d4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e000      	b.n	80030d6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3718      	adds	r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40007000 	.word	0x40007000
 80030e4:	40023800 	.word	0x40023800
 80030e8:	42470060 	.word	0x42470060

080030ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e0cc      	b.n	800329a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003100:	4b68      	ldr	r3, [pc, #416]	; (80032a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 030f 	and.w	r3, r3, #15
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	429a      	cmp	r2, r3
 800310c:	d90c      	bls.n	8003128 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310e:	4b65      	ldr	r3, [pc, #404]	; (80032a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003116:	4b63      	ldr	r3, [pc, #396]	; (80032a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	429a      	cmp	r2, r3
 8003122:	d001      	beq.n	8003128 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e0b8      	b.n	800329a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d020      	beq.n	8003176 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003140:	4b59      	ldr	r3, [pc, #356]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	4a58      	ldr	r2, [pc, #352]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800314a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003158:	4b53      	ldr	r3, [pc, #332]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	4a52      	ldr	r2, [pc, #328]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003162:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003164:	4b50      	ldr	r3, [pc, #320]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	494d      	ldr	r1, [pc, #308]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	4313      	orrs	r3, r2
 8003174:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d044      	beq.n	800320c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d107      	bne.n	800319a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318a:	4b47      	ldr	r3, [pc, #284]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d119      	bne.n	80031ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e07f      	b.n	800329a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d003      	beq.n	80031aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031a6:	2b03      	cmp	r3, #3
 80031a8:	d107      	bne.n	80031ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031aa:	4b3f      	ldr	r3, [pc, #252]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d109      	bne.n	80031ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e06f      	b.n	800329a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ba:	4b3b      	ldr	r3, [pc, #236]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e067      	b.n	800329a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ca:	4b37      	ldr	r3, [pc, #220]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f023 0203 	bic.w	r2, r3, #3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	4934      	ldr	r1, [pc, #208]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031dc:	f7fd fa2e 	bl	800063c <HAL_GetTick>
 80031e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e2:	e00a      	b.n	80031fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e4:	f7fd fa2a 	bl	800063c <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e04f      	b.n	800329a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fa:	4b2b      	ldr	r3, [pc, #172]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 020c 	and.w	r2, r3, #12
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	429a      	cmp	r2, r3
 800320a:	d1eb      	bne.n	80031e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800320c:	4b25      	ldr	r3, [pc, #148]	; (80032a4 <HAL_RCC_ClockConfig+0x1b8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 030f 	and.w	r3, r3, #15
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d20c      	bcs.n	8003234 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321a:	4b22      	ldr	r3, [pc, #136]	; (80032a4 <HAL_RCC_ClockConfig+0x1b8>)
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003222:	4b20      	ldr	r3, [pc, #128]	; (80032a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d001      	beq.n	8003234 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e032      	b.n	800329a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d008      	beq.n	8003252 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003240:	4b19      	ldr	r3, [pc, #100]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	4916      	ldr	r1, [pc, #88]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	4313      	orrs	r3, r2
 8003250:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	d009      	beq.n	8003272 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800325e:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	490e      	ldr	r1, [pc, #56]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	4313      	orrs	r3, r2
 8003270:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003272:	f000 f821 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8003276:	4601      	mov	r1, r0
 8003278:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	091b      	lsrs	r3, r3, #4
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	4a0a      	ldr	r2, [pc, #40]	; (80032ac <HAL_RCC_ClockConfig+0x1c0>)
 8003284:	5cd3      	ldrb	r3, [r2, r3]
 8003286:	fa21 f303 	lsr.w	r3, r1, r3
 800328a:	4a09      	ldr	r2, [pc, #36]	; (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 800328c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800328e:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7fd f98e 	bl	80005b4 <HAL_InitTick>

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40023c00 	.word	0x40023c00
 80032a8:	40023800 	.word	0x40023800
 80032ac:	0800ae50 	.word	0x0800ae50
 80032b0:	20000058 	.word	0x20000058
 80032b4:	20000000 	.word	0x20000000

080032b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80032bc:	b084      	sub	sp, #16
 80032be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	607b      	str	r3, [r7, #4]
 80032c4:	2300      	movs	r3, #0
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	2300      	movs	r3, #0
 80032ca:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032d0:	4b67      	ldr	r3, [pc, #412]	; (8003470 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 030c 	and.w	r3, r3, #12
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d007      	beq.n	80032ec <HAL_RCC_GetSysClockFreq+0x34>
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d008      	beq.n	80032f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f040 80bb 	bne.w	800345c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032e6:	4b63      	ldr	r3, [pc, #396]	; (8003474 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80032e8:	60bb      	str	r3, [r7, #8]
       break;
 80032ea:	e0ba      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032ec:	4b62      	ldr	r3, [pc, #392]	; (8003478 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80032ee:	60bb      	str	r3, [r7, #8]
      break;
 80032f0:	e0b7      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032f2:	4b5f      	ldr	r3, [pc, #380]	; (8003470 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032fa:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032fc:	4b5c      	ldr	r3, [pc, #368]	; (8003470 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d051      	beq.n	80033ac <HAL_RCC_GetSysClockFreq+0xf4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003308:	4b59      	ldr	r3, [pc, #356]	; (8003470 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	099b      	lsrs	r3, r3, #6
 800330e:	f04f 0400 	mov.w	r4, #0
 8003312:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	ea03 0501 	and.w	r5, r3, r1
 800331e:	ea04 0602 	and.w	r6, r4, r2
 8003322:	46ab      	mov	fp, r5
 8003324:	46b4      	mov	ip, r6
 8003326:	eb1b 030b 	adds.w	r3, fp, fp
 800332a:	eb4c 040c 	adc.w	r4, ip, ip
 800332e:	469b      	mov	fp, r3
 8003330:	46a4      	mov	ip, r4
 8003332:	eb1b 0b05 	adds.w	fp, fp, r5
 8003336:	eb4c 0c06 	adc.w	ip, ip, r6
 800333a:	f04f 0100 	mov.w	r1, #0
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	ea4f 120c 	mov.w	r2, ip, lsl #4
 8003346:	ea42 721b 	orr.w	r2, r2, fp, lsr #28
 800334a:	ea4f 110b 	mov.w	r1, fp, lsl #4
 800334e:	468b      	mov	fp, r1
 8003350:	4694      	mov	ip, r2
 8003352:	ebbb 0b05 	subs.w	fp, fp, r5
 8003356:	eb6c 0c06 	sbc.w	ip, ip, r6
 800335a:	f04f 0100 	mov.w	r1, #0
 800335e:	f04f 0200 	mov.w	r2, #0
 8003362:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8003366:	ea42 725b 	orr.w	r2, r2, fp, lsr #29
 800336a:	ea4f 01cb 	mov.w	r1, fp, lsl #3
 800336e:	468b      	mov	fp, r1
 8003370:	4694      	mov	ip, r2
 8003372:	ebbb 0b05 	subs.w	fp, fp, r5
 8003376:	eb6c 0c06 	sbc.w	ip, ip, r6
 800337a:	f04f 0100 	mov.w	r1, #0
 800337e:	f04f 0200 	mov.w	r2, #0
 8003382:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8003386:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 800338a:	ea4f 410b 	mov.w	r1, fp, lsl #16
 800338e:	468b      	mov	fp, r1
 8003390:	4694      	mov	ip, r2
 8003392:	4658      	mov	r0, fp
 8003394:	4661      	mov	r1, ip
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f04f 0400 	mov.w	r4, #0
 800339c:	461a      	mov	r2, r3
 800339e:	4623      	mov	r3, r4
 80033a0:	f7fc ff66 	bl	8000270 <__aeabi_uldivmod>
 80033a4:	4603      	mov	r3, r0
 80033a6:	460c      	mov	r4, r1
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	e049      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ac:	4b30      	ldr	r3, [pc, #192]	; (8003470 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	099b      	lsrs	r3, r3, #6
 80033b2:	f04f 0400 	mov.w	r4, #0
 80033b6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	ea03 0501 	and.w	r5, r3, r1
 80033c2:	ea04 0602 	and.w	r6, r4, r2
 80033c6:	4629      	mov	r1, r5
 80033c8:	4632      	mov	r2, r6
 80033ca:	f04f 0300 	mov.w	r3, #0
 80033ce:	f04f 0400 	mov.w	r4, #0
 80033d2:	0154      	lsls	r4, r2, #5
 80033d4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033d8:	014b      	lsls	r3, r1, #5
 80033da:	4619      	mov	r1, r3
 80033dc:	4622      	mov	r2, r4
 80033de:	1b49      	subs	r1, r1, r5
 80033e0:	eb62 0206 	sbc.w	r2, r2, r6
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	f04f 0400 	mov.w	r4, #0
 80033ec:	0194      	lsls	r4, r2, #6
 80033ee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80033f2:	018b      	lsls	r3, r1, #6
 80033f4:	1a5b      	subs	r3, r3, r1
 80033f6:	eb64 0402 	sbc.w	r4, r4, r2
 80033fa:	f04f 0100 	mov.w	r1, #0
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	00e2      	lsls	r2, r4, #3
 8003404:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003408:	00d9      	lsls	r1, r3, #3
 800340a:	460b      	mov	r3, r1
 800340c:	4614      	mov	r4, r2
 800340e:	195b      	adds	r3, r3, r5
 8003410:	eb44 0406 	adc.w	r4, r4, r6
 8003414:	f04f 0100 	mov.w	r1, #0
 8003418:	f04f 0200 	mov.w	r2, #0
 800341c:	02a2      	lsls	r2, r4, #10
 800341e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003422:	0299      	lsls	r1, r3, #10
 8003424:	460b      	mov	r3, r1
 8003426:	4614      	mov	r4, r2
 8003428:	4618      	mov	r0, r3
 800342a:	4621      	mov	r1, r4
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f04f 0400 	mov.w	r4, #0
 8003432:	461a      	mov	r2, r3
 8003434:	4623      	mov	r3, r4
 8003436:	f7fc ff1b 	bl	8000270 <__aeabi_uldivmod>
 800343a:	4603      	mov	r3, r0
 800343c:	460c      	mov	r4, r1
 800343e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003440:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	0c1b      	lsrs	r3, r3, #16
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	3301      	adds	r3, #1
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	fbb2 f3f3 	udiv	r3, r2, r3
 8003458:	60bb      	str	r3, [r7, #8]
      break;
 800345a:	e002      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800345c:	4b05      	ldr	r3, [pc, #20]	; (8003474 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800345e:	60bb      	str	r3, [r7, #8]
      break;
 8003460:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003462:	68bb      	ldr	r3, [r7, #8]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800346e:	bf00      	nop
 8003470:	40023800 	.word	0x40023800
 8003474:	00f42400 	.word	0x00f42400
 8003478:	01770000 	.word	0x01770000

0800347c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003480:	4b03      	ldr	r3, [pc, #12]	; (8003490 <HAL_RCC_GetHCLKFreq+0x14>)
 8003482:	681b      	ldr	r3, [r3, #0]
}
 8003484:	4618      	mov	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	20000058 	.word	0x20000058

08003494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003498:	f7ff fff0 	bl	800347c <HAL_RCC_GetHCLKFreq>
 800349c:	4601      	mov	r1, r0
 800349e:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	0a9b      	lsrs	r3, r3, #10
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	4a03      	ldr	r2, [pc, #12]	; (80034b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034aa:	5cd3      	ldrb	r3, [r2, r3]
 80034ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40023800 	.word	0x40023800
 80034b8:	0800ae60 	.word	0x0800ae60

080034bc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d105      	bne.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d035      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80034e4:	4b62      	ldr	r3, [pc, #392]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80034ea:	f7fd f8a7 	bl	800063c <HAL_GetTick>
 80034ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034f0:	e008      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80034f2:	f7fd f8a3 	bl	800063c <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e0b0      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003504:	4b5b      	ldr	r3, [pc, #364]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1f0      	bne.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	019a      	lsls	r2, r3, #6
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	071b      	lsls	r3, r3, #28
 800351c:	4955      	ldr	r1, [pc, #340]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800351e:	4313      	orrs	r3, r2
 8003520:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003524:	4b52      	ldr	r3, [pc, #328]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003526:	2201      	movs	r2, #1
 8003528:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800352a:	f7fd f887 	bl	800063c <HAL_GetTick>
 800352e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003530:	e008      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003532:	f7fd f883 	bl	800063c <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d901      	bls.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e090      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003544:	4b4b      	ldr	r3, [pc, #300]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0f0      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 8083 	beq.w	8003664 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800355e:	2300      	movs	r3, #0
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	4b44      	ldr	r3, [pc, #272]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	4a43      	ldr	r2, [pc, #268]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800356c:	6413      	str	r3, [r2, #64]	; 0x40
 800356e:	4b41      	ldr	r3, [pc, #260]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800357a:	4b3f      	ldr	r3, [pc, #252]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a3e      	ldr	r2, [pc, #248]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003584:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003586:	f7fd f859 	bl	800063c <HAL_GetTick>
 800358a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800358c:	e008      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800358e:	f7fd f855 	bl	800063c <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e062      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80035a0:	4b35      	ldr	r3, [pc, #212]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0f0      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035ac:	4b31      	ldr	r3, [pc, #196]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035b4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d02f      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d028      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035ca:	4b2a      	ldr	r3, [pc, #168]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035d2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035d4:	4b29      	ldr	r3, [pc, #164]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80035d6:	2201      	movs	r2, #1
 80035d8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035da:	4b28      	ldr	r3, [pc, #160]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80035e0:	4a24      	ldr	r2, [pc, #144]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80035e6:	4b23      	ldr	r3, [pc, #140]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d114      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80035f2:	f7fd f823 	bl	800063c <HAL_GetTick>
 80035f6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f8:	e00a      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035fa:	f7fd f81f 	bl	800063c <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	f241 3288 	movw	r2, #5000	; 0x1388
 8003608:	4293      	cmp	r3, r2
 800360a:	d901      	bls.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e02a      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003610:	4b18      	ldr	r3, [pc, #96]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0ee      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003624:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003628:	d10d      	bne.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800362a:	4b12      	ldr	r3, [pc, #72]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800363a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800363e:	490d      	ldr	r1, [pc, #52]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003640:	4313      	orrs	r3, r2
 8003642:	608b      	str	r3, [r1, #8]
 8003644:	e005      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003646:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	4a0a      	ldr	r2, [pc, #40]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800364c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003650:	6093      	str	r3, [r2, #8]
 8003652:	4b08      	ldr	r3, [pc, #32]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003654:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800365e:	4905      	ldr	r1, [pc, #20]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003660:	4313      	orrs	r3, r2
 8003662:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	42470068 	.word	0x42470068
 8003674:	40023800 	.word	0x40023800
 8003678:	40007000 	.word	0x40007000
 800367c:	42470e40 	.word	0x42470e40

08003680 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003680:	b480      	push	{r7}
 8003682:	b087      	sub	sp, #28
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d13d      	bne.n	800371a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800369e:	4b22      	ldr	r3, [pc, #136]	; (8003728 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036a6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d004      	beq.n	80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d12f      	bne.n	8003712 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80036b2:	4b1e      	ldr	r3, [pc, #120]	; (800372c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80036b4:	617b      	str	r3, [r7, #20]
          break;
 80036b6:	e02f      	b.n	8003718 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80036b8:	4b1b      	ldr	r3, [pc, #108]	; (8003728 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036c4:	d108      	bne.n	80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80036c6:	4b18      	ldr	r3, [pc, #96]	; (8003728 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036ce:	4a18      	ldr	r2, [pc, #96]	; (8003730 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80036d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d4:	613b      	str	r3, [r7, #16]
 80036d6:	e007      	b.n	80036e8 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80036d8:	4b13      	ldr	r3, [pc, #76]	; (8003728 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036e0:	4a14      	ldr	r2, [pc, #80]	; (8003734 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80036e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80036e8:	4b0f      	ldr	r3, [pc, #60]	; (8003728 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80036ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ee:	099b      	lsrs	r3, r3, #6
 80036f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	fb02 f303 	mul.w	r3, r2, r3
 80036fa:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80036fc:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80036fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003702:	0f1b      	lsrs	r3, r3, #28
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	fbb2 f3f3 	udiv	r3, r2, r3
 800370e:	617b      	str	r3, [r7, #20]
          break;
 8003710:	e002      	b.n	8003718 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	617b      	str	r3, [r7, #20]
          break;
 8003716:	bf00      	nop
        }
      }
      break;
 8003718:	bf00      	nop
    }
  }
  return frequency;
 800371a:	697b      	ldr	r3, [r7, #20]
}
 800371c:	4618      	mov	r0, r3
 800371e:	371c      	adds	r7, #28
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	40023800 	.word	0x40023800
 800372c:	00bb8000 	.word	0x00bb8000
 8003730:	01770000 	.word	0x01770000
 8003734:	00f42400 	.word	0x00f42400

08003738 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e022      	b.n	8003790 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d105      	bne.n	8003762 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f006 fbf7 	bl	8009f50 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2203      	movs	r2, #3
 8003766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f814 	bl	8003798 <HAL_SD_InitCard>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e00a      	b.n	8003790 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003798:	b5b0      	push	{r4, r5, r7, lr}
 800379a:	b08e      	sub	sp, #56	; 0x38
 800379c:	af04      	add	r7, sp, #16
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80037a0:	2300      	movs	r3, #0
 80037a2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80037a4:	2300      	movs	r3, #0
 80037a6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80037a8:	2300      	movs	r3, #0
 80037aa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80037ac:	2300      	movs	r3, #0
 80037ae:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80037b0:	2300      	movs	r3, #0
 80037b2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80037b4:	2376      	movs	r3, #118	; 0x76
 80037b6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681d      	ldr	r5, [r3, #0]
 80037bc:	466c      	mov	r4, sp
 80037be:	f107 0314 	add.w	r3, r7, #20
 80037c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80037c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80037ca:	f107 0308 	add.w	r3, r7, #8
 80037ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037d0:	4628      	mov	r0, r5
 80037d2:	f002 f9a7 	bl	8005b24 <SDIO_Init>
 80037d6:	4603      	mov	r3, r0
 80037d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80037dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e031      	b.n	800384c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80037e8:	4b1a      	ldr	r3, [pc, #104]	; (8003854 <HAL_SD_InitCard+0xbc>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f002 f9df 	bl	8005bb6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80037f8:	4b16      	ldr	r3, [pc, #88]	; (8003854 <HAL_SD_InitCard+0xbc>)
 80037fa:	2201      	movs	r2, #1
 80037fc:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 ff00 	bl	8004604 <SD_PowerON>
 8003804:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00b      	beq.n	8003824 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e013      	b.n	800384c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 fe1f 	bl	8004468 <SD_InitCard>
 800382a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00b      	beq.n	800384a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	431a      	orrs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e000      	b.n	800384c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3728      	adds	r7, #40	; 0x28
 8003850:	46bd      	mov	sp, r7
 8003852:	bdb0      	pop	{r4, r5, r7, pc}
 8003854:	422580a0 	.word	0x422580a0

08003858 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b092      	sub	sp, #72	; 0x48
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
 8003864:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003866:	f7fc fee9 	bl	800063c <HAL_GetTick>
 800386a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d107      	bne.n	800388a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e1d9      	b.n	8003c3e <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b01      	cmp	r3, #1
 8003894:	f040 81cc 	bne.w	8003c30 <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800389e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	441a      	add	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d907      	bls.n	80038bc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e1c0      	b.n	8003c3e <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2203      	movs	r2, #3
 80038c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2200      	movs	r2, #0
 80038ca:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d002      	beq.n	80038da <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80038d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d6:	025b      	lsls	r3, r3, #9
 80038d8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80038e2:	4618      	mov	r0, r3
 80038e4:	f002 f9fa 	bl	8005cdc <SDMMC_CmdBlockLength>
 80038e8:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80038ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00f      	beq.n	8003910 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a9b      	ldr	r2, [pc, #620]	; (8003b64 <HAL_SD_ReadBlocks+0x30c>)
 80038f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038fe:	431a      	orrs	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e196      	b.n	8003c3e <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003910:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003914:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	025b      	lsls	r3, r3, #9
 800391a:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800391c:	2390      	movs	r3, #144	; 0x90
 800391e:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003920:	2302      	movs	r3, #2
 8003922:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003924:	2300      	movs	r3, #0
 8003926:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003928:	2301      	movs	r3, #1
 800392a:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f107 0214 	add.w	r2, r7, #20
 8003934:	4611      	mov	r1, r2
 8003936:	4618      	mov	r0, r3
 8003938:	f002 f9a4 	bl	8005c84 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d90a      	bls.n	8003958 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2202      	movs	r2, #2
 8003946:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800394e:	4618      	mov	r0, r3
 8003950:	f002 fa08 	bl	8005d64 <SDMMC_CmdReadMultiBlock>
 8003954:	6478      	str	r0, [r7, #68]	; 0x44
 8003956:	e009      	b.n	800396c <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2201      	movs	r2, #1
 800395c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003964:	4618      	mov	r0, r3
 8003966:	f002 f9db 	bl	8005d20 <SDMMC_CmdReadSingleBlock>
 800396a:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800396c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800396e:	2b00      	cmp	r3, #0
 8003970:	d012      	beq.n	8003998 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a7b      	ldr	r2, [pc, #492]	; (8003b64 <HAL_SD_ReadBlocks+0x30c>)
 8003978:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800397e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003980:	431a      	orrs	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e152      	b.n	8003c3e <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800399c:	e061      	b.n	8003a62 <HAL_SD_ReadBlocks+0x20a>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d03c      	beq.n	8003a26 <HAL_SD_ReadBlocks+0x1ce>
 80039ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d039      	beq.n	8003a26 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80039b2:	2300      	movs	r3, #0
 80039b4:	643b      	str	r3, [r7, #64]	; 0x40
 80039b6:	e033      	b.n	8003a20 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4618      	mov	r0, r3
 80039be:	f002 f8dc 	bl	8005b7a <SDIO_ReadFIFO>
 80039c2:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80039c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ca:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80039cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ce:	3301      	adds	r3, #1
 80039d0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80039d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039d4:	3b01      	subs	r3, #1
 80039d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80039d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039da:	0a1b      	lsrs	r3, r3, #8
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80039e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e4:	3301      	adds	r3, #1
 80039e6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80039e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ea:	3b01      	subs	r3, #1
 80039ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80039ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f0:	0c1b      	lsrs	r3, r3, #16
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039f6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80039f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039fa:	3301      	adds	r3, #1
 80039fc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80039fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a00:	3b01      	subs	r3, #1
 8003a02:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a06:	0e1b      	lsrs	r3, r3, #24
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a0c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a10:	3301      	adds	r3, #1
 8003a12:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a16:	3b01      	subs	r3, #1
 8003a18:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8003a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	643b      	str	r3, [r7, #64]	; 0x40
 8003a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a22:	2b07      	cmp	r3, #7
 8003a24:	d9c8      	bls.n	80039b8 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003a26:	f7fc fe09 	bl	800063c <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d902      	bls.n	8003a3c <HAL_SD_ReadBlocks+0x1e4>
 8003a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d112      	bne.n	8003a62 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a48      	ldr	r2, [pc, #288]	; (8003b64 <HAL_SD_ReadBlocks+0x30c>)
 8003a42:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e0ed      	b.n	8003c3e <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a68:	f240 332a 	movw	r3, #810	; 0x32a
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d095      	beq.n	800399e <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d022      	beq.n	8003ac6 <HAL_SD_ReadBlocks+0x26e>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d91f      	bls.n	8003ac6 <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8a:	2b03      	cmp	r3, #3
 8003a8c:	d01b      	beq.n	8003ac6 <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f002 f9cc 	bl	8005e30 <SDMMC_CmdStopTransfer>
 8003a98:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003a9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d012      	beq.n	8003ac6 <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a2f      	ldr	r2, [pc, #188]	; (8003b64 <HAL_SD_ReadBlocks+0x30c>)
 8003aa6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e0bb      	b.n	8003c3e <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003acc:	f003 0308 	and.w	r3, r3, #8
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d012      	beq.n	8003afa <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a22      	ldr	r2, [pc, #136]	; (8003b64 <HAL_SD_ReadBlocks+0x30c>)
 8003ada:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae0:	f043 0208 	orr.w	r2, r3, #8
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e0a1      	b.n	8003c3e <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d012      	beq.n	8003b2e <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a15      	ldr	r2, [pc, #84]	; (8003b64 <HAL_SD_ReadBlocks+0x30c>)
 8003b0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b14:	f043 0202 	orr.w	r2, r3, #2
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e087      	b.n	8003c3e <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b34:	f003 0320 	and.w	r3, r3, #32
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d064      	beq.n	8003c06 <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a08      	ldr	r2, [pc, #32]	; (8003b64 <HAL_SD_ReadBlocks+0x30c>)
 8003b42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b48:	f043 0220 	orr.w	r2, r3, #32
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e06d      	b.n	8003c3e <HAL_SD_ReadBlocks+0x3e6>
 8003b62:	bf00      	nop
 8003b64:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f002 f804 	bl	8005b7a <SDIO_ReadFIFO>
 8003b72:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b7a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b7e:	3301      	adds	r3, #1
 8003b80:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b84:	3b01      	subs	r3, #1
 8003b86:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8a:	0a1b      	lsrs	r3, r3, #8
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b90:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b94:	3301      	adds	r3, #1
 8003b96:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba0:	0c1b      	lsrs	r3, r3, #16
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003baa:	3301      	adds	r3, #1
 8003bac:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb6:	0e1b      	lsrs	r3, r3, #24
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bbc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003bca:	f7fc fd37 	bl	800063c <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d902      	bls.n	8003be0 <HAL_SD_ReadBlocks+0x388>
 8003bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d112      	bne.n	8003c06 <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a18      	ldr	r2, [pc, #96]	; (8003c48 <HAL_SD_ReadBlocks+0x3f0>)
 8003be6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e01b      	b.n	8003c3e <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <HAL_SD_ReadBlocks+0x3c2>
 8003c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1a6      	bne.n	8003b68 <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003c22:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	e006      	b.n	8003c3e <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c34:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
  }
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3748      	adds	r7, #72	; 0x48
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	004005ff 	.word	0x004005ff

08003c4c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b092      	sub	sp, #72	; 0x48
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
 8003c58:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003c5a:	f7fc fcef 	bl	800063c <HAL_GetTick>
 8003c5e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d107      	bne.n	8003c7e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c72:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e184      	b.n	8003f88 <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	f040 8177 	bne.w	8003f7a <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003c92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	441a      	add	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d907      	bls.n	8003cb0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e16b      	b.n	8003f88 <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2203      	movs	r2, #3
 8003cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d002      	beq.n	8003cce <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cca:	025b      	lsls	r3, r3, #9
 8003ccc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f002 f800 	bl	8005cdc <SDMMC_CmdBlockLength>
 8003cdc:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00f      	beq.n	8003d04 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a9d      	ldr	r2, [pc, #628]	; (8003f60 <HAL_SD_WriteBlocks+0x314>)
 8003cea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e141      	b.n	8003f88 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003d04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d08:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	025b      	lsls	r3, r3, #9
 8003d0e:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003d10:	2390      	movs	r3, #144	; 0x90
 8003d12:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003d14:	2300      	movs	r3, #0
 8003d16:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f107 0218 	add.w	r2, r7, #24
 8003d28:	4611      	mov	r1, r2
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f001 ffaa 	bl	8005c84 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d90a      	bls.n	8003d4c <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d42:	4618      	mov	r0, r3
 8003d44:	f002 f852 	bl	8005dec <SDMMC_CmdWriteMultiBlock>
 8003d48:	6478      	str	r0, [r7, #68]	; 0x44
 8003d4a:	e009      	b.n	8003d60 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2210      	movs	r2, #16
 8003d50:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f002 f825 	bl	8005da8 <SDMMC_CmdWriteSingleBlock>
 8003d5e:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d012      	beq.n	8003d8c <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a7d      	ldr	r2, [pc, #500]	; (8003f60 <HAL_SD_WriteBlocks+0x314>)
 8003d6c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d74:	431a      	orrs	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0fd      	b.n	8003f88 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003d90:	e065      	b.n	8003e5e <HAL_SD_WriteBlocks+0x212>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d040      	beq.n	8003e22 <HAL_SD_WriteBlocks+0x1d6>
 8003da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d03d      	beq.n	8003e22 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003da6:	2300      	movs	r3, #0
 8003da8:	643b      	str	r3, [r7, #64]	; 0x40
 8003daa:	e037      	b.n	8003e1c <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8003dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db4:	3301      	adds	r3, #1
 8003db6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	021a      	lsls	r2, r3, #8
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dcc:	3301      	adds	r3, #1
 8003dce:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	041a      	lsls	r2, r3, #16
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de4:	3301      	adds	r3, #1
 8003de6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dea:	3b01      	subs	r3, #1
 8003dec:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	061a      	lsls	r2, r3, #24
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e02:	3b01      	subs	r3, #1
 8003e04:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f107 0214 	add.w	r2, r7, #20
 8003e0e:	4611      	mov	r1, r2
 8003e10:	4618      	mov	r0, r3
 8003e12:	f001 febf 	bl	8005b94 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e18:	3301      	adds	r3, #1
 8003e1a:	643b      	str	r3, [r7, #64]	; 0x40
 8003e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e1e:	2b07      	cmp	r3, #7
 8003e20:	d9c4      	bls.n	8003dac <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003e22:	f7fc fc0b 	bl	800063c <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d902      	bls.n	8003e38 <HAL_SD_WriteBlocks+0x1ec>
 8003e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d112      	bne.n	8003e5e <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a48      	ldr	r2, [pc, #288]	; (8003f60 <HAL_SD_WriteBlocks+0x314>)
 8003e3e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e46:	431a      	orrs	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e094      	b.n	8003f88 <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e64:	f240 331a 	movw	r3, #794	; 0x31a
 8003e68:	4013      	ands	r3, r2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d091      	beq.n	8003d92 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d022      	beq.n	8003ec2 <HAL_SD_WriteBlocks+0x276>
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d91f      	bls.n	8003ec2 <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e86:	2b03      	cmp	r3, #3
 8003e88:	d01b      	beq.n	8003ec2 <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f001 ffce 	bl	8005e30 <SDMMC_CmdStopTransfer>
 8003e94:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d012      	beq.n	8003ec2 <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a2f      	ldr	r2, [pc, #188]	; (8003f60 <HAL_SD_WriteBlocks+0x314>)
 8003ea2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e062      	b.n	8003f88 <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec8:	f003 0308 	and.w	r3, r3, #8
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d012      	beq.n	8003ef6 <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a22      	ldr	r2, [pc, #136]	; (8003f60 <HAL_SD_WriteBlocks+0x314>)
 8003ed6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003edc:	f043 0208 	orr.w	r2, r3, #8
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e048      	b.n	8003f88 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d012      	beq.n	8003f2a <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a15      	ldr	r2, [pc, #84]	; (8003f60 <HAL_SD_WriteBlocks+0x314>)
 8003f0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f10:	f043 0202 	orr.w	r2, r3, #2
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e02e      	b.n	8003f88 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f30:	f003 0310 	and.w	r3, r3, #16
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d015      	beq.n	8003f64 <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a08      	ldr	r2, [pc, #32]	; (8003f60 <HAL_SD_WriteBlocks+0x314>)
 8003f3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f44:	f043 0210 	orr.w	r2, r3, #16
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e014      	b.n	8003f88 <HAL_SD_WriteBlocks+0x33c>
 8003f5e:	bf00      	nop
 8003f60:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f240 523a 	movw	r2, #1338	; 0x53a
 8003f6c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	e006      	b.n	8003f88 <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
  }
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3748      	adds	r7, #72	; 0x48
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f9e:	0f9b      	lsrs	r3, r3, #30
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003faa:	0e9b      	lsrs	r3, r3, #26
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	f003 030f 	and.w	r3, r3, #15
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fbc:	0e1b      	lsrs	r3, r3, #24
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	f003 0303 	and.w	r3, r3, #3
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fce:	0c1b      	lsrs	r3, r3, #16
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fda:	0a1b      	lsrs	r3, r3, #8
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ff0:	0d1b      	lsrs	r3, r3, #20
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ffc:	0c1b      	lsrs	r3, r3, #16
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	f003 030f 	and.w	r3, r3, #15
 8004004:	b2da      	uxtb	r2, r3
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800400e:	0bdb      	lsrs	r3, r3, #15
 8004010:	b2db      	uxtb	r3, r3
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	b2da      	uxtb	r2, r3
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004020:	0b9b      	lsrs	r3, r3, #14
 8004022:	b2db      	uxtb	r3, r3
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	b2da      	uxtb	r2, r3
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004032:	0b5b      	lsrs	r3, r3, #13
 8004034:	b2db      	uxtb	r3, r3
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	b2da      	uxtb	r2, r3
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004044:	0b1b      	lsrs	r3, r3, #12
 8004046:	b2db      	uxtb	r3, r3
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	b2da      	uxtb	r2, r3
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2200      	movs	r2, #0
 8004056:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405c:	2b00      	cmp	r3, #0
 800405e:	d163      	bne.n	8004128 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004064:	009a      	lsls	r2, r3, #2
 8004066:	f640 73fc 	movw	r3, #4092	; 0xffc
 800406a:	4013      	ands	r3, r2
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004070:	0f92      	lsrs	r2, r2, #30
 8004072:	431a      	orrs	r2, r3
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800407c:	0edb      	lsrs	r3, r3, #27
 800407e:	b2db      	uxtb	r3, r3
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	b2da      	uxtb	r2, r3
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800408e:	0e1b      	lsrs	r3, r3, #24
 8004090:	b2db      	uxtb	r3, r3
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	b2da      	uxtb	r2, r3
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040a0:	0d5b      	lsrs	r3, r3, #21
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040b2:	0c9b      	lsrs	r3, r3, #18
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040c4:	0bdb      	lsrs	r3, r3, #15
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	7e1b      	ldrb	r3, [r3, #24]
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	3302      	adds	r3, #2
 80040e8:	2201      	movs	r2, #1
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80040f2:	fb02 f203 	mul.w	r2, r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	7a1b      	ldrb	r3, [r3, #8]
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	f003 030f 	and.w	r3, r3, #15
 8004104:	2201      	movs	r2, #1
 8004106:	409a      	lsls	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004114:	0a52      	lsrs	r2, r2, #9
 8004116:	fb02 f203 	mul.w	r2, r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004124:	661a      	str	r2, [r3, #96]	; 0x60
 8004126:	e031      	b.n	800418c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412c:	2b01      	cmp	r3, #1
 800412e:	d11d      	bne.n	800416c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004134:	041b      	lsls	r3, r3, #16
 8004136:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800413e:	0c1b      	lsrs	r3, r3, #16
 8004140:	431a      	orrs	r2, r3
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	3301      	adds	r3, #1
 800414c:	029a      	lsls	r2, r3, #10
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004160:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	661a      	str	r2, [r3, #96]	; 0x60
 800416a:	e00f      	b.n	800418c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a58      	ldr	r2, [pc, #352]	; (80042d4 <HAL_SD_GetCardCSD+0x344>)
 8004172:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004178:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e09d      	b.n	80042c8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004190:	0b9b      	lsrs	r3, r3, #14
 8004192:	b2db      	uxtb	r3, r3
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	b2da      	uxtb	r2, r3
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041a2:	09db      	lsrs	r3, r3, #7
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c4:	0fdb      	lsrs	r3, r3, #31
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d0:	0f5b      	lsrs	r3, r3, #29
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	f003 0303 	and.w	r3, r3, #3
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e2:	0e9b      	lsrs	r3, r3, #26
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	f003 0307 	and.w	r3, r3, #7
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f4:	0d9b      	lsrs	r3, r3, #22
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	f003 030f 	and.w	r3, r3, #15
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004206:	0d5b      	lsrs	r3, r3, #21
 8004208:	b2db      	uxtb	r3, r3
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	b2da      	uxtb	r2, r3
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004222:	0c1b      	lsrs	r3, r3, #16
 8004224:	b2db      	uxtb	r3, r3
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	b2da      	uxtb	r2, r3
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004236:	0bdb      	lsrs	r3, r3, #15
 8004238:	b2db      	uxtb	r3, r3
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	b2da      	uxtb	r2, r3
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424a:	0b9b      	lsrs	r3, r3, #14
 800424c:	b2db      	uxtb	r3, r3
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	b2da      	uxtb	r2, r3
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425e:	0b5b      	lsrs	r3, r3, #13
 8004260:	b2db      	uxtb	r3, r3
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	b2da      	uxtb	r2, r3
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004272:	0b1b      	lsrs	r3, r3, #12
 8004274:	b2db      	uxtb	r3, r3
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	b2da      	uxtb	r2, r3
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004286:	0a9b      	lsrs	r3, r3, #10
 8004288:	b2db      	uxtb	r3, r3
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	b2da      	uxtb	r2, r3
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429a:	0a1b      	lsrs	r3, r3, #8
 800429c:	b2db      	uxtb	r3, r3
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ae:	085b      	lsrs	r3, r3, #1
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	004005ff 	.word	0x004005ff

080042d8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004330:	b5b0      	push	{r4, r5, r7, lr}
 8004332:	b08e      	sub	sp, #56	; 0x38
 8004334:	af04      	add	r7, sp, #16
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2203      	movs	r2, #3
 800433e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004346:	2b03      	cmp	r3, #3
 8004348:	d02e      	beq.n	80043a8 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004350:	d106      	bne.n	8004360 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	639a      	str	r2, [r3, #56]	; 0x38
 800435e:	e029      	b.n	80043b4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004366:	d10a      	bne.n	800437e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 fa01 	bl	8004770 <SD_WideBus_Enable>
 800436e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	639a      	str	r2, [r3, #56]	; 0x38
 800437c:	e01a      	b.n	80043b4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10a      	bne.n	800439a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fa3e 	bl	8004806 <SD_WideBus_Disable>
 800438a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	639a      	str	r2, [r3, #56]	; 0x38
 8004398:	e00c      	b.n	80043b4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	639a      	str	r2, [r3, #56]	; 0x38
 80043a6:	e005      	b.n	80043b4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d009      	beq.n	80043d0 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a18      	ldr	r2, [pc, #96]	; (8004424 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80043c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e024      	b.n	800441a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681d      	ldr	r5, [r3, #0]
 80043f6:	466c      	mov	r4, sp
 80043f8:	f107 0318 	add.w	r3, r7, #24
 80043fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004400:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004404:	f107 030c 	add.w	r3, r7, #12
 8004408:	cb0e      	ldmia	r3, {r1, r2, r3}
 800440a:	4628      	mov	r0, r5
 800440c:	f001 fb8a 	bl	8005b24 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3728      	adds	r7, #40	; 0x28
 800441e:	46bd      	mov	sp, r7
 8004420:	bdb0      	pop	{r4, r5, r7, pc}
 8004422:	bf00      	nop
 8004424:	004005ff 	.word	0x004005ff

08004428 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004430:	2300      	movs	r3, #0
 8004432:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004434:	f107 030c 	add.w	r3, r7, #12
 8004438:	4619      	mov	r1, r3
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f970 	bl	8004720 <SD_SendStatus>
 8004440:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	0a5b      	lsrs	r3, r3, #9
 8004458:	f003 030f 	and.w	r3, r3, #15
 800445c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800445e:	693b      	ldr	r3, [r7, #16]
}
 8004460:	4618      	mov	r0, r3
 8004462:	3718      	adds	r7, #24
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004468:	b5b0      	push	{r4, r5, r7, lr}
 800446a:	b094      	sub	sp, #80	; 0x50
 800446c:	af04      	add	r7, sp, #16
 800446e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004470:	2301      	movs	r3, #1
 8004472:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4618      	mov	r0, r3
 800447a:	f001 fbab 	bl	8005bd4 <SDIO_GetPowerState>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d102      	bne.n	800448a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004484:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004488:	e0b7      	b.n	80045fa <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448e:	2b03      	cmp	r3, #3
 8004490:	d02f      	beq.n	80044f2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	f001 fdd4 	bl	8006044 <SDMMC_CmdSendCID>
 800449c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800449e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <SD_InitCard+0x40>
    {
      return errorstate;
 80044a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044a6:	e0a8      	b.n	80045fa <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2100      	movs	r1, #0
 80044ae:	4618      	mov	r0, r3
 80044b0:	f001 fbd5 	bl	8005c5e <SDIO_GetResponse>
 80044b4:	4602      	mov	r2, r0
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2104      	movs	r1, #4
 80044c0:	4618      	mov	r0, r3
 80044c2:	f001 fbcc 	bl	8005c5e <SDIO_GetResponse>
 80044c6:	4602      	mov	r2, r0
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2108      	movs	r1, #8
 80044d2:	4618      	mov	r0, r3
 80044d4:	f001 fbc3 	bl	8005c5e <SDIO_GetResponse>
 80044d8:	4602      	mov	r2, r0
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	210c      	movs	r1, #12
 80044e4:	4618      	mov	r0, r3
 80044e6:	f001 fbba 	bl	8005c5e <SDIO_GetResponse>
 80044ea:	4602      	mov	r2, r0
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f6:	2b03      	cmp	r3, #3
 80044f8:	d00d      	beq.n	8004516 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f107 020e 	add.w	r2, r7, #14
 8004502:	4611      	mov	r1, r2
 8004504:	4618      	mov	r0, r3
 8004506:	f001 fdda 	bl	80060be <SDMMC_CmdSetRelAdd>
 800450a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800450c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <SD_InitCard+0xae>
    {
      return errorstate;
 8004512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004514:	e071      	b.n	80045fa <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451a:	2b03      	cmp	r3, #3
 800451c:	d036      	beq.n	800458c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800451e:	89fb      	ldrh	r3, [r7, #14]
 8004520:	461a      	mov	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800452e:	041b      	lsls	r3, r3, #16
 8004530:	4619      	mov	r1, r3
 8004532:	4610      	mov	r0, r2
 8004534:	f001 fda4 	bl	8006080 <SDMMC_CmdSendCSD>
 8004538:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800453a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004542:	e05a      	b.n	80045fa <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2100      	movs	r1, #0
 800454a:	4618      	mov	r0, r3
 800454c:	f001 fb87 	bl	8005c5e <SDIO_GetResponse>
 8004550:	4602      	mov	r2, r0
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2104      	movs	r1, #4
 800455c:	4618      	mov	r0, r3
 800455e:	f001 fb7e 	bl	8005c5e <SDIO_GetResponse>
 8004562:	4602      	mov	r2, r0
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2108      	movs	r1, #8
 800456e:	4618      	mov	r0, r3
 8004570:	f001 fb75 	bl	8005c5e <SDIO_GetResponse>
 8004574:	4602      	mov	r2, r0
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	210c      	movs	r1, #12
 8004580:	4618      	mov	r0, r3
 8004582:	f001 fb6c 	bl	8005c5e <SDIO_GetResponse>
 8004586:	4602      	mov	r2, r0
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2104      	movs	r1, #4
 8004592:	4618      	mov	r0, r3
 8004594:	f001 fb63 	bl	8005c5e <SDIO_GetResponse>
 8004598:	4603      	mov	r3, r0
 800459a:	0d1a      	lsrs	r2, r3, #20
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80045a0:	f107 0310 	add.w	r3, r7, #16
 80045a4:	4619      	mov	r1, r3
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7ff fcf2 	bl	8003f90 <HAL_SD_GetCardCSD>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80045b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80045b6:	e020      	b.n	80045fa <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6819      	ldr	r1, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c0:	041b      	lsls	r3, r3, #16
 80045c2:	f04f 0400 	mov.w	r4, #0
 80045c6:	461a      	mov	r2, r3
 80045c8:	4623      	mov	r3, r4
 80045ca:	4608      	mov	r0, r1
 80045cc:	f001 fc52 	bl	8005e74 <SDMMC_CmdSelDesel>
 80045d0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80045d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <SD_InitCard+0x174>
  {
    return errorstate;
 80045d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045da:	e00e      	b.n	80045fa <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681d      	ldr	r5, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	466c      	mov	r4, sp
 80045e4:	f103 0210 	add.w	r2, r3, #16
 80045e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80045ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80045ee:	3304      	adds	r3, #4
 80045f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045f2:	4628      	mov	r0, r5
 80045f4:	f001 fa96 	bl	8005b24 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3740      	adds	r7, #64	; 0x40
 80045fe:	46bd      	mov	sp, r7
 8004600:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004604 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	2300      	movs	r3, #0
 8004616:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4618      	mov	r0, r3
 800461e:	f001 fc4c 	bl	8005eba <SDMMC_CmdGoIdleState>
 8004622:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <SD_PowerON+0x2a>
  {
    return errorstate;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	e072      	b.n	8004714 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f001 fc5f 	bl	8005ef6 <SDMMC_CmdOperCond>
 8004638:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00d      	beq.n	800465c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f001 fc35 	bl	8005eba <SDMMC_CmdGoIdleState>
 8004650:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d004      	beq.n	8004662 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	e05b      	b.n	8004714 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004666:	2b01      	cmp	r3, #1
 8004668:	d137      	bne.n	80046da <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2100      	movs	r1, #0
 8004670:	4618      	mov	r0, r3
 8004672:	f001 fc5f 	bl	8005f34 <SDMMC_CmdAppCommand>
 8004676:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d02d      	beq.n	80046da <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800467e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004682:	e047      	b.n	8004714 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2100      	movs	r1, #0
 800468a:	4618      	mov	r0, r3
 800468c:	f001 fc52 	bl	8005f34 <SDMMC_CmdAppCommand>
 8004690:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <SD_PowerON+0x98>
    {
      return errorstate;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	e03b      	b.n	8004714 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	491e      	ldr	r1, [pc, #120]	; (800471c <SD_PowerON+0x118>)
 80046a2:	4618      	mov	r0, r3
 80046a4:	f001 fc68 	bl	8005f78 <SDMMC_CmdAppOperCommand>
 80046a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d002      	beq.n	80046b6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80046b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80046b4:	e02e      	b.n	8004714 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2100      	movs	r1, #0
 80046bc:	4618      	mov	r0, r3
 80046be:	f001 face 	bl	8005c5e <SDIO_GetResponse>
 80046c2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	0fdb      	lsrs	r3, r3, #31
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d101      	bne.n	80046d0 <SD_PowerON+0xcc>
 80046cc:	2301      	movs	r3, #1
 80046ce:	e000      	b.n	80046d2 <SD_PowerON+0xce>
 80046d0:	2300      	movs	r3, #0
 80046d2:	613b      	str	r3, [r7, #16]

    count++;
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	3301      	adds	r3, #1
 80046d8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d802      	bhi.n	80046ea <SD_PowerON+0xe6>
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0cc      	beq.n	8004684 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d902      	bls.n	80046fa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80046f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046f8:	e00c      	b.n	8004714 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	645a      	str	r2, [r3, #68]	; 0x44
 800470a:	e002      	b.n	8004712 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3718      	adds	r7, #24
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	c1100000 	.word	0xc1100000

08004720 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d102      	bne.n	8004736 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004730:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004734:	e018      	b.n	8004768 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800473e:	041b      	lsls	r3, r3, #16
 8004740:	4619      	mov	r1, r3
 8004742:	4610      	mov	r0, r2
 8004744:	f001 fcdc 	bl	8006100 <SDMMC_CmdSendStatus>
 8004748:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	e009      	b.n	8004768 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2100      	movs	r1, #0
 800475a:	4618      	mov	r0, r3
 800475c:	f001 fa7f 	bl	8005c5e <SDIO_GetResponse>
 8004760:	4602      	mov	r2, r0
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004778:	2300      	movs	r3, #0
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	2300      	movs	r3, #0
 800477e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2100      	movs	r1, #0
 8004786:	4618      	mov	r0, r3
 8004788:	f001 fa69 	bl	8005c5e <SDIO_GetResponse>
 800478c:	4603      	mov	r3, r0
 800478e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004792:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004796:	d102      	bne.n	800479e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004798:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800479c:	e02f      	b.n	80047fe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800479e:	f107 030c 	add.w	r3, r7, #12
 80047a2:	4619      	mov	r1, r3
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f879 	bl	800489c <SD_FindSCR>
 80047aa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	e023      	b.n	80047fe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d01c      	beq.n	80047fa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c8:	041b      	lsls	r3, r3, #16
 80047ca:	4619      	mov	r1, r3
 80047cc:	4610      	mov	r0, r2
 80047ce:	f001 fbb1 	bl	8005f34 <SDMMC_CmdAppCommand>
 80047d2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	e00f      	b.n	80047fe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2102      	movs	r1, #2
 80047e4:	4618      	mov	r0, r3
 80047e6:	f001 fbea 	bl	8005fbe <SDMMC_CmdBusWidth>
 80047ea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	e003      	b.n	80047fe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80047f6:	2300      	movs	r3, #0
 80047f8:	e001      	b.n	80047fe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80047fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3718      	adds	r7, #24
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b086      	sub	sp, #24
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	2300      	movs	r3, #0
 8004814:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2100      	movs	r1, #0
 800481c:	4618      	mov	r0, r3
 800481e:	f001 fa1e 	bl	8005c5e <SDIO_GetResponse>
 8004822:	4603      	mov	r3, r0
 8004824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004828:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800482c:	d102      	bne.n	8004834 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800482e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004832:	e02f      	b.n	8004894 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004834:	f107 030c 	add.w	r3, r7, #12
 8004838:	4619      	mov	r1, r3
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f82e 	bl	800489c <SD_FindSCR>
 8004840:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	e023      	b.n	8004894 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d01c      	beq.n	8004890 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800485e:	041b      	lsls	r3, r3, #16
 8004860:	4619      	mov	r1, r3
 8004862:	4610      	mov	r0, r2
 8004864:	f001 fb66 	bl	8005f34 <SDMMC_CmdAppCommand>
 8004868:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	e00f      	b.n	8004894 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2100      	movs	r1, #0
 800487a:	4618      	mov	r0, r3
 800487c:	f001 fb9f 	bl	8005fbe <SDMMC_CmdBusWidth>
 8004880:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	e003      	b.n	8004894 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800488c:	2300      	movs	r3, #0
 800488e:	e001      	b.n	8004894 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004890:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004894:	4618      	mov	r0, r3
 8004896:	3718      	adds	r7, #24
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800489c:	b590      	push	{r4, r7, lr}
 800489e:	b08f      	sub	sp, #60	; 0x3c
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80048a6:	f7fb fec9 	bl	800063c <HAL_GetTick>
 80048aa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80048b0:	2300      	movs	r3, #0
 80048b2:	60bb      	str	r3, [r7, #8]
 80048b4:	2300      	movs	r3, #0
 80048b6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2108      	movs	r1, #8
 80048c2:	4618      	mov	r0, r3
 80048c4:	f001 fa0a 	bl	8005cdc <SDMMC_CmdBlockLength>
 80048c8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80048ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80048d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d2:	e0a9      	b.n	8004a28 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048dc:	041b      	lsls	r3, r3, #16
 80048de:	4619      	mov	r1, r3
 80048e0:	4610      	mov	r0, r2
 80048e2:	f001 fb27 	bl	8005f34 <SDMMC_CmdAppCommand>
 80048e6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80048e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80048ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f0:	e09a      	b.n	8004a28 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80048f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048f6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80048f8:	2308      	movs	r3, #8
 80048fa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80048fc:	2330      	movs	r3, #48	; 0x30
 80048fe:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004900:	2302      	movs	r3, #2
 8004902:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004904:	2300      	movs	r3, #0
 8004906:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004908:	2301      	movs	r3, #1
 800490a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f107 0210 	add.w	r2, r7, #16
 8004914:	4611      	mov	r1, r2
 8004916:	4618      	mov	r0, r3
 8004918:	f001 f9b4 	bl	8005c84 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f001 fb6e 	bl	8006002 <SDMMC_CmdSendSCR>
 8004926:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492a:	2b00      	cmp	r3, #0
 800492c:	d022      	beq.n	8004974 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800492e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004930:	e07a      	b.n	8004a28 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00e      	beq.n	800495e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6819      	ldr	r1, [r3, #0]
 8004944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	f107 0208 	add.w	r2, r7, #8
 800494c:	18d4      	adds	r4, r2, r3
 800494e:	4608      	mov	r0, r1
 8004950:	f001 f913 	bl	8005b7a <SDIO_ReadFIFO>
 8004954:	4603      	mov	r3, r0
 8004956:	6023      	str	r3, [r4, #0]
      index++;
 8004958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800495a:	3301      	adds	r3, #1
 800495c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800495e:	f7fb fe6d 	bl	800063c <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800496c:	d102      	bne.n	8004974 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800496e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004972:	e059      	b.n	8004a28 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800497a:	f240 432a 	movw	r3, #1066	; 0x42a
 800497e:	4013      	ands	r3, r2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d0d6      	beq.n	8004932 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498a:	f003 0308 	and.w	r3, r3, #8
 800498e:	2b00      	cmp	r3, #0
 8004990:	d005      	beq.n	800499e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2208      	movs	r2, #8
 8004998:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800499a:	2308      	movs	r3, #8
 800499c:	e044      	b.n	8004a28 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d005      	beq.n	80049b8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2202      	movs	r2, #2
 80049b2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80049b4:	2302      	movs	r3, #2
 80049b6:	e037      	b.n	8004a28 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049be:	f003 0320 	and.w	r3, r3, #32
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d005      	beq.n	80049d2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2220      	movs	r2, #32
 80049cc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80049ce:	2320      	movs	r3, #32
 80049d0:	e02a      	b.n	8004a28 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f240 523a 	movw	r2, #1338	; 0x53a
 80049da:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	061a      	lsls	r2, r3, #24
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	021b      	lsls	r3, r3, #8
 80049e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80049e8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	0a1b      	lsrs	r3, r3, #8
 80049ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80049f2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	0e1b      	lsrs	r3, r3, #24
 80049f8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80049fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fc:	601a      	str	r2, [r3, #0]
    scr++;
 80049fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a00:	3304      	adds	r3, #4
 8004a02:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	061a      	lsls	r2, r3, #24
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	021b      	lsls	r3, r3, #8
 8004a0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a10:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	0a1b      	lsrs	r3, r3, #8
 8004a16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004a1a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	0e1b      	lsrs	r3, r3, #24
 8004a20:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a24:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	373c      	adds	r7, #60	; 0x3c
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd90      	pop	{r4, r7, pc}

08004a30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e01d      	b.n	8004a7e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d106      	bne.n	8004a5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f005 fae2 	bl	800a020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4610      	mov	r0, r2
 8004a70:	f000 fcb8 	bl	80053e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b085      	sub	sp, #20
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f042 0201 	orr.w	r2, r2, #1
 8004a9c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f003 0307 	and.w	r3, r3, #7
 8004aa8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2b06      	cmp	r3, #6
 8004aae:	d007      	beq.n	8004ac0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f042 0201 	orr.w	r2, r2, #1
 8004abe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b082      	sub	sp, #8
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d101      	bne.n	8004ae0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e01d      	b.n	8004b1c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d106      	bne.n	8004afa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f815 	bl	8004b24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2202      	movs	r2, #2
 8004afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	3304      	adds	r3, #4
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	f000 fc69 	bl	80053e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
 8004b44:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d101      	bne.n	8004b56 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8004b52:	2302      	movs	r3, #2
 8004b54:	e0f3      	b.n	8004d3e <HAL_TIM_PWM_Start_DMA+0x206>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d10b      	bne.n	8004b7a <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d104      	bne.n	8004b72 <HAL_TIM_PWM_Start_DMA+0x3a>
 8004b68:	887b      	ldrh	r3, [r7, #2]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e0e5      	b.n	8004d3e <HAL_TIM_PWM_Start_DMA+0x206>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2202      	movs	r2, #2
 8004b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2b0c      	cmp	r3, #12
 8004b7e:	f200 80ad 	bhi.w	8004cdc <HAL_TIM_PWM_Start_DMA+0x1a4>
 8004b82:	a201      	add	r2, pc, #4	; (adr r2, 8004b88 <HAL_TIM_PWM_Start_DMA+0x50>)
 8004b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b88:	08004bbd 	.word	0x08004bbd
 8004b8c:	08004cdd 	.word	0x08004cdd
 8004b90:	08004cdd 	.word	0x08004cdd
 8004b94:	08004cdd 	.word	0x08004cdd
 8004b98:	08004c05 	.word	0x08004c05
 8004b9c:	08004cdd 	.word	0x08004cdd
 8004ba0:	08004cdd 	.word	0x08004cdd
 8004ba4:	08004cdd 	.word	0x08004cdd
 8004ba8:	08004c4d 	.word	0x08004c4d
 8004bac:	08004cdd 	.word	0x08004cdd
 8004bb0:	08004cdd 	.word	0x08004cdd
 8004bb4:	08004cdd 	.word	0x08004cdd
 8004bb8:	08004c95 	.word	0x08004c95
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	4a61      	ldr	r2, [pc, #388]	; (8004d48 <HAL_TIM_PWM_Start_DMA+0x210>)
 8004bc2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc8:	4a60      	ldr	r2, [pc, #384]	; (8004d4c <HAL_TIM_PWM_Start_DMA+0x214>)
 8004bca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	4a5f      	ldr	r2, [pc, #380]	; (8004d50 <HAL_TIM_PWM_Start_DMA+0x218>)
 8004bd2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004bd8:	6879      	ldr	r1, [r7, #4]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	3334      	adds	r3, #52	; 0x34
 8004be0:	461a      	mov	r2, r3
 8004be2:	887b      	ldrh	r3, [r7, #2]
 8004be4:	f7fb ff18 	bl	8000a18 <HAL_DMA_Start_IT>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e0a5      	b.n	8004d3e <HAL_TIM_PWM_Start_DMA+0x206>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68da      	ldr	r2, [r3, #12]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c00:	60da      	str	r2, [r3, #12]
      break;
 8004c02:	e06c      	b.n	8004cde <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c08:	4a4f      	ldr	r2, [pc, #316]	; (8004d48 <HAL_TIM_PWM_Start_DMA+0x210>)
 8004c0a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c10:	4a4e      	ldr	r2, [pc, #312]	; (8004d4c <HAL_TIM_PWM_Start_DMA+0x214>)
 8004c12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c18:	4a4d      	ldr	r2, [pc, #308]	; (8004d50 <HAL_TIM_PWM_Start_DMA+0x218>)
 8004c1a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004c20:	6879      	ldr	r1, [r7, #4]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	3338      	adds	r3, #56	; 0x38
 8004c28:	461a      	mov	r2, r3
 8004c2a:	887b      	ldrh	r3, [r7, #2]
 8004c2c:	f7fb fef4 	bl	8000a18 <HAL_DMA_Start_IT>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e081      	b.n	8004d3e <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68da      	ldr	r2, [r3, #12]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c48:	60da      	str	r2, [r3, #12]
      break;
 8004c4a:	e048      	b.n	8004cde <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	4a3d      	ldr	r2, [pc, #244]	; (8004d48 <HAL_TIM_PWM_Start_DMA+0x210>)
 8004c52:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c58:	4a3c      	ldr	r2, [pc, #240]	; (8004d4c <HAL_TIM_PWM_Start_DMA+0x214>)
 8004c5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c60:	4a3b      	ldr	r2, [pc, #236]	; (8004d50 <HAL_TIM_PWM_Start_DMA+0x218>)
 8004c62:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004c68:	6879      	ldr	r1, [r7, #4]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	333c      	adds	r3, #60	; 0x3c
 8004c70:	461a      	mov	r2, r3
 8004c72:	887b      	ldrh	r3, [r7, #2]
 8004c74:	f7fb fed0 	bl	8000a18 <HAL_DMA_Start_IT>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e05d      	b.n	8004d3e <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68da      	ldr	r2, [r3, #12]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c90:	60da      	str	r2, [r3, #12]
      break;
 8004c92:	e024      	b.n	8004cde <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c98:	4a2b      	ldr	r2, [pc, #172]	; (8004d48 <HAL_TIM_PWM_Start_DMA+0x210>)
 8004c9a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca0:	4a2a      	ldr	r2, [pc, #168]	; (8004d4c <HAL_TIM_PWM_Start_DMA+0x214>)
 8004ca2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca8:	4a29      	ldr	r2, [pc, #164]	; (8004d50 <HAL_TIM_PWM_Start_DMA+0x218>)
 8004caa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004cb0:	6879      	ldr	r1, [r7, #4]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3340      	adds	r3, #64	; 0x40
 8004cb8:	461a      	mov	r2, r3
 8004cba:	887b      	ldrh	r3, [r7, #2]
 8004cbc:	f7fb feac 	bl	8000a18 <HAL_DMA_Start_IT>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e039      	b.n	8004d3e <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004cd8:	60da      	str	r2, [r3, #12]
      break;
 8004cda:	e000      	b.n	8004cde <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 8004cdc:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	68b9      	ldr	r1, [r7, #8]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 fe66 	bl	80059b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a18      	ldr	r2, [pc, #96]	; (8004d54 <HAL_TIM_PWM_Start_DMA+0x21c>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d004      	beq.n	8004d00 <HAL_TIM_PWM_Start_DMA+0x1c8>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a17      	ldr	r2, [pc, #92]	; (8004d58 <HAL_TIM_PWM_Start_DMA+0x220>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d101      	bne.n	8004d04 <HAL_TIM_PWM_Start_DMA+0x1cc>
 8004d00:	2301      	movs	r3, #1
 8004d02:	e000      	b.n	8004d06 <HAL_TIM_PWM_Start_DMA+0x1ce>
 8004d04:	2300      	movs	r3, #0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d007      	beq.n	8004d1a <HAL_TIM_PWM_Start_DMA+0x1e2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f003 0307 	and.w	r3, r3, #7
 8004d24:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2b06      	cmp	r3, #6
 8004d2a:	d007      	beq.n	8004d3c <HAL_TIM_PWM_Start_DMA+0x204>
  {
    __HAL_TIM_ENABLE(htim);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 0201 	orr.w	r2, r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3718      	adds	r7, #24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	08005303 	.word	0x08005303
 8004d4c:	08005373 	.word	0x08005373
 8004d50:	080052df 	.word	0x080052df
 8004d54:	40010000 	.word	0x40010000
 8004d58:	40010400 	.word	0x40010400

08004d5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d122      	bne.n	8004db8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d11b      	bne.n	8004db8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f06f 0202 	mvn.w	r2, #2
 8004d88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	f003 0303 	and.w	r3, r3, #3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 fa6b 	bl	800527a <HAL_TIM_IC_CaptureCallback>
 8004da4:	e005      	b.n	8004db2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 fa5d 	bl	8005266 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 fa6e 	bl	800528e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	f003 0304 	and.w	r3, r3, #4
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d122      	bne.n	8004e0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b04      	cmp	r3, #4
 8004dd2:	d11b      	bne.n	8004e0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f06f 0204 	mvn.w	r2, #4
 8004ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2202      	movs	r2, #2
 8004de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fa41 	bl	800527a <HAL_TIM_IC_CaptureCallback>
 8004df8:	e005      	b.n	8004e06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 fa33 	bl	8005266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 fa44 	bl	800528e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f003 0308 	and.w	r3, r3, #8
 8004e16:	2b08      	cmp	r3, #8
 8004e18:	d122      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f003 0308 	and.w	r3, r3, #8
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d11b      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f06f 0208 	mvn.w	r2, #8
 8004e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2204      	movs	r2, #4
 8004e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 fa17 	bl	800527a <HAL_TIM_IC_CaptureCallback>
 8004e4c:	e005      	b.n	8004e5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fa09 	bl	8005266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 fa1a 	bl	800528e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f003 0310 	and.w	r3, r3, #16
 8004e6a:	2b10      	cmp	r3, #16
 8004e6c:	d122      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f003 0310 	and.w	r3, r3, #16
 8004e78:	2b10      	cmp	r3, #16
 8004e7a:	d11b      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f06f 0210 	mvn.w	r2, #16
 8004e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2208      	movs	r2, #8
 8004e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f9ed 	bl	800527a <HAL_TIM_IC_CaptureCallback>
 8004ea0:	e005      	b.n	8004eae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f9df 	bl	8005266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f9f0 	bl	800528e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d10e      	bne.n	8004ee0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d107      	bne.n	8004ee0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f06f 0201 	mvn.w	r2, #1
 8004ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f004 fafa 	bl	80094d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eea:	2b80      	cmp	r3, #128	; 0x80
 8004eec:	d10e      	bne.n	8004f0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef8:	2b80      	cmp	r3, #128	; 0x80
 8004efa:	d107      	bne.n	8004f0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 fe02 	bl	8005b10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f16:	2b40      	cmp	r3, #64	; 0x40
 8004f18:	d10e      	bne.n	8004f38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f24:	2b40      	cmp	r3, #64	; 0x40
 8004f26:	d107      	bne.n	8004f38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f9bf 	bl	80052b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	f003 0320 	and.w	r3, r3, #32
 8004f42:	2b20      	cmp	r3, #32
 8004f44:	d10e      	bne.n	8004f64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f003 0320 	and.w	r3, r3, #32
 8004f50:	2b20      	cmp	r3, #32
 8004f52:	d107      	bne.n	8004f64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f06f 0220 	mvn.w	r2, #32
 8004f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 fdcc 	bl	8005afc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f64:	bf00      	nop
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d101      	bne.n	8004f86 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004f82:	2302      	movs	r3, #2
 8004f84:	e0b4      	b.n	80050f0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2202      	movs	r2, #2
 8004f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b0c      	cmp	r3, #12
 8004f9a:	f200 809f 	bhi.w	80050dc <HAL_TIM_PWM_ConfigChannel+0x170>
 8004f9e:	a201      	add	r2, pc, #4	; (adr r2, 8004fa4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa4:	08004fd9 	.word	0x08004fd9
 8004fa8:	080050dd 	.word	0x080050dd
 8004fac:	080050dd 	.word	0x080050dd
 8004fb0:	080050dd 	.word	0x080050dd
 8004fb4:	08005019 	.word	0x08005019
 8004fb8:	080050dd 	.word	0x080050dd
 8004fbc:	080050dd 	.word	0x080050dd
 8004fc0:	080050dd 	.word	0x080050dd
 8004fc4:	0800505b 	.word	0x0800505b
 8004fc8:	080050dd 	.word	0x080050dd
 8004fcc:	080050dd 	.word	0x080050dd
 8004fd0:	080050dd 	.word	0x080050dd
 8004fd4:	0800509b 	.word	0x0800509b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68b9      	ldr	r1, [r7, #8]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 faa0 	bl	8005524 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699a      	ldr	r2, [r3, #24]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f042 0208 	orr.w	r2, r2, #8
 8004ff2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	699a      	ldr	r2, [r3, #24]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 0204 	bic.w	r2, r2, #4
 8005002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6999      	ldr	r1, [r3, #24]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	691a      	ldr	r2, [r3, #16]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	619a      	str	r2, [r3, #24]
      break;
 8005016:	e062      	b.n	80050de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68b9      	ldr	r1, [r7, #8]
 800501e:	4618      	mov	r0, r3
 8005020:	f000 faf0 	bl	8005604 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	699a      	ldr	r2, [r3, #24]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005032:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	699a      	ldr	r2, [r3, #24]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005042:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6999      	ldr	r1, [r3, #24]
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	021a      	lsls	r2, r3, #8
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	430a      	orrs	r2, r1
 8005056:	619a      	str	r2, [r3, #24]
      break;
 8005058:	e041      	b.n	80050de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68b9      	ldr	r1, [r7, #8]
 8005060:	4618      	mov	r0, r3
 8005062:	f000 fb45 	bl	80056f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	69da      	ldr	r2, [r3, #28]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f042 0208 	orr.w	r2, r2, #8
 8005074:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69da      	ldr	r2, [r3, #28]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0204 	bic.w	r2, r2, #4
 8005084:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	69d9      	ldr	r1, [r3, #28]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	691a      	ldr	r2, [r3, #16]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	61da      	str	r2, [r3, #28]
      break;
 8005098:	e021      	b.n	80050de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68b9      	ldr	r1, [r7, #8]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 fb99 	bl	80057d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	69da      	ldr	r2, [r3, #28]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	69da      	ldr	r2, [r3, #28]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	69d9      	ldr	r1, [r3, #28]
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	021a      	lsls	r2, r3, #8
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	61da      	str	r2, [r3, #28]
      break;
 80050da:	e000      	b.n	80050de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80050dc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005108:	2b01      	cmp	r3, #1
 800510a:	d101      	bne.n	8005110 <HAL_TIM_ConfigClockSource+0x18>
 800510c:	2302      	movs	r3, #2
 800510e:	e0a6      	b.n	800525e <HAL_TIM_ConfigClockSource+0x166>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800512e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005136:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b40      	cmp	r3, #64	; 0x40
 8005146:	d067      	beq.n	8005218 <HAL_TIM_ConfigClockSource+0x120>
 8005148:	2b40      	cmp	r3, #64	; 0x40
 800514a:	d80b      	bhi.n	8005164 <HAL_TIM_ConfigClockSource+0x6c>
 800514c:	2b10      	cmp	r3, #16
 800514e:	d073      	beq.n	8005238 <HAL_TIM_ConfigClockSource+0x140>
 8005150:	2b10      	cmp	r3, #16
 8005152:	d802      	bhi.n	800515a <HAL_TIM_ConfigClockSource+0x62>
 8005154:	2b00      	cmp	r3, #0
 8005156:	d06f      	beq.n	8005238 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005158:	e078      	b.n	800524c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800515a:	2b20      	cmp	r3, #32
 800515c:	d06c      	beq.n	8005238 <HAL_TIM_ConfigClockSource+0x140>
 800515e:	2b30      	cmp	r3, #48	; 0x30
 8005160:	d06a      	beq.n	8005238 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005162:	e073      	b.n	800524c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005164:	2b70      	cmp	r3, #112	; 0x70
 8005166:	d00d      	beq.n	8005184 <HAL_TIM_ConfigClockSource+0x8c>
 8005168:	2b70      	cmp	r3, #112	; 0x70
 800516a:	d804      	bhi.n	8005176 <HAL_TIM_ConfigClockSource+0x7e>
 800516c:	2b50      	cmp	r3, #80	; 0x50
 800516e:	d033      	beq.n	80051d8 <HAL_TIM_ConfigClockSource+0xe0>
 8005170:	2b60      	cmp	r3, #96	; 0x60
 8005172:	d041      	beq.n	80051f8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005174:	e06a      	b.n	800524c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800517a:	d066      	beq.n	800524a <HAL_TIM_ConfigClockSource+0x152>
 800517c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005180:	d017      	beq.n	80051b2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005182:	e063      	b.n	800524c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6818      	ldr	r0, [r3, #0]
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	6899      	ldr	r1, [r3, #8]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	685a      	ldr	r2, [r3, #4]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f000 fbf0 	bl	8005978 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051a6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	609a      	str	r2, [r3, #8]
      break;
 80051b0:	e04c      	b.n	800524c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6818      	ldr	r0, [r3, #0]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	6899      	ldr	r1, [r3, #8]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f000 fbd9 	bl	8005978 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051d4:	609a      	str	r2, [r3, #8]
      break;
 80051d6:	e039      	b.n	800524c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6818      	ldr	r0, [r3, #0]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	6859      	ldr	r1, [r3, #4]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	461a      	mov	r2, r3
 80051e6:	f000 fb4d 	bl	8005884 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2150      	movs	r1, #80	; 0x50
 80051f0:	4618      	mov	r0, r3
 80051f2:	f000 fba6 	bl	8005942 <TIM_ITRx_SetConfig>
      break;
 80051f6:	e029      	b.n	800524c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6818      	ldr	r0, [r3, #0]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	6859      	ldr	r1, [r3, #4]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	461a      	mov	r2, r3
 8005206:	f000 fb6c 	bl	80058e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2160      	movs	r1, #96	; 0x60
 8005210:	4618      	mov	r0, r3
 8005212:	f000 fb96 	bl	8005942 <TIM_ITRx_SetConfig>
      break;
 8005216:	e019      	b.n	800524c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6818      	ldr	r0, [r3, #0]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	6859      	ldr	r1, [r3, #4]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	461a      	mov	r2, r3
 8005226:	f000 fb2d 	bl	8005884 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2140      	movs	r1, #64	; 0x40
 8005230:	4618      	mov	r0, r3
 8005232:	f000 fb86 	bl	8005942 <TIM_ITRx_SetConfig>
      break;
 8005236:	e009      	b.n	800524c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4619      	mov	r1, r3
 8005242:	4610      	mov	r0, r2
 8005244:	f000 fb7d 	bl	8005942 <TIM_ITRx_SetConfig>
      break;
 8005248:	e000      	b.n	800524c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800524a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800526e:	bf00      	nop
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800527a:	b480      	push	{r7}
 800527c:	b083      	sub	sp, #12
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005282:	bf00      	nop
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800528e:	b480      	push	{r7}
 8005290:	b083      	sub	sp, #12
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005296:	bf00      	nop
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b083      	sub	sp, #12
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80052aa:	bf00      	nop
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052be:	bf00      	nop
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b083      	sub	sp, #12
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80052d2:	bf00      	nop
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b084      	sub	sp, #16
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ea:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f7ff ffe8 	bl	80052ca <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 80052fa:	bf00      	nop
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b084      	sub	sp, #16
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530e:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	429a      	cmp	r2, r3
 8005320:	d103      	bne.n	800532a <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2201      	movs	r2, #1
 8005326:	771a      	strb	r2, [r3, #28]
 8005328:	e019      	b.n	800535e <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	429a      	cmp	r2, r3
 8005332:	d103      	bne.n	800533c <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2202      	movs	r2, #2
 8005338:	771a      	strb	r2, [r3, #28]
 800533a:	e010      	b.n	800535e <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	429a      	cmp	r2, r3
 8005344:	d103      	bne.n	800534e <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2204      	movs	r2, #4
 800534a:	771a      	strb	r2, [r3, #28]
 800534c:	e007      	b.n	800535e <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	429a      	cmp	r2, r3
 8005356:	d102      	bne.n	800535e <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2208      	movs	r2, #8
 800535c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f7ff ff95 	bl	800528e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	771a      	strb	r2, [r3, #28]
}
 800536a:	bf00      	nop
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b084      	sub	sp, #16
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537e:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	429a      	cmp	r2, r3
 8005390:	d103      	bne.n	800539a <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2201      	movs	r2, #1
 8005396:	771a      	strb	r2, [r3, #28]
 8005398:	e019      	b.n	80053ce <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d103      	bne.n	80053ac <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2202      	movs	r2, #2
 80053a8:	771a      	strb	r2, [r3, #28]
 80053aa:	e010      	b.n	80053ce <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d103      	bne.n	80053be <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2204      	movs	r2, #4
 80053ba:	771a      	strb	r2, [r3, #28]
 80053bc:	e007      	b.n	80053ce <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d102      	bne.n	80053ce <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2208      	movs	r2, #8
 80053cc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f7ff ff67 	bl	80052a2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	771a      	strb	r2, [r3, #28]
}
 80053da:	bf00      	nop
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
	...

080053e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a40      	ldr	r2, [pc, #256]	; (80054f8 <TIM_Base_SetConfig+0x114>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d013      	beq.n	8005424 <TIM_Base_SetConfig+0x40>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005402:	d00f      	beq.n	8005424 <TIM_Base_SetConfig+0x40>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a3d      	ldr	r2, [pc, #244]	; (80054fc <TIM_Base_SetConfig+0x118>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d00b      	beq.n	8005424 <TIM_Base_SetConfig+0x40>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a3c      	ldr	r2, [pc, #240]	; (8005500 <TIM_Base_SetConfig+0x11c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d007      	beq.n	8005424 <TIM_Base_SetConfig+0x40>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a3b      	ldr	r2, [pc, #236]	; (8005504 <TIM_Base_SetConfig+0x120>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d003      	beq.n	8005424 <TIM_Base_SetConfig+0x40>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a3a      	ldr	r2, [pc, #232]	; (8005508 <TIM_Base_SetConfig+0x124>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d108      	bne.n	8005436 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800542a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a2f      	ldr	r2, [pc, #188]	; (80054f8 <TIM_Base_SetConfig+0x114>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d02b      	beq.n	8005496 <TIM_Base_SetConfig+0xb2>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005444:	d027      	beq.n	8005496 <TIM_Base_SetConfig+0xb2>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a2c      	ldr	r2, [pc, #176]	; (80054fc <TIM_Base_SetConfig+0x118>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d023      	beq.n	8005496 <TIM_Base_SetConfig+0xb2>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a2b      	ldr	r2, [pc, #172]	; (8005500 <TIM_Base_SetConfig+0x11c>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d01f      	beq.n	8005496 <TIM_Base_SetConfig+0xb2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a2a      	ldr	r2, [pc, #168]	; (8005504 <TIM_Base_SetConfig+0x120>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d01b      	beq.n	8005496 <TIM_Base_SetConfig+0xb2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a29      	ldr	r2, [pc, #164]	; (8005508 <TIM_Base_SetConfig+0x124>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d017      	beq.n	8005496 <TIM_Base_SetConfig+0xb2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a28      	ldr	r2, [pc, #160]	; (800550c <TIM_Base_SetConfig+0x128>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d013      	beq.n	8005496 <TIM_Base_SetConfig+0xb2>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a27      	ldr	r2, [pc, #156]	; (8005510 <TIM_Base_SetConfig+0x12c>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d00f      	beq.n	8005496 <TIM_Base_SetConfig+0xb2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a26      	ldr	r2, [pc, #152]	; (8005514 <TIM_Base_SetConfig+0x130>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d00b      	beq.n	8005496 <TIM_Base_SetConfig+0xb2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a25      	ldr	r2, [pc, #148]	; (8005518 <TIM_Base_SetConfig+0x134>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d007      	beq.n	8005496 <TIM_Base_SetConfig+0xb2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a24      	ldr	r2, [pc, #144]	; (800551c <TIM_Base_SetConfig+0x138>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d003      	beq.n	8005496 <TIM_Base_SetConfig+0xb2>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a23      	ldr	r2, [pc, #140]	; (8005520 <TIM_Base_SetConfig+0x13c>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d108      	bne.n	80054a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800549c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	689a      	ldr	r2, [r3, #8]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a0a      	ldr	r2, [pc, #40]	; (80054f8 <TIM_Base_SetConfig+0x114>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d003      	beq.n	80054dc <TIM_Base_SetConfig+0xf8>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a0c      	ldr	r2, [pc, #48]	; (8005508 <TIM_Base_SetConfig+0x124>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d103      	bne.n	80054e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	691a      	ldr	r2, [r3, #16]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	615a      	str	r2, [r3, #20]
}
 80054ea:	bf00      	nop
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	40010000 	.word	0x40010000
 80054fc:	40000400 	.word	0x40000400
 8005500:	40000800 	.word	0x40000800
 8005504:	40000c00 	.word	0x40000c00
 8005508:	40010400 	.word	0x40010400
 800550c:	40014000 	.word	0x40014000
 8005510:	40014400 	.word	0x40014400
 8005514:	40014800 	.word	0x40014800
 8005518:	40001800 	.word	0x40001800
 800551c:	40001c00 	.word	0x40001c00
 8005520:	40002000 	.word	0x40002000

08005524 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005524:	b480      	push	{r7}
 8005526:	b087      	sub	sp, #28
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	f023 0201 	bic.w	r2, r3, #1
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f023 0303 	bic.w	r3, r3, #3
 800555a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f023 0302 	bic.w	r3, r3, #2
 800556c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	4313      	orrs	r3, r2
 8005576:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a20      	ldr	r2, [pc, #128]	; (80055fc <TIM_OC1_SetConfig+0xd8>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d003      	beq.n	8005588 <TIM_OC1_SetConfig+0x64>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a1f      	ldr	r2, [pc, #124]	; (8005600 <TIM_OC1_SetConfig+0xdc>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d10c      	bne.n	80055a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f023 0308 	bic.w	r3, r3, #8
 800558e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	4313      	orrs	r3, r2
 8005598:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f023 0304 	bic.w	r3, r3, #4
 80055a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a15      	ldr	r2, [pc, #84]	; (80055fc <TIM_OC1_SetConfig+0xd8>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d003      	beq.n	80055b2 <TIM_OC1_SetConfig+0x8e>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a14      	ldr	r2, [pc, #80]	; (8005600 <TIM_OC1_SetConfig+0xdc>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d111      	bne.n	80055d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	621a      	str	r2, [r3, #32]
}
 80055f0:	bf00      	nop
 80055f2:	371c      	adds	r7, #28
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	40010000 	.word	0x40010000
 8005600:	40010400 	.word	0x40010400

08005604 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005604:	b480      	push	{r7}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	f023 0210 	bic.w	r2, r3, #16
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800563a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	021b      	lsls	r3, r3, #8
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	4313      	orrs	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f023 0320 	bic.w	r3, r3, #32
 800564e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	011b      	lsls	r3, r3, #4
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	4313      	orrs	r3, r2
 800565a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a22      	ldr	r2, [pc, #136]	; (80056e8 <TIM_OC2_SetConfig+0xe4>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d003      	beq.n	800566c <TIM_OC2_SetConfig+0x68>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a21      	ldr	r2, [pc, #132]	; (80056ec <TIM_OC2_SetConfig+0xe8>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d10d      	bne.n	8005688 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	011b      	lsls	r3, r3, #4
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	4313      	orrs	r3, r2
 800567e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005686:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a17      	ldr	r2, [pc, #92]	; (80056e8 <TIM_OC2_SetConfig+0xe4>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d003      	beq.n	8005698 <TIM_OC2_SetConfig+0x94>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a16      	ldr	r2, [pc, #88]	; (80056ec <TIM_OC2_SetConfig+0xe8>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d113      	bne.n	80056c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800569e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	4313      	orrs	r3, r2
 80056be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	621a      	str	r2, [r3, #32]
}
 80056da:	bf00      	nop
 80056dc:	371c      	adds	r7, #28
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	40010000 	.word	0x40010000
 80056ec:	40010400 	.word	0x40010400

080056f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800571e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 0303 	bic.w	r3, r3, #3
 8005726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005738:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	021b      	lsls	r3, r3, #8
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	4313      	orrs	r3, r2
 8005744:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a21      	ldr	r2, [pc, #132]	; (80057d0 <TIM_OC3_SetConfig+0xe0>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d003      	beq.n	8005756 <TIM_OC3_SetConfig+0x66>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a20      	ldr	r2, [pc, #128]	; (80057d4 <TIM_OC3_SetConfig+0xe4>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d10d      	bne.n	8005772 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800575c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	021b      	lsls	r3, r3, #8
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	4313      	orrs	r3, r2
 8005768:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005770:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a16      	ldr	r2, [pc, #88]	; (80057d0 <TIM_OC3_SetConfig+0xe0>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d003      	beq.n	8005782 <TIM_OC3_SetConfig+0x92>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a15      	ldr	r2, [pc, #84]	; (80057d4 <TIM_OC3_SetConfig+0xe4>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d113      	bne.n	80057aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005788:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005790:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	011b      	lsls	r3, r3, #4
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	4313      	orrs	r3, r2
 800579c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	011b      	lsls	r3, r3, #4
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	621a      	str	r2, [r3, #32]
}
 80057c4:	bf00      	nop
 80057c6:	371c      	adds	r7, #28
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr
 80057d0:	40010000 	.word	0x40010000
 80057d4:	40010400 	.word	0x40010400

080057d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057d8:	b480      	push	{r7}
 80057da:	b087      	sub	sp, #28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800580e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	021b      	lsls	r3, r3, #8
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	4313      	orrs	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005822:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	031b      	lsls	r3, r3, #12
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	4313      	orrs	r3, r2
 800582e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a12      	ldr	r2, [pc, #72]	; (800587c <TIM_OC4_SetConfig+0xa4>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d003      	beq.n	8005840 <TIM_OC4_SetConfig+0x68>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a11      	ldr	r2, [pc, #68]	; (8005880 <TIM_OC4_SetConfig+0xa8>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d109      	bne.n	8005854 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005846:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	019b      	lsls	r3, r3, #6
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	4313      	orrs	r3, r2
 8005852:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	621a      	str	r2, [r3, #32]
}
 800586e:	bf00      	nop
 8005870:	371c      	adds	r7, #28
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	40010000 	.word	0x40010000
 8005880:	40010400 	.word	0x40010400

08005884 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005884:	b480      	push	{r7}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	f023 0201 	bic.w	r2, r3, #1
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	011b      	lsls	r3, r3, #4
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f023 030a 	bic.w	r3, r3, #10
 80058c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	621a      	str	r2, [r3, #32]
}
 80058d6:	bf00      	nop
 80058d8:	371c      	adds	r7, #28
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b087      	sub	sp, #28
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	60f8      	str	r0, [r7, #12]
 80058ea:	60b9      	str	r1, [r7, #8]
 80058ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	f023 0210 	bic.w	r2, r3, #16
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6a1b      	ldr	r3, [r3, #32]
 8005904:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800590c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	031b      	lsls	r3, r3, #12
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	4313      	orrs	r3, r2
 8005916:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800591e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	011b      	lsls	r3, r3, #4
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	4313      	orrs	r3, r2
 8005928:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	621a      	str	r2, [r3, #32]
}
 8005936:	bf00      	nop
 8005938:	371c      	adds	r7, #28
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005942:	b480      	push	{r7}
 8005944:	b085      	sub	sp, #20
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
 800594a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005958:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4313      	orrs	r3, r2
 8005960:	f043 0307 	orr.w	r3, r3, #7
 8005964:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	609a      	str	r2, [r3, #8]
}
 800596c:	bf00      	nop
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
 8005984:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005992:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	021a      	lsls	r2, r3, #8
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	431a      	orrs	r2, r3
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	4313      	orrs	r3, r2
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	609a      	str	r2, [r3, #8]
}
 80059ac:	bf00      	nop
 80059ae:	371c      	adds	r7, #28
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b087      	sub	sp, #28
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f003 031f 	and.w	r3, r3, #31
 80059ca:	2201      	movs	r2, #1
 80059cc:	fa02 f303 	lsl.w	r3, r2, r3
 80059d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6a1a      	ldr	r2, [r3, #32]
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	43db      	mvns	r3, r3
 80059da:	401a      	ands	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6a1a      	ldr	r2, [r3, #32]
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	f003 031f 	and.w	r3, r3, #31
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	fa01 f303 	lsl.w	r3, r1, r3
 80059f0:	431a      	orrs	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	621a      	str	r2, [r3, #32]
}
 80059f6:	bf00      	nop
 80059f8:	371c      	adds	r7, #28
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
	...

08005a04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d101      	bne.n	8005a1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a18:	2302      	movs	r3, #2
 8005a1a:	e05a      	b.n	8005ad2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2202      	movs	r2, #2
 8005a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a21      	ldr	r2, [pc, #132]	; (8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d022      	beq.n	8005aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a68:	d01d      	beq.n	8005aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a1d      	ldr	r2, [pc, #116]	; (8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d018      	beq.n	8005aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a1b      	ldr	r2, [pc, #108]	; (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d013      	beq.n	8005aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a1a      	ldr	r2, [pc, #104]	; (8005aec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d00e      	beq.n	8005aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a18      	ldr	r2, [pc, #96]	; (8005af0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d009      	beq.n	8005aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a17      	ldr	r2, [pc, #92]	; (8005af4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d004      	beq.n	8005aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a15      	ldr	r2, [pc, #84]	; (8005af8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d10c      	bne.n	8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	40010000 	.word	0x40010000
 8005ae4:	40000400 	.word	0x40000400
 8005ae8:	40000800 	.word	0x40000800
 8005aec:	40000c00 	.word	0x40000c00
 8005af0:	40010400 	.word	0x40010400
 8005af4:	40014000 	.word	0x40014000
 8005af8:	40001800 	.word	0x40001800

08005afc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005b24:	b084      	sub	sp, #16
 8005b26:	b480      	push	{r7}
 8005b28:	b085      	sub	sp, #20
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	f107 001c 	add.w	r0, r7, #28
 8005b32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005b36:	2300      	movs	r3, #0
 8005b38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005b3a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005b3e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005b42:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005b46:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005b4a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005b4e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005b5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	431a      	orrs	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	b004      	add	sp, #16
 8005b78:	4770      	bx	lr

08005b7a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b083      	sub	sp, #12
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b082      	sub	sp, #8
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2203      	movs	r2, #3
 8005bc2:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8005bc4:	2002      	movs	r0, #2
 8005bc6:	f7fa fd45 	bl	8000654 <HAL_Delay>
  
  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3708      	adds	r7, #8
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0303 	and.w	r3, r3, #3
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005c0e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005c14:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005c1a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005c2a:	f023 030f 	bic.w	r3, r3, #15
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	431a      	orrs	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	b2db      	uxtb	r3, r3
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b085      	sub	sp, #20
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
 8005c66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	3314      	adds	r3, #20
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	4413      	add	r3, r2
 8005c72:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
}  
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3714      	adds	r7, #20
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005caa:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005cb0:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005cb6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	431a      	orrs	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005cce:	2300      	movs	r3, #0

}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b088      	sub	sp, #32
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005cea:	2310      	movs	r3, #16
 8005cec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005cee:	2340      	movs	r3, #64	; 0x40
 8005cf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cfa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005cfc:	f107 0308 	add.w	r3, r7, #8
 8005d00:	4619      	mov	r1, r3
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7ff ff74 	bl	8005bf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d0c:	2110      	movs	r1, #16
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 fa40 	bl	8006194 <SDMMC_GetCmdResp1>
 8005d14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d16:	69fb      	ldr	r3, [r7, #28]
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3720      	adds	r7, #32
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b088      	sub	sp, #32
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005d2e:	2311      	movs	r3, #17
 8005d30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d32:	2340      	movs	r3, #64	; 0x40
 8005d34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d36:	2300      	movs	r3, #0
 8005d38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d3e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d40:	f107 0308 	add.w	r3, r7, #8
 8005d44:	4619      	mov	r1, r3
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7ff ff52 	bl	8005bf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d50:	2111      	movs	r1, #17
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 fa1e 	bl	8006194 <SDMMC_GetCmdResp1>
 8005d58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d5a:	69fb      	ldr	r3, [r7, #28]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3720      	adds	r7, #32
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b088      	sub	sp, #32
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005d72:	2312      	movs	r3, #18
 8005d74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005d76:	2340      	movs	r3, #64	; 0x40
 8005d78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005d7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005d84:	f107 0308 	add.w	r3, r7, #8
 8005d88:	4619      	mov	r1, r3
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f7ff ff30 	bl	8005bf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d94:	2112      	movs	r1, #18
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f9fc 	bl	8006194 <SDMMC_GetCmdResp1>
 8005d9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d9e:	69fb      	ldr	r3, [r7, #28]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3720      	adds	r7, #32
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b088      	sub	sp, #32
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005db6:	2318      	movs	r3, #24
 8005db8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005dba:	2340      	movs	r3, #64	; 0x40
 8005dbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005dc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dc6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005dc8:	f107 0308 	add.w	r3, r7, #8
 8005dcc:	4619      	mov	r1, r3
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f7ff ff0e 	bl	8005bf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dd8:	2118      	movs	r1, #24
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f9da 	bl	8006194 <SDMMC_GetCmdResp1>
 8005de0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005de2:	69fb      	ldr	r3, [r7, #28]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3720      	adds	r7, #32
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b088      	sub	sp, #32
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005dfa:	2319      	movs	r3, #25
 8005dfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005dfe:	2340      	movs	r3, #64	; 0x40
 8005e00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e02:	2300      	movs	r3, #0
 8005e04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e0a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e0c:	f107 0308 	add.w	r3, r7, #8
 8005e10:	4619      	mov	r1, r3
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f7ff feec 	bl	8005bf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e1c:	2119      	movs	r1, #25
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f9b8 	bl	8006194 <SDMMC_GetCmdResp1>
 8005e24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e26:	69fb      	ldr	r3, [r7, #28]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3720      	adds	r7, #32
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b088      	sub	sp, #32
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005e3c:	230c      	movs	r3, #12
 8005e3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e40:	2340      	movs	r3, #64	; 0x40
 8005e42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e44:	2300      	movs	r3, #0
 8005e46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e4c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e4e:	f107 0308 	add.w	r3, r7, #8
 8005e52:	4619      	mov	r1, r3
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f7ff fecb 	bl	8005bf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005e5a:	4a05      	ldr	r2, [pc, #20]	; (8005e70 <SDMMC_CmdStopTransfer+0x40>)
 8005e5c:	210c      	movs	r1, #12
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f998 	bl	8006194 <SDMMC_GetCmdResp1>
 8005e64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e66:	69fb      	ldr	r3, [r7, #28]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3720      	adds	r7, #32
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	05f5e100 	.word	0x05f5e100

08005e74 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b08a      	sub	sp, #40	; 0x28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005e84:	2307      	movs	r3, #7
 8005e86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e88:	2340      	movs	r3, #64	; 0x40
 8005e8a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e94:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e96:	f107 0310 	add.w	r3, r7, #16
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f7ff fea7 	bl	8005bf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ea6:	2107      	movs	r1, #7
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f000 f973 	bl	8006194 <SDMMC_GetCmdResp1>
 8005eae:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3728      	adds	r7, #40	; 0x28
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b088      	sub	sp, #32
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ed2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ed6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ed8:	f107 0308 	add.w	r3, r7, #8
 8005edc:	4619      	mov	r1, r3
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7ff fe86 	bl	8005bf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f92d 	bl	8006144 <SDMMC_GetCmdError>
 8005eea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005eec:	69fb      	ldr	r3, [r7, #28]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3720      	adds	r7, #32
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b088      	sub	sp, #32
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005efe:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005f02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005f04:	2308      	movs	r3, #8
 8005f06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f08:	2340      	movs	r3, #64	; 0x40
 8005f0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f16:	f107 0308 	add.w	r3, r7, #8
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f7ff fe67 	bl	8005bf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 fb16 	bl	8006554 <SDMMC_GetCmdResp7>
 8005f28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f2a:	69fb      	ldr	r3, [r7, #28]
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3720      	adds	r7, #32
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b088      	sub	sp, #32
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005f42:	2337      	movs	r3, #55	; 0x37
 8005f44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f46:	2340      	movs	r3, #64	; 0x40
 8005f48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f52:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f54:	f107 0308 	add.w	r3, r7, #8
 8005f58:	4619      	mov	r1, r3
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7ff fe48 	bl	8005bf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f64:	2137      	movs	r1, #55	; 0x37
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f914 	bl	8006194 <SDMMC_GetCmdResp1>
 8005f6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f6e:	69fb      	ldr	r3, [r7, #28]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3720      	adds	r7, #32
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b088      	sub	sp, #32
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005f8e:	2329      	movs	r3, #41	; 0x29
 8005f90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f92:	2340      	movs	r3, #64	; 0x40
 8005f94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f96:	2300      	movs	r3, #0
 8005f98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005fa0:	f107 0308 	add.w	r3, r7, #8
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7ff fe22 	bl	8005bf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 fa23 	bl	80063f8 <SDMMC_GetCmdResp3>
 8005fb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fb4:	69fb      	ldr	r3, [r7, #28]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3720      	adds	r7, #32
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b088      	sub	sp, #32
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
 8005fc6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005fcc:	2306      	movs	r3, #6
 8005fce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005fd0:	2340      	movs	r3, #64	; 0x40
 8005fd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fdc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005fde:	f107 0308 	add.w	r3, r7, #8
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7ff fe03 	bl	8005bf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8005fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fee:	2106      	movs	r1, #6
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f8cf 	bl	8006194 <SDMMC_GetCmdResp1>
 8005ff6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ff8:	69fb      	ldr	r3, [r7, #28]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3720      	adds	r7, #32
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b088      	sub	sp, #32
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800600a:	2300      	movs	r3, #0
 800600c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800600e:	2333      	movs	r3, #51	; 0x33
 8006010:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006012:	2340      	movs	r3, #64	; 0x40
 8006014:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006016:	2300      	movs	r3, #0
 8006018:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800601a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800601e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006020:	f107 0308 	add.w	r3, r7, #8
 8006024:	4619      	mov	r1, r3
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7ff fde2 	bl	8005bf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800602c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006030:	2133      	movs	r1, #51	; 0x33
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f8ae 	bl	8006194 <SDMMC_GetCmdResp1>
 8006038:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800603a:	69fb      	ldr	r3, [r7, #28]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3720      	adds	r7, #32
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b088      	sub	sp, #32
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800604c:	2300      	movs	r3, #0
 800604e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006050:	2302      	movs	r3, #2
 8006052:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006054:	23c0      	movs	r3, #192	; 0xc0
 8006056:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006058:	2300      	movs	r3, #0
 800605a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800605c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006060:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006062:	f107 0308 	add.w	r3, r7, #8
 8006066:	4619      	mov	r1, r3
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f7ff fdc1 	bl	8005bf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f97c 	bl	800636c <SDMMC_GetCmdResp2>
 8006074:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006076:	69fb      	ldr	r3, [r7, #28]
}
 8006078:	4618      	mov	r0, r3
 800607a:	3720      	adds	r7, #32
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800608e:	2309      	movs	r3, #9
 8006090:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006092:	23c0      	movs	r3, #192	; 0xc0
 8006094:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006096:	2300      	movs	r3, #0
 8006098:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800609a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800609e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060a0:	f107 0308 	add.w	r3, r7, #8
 80060a4:	4619      	mov	r1, r3
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7ff fda2 	bl	8005bf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 f95d 	bl	800636c <SDMMC_GetCmdResp2>
 80060b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060b4:	69fb      	ldr	r3, [r7, #28]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3720      	adds	r7, #32
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b088      	sub	sp, #32
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80060c8:	2300      	movs	r3, #0
 80060ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80060cc:	2303      	movs	r3, #3
 80060ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060d0:	2340      	movs	r3, #64	; 0x40
 80060d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060d4:	2300      	movs	r3, #0
 80060d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060de:	f107 0308 	add.w	r3, r7, #8
 80060e2:	4619      	mov	r1, r3
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f7ff fd83 	bl	8005bf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	2103      	movs	r1, #3
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f9bc 	bl	800646c <SDMMC_GetCmdResp6>
 80060f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060f6:	69fb      	ldr	r3, [r7, #28]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3720      	adds	r7, #32
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b088      	sub	sp, #32
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800610e:	230d      	movs	r3, #13
 8006110:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006112:	2340      	movs	r3, #64	; 0x40
 8006114:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006116:	2300      	movs	r3, #0
 8006118:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800611a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800611e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006120:	f107 0308 	add.w	r3, r7, #8
 8006124:	4619      	mov	r1, r3
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7ff fd62 	bl	8005bf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800612c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006130:	210d      	movs	r1, #13
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f82e 	bl	8006194 <SDMMC_GetCmdResp1>
 8006138:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800613a:	69fb      	ldr	r3, [r7, #28]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3720      	adds	r7, #32
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006144:	b490      	push	{r4, r7}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800614c:	4b0f      	ldr	r3, [pc, #60]	; (800618c <SDMMC_GetCmdError+0x48>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a0f      	ldr	r2, [pc, #60]	; (8006190 <SDMMC_GetCmdError+0x4c>)
 8006152:	fba2 2303 	umull	r2, r3, r2, r3
 8006156:	0a5b      	lsrs	r3, r3, #9
 8006158:	f241 3288 	movw	r2, #5000	; 0x1388
 800615c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006160:	4623      	mov	r3, r4
 8006162:	1e5c      	subs	r4, r3, #1
 8006164:	2b00      	cmp	r3, #0
 8006166:	d102      	bne.n	800616e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006168:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800616c:	e009      	b.n	8006182 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006176:	2b00      	cmp	r3, #0
 8006178:	d0f2      	beq.n	8006160 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	22c5      	movs	r2, #197	; 0xc5
 800617e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bc90      	pop	{r4, r7}
 800618a:	4770      	bx	lr
 800618c:	20000058 	.word	0x20000058
 8006190:	10624dd3 	.word	0x10624dd3

08006194 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006194:	b590      	push	{r4, r7, lr}
 8006196:	b087      	sub	sp, #28
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	460b      	mov	r3, r1
 800619e:	607a      	str	r2, [r7, #4]
 80061a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80061a2:	4b6f      	ldr	r3, [pc, #444]	; (8006360 <SDMMC_GetCmdResp1+0x1cc>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a6f      	ldr	r2, [pc, #444]	; (8006364 <SDMMC_GetCmdResp1+0x1d0>)
 80061a8:	fba2 2303 	umull	r2, r3, r2, r3
 80061ac:	0a5b      	lsrs	r3, r3, #9
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80061b4:	4623      	mov	r3, r4
 80061b6:	1e5c      	subs	r4, r3, #1
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d102      	bne.n	80061c2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80061bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80061c0:	e0c9      	b.n	8006356 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d0f0      	beq.n	80061b4 <SDMMC_GetCmdResp1+0x20>
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1eb      	bne.n	80061b4 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e0:	f003 0304 	and.w	r3, r3, #4
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d004      	beq.n	80061f2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2204      	movs	r2, #4
 80061ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80061ee:	2304      	movs	r3, #4
 80061f0:	e0b1      	b.n	8006356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d004      	beq.n	8006208 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2201      	movs	r2, #1
 8006202:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006204:	2301      	movs	r3, #1
 8006206:	e0a6      	b.n	8006356 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	22c5      	movs	r2, #197	; 0xc5
 800620c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f7ff fd18 	bl	8005c44 <SDIO_GetCommandResponse>
 8006214:	4603      	mov	r3, r0
 8006216:	461a      	mov	r2, r3
 8006218:	7afb      	ldrb	r3, [r7, #11]
 800621a:	4293      	cmp	r3, r2
 800621c:	d001      	beq.n	8006222 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800621e:	2301      	movs	r3, #1
 8006220:	e099      	b.n	8006356 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006222:	2100      	movs	r1, #0
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f7ff fd1a 	bl	8005c5e <SDIO_GetResponse>
 800622a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	4b4e      	ldr	r3, [pc, #312]	; (8006368 <SDMMC_GetCmdResp1+0x1d4>)
 8006230:	4013      	ands	r3, r2
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8006236:	2300      	movs	r3, #0
 8006238:	e08d      	b.n	8006356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	2b00      	cmp	r3, #0
 800623e:	da02      	bge.n	8006246 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006240:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006244:	e087      	b.n	8006356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d001      	beq.n	8006254 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006250:	2340      	movs	r3, #64	; 0x40
 8006252:	e080      	b.n	8006356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800625e:	2380      	movs	r3, #128	; 0x80
 8006260:	e079      	b.n	8006356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d002      	beq.n	8006272 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800626c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006270:	e071      	b.n	8006356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d002      	beq.n	8006282 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800627c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006280:	e069      	b.n	8006356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d002      	beq.n	8006292 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800628c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006290:	e061      	b.n	8006356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d002      	beq.n	80062a2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800629c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062a0:	e059      	b.n	8006356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d002      	beq.n	80062b2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80062ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062b0:	e051      	b.n	8006356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d002      	beq.n	80062c2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80062bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80062c0:	e049      	b.n	8006356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d002      	beq.n	80062d2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80062cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80062d0:	e041      	b.n	8006356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d002      	beq.n	80062e2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80062dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062e0:	e039      	b.n	8006356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d002      	beq.n	80062f2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80062ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062f0:	e031      	b.n	8006356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d002      	beq.n	8006302 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80062fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006300:	e029      	b.n	8006356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d002      	beq.n	8006312 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800630c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006310:	e021      	b.n	8006356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800631c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006320:	e019      	b.n	8006356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d002      	beq.n	8006332 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800632c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006330:	e011      	b.n	8006356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d002      	beq.n	8006342 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800633c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006340:	e009      	b.n	8006356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	f003 0308 	and.w	r3, r3, #8
 8006348:	2b00      	cmp	r3, #0
 800634a:	d002      	beq.n	8006352 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800634c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006350:	e001      	b.n	8006356 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006352:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006356:	4618      	mov	r0, r3
 8006358:	371c      	adds	r7, #28
 800635a:	46bd      	mov	sp, r7
 800635c:	bd90      	pop	{r4, r7, pc}
 800635e:	bf00      	nop
 8006360:	20000058 	.word	0x20000058
 8006364:	10624dd3 	.word	0x10624dd3
 8006368:	fdffe008 	.word	0xfdffe008

0800636c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800636c:	b490      	push	{r4, r7}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006374:	4b1e      	ldr	r3, [pc, #120]	; (80063f0 <SDMMC_GetCmdResp2+0x84>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a1e      	ldr	r2, [pc, #120]	; (80063f4 <SDMMC_GetCmdResp2+0x88>)
 800637a:	fba2 2303 	umull	r2, r3, r2, r3
 800637e:	0a5b      	lsrs	r3, r3, #9
 8006380:	f241 3288 	movw	r2, #5000	; 0x1388
 8006384:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006388:	4623      	mov	r3, r4
 800638a:	1e5c      	subs	r4, r3, #1
 800638c:	2b00      	cmp	r3, #0
 800638e:	d102      	bne.n	8006396 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006390:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006394:	e026      	b.n	80063e4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800639a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d0f0      	beq.n	8006388 <SDMMC_GetCmdResp2+0x1c>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1eb      	bne.n	8006388 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b4:	f003 0304 	and.w	r3, r3, #4
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d004      	beq.n	80063c6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2204      	movs	r2, #4
 80063c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80063c2:	2304      	movs	r3, #4
 80063c4:	e00e      	b.n	80063e4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d004      	beq.n	80063dc <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80063d8:	2301      	movs	r3, #1
 80063da:	e003      	b.n	80063e4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	22c5      	movs	r2, #197	; 0xc5
 80063e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bc90      	pop	{r4, r7}
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	20000058 	.word	0x20000058
 80063f4:	10624dd3 	.word	0x10624dd3

080063f8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80063f8:	b490      	push	{r4, r7}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006400:	4b18      	ldr	r3, [pc, #96]	; (8006464 <SDMMC_GetCmdResp3+0x6c>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a18      	ldr	r2, [pc, #96]	; (8006468 <SDMMC_GetCmdResp3+0x70>)
 8006406:	fba2 2303 	umull	r2, r3, r2, r3
 800640a:	0a5b      	lsrs	r3, r3, #9
 800640c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006410:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006414:	4623      	mov	r3, r4
 8006416:	1e5c      	subs	r4, r3, #1
 8006418:	2b00      	cmp	r3, #0
 800641a:	d102      	bne.n	8006422 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800641c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006420:	e01b      	b.n	800645a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006426:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800642e:	2b00      	cmp	r3, #0
 8006430:	d0f0      	beq.n	8006414 <SDMMC_GetCmdResp3+0x1c>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1eb      	bne.n	8006414 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006440:	f003 0304 	and.w	r3, r3, #4
 8006444:	2b00      	cmp	r3, #0
 8006446:	d004      	beq.n	8006452 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2204      	movs	r2, #4
 800644c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800644e:	2304      	movs	r3, #4
 8006450:	e003      	b.n	800645a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	22c5      	movs	r2, #197	; 0xc5
 8006456:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bc90      	pop	{r4, r7}
 8006462:	4770      	bx	lr
 8006464:	20000058 	.word	0x20000058
 8006468:	10624dd3 	.word	0x10624dd3

0800646c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800646c:	b590      	push	{r4, r7, lr}
 800646e:	b087      	sub	sp, #28
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	460b      	mov	r3, r1
 8006476:	607a      	str	r2, [r7, #4]
 8006478:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800647a:	4b34      	ldr	r3, [pc, #208]	; (800654c <SDMMC_GetCmdResp6+0xe0>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a34      	ldr	r2, [pc, #208]	; (8006550 <SDMMC_GetCmdResp6+0xe4>)
 8006480:	fba2 2303 	umull	r2, r3, r2, r3
 8006484:	0a5b      	lsrs	r3, r3, #9
 8006486:	f241 3288 	movw	r2, #5000	; 0x1388
 800648a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800648e:	4623      	mov	r3, r4
 8006490:	1e5c      	subs	r4, r3, #1
 8006492:	2b00      	cmp	r3, #0
 8006494:	d102      	bne.n	800649c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006496:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800649a:	e052      	b.n	8006542 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d0f0      	beq.n	800648e <SDMMC_GetCmdResp6+0x22>
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1eb      	bne.n	800648e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ba:	f003 0304 	and.w	r3, r3, #4
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d004      	beq.n	80064cc <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2204      	movs	r2, #4
 80064c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80064c8:	2304      	movs	r3, #4
 80064ca:	e03a      	b.n	8006542 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d004      	beq.n	80064e2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2201      	movs	r2, #1
 80064dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80064de:	2301      	movs	r3, #1
 80064e0:	e02f      	b.n	8006542 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	f7ff fbae 	bl	8005c44 <SDIO_GetCommandResponse>
 80064e8:	4603      	mov	r3, r0
 80064ea:	461a      	mov	r2, r3
 80064ec:	7afb      	ldrb	r3, [r7, #11]
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d001      	beq.n	80064f6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e025      	b.n	8006542 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	22c5      	movs	r2, #197	; 0xc5
 80064fa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80064fc:	2100      	movs	r1, #0
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f7ff fbad 	bl	8005c5e <SDIO_GetResponse>
 8006504:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d106      	bne.n	800651e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	0c1b      	lsrs	r3, r3, #16
 8006514:	b29a      	uxth	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800651a:	2300      	movs	r3, #0
 800651c:	e011      	b.n	8006542 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006528:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800652c:	e009      	b.n	8006542 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006538:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800653c:	e001      	b.n	8006542 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800653e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006542:	4618      	mov	r0, r3
 8006544:	371c      	adds	r7, #28
 8006546:	46bd      	mov	sp, r7
 8006548:	bd90      	pop	{r4, r7, pc}
 800654a:	bf00      	nop
 800654c:	20000058 	.word	0x20000058
 8006550:	10624dd3 	.word	0x10624dd3

08006554 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006554:	b490      	push	{r4, r7}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800655c:	4b21      	ldr	r3, [pc, #132]	; (80065e4 <SDMMC_GetCmdResp7+0x90>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a21      	ldr	r2, [pc, #132]	; (80065e8 <SDMMC_GetCmdResp7+0x94>)
 8006562:	fba2 2303 	umull	r2, r3, r2, r3
 8006566:	0a5b      	lsrs	r3, r3, #9
 8006568:	f241 3288 	movw	r2, #5000	; 0x1388
 800656c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006570:	4623      	mov	r3, r4
 8006572:	1e5c      	subs	r4, r3, #1
 8006574:	2b00      	cmp	r3, #0
 8006576:	d102      	bne.n	800657e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006578:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800657c:	e02c      	b.n	80065d8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006582:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800658a:	2b00      	cmp	r3, #0
 800658c:	d0f0      	beq.n	8006570 <SDMMC_GetCmdResp7+0x1c>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1eb      	bne.n	8006570 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800659c:	f003 0304 	and.w	r3, r3, #4
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d004      	beq.n	80065ae <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2204      	movs	r2, #4
 80065a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80065aa:	2304      	movs	r3, #4
 80065ac:	e014      	b.n	80065d8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d004      	beq.n	80065c4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e009      	b.n	80065d8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2240      	movs	r2, #64	; 0x40
 80065d4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80065d6:	2300      	movs	r3, #0
  
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bc90      	pop	{r4, r7}
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	20000058 	.word	0x20000058
 80065e8:	10624dd3 	.word	0x10624dd3

080065ec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	4603      	mov	r3, r0
 80065f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80065f6:	79fb      	ldrb	r3, [r7, #7]
 80065f8:	4a08      	ldr	r2, [pc, #32]	; (800661c <disk_status+0x30>)
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	4413      	add	r3, r2
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	79fa      	ldrb	r2, [r7, #7]
 8006604:	4905      	ldr	r1, [pc, #20]	; (800661c <disk_status+0x30>)
 8006606:	440a      	add	r2, r1
 8006608:	7a12      	ldrb	r2, [r2, #8]
 800660a:	4610      	mov	r0, r2
 800660c:	4798      	blx	r3
 800660e:	4603      	mov	r3, r0
 8006610:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006612:	7bfb      	ldrb	r3, [r7, #15]
}
 8006614:	4618      	mov	r0, r3
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	20000250 	.word	0x20000250

08006620 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	4603      	mov	r3, r0
 8006628:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800662a:	2300      	movs	r3, #0
 800662c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800662e:	79fb      	ldrb	r3, [r7, #7]
 8006630:	4a0d      	ldr	r2, [pc, #52]	; (8006668 <disk_initialize+0x48>)
 8006632:	5cd3      	ldrb	r3, [r2, r3]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d111      	bne.n	800665c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006638:	79fb      	ldrb	r3, [r7, #7]
 800663a:	4a0b      	ldr	r2, [pc, #44]	; (8006668 <disk_initialize+0x48>)
 800663c:	2101      	movs	r1, #1
 800663e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006640:	79fb      	ldrb	r3, [r7, #7]
 8006642:	4a09      	ldr	r2, [pc, #36]	; (8006668 <disk_initialize+0x48>)
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	4413      	add	r3, r2
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	79fa      	ldrb	r2, [r7, #7]
 800664e:	4906      	ldr	r1, [pc, #24]	; (8006668 <disk_initialize+0x48>)
 8006650:	440a      	add	r2, r1
 8006652:	7a12      	ldrb	r2, [r2, #8]
 8006654:	4610      	mov	r0, r2
 8006656:	4798      	blx	r3
 8006658:	4603      	mov	r3, r0
 800665a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800665c:	7bfb      	ldrb	r3, [r7, #15]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	20000250 	.word	0x20000250

0800666c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800666c:	b590      	push	{r4, r7, lr}
 800666e:	b087      	sub	sp, #28
 8006670:	af00      	add	r7, sp, #0
 8006672:	60b9      	str	r1, [r7, #8]
 8006674:	607a      	str	r2, [r7, #4]
 8006676:	603b      	str	r3, [r7, #0]
 8006678:	4603      	mov	r3, r0
 800667a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800667c:	7bfb      	ldrb	r3, [r7, #15]
 800667e:	4a0a      	ldr	r2, [pc, #40]	; (80066a8 <disk_read+0x3c>)
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	689c      	ldr	r4, [r3, #8]
 8006688:	7bfb      	ldrb	r3, [r7, #15]
 800668a:	4a07      	ldr	r2, [pc, #28]	; (80066a8 <disk_read+0x3c>)
 800668c:	4413      	add	r3, r2
 800668e:	7a18      	ldrb	r0, [r3, #8]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	68b9      	ldr	r1, [r7, #8]
 8006696:	47a0      	blx	r4
 8006698:	4603      	mov	r3, r0
 800669a:	75fb      	strb	r3, [r7, #23]
  return res;
 800669c:	7dfb      	ldrb	r3, [r7, #23]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	371c      	adds	r7, #28
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd90      	pop	{r4, r7, pc}
 80066a6:	bf00      	nop
 80066a8:	20000250 	.word	0x20000250

080066ac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80066ac:	b590      	push	{r4, r7, lr}
 80066ae:	b087      	sub	sp, #28
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60b9      	str	r1, [r7, #8]
 80066b4:	607a      	str	r2, [r7, #4]
 80066b6:	603b      	str	r3, [r7, #0]
 80066b8:	4603      	mov	r3, r0
 80066ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	4a0a      	ldr	r2, [pc, #40]	; (80066e8 <disk_write+0x3c>)
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4413      	add	r3, r2
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	68dc      	ldr	r4, [r3, #12]
 80066c8:	7bfb      	ldrb	r3, [r7, #15]
 80066ca:	4a07      	ldr	r2, [pc, #28]	; (80066e8 <disk_write+0x3c>)
 80066cc:	4413      	add	r3, r2
 80066ce:	7a18      	ldrb	r0, [r3, #8]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	68b9      	ldr	r1, [r7, #8]
 80066d6:	47a0      	blx	r4
 80066d8:	4603      	mov	r3, r0
 80066da:	75fb      	strb	r3, [r7, #23]
  return res;
 80066dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	371c      	adds	r7, #28
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd90      	pop	{r4, r7, pc}
 80066e6:	bf00      	nop
 80066e8:	20000250 	.word	0x20000250

080066ec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	4603      	mov	r3, r0
 80066f4:	603a      	str	r2, [r7, #0]
 80066f6:	71fb      	strb	r3, [r7, #7]
 80066f8:	460b      	mov	r3, r1
 80066fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80066fc:	79fb      	ldrb	r3, [r7, #7]
 80066fe:	4a09      	ldr	r2, [pc, #36]	; (8006724 <disk_ioctl+0x38>)
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	79fa      	ldrb	r2, [r7, #7]
 800670a:	4906      	ldr	r1, [pc, #24]	; (8006724 <disk_ioctl+0x38>)
 800670c:	440a      	add	r2, r1
 800670e:	7a10      	ldrb	r0, [r2, #8]
 8006710:	79b9      	ldrb	r1, [r7, #6]
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	4798      	blx	r3
 8006716:	4603      	mov	r3, r0
 8006718:	73fb      	strb	r3, [r7, #15]
  return res;
 800671a:	7bfb      	ldrb	r3, [r7, #15]
}
 800671c:	4618      	mov	r0, r3
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	20000250 	.word	0x20000250

08006728 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	3301      	adds	r3, #1
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006738:	89fb      	ldrh	r3, [r7, #14]
 800673a:	021b      	lsls	r3, r3, #8
 800673c:	b21a      	sxth	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	b21b      	sxth	r3, r3
 8006744:	4313      	orrs	r3, r2
 8006746:	b21b      	sxth	r3, r3
 8006748:	81fb      	strh	r3, [r7, #14]
	return rv;
 800674a:	89fb      	ldrh	r3, [r7, #14]
}
 800674c:	4618      	mov	r0, r3
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	3303      	adds	r3, #3
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	021b      	lsls	r3, r3, #8
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	3202      	adds	r2, #2
 8006770:	7812      	ldrb	r2, [r2, #0]
 8006772:	4313      	orrs	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	021b      	lsls	r3, r3, #8
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	3201      	adds	r2, #1
 800677e:	7812      	ldrb	r2, [r2, #0]
 8006780:	4313      	orrs	r3, r2
 8006782:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	021b      	lsls	r3, r3, #8
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	7812      	ldrb	r2, [r2, #0]
 800678c:	4313      	orrs	r3, r2
 800678e:	60fb      	str	r3, [r7, #12]
	return rv;
 8006790:	68fb      	ldr	r3, [r7, #12]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3714      	adds	r7, #20
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800679e:	b480      	push	{r7}
 80067a0:	b083      	sub	sp, #12
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
 80067a6:	460b      	mov	r3, r1
 80067a8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	1c5a      	adds	r2, r3, #1
 80067ae:	607a      	str	r2, [r7, #4]
 80067b0:	887a      	ldrh	r2, [r7, #2]
 80067b2:	b2d2      	uxtb	r2, r2
 80067b4:	701a      	strb	r2, [r3, #0]
 80067b6:	887b      	ldrh	r3, [r7, #2]
 80067b8:	0a1b      	lsrs	r3, r3, #8
 80067ba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	1c5a      	adds	r2, r3, #1
 80067c0:	607a      	str	r2, [r7, #4]
 80067c2:	887a      	ldrh	r2, [r7, #2]
 80067c4:	b2d2      	uxtb	r2, r2
 80067c6:	701a      	strb	r2, [r3, #0]
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	607a      	str	r2, [r7, #4]
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	b2d2      	uxtb	r2, r2
 80067e8:	701a      	strb	r2, [r3, #0]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	0a1b      	lsrs	r3, r3, #8
 80067ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	1c5a      	adds	r2, r3, #1
 80067f4:	607a      	str	r2, [r7, #4]
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	b2d2      	uxtb	r2, r2
 80067fa:	701a      	strb	r2, [r3, #0]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	0a1b      	lsrs	r3, r3, #8
 8006800:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	1c5a      	adds	r2, r3, #1
 8006806:	607a      	str	r2, [r7, #4]
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	b2d2      	uxtb	r2, r2
 800680c:	701a      	strb	r2, [r3, #0]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	0a1b      	lsrs	r3, r3, #8
 8006812:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	1c5a      	adds	r2, r3, #1
 8006818:	607a      	str	r2, [r7, #4]
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	b2d2      	uxtb	r2, r2
 800681e:	701a      	strb	r2, [r3, #0]
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800682c:	b480      	push	{r7}
 800682e:	b087      	sub	sp, #28
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00d      	beq.n	8006862 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	1c53      	adds	r3, r2, #1
 800684a:	613b      	str	r3, [r7, #16]
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	1c59      	adds	r1, r3, #1
 8006850:	6179      	str	r1, [r7, #20]
 8006852:	7812      	ldrb	r2, [r2, #0]
 8006854:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	3b01      	subs	r3, #1
 800685a:	607b      	str	r3, [r7, #4]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1f1      	bne.n	8006846 <mem_cpy+0x1a>
	}
}
 8006862:	bf00      	nop
 8006864:	371c      	adds	r7, #28
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800686e:	b480      	push	{r7}
 8006870:	b087      	sub	sp, #28
 8006872:	af00      	add	r7, sp, #0
 8006874:	60f8      	str	r0, [r7, #12]
 8006876:	60b9      	str	r1, [r7, #8]
 8006878:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	1c5a      	adds	r2, r3, #1
 8006882:	617a      	str	r2, [r7, #20]
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	b2d2      	uxtb	r2, r2
 8006888:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	3b01      	subs	r3, #1
 800688e:	607b      	str	r3, [r7, #4]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1f3      	bne.n	800687e <mem_set+0x10>
}
 8006896:	bf00      	nop
 8006898:	371c      	adds	r7, #28
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80068a2:	b480      	push	{r7}
 80068a4:	b089      	sub	sp, #36	; 0x24
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	60f8      	str	r0, [r7, #12]
 80068aa:	60b9      	str	r1, [r7, #8]
 80068ac:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	61fb      	str	r3, [r7, #28]
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80068b6:	2300      	movs	r3, #0
 80068b8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	1c5a      	adds	r2, r3, #1
 80068be:	61fa      	str	r2, [r7, #28]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	4619      	mov	r1, r3
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	1c5a      	adds	r2, r3, #1
 80068c8:	61ba      	str	r2, [r7, #24]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	1acb      	subs	r3, r1, r3
 80068ce:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	3b01      	subs	r3, #1
 80068d4:	607b      	str	r3, [r7, #4]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d002      	beq.n	80068e2 <mem_cmp+0x40>
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d0eb      	beq.n	80068ba <mem_cmp+0x18>

	return r;
 80068e2:	697b      	ldr	r3, [r7, #20]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3724      	adds	r7, #36	; 0x24
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80068fa:	e002      	b.n	8006902 <chk_chr+0x12>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	3301      	adds	r3, #1
 8006900:	607b      	str	r3, [r7, #4]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d005      	beq.n	8006916 <chk_chr+0x26>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	461a      	mov	r2, r3
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	4293      	cmp	r3, r2
 8006914:	d1f2      	bne.n	80068fc <chk_chr+0xc>
	return *str;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	781b      	ldrb	r3, [r3, #0]
}
 800691a:	4618      	mov	r0, r3
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr

08006926 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b086      	sub	sp, #24
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	78db      	ldrb	r3, [r3, #3]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d034      	beq.n	80069a4 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693e:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	7858      	ldrb	r0, [r3, #1]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800694a:	2301      	movs	r3, #1
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	f7ff fead 	bl	80066ac <disk_write>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d002      	beq.n	800695e <sync_window+0x38>
			res = FR_DISK_ERR;
 8006958:	2301      	movs	r3, #1
 800695a:	73fb      	strb	r3, [r7, #15]
 800695c:	e022      	b.n	80069a4 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a1b      	ldr	r3, [r3, #32]
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	1ad2      	subs	r2, r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	429a      	cmp	r2, r3
 8006972:	d217      	bcs.n	80069a4 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	789b      	ldrb	r3, [r3, #2]
 8006978:	613b      	str	r3, [r7, #16]
 800697a:	e010      	b.n	800699e <sync_window+0x78>
					wsect += fs->fsize;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	4413      	add	r3, r2
 8006984:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	7858      	ldrb	r0, [r3, #1]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006990:	2301      	movs	r3, #1
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	f7ff fe8a 	bl	80066ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	3b01      	subs	r3, #1
 800699c:	613b      	str	r3, [r7, #16]
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d8eb      	bhi.n	800697c <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3718      	adds	r7, #24
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b084      	sub	sp, #16
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80069b8:	2300      	movs	r3, #0
 80069ba:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d01b      	beq.n	80069fe <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7ff ffad 	bl	8006926 <sync_window>
 80069cc:	4603      	mov	r3, r0
 80069ce:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d113      	bne.n	80069fe <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	7858      	ldrb	r0, [r3, #1]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80069e0:	2301      	movs	r3, #1
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	f7ff fe42 	bl	800666c <disk_read>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d004      	beq.n	80069f8 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80069ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069f2:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	683a      	ldr	r2, [r7, #0]
 80069fc:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80069fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7ff ff88 	bl	8006926 <sync_window>
 8006a16:	4603      	mov	r3, r0
 8006a18:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006a1a:	7bfb      	ldrb	r3, [r7, #15]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d158      	bne.n	8006ad2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	2b03      	cmp	r3, #3
 8006a26:	d148      	bne.n	8006aba <sync_fs+0xb2>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	791b      	ldrb	r3, [r3, #4]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d144      	bne.n	8006aba <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	3330      	adds	r3, #48	; 0x30
 8006a34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a38:	2100      	movs	r1, #0
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7ff ff17 	bl	800686e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	3330      	adds	r3, #48	; 0x30
 8006a44:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006a48:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7ff fea6 	bl	800679e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	3330      	adds	r3, #48	; 0x30
 8006a56:	4921      	ldr	r1, [pc, #132]	; (8006adc <sync_fs+0xd4>)
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7ff febb 	bl	80067d4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	3330      	adds	r3, #48	; 0x30
 8006a62:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006a66:	491e      	ldr	r1, [pc, #120]	; (8006ae0 <sync_fs+0xd8>)
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7ff feb3 	bl	80067d4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	3330      	adds	r3, #48	; 0x30
 8006a72:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	4610      	mov	r0, r2
 8006a7e:	f7ff fea9 	bl	80067d4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	3330      	adds	r3, #48	; 0x30
 8006a86:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	4619      	mov	r1, r3
 8006a90:	4610      	mov	r0, r2
 8006a92:	f7ff fe9f 	bl	80067d4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	1c5a      	adds	r2, r3, #1
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	7858      	ldrb	r0, [r3, #1]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aae:	2301      	movs	r3, #1
 8006ab0:	f7ff fdfc 	bl	80066ac <disk_write>
			fs->fsi_flag = 0;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	785b      	ldrb	r3, [r3, #1]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7ff fe12 	bl	80066ec <disk_ioctl>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d001      	beq.n	8006ad2 <sync_fs+0xca>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	41615252 	.word	0x41615252
 8006ae0:	61417272 	.word	0x61417272

08006ae4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	3b02      	subs	r3, #2
 8006af2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	695b      	ldr	r3, [r3, #20]
 8006af8:	3b02      	subs	r3, #2
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d301      	bcc.n	8006b04 <clust2sect+0x20>
 8006b00:	2300      	movs	r3, #0
 8006b02:	e008      	b.n	8006b16 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	895b      	ldrh	r3, [r3, #10]
 8006b08:	461a      	mov	r2, r3
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	fb03 f202 	mul.w	r2, r3, r2
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b14:	4413      	add	r3, r2
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b086      	sub	sp, #24
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
 8006b2a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d904      	bls.n	8006b42 <get_fat+0x20>
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	695b      	ldr	r3, [r3, #20]
 8006b3c:	683a      	ldr	r2, [r7, #0]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d302      	bcc.n	8006b48 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006b42:	2301      	movs	r3, #1
 8006b44:	617b      	str	r3, [r7, #20]
 8006b46:	e08c      	b.n	8006c62 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006b48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b4c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d045      	beq.n	8006be2 <get_fat+0xc0>
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d05d      	beq.n	8006c16 <get_fat+0xf4>
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d177      	bne.n	8006c4e <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	60fb      	str	r3, [r7, #12]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	085b      	lsrs	r3, r3, #1
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	4413      	add	r3, r2
 8006b6a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	6a1a      	ldr	r2, [r3, #32]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	0a5b      	lsrs	r3, r3, #9
 8006b74:	4413      	add	r3, r2
 8006b76:	4619      	mov	r1, r3
 8006b78:	6938      	ldr	r0, [r7, #16]
 8006b7a:	f7ff ff18 	bl	80069ae <move_window>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d167      	bne.n	8006c54 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	1c5a      	adds	r2, r3, #1
 8006b88:	60fa      	str	r2, [r7, #12]
 8006b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	4413      	add	r3, r2
 8006b92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b96:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	6a1a      	ldr	r2, [r3, #32]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	0a5b      	lsrs	r3, r3, #9
 8006ba0:	4413      	add	r3, r2
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	6938      	ldr	r0, [r7, #16]
 8006ba6:	f7ff ff02 	bl	80069ae <move_window>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d153      	bne.n	8006c58 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006bbe:	021b      	lsls	r3, r3, #8
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d002      	beq.n	8006bd8 <get_fat+0xb6>
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	091b      	lsrs	r3, r3, #4
 8006bd6:	e002      	b.n	8006bde <get_fat+0xbc>
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bde:	617b      	str	r3, [r7, #20]
			break;
 8006be0:	e03f      	b.n	8006c62 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	6a1a      	ldr	r2, [r3, #32]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	0a1b      	lsrs	r3, r3, #8
 8006bea:	4413      	add	r3, r2
 8006bec:	4619      	mov	r1, r3
 8006bee:	6938      	ldr	r0, [r7, #16]
 8006bf0:	f7ff fedd 	bl	80069ae <move_window>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d130      	bne.n	8006c5c <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	005b      	lsls	r3, r3, #1
 8006c04:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006c08:	4413      	add	r3, r2
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7ff fd8c 	bl	8006728 <ld_word>
 8006c10:	4603      	mov	r3, r0
 8006c12:	617b      	str	r3, [r7, #20]
			break;
 8006c14:	e025      	b.n	8006c62 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	6a1a      	ldr	r2, [r3, #32]
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	09db      	lsrs	r3, r3, #7
 8006c1e:	4413      	add	r3, r2
 8006c20:	4619      	mov	r1, r3
 8006c22:	6938      	ldr	r0, [r7, #16]
 8006c24:	f7ff fec3 	bl	80069ae <move_window>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d118      	bne.n	8006c60 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006c3c:	4413      	add	r3, r2
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7ff fd8a 	bl	8006758 <ld_dword>
 8006c44:	4603      	mov	r3, r0
 8006c46:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006c4a:	617b      	str	r3, [r7, #20]
			break;
 8006c4c:	e009      	b.n	8006c62 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006c4e:	2301      	movs	r3, #1
 8006c50:	617b      	str	r3, [r7, #20]
 8006c52:	e006      	b.n	8006c62 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c54:	bf00      	nop
 8006c56:	e004      	b.n	8006c62 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c58:	bf00      	nop
 8006c5a:	e002      	b.n	8006c62 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006c5c:	bf00      	nop
 8006c5e:	e000      	b.n	8006c62 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006c60:	bf00      	nop
		}
	}

	return val;
 8006c62:	697b      	ldr	r3, [r7, #20]
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3718      	adds	r7, #24
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006c6c:	b590      	push	{r4, r7, lr}
 8006c6e:	b089      	sub	sp, #36	; 0x24
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006c78:	2302      	movs	r3, #2
 8006c7a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	f240 80d6 	bls.w	8006e30 <put_fat+0x1c4>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	695b      	ldr	r3, [r3, #20]
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	f080 80d0 	bcs.w	8006e30 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d073      	beq.n	8006d80 <put_fat+0x114>
 8006c98:	2b03      	cmp	r3, #3
 8006c9a:	f000 8091 	beq.w	8006dc0 <put_fat+0x154>
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	f040 80c6 	bne.w	8006e30 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	61bb      	str	r3, [r7, #24]
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	085b      	lsrs	r3, r3, #1
 8006cac:	69ba      	ldr	r2, [r7, #24]
 8006cae:	4413      	add	r3, r2
 8006cb0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6a1a      	ldr	r2, [r3, #32]
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	0a5b      	lsrs	r3, r3, #9
 8006cba:	4413      	add	r3, r2
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f7ff fe75 	bl	80069ae <move_window>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006cc8:	7ffb      	ldrb	r3, [r7, #31]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f040 80a9 	bne.w	8006e22 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	1c59      	adds	r1, r3, #1
 8006cda:	61b9      	str	r1, [r7, #24]
 8006cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ce0:	4413      	add	r3, r2
 8006ce2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00d      	beq.n	8006d0a <put_fat+0x9e>
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	b25b      	sxtb	r3, r3
 8006cf4:	f003 030f 	and.w	r3, r3, #15
 8006cf8:	b25a      	sxtb	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	011b      	lsls	r3, r3, #4
 8006d00:	b25b      	sxtb	r3, r3
 8006d02:	4313      	orrs	r3, r2
 8006d04:	b25b      	sxtb	r3, r3
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	e001      	b.n	8006d0e <put_fat+0xa2>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2201      	movs	r2, #1
 8006d16:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6a1a      	ldr	r2, [r3, #32]
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	0a5b      	lsrs	r3, r3, #9
 8006d20:	4413      	add	r3, r2
 8006d22:	4619      	mov	r1, r3
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f7ff fe42 	bl	80069ae <move_window>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d2e:	7ffb      	ldrb	r3, [r7, #31]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d178      	bne.n	8006e26 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d40:	4413      	add	r3, r2
 8006d42:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d003      	beq.n	8006d56 <put_fat+0xea>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	091b      	lsrs	r3, r3, #4
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	e00e      	b.n	8006d74 <put_fat+0x108>
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	b25b      	sxtb	r3, r3
 8006d5c:	f023 030f 	bic.w	r3, r3, #15
 8006d60:	b25a      	sxtb	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	0a1b      	lsrs	r3, r3, #8
 8006d66:	b25b      	sxtb	r3, r3
 8006d68:	f003 030f 	and.w	r3, r3, #15
 8006d6c:	b25b      	sxtb	r3, r3
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	b25b      	sxtb	r3, r3
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	697a      	ldr	r2, [r7, #20]
 8006d76:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	70da      	strb	r2, [r3, #3]
			break;
 8006d7e:	e057      	b.n	8006e30 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6a1a      	ldr	r2, [r3, #32]
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	0a1b      	lsrs	r3, r3, #8
 8006d88:	4413      	add	r3, r2
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f7ff fe0e 	bl	80069ae <move_window>
 8006d92:	4603      	mov	r3, r0
 8006d94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d96:	7ffb      	ldrb	r3, [r7, #31]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d146      	bne.n	8006e2a <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	005b      	lsls	r3, r3, #1
 8006da6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006daa:	4413      	add	r3, r2
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	b292      	uxth	r2, r2
 8006db0:	4611      	mov	r1, r2
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7ff fcf3 	bl	800679e <st_word>
			fs->wflag = 1;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	70da      	strb	r2, [r3, #3]
			break;
 8006dbe:	e037      	b.n	8006e30 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6a1a      	ldr	r2, [r3, #32]
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	09db      	lsrs	r3, r3, #7
 8006dc8:	4413      	add	r3, r2
 8006dca:	4619      	mov	r1, r3
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f7ff fdee 	bl	80069ae <move_window>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006dd6:	7ffb      	ldrb	r3, [r7, #31]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d128      	bne.n	8006e2e <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006df0:	4413      	add	r3, r2
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7ff fcb0 	bl	8006758 <ld_dword>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006dfe:	4323      	orrs	r3, r4
 8006e00:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006e10:	4413      	add	r3, r2
 8006e12:	6879      	ldr	r1, [r7, #4]
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7ff fcdd 	bl	80067d4 <st_dword>
			fs->wflag = 1;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	70da      	strb	r2, [r3, #3]
			break;
 8006e20:	e006      	b.n	8006e30 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006e22:	bf00      	nop
 8006e24:	e004      	b.n	8006e30 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006e26:	bf00      	nop
 8006e28:	e002      	b.n	8006e30 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006e2a:	bf00      	nop
 8006e2c:	e000      	b.n	8006e30 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006e2e:	bf00      	nop
		}
	}
	return res;
 8006e30:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3724      	adds	r7, #36	; 0x24
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd90      	pop	{r4, r7, pc}

08006e3a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b088      	sub	sp, #32
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	60f8      	str	r0, [r7, #12]
 8006e42:	60b9      	str	r1, [r7, #8]
 8006e44:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006e46:	2300      	movs	r3, #0
 8006e48:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d904      	bls.n	8006e60 <remove_chain+0x26>
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d301      	bcc.n	8006e64 <remove_chain+0x2a>
 8006e60:	2302      	movs	r3, #2
 8006e62:	e04b      	b.n	8006efc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00c      	beq.n	8006e84 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006e6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e6e:	6879      	ldr	r1, [r7, #4]
 8006e70:	69b8      	ldr	r0, [r7, #24]
 8006e72:	f7ff fefb 	bl	8006c6c <put_fat>
 8006e76:	4603      	mov	r3, r0
 8006e78:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006e7a:	7ffb      	ldrb	r3, [r7, #31]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d001      	beq.n	8006e84 <remove_chain+0x4a>
 8006e80:	7ffb      	ldrb	r3, [r7, #31]
 8006e82:	e03b      	b.n	8006efc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006e84:	68b9      	ldr	r1, [r7, #8]
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f7ff fe4b 	bl	8006b22 <get_fat>
 8006e8c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d031      	beq.n	8006ef8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d101      	bne.n	8006e9e <remove_chain+0x64>
 8006e9a:	2302      	movs	r3, #2
 8006e9c:	e02e      	b.n	8006efc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ea4:	d101      	bne.n	8006eaa <remove_chain+0x70>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e028      	b.n	8006efc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006eaa:	2200      	movs	r2, #0
 8006eac:	68b9      	ldr	r1, [r7, #8]
 8006eae:	69b8      	ldr	r0, [r7, #24]
 8006eb0:	f7ff fedc 	bl	8006c6c <put_fat>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006eb8:	7ffb      	ldrb	r3, [r7, #31]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <remove_chain+0x88>
 8006ebe:	7ffb      	ldrb	r3, [r7, #31]
 8006ec0:	e01c      	b.n	8006efc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	691a      	ldr	r2, [r3, #16]
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	3b02      	subs	r3, #2
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d20b      	bcs.n	8006ee8 <remove_chain+0xae>
			fs->free_clst++;
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	1c5a      	adds	r2, r3, #1
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	791b      	ldrb	r3, [r3, #4]
 8006ede:	f043 0301 	orr.w	r3, r3, #1
 8006ee2:	b2da      	uxtb	r2, r3
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d3c6      	bcc.n	8006e84 <remove_chain+0x4a>
 8006ef6:	e000      	b.n	8006efa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006ef8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3720      	adds	r7, #32
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b088      	sub	sp, #32
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10d      	bne.n	8006f36 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d004      	beq.n	8006f30 <create_chain+0x2c>
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	695b      	ldr	r3, [r3, #20]
 8006f2a:	69ba      	ldr	r2, [r7, #24]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d31b      	bcc.n	8006f68 <create_chain+0x64>
 8006f30:	2301      	movs	r3, #1
 8006f32:	61bb      	str	r3, [r7, #24]
 8006f34:	e018      	b.n	8006f68 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006f36:	6839      	ldr	r1, [r7, #0]
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f7ff fdf2 	bl	8006b22 <get_fat>
 8006f3e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d801      	bhi.n	8006f4a <create_chain+0x46>
 8006f46:	2301      	movs	r3, #1
 8006f48:	e070      	b.n	800702c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f50:	d101      	bne.n	8006f56 <create_chain+0x52>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	e06a      	b.n	800702c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d201      	bcs.n	8006f64 <create_chain+0x60>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	e063      	b.n	800702c <create_chain+0x128>
		scl = clst;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	69fa      	ldr	r2, [r7, #28]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d307      	bcc.n	8006f8c <create_chain+0x88>
				ncl = 2;
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006f80:	69fa      	ldr	r2, [r7, #28]
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d901      	bls.n	8006f8c <create_chain+0x88>
 8006f88:	2300      	movs	r3, #0
 8006f8a:	e04f      	b.n	800702c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006f8c:	69f9      	ldr	r1, [r7, #28]
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7ff fdc7 	bl	8006b22 <get_fat>
 8006f94:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00e      	beq.n	8006fba <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d003      	beq.n	8006faa <create_chain+0xa6>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fa8:	d101      	bne.n	8006fae <create_chain+0xaa>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	e03e      	b.n	800702c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006fae:	69fa      	ldr	r2, [r7, #28]
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d1da      	bne.n	8006f6c <create_chain+0x68>
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	e038      	b.n	800702c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006fba:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006fbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fc0:	69f9      	ldr	r1, [r7, #28]
 8006fc2:	6938      	ldr	r0, [r7, #16]
 8006fc4:	f7ff fe52 	bl	8006c6c <put_fat>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006fcc:	7dfb      	ldrb	r3, [r7, #23]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d109      	bne.n	8006fe6 <create_chain+0xe2>
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d006      	beq.n	8006fe6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006fd8:	69fa      	ldr	r2, [r7, #28]
 8006fda:	6839      	ldr	r1, [r7, #0]
 8006fdc:	6938      	ldr	r0, [r7, #16]
 8006fde:	f7ff fe45 	bl	8006c6c <put_fat>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006fe6:	7dfb      	ldrb	r3, [r7, #23]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d116      	bne.n	800701a <create_chain+0x116>
		fs->last_clst = ncl;
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	69fa      	ldr	r2, [r7, #28]
 8006ff0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	691a      	ldr	r2, [r3, #16]
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	3b02      	subs	r3, #2
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d804      	bhi.n	800700a <create_chain+0x106>
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	1e5a      	subs	r2, r3, #1
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	791b      	ldrb	r3, [r3, #4]
 800700e:	f043 0301 	orr.w	r3, r3, #1
 8007012:	b2da      	uxtb	r2, r3
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	711a      	strb	r2, [r3, #4]
 8007018:	e007      	b.n	800702a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800701a:	7dfb      	ldrb	r3, [r7, #23]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d102      	bne.n	8007026 <create_chain+0x122>
 8007020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007024:	e000      	b.n	8007028 <create_chain+0x124>
 8007026:	2301      	movs	r3, #1
 8007028:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800702a:	69fb      	ldr	r3, [r7, #28]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3720      	adds	r7, #32
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007034:	b480      	push	{r7}
 8007036:	b087      	sub	sp, #28
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007048:	3304      	adds	r3, #4
 800704a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	0a5b      	lsrs	r3, r3, #9
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	8952      	ldrh	r2, [r2, #10]
 8007054:	fbb3 f3f2 	udiv	r3, r3, r2
 8007058:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	1d1a      	adds	r2, r3, #4
 800705e:	613a      	str	r2, [r7, #16]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <clmt_clust+0x3a>
 800706a:	2300      	movs	r3, #0
 800706c:	e010      	b.n	8007090 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	429a      	cmp	r2, r3
 8007074:	d307      	bcc.n	8007086 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	617b      	str	r3, [r7, #20]
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	3304      	adds	r3, #4
 8007082:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007084:	e7e9      	b.n	800705a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007086:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	4413      	add	r3, r2
}
 8007090:	4618      	mov	r0, r3
 8007092:	371c      	adds	r7, #28
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070b2:	d204      	bcs.n	80070be <dir_sdi+0x22>
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	f003 031f 	and.w	r3, r3, #31
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d001      	beq.n	80070c2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80070be:	2302      	movs	r3, #2
 80070c0:	e063      	b.n	800718a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	683a      	ldr	r2, [r7, #0]
 80070c6:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d106      	bne.n	80070e2 <dir_sdi+0x46>
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d902      	bls.n	80070e2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10c      	bne.n	8007102 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	095b      	lsrs	r3, r3, #5
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	8912      	ldrh	r2, [r2, #8]
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d301      	bcc.n	80070f8 <dir_sdi+0x5c>
 80070f4:	2302      	movs	r3, #2
 80070f6:	e048      	b.n	800718a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	619a      	str	r2, [r3, #24]
 8007100:	e029      	b.n	8007156 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	895b      	ldrh	r3, [r3, #10]
 8007106:	025b      	lsls	r3, r3, #9
 8007108:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800710a:	e019      	b.n	8007140 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6979      	ldr	r1, [r7, #20]
 8007110:	4618      	mov	r0, r3
 8007112:	f7ff fd06 	bl	8006b22 <get_fat>
 8007116:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800711e:	d101      	bne.n	8007124 <dir_sdi+0x88>
 8007120:	2301      	movs	r3, #1
 8007122:	e032      	b.n	800718a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d904      	bls.n	8007134 <dir_sdi+0x98>
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	695b      	ldr	r3, [r3, #20]
 800712e:	697a      	ldr	r2, [r7, #20]
 8007130:	429a      	cmp	r2, r3
 8007132:	d301      	bcc.n	8007138 <dir_sdi+0x9c>
 8007134:	2302      	movs	r3, #2
 8007136:	e028      	b.n	800718a <dir_sdi+0xee>
			ofs -= csz;
 8007138:	683a      	ldr	r2, [r7, #0]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007140:	683a      	ldr	r2, [r7, #0]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	429a      	cmp	r2, r3
 8007146:	d2e1      	bcs.n	800710c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007148:	6979      	ldr	r1, [r7, #20]
 800714a:	6938      	ldr	r0, [r7, #16]
 800714c:	f7ff fcca 	bl	8006ae4 <clust2sect>
 8007150:	4602      	mov	r2, r0
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	697a      	ldr	r2, [r7, #20]
 800715a:	615a      	str	r2, [r3, #20]
	if (!dp->sect) return FR_INT_ERR;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	699b      	ldr	r3, [r3, #24]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d101      	bne.n	8007168 <dir_sdi+0xcc>
 8007164:	2302      	movs	r3, #2
 8007166:	e010      	b.n	800718a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	699a      	ldr	r2, [r3, #24]
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	0a5b      	lsrs	r3, r3, #9
 8007170:	441a      	add	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007182:	441a      	add	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3718      	adds	r7, #24
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b086      	sub	sp, #24
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	3320      	adds	r3, #32
 80071a8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <dir_next+0x28>
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071b8:	d301      	bcc.n	80071be <dir_next+0x2c>
 80071ba:	2304      	movs	r3, #4
 80071bc:	e0aa      	b.n	8007314 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f040 8098 	bne.w	80072fa <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	1c5a      	adds	r2, r3, #1
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	619a      	str	r2, [r3, #24]

		if (!dp->clust) {		/* Static table */
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	695b      	ldr	r3, [r3, #20]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10b      	bne.n	80071f4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	095b      	lsrs	r3, r3, #5
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	8912      	ldrh	r2, [r2, #8]
 80071e4:	4293      	cmp	r3, r2
 80071e6:	f0c0 8088 	bcc.w	80072fa <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	619a      	str	r2, [r3, #24]
 80071f0:	2304      	movs	r3, #4
 80071f2:	e08f      	b.n	8007314 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	0a5b      	lsrs	r3, r3, #9
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	8952      	ldrh	r2, [r2, #10]
 80071fc:	3a01      	subs	r2, #1
 80071fe:	4013      	ands	r3, r2
 8007200:	2b00      	cmp	r3, #0
 8007202:	d17a      	bne.n	80072fa <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	4619      	mov	r1, r3
 800720c:	4610      	mov	r0, r2
 800720e:	f7ff fc88 	bl	8006b22 <get_fat>
 8007212:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d801      	bhi.n	800721e <dir_next+0x8c>
 800721a:	2302      	movs	r3, #2
 800721c:	e07a      	b.n	8007314 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007224:	d101      	bne.n	800722a <dir_next+0x98>
 8007226:	2301      	movs	r3, #1
 8007228:	e074      	b.n	8007314 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	429a      	cmp	r2, r3
 8007232:	d358      	bcc.n	80072e6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d104      	bne.n	8007244 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	619a      	str	r2, [r3, #24]
 8007240:	2304      	movs	r3, #4
 8007242:	e067      	b.n	8007314 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	4619      	mov	r1, r3
 800724c:	4610      	mov	r0, r2
 800724e:	f7ff fe59 	bl	8006f04 <create_chain>
 8007252:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d101      	bne.n	800725e <dir_next+0xcc>
 800725a:	2307      	movs	r3, #7
 800725c:	e05a      	b.n	8007314 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d101      	bne.n	8007268 <dir_next+0xd6>
 8007264:	2302      	movs	r3, #2
 8007266:	e055      	b.n	8007314 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800726e:	d101      	bne.n	8007274 <dir_next+0xe2>
 8007270:	2301      	movs	r3, #1
 8007272:	e04f      	b.n	8007314 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f7ff fb56 	bl	8006926 <sync_window>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <dir_next+0xf2>
 8007280:	2301      	movs	r3, #1
 8007282:	e047      	b.n	8007314 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	3330      	adds	r3, #48	; 0x30
 8007288:	f44f 7200 	mov.w	r2, #512	; 0x200
 800728c:	2100      	movs	r1, #0
 800728e:	4618      	mov	r0, r3
 8007290:	f7ff faed 	bl	800686e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007294:	2300      	movs	r3, #0
 8007296:	613b      	str	r3, [r7, #16]
 8007298:	6979      	ldr	r1, [r7, #20]
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f7ff fc22 	bl	8006ae4 <clust2sect>
 80072a0:	4602      	mov	r2, r0
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80072a6:	e012      	b.n	80072ce <dir_next+0x13c>
						fs->wflag = 1;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2201      	movs	r2, #1
 80072ac:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f7ff fb39 	bl	8006926 <sync_window>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d001      	beq.n	80072be <dir_next+0x12c>
 80072ba:	2301      	movs	r3, #1
 80072bc:	e02a      	b.n	8007314 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	3301      	adds	r3, #1
 80072c2:	613b      	str	r3, [r7, #16]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c8:	1c5a      	adds	r2, r3, #1
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	895b      	ldrh	r3, [r3, #10]
 80072d2:	461a      	mov	r2, r3
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d3e6      	bcc.n	80072a8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	1ad2      	subs	r2, r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	615a      	str	r2, [r3, #20]
				dp->sect = clust2sect(fs, clst);
 80072ec:	6979      	ldr	r1, [r7, #20]
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f7ff fbf8 	bl	8006ae4 <clust2sect>
 80072f4:	4602      	mov	r2, r0
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800730c:	441a      	add	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3718      	adds	r7, #24
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b086      	sub	sp, #24
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800732c:	2100      	movs	r1, #0
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7ff feb4 	bl	800709c <dir_sdi>
 8007334:	4603      	mov	r3, r0
 8007336:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007338:	7dfb      	ldrb	r3, [r7, #23]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d12b      	bne.n	8007396 <dir_alloc+0x7a>
		n = 0;
 800733e:	2300      	movs	r3, #0
 8007340:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	4619      	mov	r1, r3
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f7ff fb30 	bl	80069ae <move_window>
 800734e:	4603      	mov	r3, r0
 8007350:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007352:	7dfb      	ldrb	r3, [r7, #23]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d11d      	bne.n	8007394 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	69db      	ldr	r3, [r3, #28]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	2be5      	cmp	r3, #229	; 0xe5
 8007360:	d004      	beq.n	800736c <dir_alloc+0x50>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	69db      	ldr	r3, [r3, #28]
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d107      	bne.n	800737c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	3301      	adds	r3, #1
 8007370:	613b      	str	r3, [r7, #16]
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	429a      	cmp	r2, r3
 8007378:	d102      	bne.n	8007380 <dir_alloc+0x64>
 800737a:	e00c      	b.n	8007396 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800737c:	2300      	movs	r3, #0
 800737e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007380:	2101      	movs	r1, #1
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f7ff ff05 	bl	8007192 <dir_next>
 8007388:	4603      	mov	r3, r0
 800738a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800738c:	7dfb      	ldrb	r3, [r7, #23]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d0d7      	beq.n	8007342 <dir_alloc+0x26>
 8007392:	e000      	b.n	8007396 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007394:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007396:	7dfb      	ldrb	r3, [r7, #23]
 8007398:	2b04      	cmp	r3, #4
 800739a:	d101      	bne.n	80073a0 <dir_alloc+0x84>
 800739c:	2307      	movs	r3, #7
 800739e:	75fb      	strb	r3, [r7, #23]
	return res;
 80073a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3718      	adds	r7, #24
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b084      	sub	sp, #16
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
 80073b2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	331a      	adds	r3, #26
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7ff f9b5 	bl	8006728 <ld_word>
 80073be:	4603      	mov	r3, r0
 80073c0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	2b03      	cmp	r3, #3
 80073c8:	d109      	bne.n	80073de <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	3314      	adds	r3, #20
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7ff f9aa 	bl	8006728 <ld_word>
 80073d4:	4603      	mov	r3, r0
 80073d6:	041b      	lsls	r3, r3, #16
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	4313      	orrs	r3, r2
 80073dc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80073de:	68fb      	ldr	r3, [r7, #12]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	331a      	adds	r3, #26
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	b292      	uxth	r2, r2
 80073fc:	4611      	mov	r1, r2
 80073fe:	4618      	mov	r0, r3
 8007400:	f7ff f9cd 	bl	800679e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	2b03      	cmp	r3, #3
 800740a:	d109      	bne.n	8007420 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	f103 0214 	add.w	r2, r3, #20
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	0c1b      	lsrs	r3, r3, #16
 8007416:	b29b      	uxth	r3, r3
 8007418:	4619      	mov	r1, r3
 800741a:	4610      	mov	r0, r2
 800741c:	f7ff f9bf 	bl	800679e <st_word>
	}
}
 8007420:	bf00      	nop
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b086      	sub	sp, #24
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007436:	2100      	movs	r1, #0
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f7ff fe2f 	bl	800709c <dir_sdi>
 800743e:	4603      	mov	r3, r0
 8007440:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007442:	7dfb      	ldrb	r3, [r7, #23]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d001      	beq.n	800744c <dir_find+0x24>
 8007448:	7dfb      	ldrb	r3, [r7, #23]
 800744a:	e03e      	b.n	80074ca <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	4619      	mov	r1, r3
 8007452:	6938      	ldr	r0, [r7, #16]
 8007454:	f7ff faab 	bl	80069ae <move_window>
 8007458:	4603      	mov	r3, r0
 800745a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800745c:	7dfb      	ldrb	r3, [r7, #23]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d12f      	bne.n	80074c2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800746a:	7bfb      	ldrb	r3, [r7, #15]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d102      	bne.n	8007476 <dir_find+0x4e>
 8007470:	2304      	movs	r3, #4
 8007472:	75fb      	strb	r3, [r7, #23]
 8007474:	e028      	b.n	80074c8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	69db      	ldr	r3, [r3, #28]
 800747a:	330b      	adds	r3, #11
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007482:	b2da      	uxtb	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	69db      	ldr	r3, [r3, #28]
 800748c:	330b      	adds	r3, #11
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	f003 0308 	and.w	r3, r3, #8
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10a      	bne.n	80074ae <dir_find+0x86>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	69d8      	ldr	r0, [r3, #28]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	3320      	adds	r3, #32
 80074a0:	220b      	movs	r2, #11
 80074a2:	4619      	mov	r1, r3
 80074a4:	f7ff f9fd 	bl	80068a2 <mem_cmp>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00b      	beq.n	80074c6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80074ae:	2100      	movs	r1, #0
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f7ff fe6e 	bl	8007192 <dir_next>
 80074b6:	4603      	mov	r3, r0
 80074b8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80074ba:	7dfb      	ldrb	r3, [r7, #23]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d0c5      	beq.n	800744c <dir_find+0x24>
 80074c0:	e002      	b.n	80074c8 <dir_find+0xa0>
		if (res != FR_OK) break;
 80074c2:	bf00      	nop
 80074c4:	e000      	b.n	80074c8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80074c6:	bf00      	nop

	return res;
 80074c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3718      	adds	r7, #24
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b084      	sub	sp, #16
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80074e0:	2101      	movs	r1, #1
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7ff ff1a 	bl	800731c <dir_alloc>
 80074e8:	4603      	mov	r3, r0
 80074ea:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d11c      	bne.n	800752c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	699b      	ldr	r3, [r3, #24]
 80074f6:	4619      	mov	r1, r3
 80074f8:	68b8      	ldr	r0, [r7, #8]
 80074fa:	f7ff fa58 	bl	80069ae <move_window>
 80074fe:	4603      	mov	r3, r0
 8007500:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007502:	7bfb      	ldrb	r3, [r7, #15]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d111      	bne.n	800752c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	69db      	ldr	r3, [r3, #28]
 800750c:	2220      	movs	r2, #32
 800750e:	2100      	movs	r1, #0
 8007510:	4618      	mov	r0, r3
 8007512:	f7ff f9ac 	bl	800686e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	69d8      	ldr	r0, [r3, #28]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	3320      	adds	r3, #32
 800751e:	220b      	movs	r2, #11
 8007520:	4619      	mov	r1, r3
 8007522:	f7ff f983 	bl	800682c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	2201      	movs	r2, #1
 800752a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800752c:	7bfb      	ldrb	r3, [r7, #15]
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b086      	sub	sp, #24
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
 800753e:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	2200      	movs	r2, #0
 8007544:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d04e      	beq.n	80075ec <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800754e:	2300      	movs	r3, #0
 8007550:	613b      	str	r3, [r7, #16]
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8007556:	e021      	b.n	800759c <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	69da      	ldr	r2, [r3, #28]
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	1c59      	adds	r1, r3, #1
 8007560:	6179      	str	r1, [r7, #20]
 8007562:	4413      	add	r3, r2
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8007568:	7bfb      	ldrb	r3, [r7, #15]
 800756a:	2b20      	cmp	r3, #32
 800756c:	d100      	bne.n	8007570 <get_fileinfo+0x3a>
 800756e:	e015      	b.n	800759c <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007570:	7bfb      	ldrb	r3, [r7, #15]
 8007572:	2b05      	cmp	r3, #5
 8007574:	d101      	bne.n	800757a <get_fileinfo+0x44>
 8007576:	23e5      	movs	r3, #229	; 0xe5
 8007578:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	2b09      	cmp	r3, #9
 800757e:	d106      	bne.n	800758e <get_fileinfo+0x58>
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	1c5a      	adds	r2, r3, #1
 8007584:	613a      	str	r2, [r7, #16]
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	4413      	add	r3, r2
 800758a:	222e      	movs	r2, #46	; 0x2e
 800758c:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	1c5a      	adds	r2, r3, #1
 8007592:	613a      	str	r2, [r7, #16]
 8007594:	683a      	ldr	r2, [r7, #0]
 8007596:	4413      	add	r3, r2
 8007598:	7bfa      	ldrb	r2, [r7, #15]
 800759a:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	2b0a      	cmp	r3, #10
 80075a0:	d9da      	bls.n	8007558 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	4413      	add	r3, r2
 80075a8:	3309      	adds	r3, #9
 80075aa:	2200      	movs	r2, #0
 80075ac:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	69db      	ldr	r3, [r3, #28]
 80075b2:	7ada      	ldrb	r2, [r3, #11]
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	69db      	ldr	r3, [r3, #28]
 80075bc:	331c      	adds	r3, #28
 80075be:	4618      	mov	r0, r3
 80075c0:	f7ff f8ca 	bl	8006758 <ld_dword>
 80075c4:	4602      	mov	r2, r0
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	69db      	ldr	r3, [r3, #28]
 80075ce:	3316      	adds	r3, #22
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7ff f8c1 	bl	8006758 <ld_dword>
 80075d6:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	b29a      	uxth	r2, r3
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	80da      	strh	r2, [r3, #6]
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	0c1b      	lsrs	r3, r3, #16
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	809a      	strh	r2, [r3, #4]
 80075ea:	e000      	b.n	80075ee <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80075ec:	bf00      	nop
}
 80075ee:	3718      	adds	r7, #24
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b088      	sub	sp, #32
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	60fb      	str	r3, [r7, #12]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	3320      	adds	r3, #32
 8007608:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800760a:	220b      	movs	r2, #11
 800760c:	2120      	movs	r1, #32
 800760e:	68b8      	ldr	r0, [r7, #8]
 8007610:	f7ff f92d 	bl	800686e <mem_set>
	si = i = 0; ni = 8;
 8007614:	2300      	movs	r3, #0
 8007616:	613b      	str	r3, [r7, #16]
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	617b      	str	r3, [r7, #20]
 800761c:	2308      	movs	r3, #8
 800761e:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	1c5a      	adds	r2, r3, #1
 8007624:	617a      	str	r2, [r7, #20]
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	4413      	add	r3, r2
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800762e:	7ffb      	ldrb	r3, [r7, #31]
 8007630:	2b20      	cmp	r3, #32
 8007632:	d94e      	bls.n	80076d2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007634:	7ffb      	ldrb	r3, [r7, #31]
 8007636:	2b2f      	cmp	r3, #47	; 0x2f
 8007638:	d006      	beq.n	8007648 <create_name+0x54>
 800763a:	7ffb      	ldrb	r3, [r7, #31]
 800763c:	2b5c      	cmp	r3, #92	; 0x5c
 800763e:	d110      	bne.n	8007662 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007640:	e002      	b.n	8007648 <create_name+0x54>
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	3301      	adds	r3, #1
 8007646:	617b      	str	r3, [r7, #20]
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	4413      	add	r3, r2
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	2b2f      	cmp	r3, #47	; 0x2f
 8007652:	d0f6      	beq.n	8007642 <create_name+0x4e>
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	4413      	add	r3, r2
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	2b5c      	cmp	r3, #92	; 0x5c
 800765e:	d0f0      	beq.n	8007642 <create_name+0x4e>
			break;
 8007660:	e038      	b.n	80076d4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007662:	7ffb      	ldrb	r3, [r7, #31]
 8007664:	2b2e      	cmp	r3, #46	; 0x2e
 8007666:	d003      	beq.n	8007670 <create_name+0x7c>
 8007668:	693a      	ldr	r2, [r7, #16]
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	429a      	cmp	r2, r3
 800766e:	d30c      	bcc.n	800768a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	2b0b      	cmp	r3, #11
 8007674:	d002      	beq.n	800767c <create_name+0x88>
 8007676:	7ffb      	ldrb	r3, [r7, #31]
 8007678:	2b2e      	cmp	r3, #46	; 0x2e
 800767a:	d001      	beq.n	8007680 <create_name+0x8c>
 800767c:	2306      	movs	r3, #6
 800767e:	e044      	b.n	800770a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007680:	2308      	movs	r3, #8
 8007682:	613b      	str	r3, [r7, #16]
 8007684:	230b      	movs	r3, #11
 8007686:	61bb      	str	r3, [r7, #24]
			continue;
 8007688:	e022      	b.n	80076d0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800768a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800768e:	2b00      	cmp	r3, #0
 8007690:	da04      	bge.n	800769c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007692:	7ffb      	ldrb	r3, [r7, #31]
 8007694:	3b80      	subs	r3, #128	; 0x80
 8007696:	4a1f      	ldr	r2, [pc, #124]	; (8007714 <create_name+0x120>)
 8007698:	5cd3      	ldrb	r3, [r2, r3]
 800769a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800769c:	7ffb      	ldrb	r3, [r7, #31]
 800769e:	4619      	mov	r1, r3
 80076a0:	481d      	ldr	r0, [pc, #116]	; (8007718 <create_name+0x124>)
 80076a2:	f7ff f925 	bl	80068f0 <chk_chr>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d001      	beq.n	80076b0 <create_name+0xbc>
 80076ac:	2306      	movs	r3, #6
 80076ae:	e02c      	b.n	800770a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80076b0:	7ffb      	ldrb	r3, [r7, #31]
 80076b2:	2b60      	cmp	r3, #96	; 0x60
 80076b4:	d905      	bls.n	80076c2 <create_name+0xce>
 80076b6:	7ffb      	ldrb	r3, [r7, #31]
 80076b8:	2b7a      	cmp	r3, #122	; 0x7a
 80076ba:	d802      	bhi.n	80076c2 <create_name+0xce>
 80076bc:	7ffb      	ldrb	r3, [r7, #31]
 80076be:	3b20      	subs	r3, #32
 80076c0:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	1c5a      	adds	r2, r3, #1
 80076c6:	613a      	str	r2, [r7, #16]
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	4413      	add	r3, r2
 80076cc:	7ffa      	ldrb	r2, [r7, #31]
 80076ce:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80076d0:	e7a6      	b.n	8007620 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80076d2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	441a      	add	r2, r3
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d101      	bne.n	80076e8 <create_name+0xf4>
 80076e4:	2306      	movs	r3, #6
 80076e6:	e010      	b.n	800770a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	2be5      	cmp	r3, #229	; 0xe5
 80076ee:	d102      	bne.n	80076f6 <create_name+0x102>
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	2205      	movs	r2, #5
 80076f4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80076f6:	7ffb      	ldrb	r3, [r7, #31]
 80076f8:	2b20      	cmp	r3, #32
 80076fa:	d801      	bhi.n	8007700 <create_name+0x10c>
 80076fc:	2204      	movs	r2, #4
 80076fe:	e000      	b.n	8007702 <create_name+0x10e>
 8007700:	2200      	movs	r2, #0
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	330b      	adds	r3, #11
 8007706:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007708:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800770a:	4618      	mov	r0, r3
 800770c:	3720      	adds	r7, #32
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	0800adb0 	.word	0x0800adb0
 8007718:	0800ad38 	.word	0x0800ad38

0800771c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b086      	sub	sp, #24
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007730:	e002      	b.n	8007738 <follow_path+0x1c>
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	3301      	adds	r3, #1
 8007736:	603b      	str	r3, [r7, #0]
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	2b2f      	cmp	r3, #47	; 0x2f
 800773e:	d0f8      	beq.n	8007732 <follow_path+0x16>
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	2b5c      	cmp	r3, #92	; 0x5c
 8007746:	d0f4      	beq.n	8007732 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	2200      	movs	r2, #0
 800774c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	2b1f      	cmp	r3, #31
 8007754:	d80a      	bhi.n	800776c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2280      	movs	r2, #128	; 0x80
 800775a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 800775e:	2100      	movs	r1, #0
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f7ff fc9b 	bl	800709c <dir_sdi>
 8007766:	4603      	mov	r3, r0
 8007768:	75fb      	strb	r3, [r7, #23]
 800776a:	e043      	b.n	80077f4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800776c:	463b      	mov	r3, r7
 800776e:	4619      	mov	r1, r3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f7ff ff3f 	bl	80075f4 <create_name>
 8007776:	4603      	mov	r3, r0
 8007778:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800777a:	7dfb      	ldrb	r3, [r7, #23]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d134      	bne.n	80077ea <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f7ff fe51 	bl	8007428 <dir_find>
 8007786:	4603      	mov	r3, r0
 8007788:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8007790:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007792:	7dfb      	ldrb	r3, [r7, #23]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00a      	beq.n	80077ae <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007798:	7dfb      	ldrb	r3, [r7, #23]
 800779a:	2b04      	cmp	r3, #4
 800779c:	d127      	bne.n	80077ee <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800779e:	7afb      	ldrb	r3, [r7, #11]
 80077a0:	f003 0304 	and.w	r3, r3, #4
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d122      	bne.n	80077ee <follow_path+0xd2>
 80077a8:	2305      	movs	r3, #5
 80077aa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80077ac:	e01f      	b.n	80077ee <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80077ae:	7afb      	ldrb	r3, [r7, #11]
 80077b0:	f003 0304 	and.w	r3, r3, #4
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d11c      	bne.n	80077f2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	799b      	ldrb	r3, [r3, #6]
 80077bc:	f003 0310 	and.w	r3, r3, #16
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d102      	bne.n	80077ca <follow_path+0xae>
				res = FR_NO_PATH; break;
 80077c4:	2305      	movs	r3, #5
 80077c6:	75fb      	strb	r3, [r7, #23]
 80077c8:	e014      	b.n	80077f4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077d8:	4413      	add	r3, r2
 80077da:	4619      	mov	r1, r3
 80077dc:	68f8      	ldr	r0, [r7, #12]
 80077de:	f7ff fde4 	bl	80073aa <ld_clust>
 80077e2:	4602      	mov	r2, r0
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80077e8:	e7c0      	b.n	800776c <follow_path+0x50>
			if (res != FR_OK) break;
 80077ea:	bf00      	nop
 80077ec:	e002      	b.n	80077f4 <follow_path+0xd8>
				break;
 80077ee:	bf00      	nop
 80077f0:	e000      	b.n	80077f4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80077f2:	bf00      	nop
			}
		}
	}

	return res;
 80077f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3718      	adds	r7, #24
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80077fe:	b480      	push	{r7}
 8007800:	b087      	sub	sp, #28
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800780a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d031      	beq.n	8007878 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	617b      	str	r3, [r7, #20]
 800781a:	e002      	b.n	8007822 <get_ldnumber+0x24>
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	3301      	adds	r3, #1
 8007820:	617b      	str	r3, [r7, #20]
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	2b20      	cmp	r3, #32
 8007828:	d903      	bls.n	8007832 <get_ldnumber+0x34>
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	2b3a      	cmp	r3, #58	; 0x3a
 8007830:	d1f4      	bne.n	800781c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	2b3a      	cmp	r3, #58	; 0x3a
 8007838:	d11c      	bne.n	8007874 <get_ldnumber+0x76>
			tp = *path;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	1c5a      	adds	r2, r3, #1
 8007844:	60fa      	str	r2, [r7, #12]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	3b30      	subs	r3, #48	; 0x30
 800784a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	2b09      	cmp	r3, #9
 8007850:	d80e      	bhi.n	8007870 <get_ldnumber+0x72>
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	429a      	cmp	r2, r3
 8007858:	d10a      	bne.n	8007870 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d107      	bne.n	8007870 <get_ldnumber+0x72>
					vol = (int)i;
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	3301      	adds	r3, #1
 8007868:	617b      	str	r3, [r7, #20]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	697a      	ldr	r2, [r7, #20]
 800786e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	e002      	b.n	800787a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007874:	2300      	movs	r3, #0
 8007876:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007878:	693b      	ldr	r3, [r7, #16]
}
 800787a:	4618      	mov	r0, r3
 800787c:	371c      	adds	r7, #28
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
	...

08007888 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	70da      	strb	r2, [r3, #3]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800789e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80078a0:	6839      	ldr	r1, [r7, #0]
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f7ff f883 	bl	80069ae <move_window>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d001      	beq.n	80078b2 <check_fs+0x2a>
 80078ae:	2304      	movs	r3, #4
 80078b0:	e038      	b.n	8007924 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	3330      	adds	r3, #48	; 0x30
 80078b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fe ff34 	bl	8006728 <ld_word>
 80078c0:	4603      	mov	r3, r0
 80078c2:	461a      	mov	r2, r3
 80078c4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d001      	beq.n	80078d0 <check_fs+0x48>
 80078cc:	2303      	movs	r3, #3
 80078ce:	e029      	b.n	8007924 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80078d6:	2be9      	cmp	r3, #233	; 0xe9
 80078d8:	d009      	beq.n	80078ee <check_fs+0x66>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80078e0:	2beb      	cmp	r3, #235	; 0xeb
 80078e2:	d11e      	bne.n	8007922 <check_fs+0x9a>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80078ea:	2b90      	cmp	r3, #144	; 0x90
 80078ec:	d119      	bne.n	8007922 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	3330      	adds	r3, #48	; 0x30
 80078f2:	3336      	adds	r3, #54	; 0x36
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7fe ff2f 	bl	8006758 <ld_dword>
 80078fa:	4603      	mov	r3, r0
 80078fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007900:	4a0a      	ldr	r2, [pc, #40]	; (800792c <check_fs+0xa4>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d101      	bne.n	800790a <check_fs+0x82>
 8007906:	2300      	movs	r3, #0
 8007908:	e00c      	b.n	8007924 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	3330      	adds	r3, #48	; 0x30
 800790e:	3352      	adds	r3, #82	; 0x52
 8007910:	4618      	mov	r0, r3
 8007912:	f7fe ff21 	bl	8006758 <ld_dword>
 8007916:	4602      	mov	r2, r0
 8007918:	4b05      	ldr	r3, [pc, #20]	; (8007930 <check_fs+0xa8>)
 800791a:	429a      	cmp	r2, r3
 800791c:	d101      	bne.n	8007922 <check_fs+0x9a>
 800791e:	2300      	movs	r3, #0
 8007920:	e000      	b.n	8007924 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007922:	2302      	movs	r3, #2
}
 8007924:	4618      	mov	r0, r3
 8007926:	3708      	adds	r7, #8
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	00544146 	.word	0x00544146
 8007930:	33544146 	.word	0x33544146

08007934 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b096      	sub	sp, #88	; 0x58
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	4613      	mov	r3, r2
 8007940:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	2200      	movs	r2, #0
 8007946:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f7ff ff58 	bl	80077fe <get_ldnumber>
 800794e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007952:	2b00      	cmp	r3, #0
 8007954:	da01      	bge.n	800795a <find_volume+0x26>
 8007956:	230b      	movs	r3, #11
 8007958:	e22b      	b.n	8007db2 <find_volume+0x47e>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800795a:	4aa8      	ldr	r2, [pc, #672]	; (8007bfc <find_volume+0x2c8>)
 800795c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800795e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007962:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <find_volume+0x3a>
 800796a:	230c      	movs	r3, #12
 800796c:	e221      	b.n	8007db2 <find_volume+0x47e>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007972:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007974:	79fb      	ldrb	r3, [r7, #7]
 8007976:	f023 0301 	bic.w	r3, r3, #1
 800797a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800797c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d01a      	beq.n	80079ba <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007986:	785b      	ldrb	r3, [r3, #1]
 8007988:	4618      	mov	r0, r3
 800798a:	f7fe fe2f 	bl	80065ec <disk_status>
 800798e:	4603      	mov	r3, r0
 8007990:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007994:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007998:	f003 0301 	and.w	r3, r3, #1
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10c      	bne.n	80079ba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80079a0:	79fb      	ldrb	r3, [r7, #7]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d007      	beq.n	80079b6 <find_volume+0x82>
 80079a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80079aa:	f003 0304 	and.w	r3, r3, #4
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d001      	beq.n	80079b6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80079b2:	230a      	movs	r3, #10
 80079b4:	e1fd      	b.n	8007db2 <find_volume+0x47e>
			}
			return FR_OK;				/* The file system object is valid */
 80079b6:	2300      	movs	r3, #0
 80079b8:	e1fb      	b.n	8007db2 <find_volume+0x47e>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80079ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079bc:	2200      	movs	r2, #0
 80079be:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80079c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079c2:	b2da      	uxtb	r2, r3
 80079c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80079c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ca:	785b      	ldrb	r3, [r3, #1]
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7fe fe27 	bl	8006620 <disk_initialize>
 80079d2:	4603      	mov	r3, r0
 80079d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80079d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80079dc:	f003 0301 	and.w	r3, r3, #1
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d001      	beq.n	80079e8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80079e4:	2303      	movs	r3, #3
 80079e6:	e1e4      	b.n	8007db2 <find_volume+0x47e>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80079e8:	79fb      	ldrb	r3, [r7, #7]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d007      	beq.n	80079fe <find_volume+0xca>
 80079ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80079f2:	f003 0304 	and.w	r3, r3, #4
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d001      	beq.n	80079fe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80079fa:	230a      	movs	r3, #10
 80079fc:	e1d9      	b.n	8007db2 <find_volume+0x47e>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80079fe:	2300      	movs	r3, #0
 8007a00:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007a02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007a04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a06:	f7ff ff3f 	bl	8007888 <check_fs>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007a10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d14b      	bne.n	8007ab0 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007a18:	2300      	movs	r3, #0
 8007a1a:	643b      	str	r3, [r7, #64]	; 0x40
 8007a1c:	e01f      	b.n	8007a5e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a20:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a26:	011b      	lsls	r3, r3, #4
 8007a28:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007a2c:	4413      	add	r3, r2
 8007a2e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a32:	3304      	adds	r3, #4
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d006      	beq.n	8007a48 <find_volume+0x114>
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3c:	3308      	adds	r3, #8
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fe fe8a 	bl	8006758 <ld_dword>
 8007a44:	4602      	mov	r2, r0
 8007a46:	e000      	b.n	8007a4a <find_volume+0x116>
 8007a48:	2200      	movs	r2, #0
 8007a4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007a52:	440b      	add	r3, r1
 8007a54:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	643b      	str	r3, [r7, #64]	; 0x40
 8007a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a60:	2b03      	cmp	r3, #3
 8007a62:	d9dc      	bls.n	8007a1e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007a64:	2300      	movs	r3, #0
 8007a66:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007a68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d002      	beq.n	8007a74 <find_volume+0x140>
 8007a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a70:	3b01      	subs	r3, #1
 8007a72:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007a7c:	4413      	add	r3, r2
 8007a7e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007a82:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007a84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d005      	beq.n	8007a96 <find_volume+0x162>
 8007a8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007a8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a8e:	f7ff fefb 	bl	8007888 <check_fs>
 8007a92:	4603      	mov	r3, r0
 8007a94:	e000      	b.n	8007a98 <find_volume+0x164>
 8007a96:	2303      	movs	r3, #3
 8007a98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007a9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d905      	bls.n	8007ab0 <find_volume+0x17c>
 8007aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	643b      	str	r3, [r7, #64]	; 0x40
 8007aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aac:	2b03      	cmp	r3, #3
 8007aae:	d9e1      	bls.n	8007a74 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007ab0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ab4:	2b04      	cmp	r3, #4
 8007ab6:	d101      	bne.n	8007abc <find_volume+0x188>
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e17a      	b.n	8007db2 <find_volume+0x47e>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007abc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d901      	bls.n	8007ac8 <find_volume+0x194>
 8007ac4:	230d      	movs	r3, #13
 8007ac6:	e174      	b.n	8007db2 <find_volume+0x47e>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aca:	3330      	adds	r3, #48	; 0x30
 8007acc:	330b      	adds	r3, #11
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7fe fe2a 	bl	8006728 <ld_word>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ada:	d001      	beq.n	8007ae0 <find_volume+0x1ac>
 8007adc:	230d      	movs	r3, #13
 8007ade:	e168      	b.n	8007db2 <find_volume+0x47e>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae2:	3330      	adds	r3, #48	; 0x30
 8007ae4:	3316      	adds	r3, #22
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7fe fe1e 	bl	8006728 <ld_word>
 8007aec:	4603      	mov	r3, r0
 8007aee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d106      	bne.n	8007b04 <find_volume+0x1d0>
 8007af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af8:	3330      	adds	r3, #48	; 0x30
 8007afa:	3324      	adds	r3, #36	; 0x24
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7fe fe2b 	bl	8006758 <ld_dword>
 8007b02:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b08:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8007b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b12:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b16:	789b      	ldrb	r3, [r3, #2]
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d005      	beq.n	8007b28 <find_volume+0x1f4>
 8007b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1e:	789b      	ldrb	r3, [r3, #2]
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	d001      	beq.n	8007b28 <find_volume+0x1f4>
 8007b24:	230d      	movs	r3, #13
 8007b26:	e144      	b.n	8007db2 <find_volume+0x47e>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2a:	789b      	ldrb	r3, [r3, #2]
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b30:	fb02 f303 	mul.w	r3, r2, r3
 8007b34:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b40:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b44:	895b      	ldrh	r3, [r3, #10]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d008      	beq.n	8007b5c <find_volume+0x228>
 8007b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b4c:	895b      	ldrh	r3, [r3, #10]
 8007b4e:	461a      	mov	r2, r3
 8007b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b52:	895b      	ldrh	r3, [r3, #10]
 8007b54:	3b01      	subs	r3, #1
 8007b56:	4013      	ands	r3, r2
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d001      	beq.n	8007b60 <find_volume+0x22c>
 8007b5c:	230d      	movs	r3, #13
 8007b5e:	e128      	b.n	8007db2 <find_volume+0x47e>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b62:	3330      	adds	r3, #48	; 0x30
 8007b64:	3311      	adds	r3, #17
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7fe fdde 	bl	8006728 <ld_word>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	461a      	mov	r2, r3
 8007b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b72:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b76:	891b      	ldrh	r3, [r3, #8]
 8007b78:	f003 030f 	and.w	r3, r3, #15
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d001      	beq.n	8007b86 <find_volume+0x252>
 8007b82:	230d      	movs	r3, #13
 8007b84:	e115      	b.n	8007db2 <find_volume+0x47e>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b88:	3330      	adds	r3, #48	; 0x30
 8007b8a:	3313      	adds	r3, #19
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7fe fdcb 	bl	8006728 <ld_word>
 8007b92:	4603      	mov	r3, r0
 8007b94:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d106      	bne.n	8007baa <find_volume+0x276>
 8007b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9e:	3330      	adds	r3, #48	; 0x30
 8007ba0:	3320      	adds	r3, #32
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7fe fdd8 	bl	8006758 <ld_dword>
 8007ba8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bac:	3330      	adds	r3, #48	; 0x30
 8007bae:	330e      	adds	r3, #14
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7fe fdb9 	bl	8006728 <ld_word>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007bba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d101      	bne.n	8007bc4 <find_volume+0x290>
 8007bc0:	230d      	movs	r3, #13
 8007bc2:	e0f6      	b.n	8007db2 <find_volume+0x47e>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007bc4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bc8:	4413      	add	r3, r2
 8007bca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bcc:	8912      	ldrh	r2, [r2, #8]
 8007bce:	0912      	lsrs	r2, r2, #4
 8007bd0:	b292      	uxth	r2, r2
 8007bd2:	4413      	add	r3, r2
 8007bd4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007bd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d201      	bcs.n	8007be2 <find_volume+0x2ae>
 8007bde:	230d      	movs	r3, #13
 8007be0:	e0e7      	b.n	8007db2 <find_volume+0x47e>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007be2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be6:	1ad3      	subs	r3, r2, r3
 8007be8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bea:	8952      	ldrh	r2, [r2, #10]
 8007bec:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bf0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d103      	bne.n	8007c00 <find_volume+0x2cc>
 8007bf8:	230d      	movs	r3, #13
 8007bfa:	e0da      	b.n	8007db2 <find_volume+0x47e>
 8007bfc:	20000248 	.word	0x20000248
		fmt = FS_FAT32;
 8007c00:	2303      	movs	r3, #3
 8007c02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c08:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d802      	bhi.n	8007c16 <find_volume+0x2e2>
 8007c10:	2302      	movs	r3, #2
 8007c12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c18:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d802      	bhi.n	8007c26 <find_volume+0x2f2>
 8007c20:	2301      	movs	r3, #1
 8007c22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c28:	1c9a      	adds	r2, r3, #2
 8007c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c2c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007c32:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007c34:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c38:	441a      	add	r2, r3
 8007c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007c3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c42:	441a      	add	r2, r3
 8007c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c46:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8007c48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c4c:	2b03      	cmp	r3, #3
 8007c4e:	d11e      	bne.n	8007c8e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c52:	3330      	adds	r3, #48	; 0x30
 8007c54:	332a      	adds	r3, #42	; 0x2a
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fe fd66 	bl	8006728 <ld_word>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d001      	beq.n	8007c66 <find_volume+0x332>
 8007c62:	230d      	movs	r3, #13
 8007c64:	e0a5      	b.n	8007db2 <find_volume+0x47e>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c68:	891b      	ldrh	r3, [r3, #8]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d001      	beq.n	8007c72 <find_volume+0x33e>
 8007c6e:	230d      	movs	r3, #13
 8007c70:	e09f      	b.n	8007db2 <find_volume+0x47e>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c74:	3330      	adds	r3, #48	; 0x30
 8007c76:	332c      	adds	r3, #44	; 0x2c
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7fe fd6d 	bl	8006758 <ld_dword>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c82:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c86:	695b      	ldr	r3, [r3, #20]
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	647b      	str	r3, [r7, #68]	; 0x44
 8007c8c:	e01f      	b.n	8007cce <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c90:	891b      	ldrh	r3, [r3, #8]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d101      	bne.n	8007c9a <find_volume+0x366>
 8007c96:	230d      	movs	r3, #13
 8007c98:	e08b      	b.n	8007db2 <find_volume+0x47e>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9c:	6a1a      	ldr	r2, [r3, #32]
 8007c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ca0:	441a      	add	r2, r3
 8007ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007ca6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	d103      	bne.n	8007cb6 <find_volume+0x382>
 8007cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb0:	695b      	ldr	r3, [r3, #20]
 8007cb2:	005b      	lsls	r3, r3, #1
 8007cb4:	e00a      	b.n	8007ccc <find_volume+0x398>
 8007cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb8:	695a      	ldr	r2, [r3, #20]
 8007cba:	4613      	mov	r3, r2
 8007cbc:	005b      	lsls	r3, r3, #1
 8007cbe:	4413      	add	r3, r2
 8007cc0:	085a      	lsrs	r2, r3, #1
 8007cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc4:	695b      	ldr	r3, [r3, #20]
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007ccc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd0:	699a      	ldr	r2, [r3, #24]
 8007cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cd4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007cd8:	0a5b      	lsrs	r3, r3, #9
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d201      	bcs.n	8007ce2 <find_volume+0x3ae>
 8007cde:	230d      	movs	r3, #13
 8007ce0:	e067      	b.n	8007db2 <find_volume+0x47e>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ce8:	611a      	str	r2, [r3, #16]
 8007cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cec:	691a      	ldr	r2, [r3, #16]
 8007cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf0:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf4:	2280      	movs	r2, #128	; 0x80
 8007cf6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007cf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007cfc:	2b03      	cmp	r3, #3
 8007cfe:	d149      	bne.n	8007d94 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d02:	3330      	adds	r3, #48	; 0x30
 8007d04:	3330      	adds	r3, #48	; 0x30
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7fe fd0e 	bl	8006728 <ld_word>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d140      	bne.n	8007d94 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d14:	3301      	adds	r3, #1
 8007d16:	4619      	mov	r1, r3
 8007d18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d1a:	f7fe fe48 	bl	80069ae <move_window>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d137      	bne.n	8007d94 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8007d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d26:	2200      	movs	r2, #0
 8007d28:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2c:	3330      	adds	r3, #48	; 0x30
 8007d2e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7fe fcf8 	bl	8006728 <ld_word>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d127      	bne.n	8007d94 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d46:	3330      	adds	r3, #48	; 0x30
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7fe fd05 	bl	8006758 <ld_dword>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	4b1a      	ldr	r3, [pc, #104]	; (8007dbc <find_volume+0x488>)
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d11e      	bne.n	8007d94 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d58:	3330      	adds	r3, #48	; 0x30
 8007d5a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7fe fcfa 	bl	8006758 <ld_dword>
 8007d64:	4602      	mov	r2, r0
 8007d66:	4b16      	ldr	r3, [pc, #88]	; (8007dc0 <find_volume+0x48c>)
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d113      	bne.n	8007d94 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6e:	3330      	adds	r3, #48	; 0x30
 8007d70:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7fe fcef 	bl	8006758 <ld_dword>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d82:	3330      	adds	r3, #48	; 0x30
 8007d84:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f7fe fce5 	bl	8006758 <ld_dword>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d92:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d96:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007d9a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007d9c:	4b09      	ldr	r3, [pc, #36]	; (8007dc4 <find_volume+0x490>)
 8007d9e:	881b      	ldrh	r3, [r3, #0]
 8007da0:	3301      	adds	r3, #1
 8007da2:	b29a      	uxth	r2, r3
 8007da4:	4b07      	ldr	r3, [pc, #28]	; (8007dc4 <find_volume+0x490>)
 8007da6:	801a      	strh	r2, [r3, #0]
 8007da8:	4b06      	ldr	r3, [pc, #24]	; (8007dc4 <find_volume+0x490>)
 8007daa:	881a      	ldrh	r2, [r3, #0]
 8007dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dae:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3758      	adds	r7, #88	; 0x58
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	41615252 	.word	0x41615252
 8007dc0:	61417272 	.word	0x61417272
 8007dc4:	2000024c 	.word	0x2000024c

08007dc8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007dd2:	2309      	movs	r3, #9
 8007dd4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d01c      	beq.n	8007e16 <validate+0x4e>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d018      	beq.n	8007e16 <validate+0x4e>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d013      	beq.n	8007e16 <validate+0x4e>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	889a      	ldrh	r2, [r3, #4]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	88db      	ldrh	r3, [r3, #6]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d10c      	bne.n	8007e16 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	785b      	ldrb	r3, [r3, #1]
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7fe fbf2 	bl	80065ec <disk_status>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d101      	bne.n	8007e16 <validate+0x4e>
			res = FR_OK;
 8007e12:	2300      	movs	r3, #0
 8007e14:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007e16:	7bfb      	ldrb	r3, [r7, #15]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d102      	bne.n	8007e22 <validate+0x5a>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	e000      	b.n	8007e24 <validate+0x5c>
 8007e22:	2300      	movs	r3, #0
 8007e24:	683a      	ldr	r2, [r7, #0]
 8007e26:	6013      	str	r3, [r2, #0]
	return res;
 8007e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
	...

08007e34 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b088      	sub	sp, #32
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	4613      	mov	r3, r2
 8007e40:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007e46:	f107 0310 	add.w	r3, r7, #16
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7ff fcd7 	bl	80077fe <get_ldnumber>
 8007e50:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	da01      	bge.n	8007e5c <f_mount+0x28>
 8007e58:	230b      	movs	r3, #11
 8007e5a:	e028      	b.n	8007eae <f_mount+0x7a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007e5c:	4a16      	ldr	r2, [pc, #88]	; (8007eb8 <f_mount+0x84>)
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e64:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d002      	beq.n	8007e72 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d002      	beq.n	8007e7e <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	490d      	ldr	r1, [pc, #52]	; (8007eb8 <f_mount+0x84>)
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d002      	beq.n	8007e94 <f_mount+0x60>
 8007e8e:	79fb      	ldrb	r3, [r7, #7]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d001      	beq.n	8007e98 <f_mount+0x64>
 8007e94:	2300      	movs	r3, #0
 8007e96:	e00a      	b.n	8007eae <f_mount+0x7a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007e98:	f107 010c 	add.w	r1, r7, #12
 8007e9c:	f107 0308 	add.w	r3, r7, #8
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7ff fd46 	bl	8007934 <find_volume>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3720      	adds	r7, #32
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	20000248 	.word	0x20000248

08007ebc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b098      	sub	sp, #96	; 0x60
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d101      	bne.n	8007ed4 <f_open+0x18>
 8007ed0:	2309      	movs	r3, #9
 8007ed2:	e17a      	b.n	80081ca <f_open+0x30e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007ed4:	79fb      	ldrb	r3, [r7, #7]
 8007ed6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007eda:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007edc:	79fa      	ldrb	r2, [r7, #7]
 8007ede:	f107 0114 	add.w	r1, r7, #20
 8007ee2:	f107 0308 	add.w	r3, r7, #8
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7ff fd24 	bl	8007934 <find_volume>
 8007eec:	4603      	mov	r3, r0
 8007eee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8007ef2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	f040 815e 	bne.w	80081b8 <f_open+0x2fc>
		dj.obj.fs = fs;
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007f00:	68ba      	ldr	r2, [r7, #8]
 8007f02:	f107 0318 	add.w	r3, r7, #24
 8007f06:	4611      	mov	r1, r2
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f7ff fc07 	bl	800771c <follow_path>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007f14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d107      	bne.n	8007f2c <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007f1c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007f20:	b25b      	sxtb	r3, r3
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	da02      	bge.n	8007f2c <f_open+0x70>
				res = FR_INVALID_NAME;
 8007f26:	2306      	movs	r3, #6
 8007f28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007f2c:	79fb      	ldrb	r3, [r7, #7]
 8007f2e:	f003 031c 	and.w	r3, r3, #28
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d078      	beq.n	8008028 <f_open+0x16c>
			if (res != FR_OK) {					/* No file, create new */
 8007f36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d010      	beq.n	8007f60 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007f3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f42:	2b04      	cmp	r3, #4
 8007f44:	d107      	bne.n	8007f56 <f_open+0x9a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8007f46:	f107 0318 	add.w	r3, r7, #24
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f7ff fac1 	bl	80074d2 <dir_register>
 8007f50:	4603      	mov	r3, r0
 8007f52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007f56:	79fb      	ldrb	r3, [r7, #7]
 8007f58:	f043 0308 	orr.w	r3, r3, #8
 8007f5c:	71fb      	strb	r3, [r7, #7]
 8007f5e:	e010      	b.n	8007f82 <f_open+0xc6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007f60:	7fbb      	ldrb	r3, [r7, #30]
 8007f62:	f003 0311 	and.w	r3, r3, #17
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d003      	beq.n	8007f72 <f_open+0xb6>
					res = FR_DENIED;
 8007f6a:	2307      	movs	r3, #7
 8007f6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007f70:	e007      	b.n	8007f82 <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007f72:	79fb      	ldrb	r3, [r7, #7]
 8007f74:	f003 0304 	and.w	r3, r3, #4
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d002      	beq.n	8007f82 <f_open+0xc6>
 8007f7c:	2308      	movs	r3, #8
 8007f7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007f82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d168      	bne.n	800805c <f_open+0x1a0>
 8007f8a:	79fb      	ldrb	r3, [r7, #7]
 8007f8c:	f003 0308 	and.w	r3, r3, #8
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d063      	beq.n	800805c <f_open+0x1a0>
				dw = GET_FATTIME();
 8007f94:	f000 fe7a 	bl	8008c8c <get_fattime>
 8007f98:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f9c:	330e      	adds	r3, #14
 8007f9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7fe fc17 	bl	80067d4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fa8:	3316      	adds	r3, #22
 8007faa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7fe fc11 	bl	80067d4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb4:	330b      	adds	r3, #11
 8007fb6:	2220      	movs	r2, #32
 8007fb8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fbe:	4611      	mov	r1, r2
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7ff f9f2 	bl	80073aa <ld_clust>
 8007fc6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007fcc:	2200      	movs	r2, #0
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7ff fa0a 	bl	80073e8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fd6:	331c      	adds	r3, #28
 8007fd8:	2100      	movs	r1, #0
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7fe fbfa 	bl	80067d4 <st_dword>
					fs->wflag = 1;
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d037      	beq.n	800805c <f_open+0x1a0>
						dw = fs->winsect;
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007ff2:	f107 0318 	add.w	r3, r7, #24
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7fe ff1d 	bl	8006e3a <remove_chain>
 8008000:	4603      	mov	r3, r0
 8008002:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008006:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800800a:	2b00      	cmp	r3, #0
 800800c:	d126      	bne.n	800805c <f_open+0x1a0>
							res = move_window(fs, dw);
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008012:	4618      	mov	r0, r3
 8008014:	f7fe fccb 	bl	80069ae <move_window>
 8008018:	4603      	mov	r3, r0
 800801a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008022:	3a01      	subs	r2, #1
 8008024:	60da      	str	r2, [r3, #12]
 8008026:	e019      	b.n	800805c <f_open+0x1a0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008028:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800802c:	2b00      	cmp	r3, #0
 800802e:	d115      	bne.n	800805c <f_open+0x1a0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008030:	7fbb      	ldrb	r3, [r7, #30]
 8008032:	f003 0310 	and.w	r3, r3, #16
 8008036:	2b00      	cmp	r3, #0
 8008038:	d003      	beq.n	8008042 <f_open+0x186>
					res = FR_NO_FILE;
 800803a:	2304      	movs	r3, #4
 800803c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008040:	e00c      	b.n	800805c <f_open+0x1a0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008042:	79fb      	ldrb	r3, [r7, #7]
 8008044:	f003 0302 	and.w	r3, r3, #2
 8008048:	2b00      	cmp	r3, #0
 800804a:	d007      	beq.n	800805c <f_open+0x1a0>
 800804c:	7fbb      	ldrb	r3, [r7, #30]
 800804e:	f003 0301 	and.w	r3, r3, #1
 8008052:	2b00      	cmp	r3, #0
 8008054:	d002      	beq.n	800805c <f_open+0x1a0>
						res = FR_DENIED;
 8008056:	2307      	movs	r3, #7
 8008058:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800805c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10f      	bne.n	8008084 <f_open+0x1c8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008064:	79fb      	ldrb	r3, [r7, #7]
 8008066:	f003 0308 	and.w	r3, r3, #8
 800806a:	2b00      	cmp	r3, #0
 800806c:	d003      	beq.n	8008076 <f_open+0x1ba>
				mode |= FA_MODIFIED;
 800806e:	79fb      	ldrb	r3, [r7, #7]
 8008070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008074:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 800807e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008084:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008088:	2b00      	cmp	r3, #0
 800808a:	f040 8095 	bne.w	80081b8 <f_open+0x2fc>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008092:	4611      	mov	r1, r2
 8008094:	4618      	mov	r0, r3
 8008096:	f7ff f988 	bl	80073aa <ld_clust>
 800809a:	4602      	mov	r2, r0
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80080a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080a2:	331c      	adds	r3, #28
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7fe fb57 	bl	8006758 <ld_dword>
 80080aa:	4602      	mov	r2, r0
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2200      	movs	r2, #0
 80080b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80080b6:	697a      	ldr	r2, [r7, #20]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	88da      	ldrh	r2, [r3, #6]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	79fa      	ldrb	r2, [r7, #7]
 80080c8:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2200      	movs	r2, #0
 80080d4:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2200      	movs	r2, #0
 80080da:	615a      	str	r2, [r3, #20]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	332c      	adds	r3, #44	; 0x2c
 80080e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080e4:	2100      	movs	r1, #0
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7fe fbc1 	bl	800686e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80080ec:	79fb      	ldrb	r3, [r7, #7]
 80080ee:	f003 0320 	and.w	r3, r3, #32
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d060      	beq.n	80081b8 <f_open+0x2fc>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d05c      	beq.n	80081b8 <f_open+0x2fc>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	68da      	ldr	r2, [r3, #12]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	895b      	ldrh	r3, [r3, #10]
 800810a:	025b      	lsls	r3, r3, #9
 800810c:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	657b      	str	r3, [r7, #84]	; 0x54
 800811a:	e016      	b.n	800814a <f_open+0x28e>
					clst = get_fat(&fp->obj, clst);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008120:	4618      	mov	r0, r3
 8008122:	f7fe fcfe 	bl	8006b22 <get_fat>
 8008126:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008128:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800812a:	2b01      	cmp	r3, #1
 800812c:	d802      	bhi.n	8008134 <f_open+0x278>
 800812e:	2302      	movs	r3, #2
 8008130:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008134:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008136:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800813a:	d102      	bne.n	8008142 <f_open+0x286>
 800813c:	2301      	movs	r3, #1
 800813e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008142:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	657b      	str	r3, [r7, #84]	; 0x54
 800814a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800814e:	2b00      	cmp	r3, #0
 8008150:	d103      	bne.n	800815a <f_open+0x29e>
 8008152:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008156:	429a      	cmp	r2, r3
 8008158:	d8e0      	bhi.n	800811c <f_open+0x260>
				}
				fp->clust = clst;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800815e:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008160:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008164:	2b00      	cmp	r3, #0
 8008166:	d127      	bne.n	80081b8 <f_open+0x2fc>
 8008168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800816a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800816e:	2b00      	cmp	r3, #0
 8008170:	d022      	beq.n	80081b8 <f_open+0x2fc>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008176:	4618      	mov	r0, r3
 8008178:	f7fe fcb4 	bl	8006ae4 <clust2sect>
 800817c:	6478      	str	r0, [r7, #68]	; 0x44
 800817e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008180:	2b00      	cmp	r3, #0
 8008182:	d103      	bne.n	800818c <f_open+0x2d0>
						res = FR_INT_ERR;
 8008184:	2302      	movs	r3, #2
 8008186:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800818a:	e015      	b.n	80081b8 <f_open+0x2fc>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800818c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800818e:	0a5a      	lsrs	r2, r3, #9
 8008190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008192:	441a      	add	r2, r3
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	61da      	str	r2, [r3, #28]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	7858      	ldrb	r0, [r3, #1]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	69da      	ldr	r2, [r3, #28]
 80081a6:	2301      	movs	r3, #1
 80081a8:	f7fe fa60 	bl	800666c <disk_read>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d002      	beq.n	80081b8 <f_open+0x2fc>
 80081b2:	2301      	movs	r3, #1
 80081b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80081b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d002      	beq.n	80081c6 <f_open+0x30a>
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2200      	movs	r2, #0
 80081c4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80081c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3760      	adds	r7, #96	; 0x60
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b08e      	sub	sp, #56	; 0x38
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	60f8      	str	r0, [r7, #12]
 80081da:	60b9      	str	r1, [r7, #8]
 80081dc:	607a      	str	r2, [r7, #4]
 80081de:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	2200      	movs	r2, #0
 80081e8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f107 0214 	add.w	r2, r7, #20
 80081f0:	4611      	mov	r1, r2
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7ff fde8 	bl	8007dc8 <validate>
 80081f8:	4603      	mov	r3, r0
 80081fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80081fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008202:	2b00      	cmp	r3, #0
 8008204:	d107      	bne.n	8008216 <f_read+0x44>
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	7c5b      	ldrb	r3, [r3, #17]
 800820a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800820e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008212:	2b00      	cmp	r3, #0
 8008214:	d002      	beq.n	800821c <f_read+0x4a>
 8008216:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800821a:	e115      	b.n	8008448 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	7c1b      	ldrb	r3, [r3, #16]
 8008220:	f003 0301 	and.w	r3, r3, #1
 8008224:	2b00      	cmp	r3, #0
 8008226:	d101      	bne.n	800822c <f_read+0x5a>
 8008228:	2307      	movs	r3, #7
 800822a:	e10d      	b.n	8008448 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	68da      	ldr	r2, [r3, #12]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	695b      	ldr	r3, [r3, #20]
 8008234:	1ad3      	subs	r3, r2, r3
 8008236:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	6a3b      	ldr	r3, [r7, #32]
 800823c:	429a      	cmp	r2, r3
 800823e:	f240 80fe 	bls.w	800843e <f_read+0x26c>
 8008242:	6a3b      	ldr	r3, [r7, #32]
 8008244:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008246:	e0fa      	b.n	800843e <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	695b      	ldr	r3, [r3, #20]
 800824c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008250:	2b00      	cmp	r3, #0
 8008252:	f040 80c6 	bne.w	80083e2 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	695b      	ldr	r3, [r3, #20]
 800825a:	0a5b      	lsrs	r3, r3, #9
 800825c:	697a      	ldr	r2, [r7, #20]
 800825e:	8952      	ldrh	r2, [r2, #10]
 8008260:	3a01      	subs	r2, #1
 8008262:	4013      	ands	r3, r2
 8008264:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d12f      	bne.n	80082cc <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	695b      	ldr	r3, [r3, #20]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d103      	bne.n	800827c <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	633b      	str	r3, [r7, #48]	; 0x30
 800827a:	e013      	b.n	80082a4 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008280:	2b00      	cmp	r3, #0
 8008282:	d007      	beq.n	8008294 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	695b      	ldr	r3, [r3, #20]
 8008288:	4619      	mov	r1, r3
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f7fe fed2 	bl	8007034 <clmt_clust>
 8008290:	6338      	str	r0, [r7, #48]	; 0x30
 8008292:	e007      	b.n	80082a4 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	4619      	mov	r1, r3
 800829c:	4610      	mov	r0, r2
 800829e:	f7fe fc40 	bl	8006b22 <get_fat>
 80082a2:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80082a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d804      	bhi.n	80082b4 <f_read+0xe2>
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2202      	movs	r2, #2
 80082ae:	745a      	strb	r2, [r3, #17]
 80082b0:	2302      	movs	r3, #2
 80082b2:	e0c9      	b.n	8008448 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80082b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082ba:	d104      	bne.n	80082c6 <f_read+0xf4>
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2201      	movs	r2, #1
 80082c0:	745a      	strb	r2, [r3, #17]
 80082c2:	2301      	movs	r3, #1
 80082c4:	e0c0      	b.n	8008448 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082ca:	619a      	str	r2, [r3, #24]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80082cc:	697a      	ldr	r2, [r7, #20]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	4619      	mov	r1, r3
 80082d4:	4610      	mov	r0, r2
 80082d6:	f7fe fc05 	bl	8006ae4 <clust2sect>
 80082da:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d104      	bne.n	80082ec <f_read+0x11a>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2202      	movs	r2, #2
 80082e6:	745a      	strb	r2, [r3, #17]
 80082e8:	2302      	movs	r3, #2
 80082ea:	e0ad      	b.n	8008448 <f_read+0x276>
			sect += csect;
 80082ec:	69ba      	ldr	r2, [r7, #24]
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	4413      	add	r3, r2
 80082f2:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	0a5b      	lsrs	r3, r3, #9
 80082f8:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80082fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d039      	beq.n	8008374 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008300:	69fa      	ldr	r2, [r7, #28]
 8008302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008304:	4413      	add	r3, r2
 8008306:	697a      	ldr	r2, [r7, #20]
 8008308:	8952      	ldrh	r2, [r2, #10]
 800830a:	4293      	cmp	r3, r2
 800830c:	d905      	bls.n	800831a <f_read+0x148>
					cc = fs->csize - csect;
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	895b      	ldrh	r3, [r3, #10]
 8008312:	461a      	mov	r2, r3
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	7858      	ldrb	r0, [r3, #1]
 800831e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008320:	69ba      	ldr	r2, [r7, #24]
 8008322:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008324:	f7fe f9a2 	bl	800666c <disk_read>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d004      	beq.n	8008338 <f_read+0x166>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2201      	movs	r2, #1
 8008332:	745a      	strb	r2, [r3, #17]
 8008334:	2301      	movs	r3, #1
 8008336:	e087      	b.n	8008448 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	7c1b      	ldrb	r3, [r3, #16]
 800833c:	b25b      	sxtb	r3, r3
 800833e:	2b00      	cmp	r3, #0
 8008340:	da14      	bge.n	800836c <f_read+0x19a>
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	69da      	ldr	r2, [r3, #28]
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800834c:	429a      	cmp	r2, r3
 800834e:	d90d      	bls.n	800836c <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	69da      	ldr	r2, [r3, #28]
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	1ad3      	subs	r3, r2, r3
 8008358:	025b      	lsls	r3, r3, #9
 800835a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800835c:	18d0      	adds	r0, r2, r3
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	332c      	adds	r3, #44	; 0x2c
 8008362:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008366:	4619      	mov	r1, r3
 8008368:	f7fe fa60 	bl	800682c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800836c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836e:	025b      	lsls	r3, r3, #9
 8008370:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008372:	e050      	b.n	8008416 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	69db      	ldr	r3, [r3, #28]
 8008378:	69ba      	ldr	r2, [r7, #24]
 800837a:	429a      	cmp	r2, r3
 800837c:	d02e      	beq.n	80083dc <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	7c1b      	ldrb	r3, [r3, #16]
 8008382:	b25b      	sxtb	r3, r3
 8008384:	2b00      	cmp	r3, #0
 8008386:	da18      	bge.n	80083ba <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	7858      	ldrb	r0, [r3, #1]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	69da      	ldr	r2, [r3, #28]
 8008396:	2301      	movs	r3, #1
 8008398:	f7fe f988 	bl	80066ac <disk_write>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d004      	beq.n	80083ac <f_read+0x1da>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2201      	movs	r2, #1
 80083a6:	745a      	strb	r2, [r3, #17]
 80083a8:	2301      	movs	r3, #1
 80083aa:	e04d      	b.n	8008448 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	7c1b      	ldrb	r3, [r3, #16]
 80083b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083b4:	b2da      	uxtb	r2, r3
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	7858      	ldrb	r0, [r3, #1]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80083c4:	2301      	movs	r3, #1
 80083c6:	69ba      	ldr	r2, [r7, #24]
 80083c8:	f7fe f950 	bl	800666c <disk_read>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d004      	beq.n	80083dc <f_read+0x20a>
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2201      	movs	r2, #1
 80083d6:	745a      	strb	r2, [r3, #17]
 80083d8:	2301      	movs	r3, #1
 80083da:	e035      	b.n	8008448 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	69ba      	ldr	r2, [r7, #24]
 80083e0:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	695b      	ldr	r3, [r3, #20]
 80083e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ea:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80083ee:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80083f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d901      	bls.n	80083fc <f_read+0x22a>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	695b      	ldr	r3, [r3, #20]
 8008406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800840a:	4413      	add	r3, r2
 800840c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800840e:	4619      	mov	r1, r3
 8008410:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008412:	f7fe fa0b 	bl	800682c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841a:	4413      	add	r3, r2
 800841c:	627b      	str	r3, [r7, #36]	; 0x24
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	695a      	ldr	r2, [r3, #20]
 8008422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008424:	441a      	add	r2, r3
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	615a      	str	r2, [r3, #20]
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008430:	441a      	add	r2, r3
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	601a      	str	r2, [r3, #0]
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	f47f af01 	bne.w	8008248 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3738      	adds	r7, #56	; 0x38
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b086      	sub	sp, #24
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f107 0208 	add.w	r2, r7, #8
 800845e:	4611      	mov	r1, r2
 8008460:	4618      	mov	r0, r3
 8008462:	f7ff fcb1 	bl	8007dc8 <validate>
 8008466:	4603      	mov	r3, r0
 8008468:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800846a:	7dfb      	ldrb	r3, [r7, #23]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d168      	bne.n	8008542 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	7c1b      	ldrb	r3, [r3, #16]
 8008474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008478:	2b00      	cmp	r3, #0
 800847a:	d062      	beq.n	8008542 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	7c1b      	ldrb	r3, [r3, #16]
 8008480:	b25b      	sxtb	r3, r3
 8008482:	2b00      	cmp	r3, #0
 8008484:	da15      	bge.n	80084b2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	7858      	ldrb	r0, [r3, #1]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	69da      	ldr	r2, [r3, #28]
 8008494:	2301      	movs	r3, #1
 8008496:	f7fe f909 	bl	80066ac <disk_write>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <f_sync+0x54>
 80084a0:	2301      	movs	r3, #1
 80084a2:	e04f      	b.n	8008544 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	7c1b      	ldrb	r3, [r3, #16]
 80084a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084ac:	b2da      	uxtb	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80084b2:	f000 fbeb 	bl	8008c8c <get_fattime>
 80084b6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a1b      	ldr	r3, [r3, #32]
 80084be:	4619      	mov	r1, r3
 80084c0:	4610      	mov	r0, r2
 80084c2:	f7fe fa74 	bl	80069ae <move_window>
 80084c6:	4603      	mov	r3, r0
 80084c8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80084ca:	7dfb      	ldrb	r3, [r7, #23]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d138      	bne.n	8008542 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	330b      	adds	r3, #11
 80084da:	781a      	ldrb	r2, [r3, #0]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	330b      	adds	r3, #11
 80084e0:	f042 0220 	orr.w	r2, r2, #32
 80084e4:	b2d2      	uxtb	r2, r2
 80084e6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6818      	ldr	r0, [r3, #0]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	461a      	mov	r2, r3
 80084f2:	68f9      	ldr	r1, [r7, #12]
 80084f4:	f7fe ff78 	bl	80073e8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f103 021c 	add.w	r2, r3, #28
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	4619      	mov	r1, r3
 8008504:	4610      	mov	r0, r2
 8008506:	f7fe f965 	bl	80067d4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	3316      	adds	r3, #22
 800850e:	6939      	ldr	r1, [r7, #16]
 8008510:	4618      	mov	r0, r3
 8008512:	f7fe f95f 	bl	80067d4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	3312      	adds	r3, #18
 800851a:	2100      	movs	r1, #0
 800851c:	4618      	mov	r0, r3
 800851e:	f7fe f93e 	bl	800679e <st_word>
					fs->wflag = 1;
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	2201      	movs	r2, #1
 8008526:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	4618      	mov	r0, r3
 800852c:	f7fe fa6c 	bl	8006a08 <sync_fs>
 8008530:	4603      	mov	r3, r0
 8008532:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	7c1b      	ldrb	r3, [r3, #16]
 8008538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800853c:	b2da      	uxtb	r2, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008542:	7dfb      	ldrb	r3, [r7, #23]
}
 8008544:	4618      	mov	r0, r3
 8008546:	3718      	adds	r7, #24
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f7ff ff7b 	bl	8008450 <f_sync>
 800855a:	4603      	mov	r3, r0
 800855c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800855e:	7bfb      	ldrb	r3, [r7, #15]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10e      	bne.n	8008582 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f107 0208 	add.w	r2, r7, #8
 800856a:	4611      	mov	r1, r2
 800856c:	4618      	mov	r0, r3
 800856e:	f7ff fc2b 	bl	8007dc8 <validate>
 8008572:	4603      	mov	r3, r0
 8008574:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008576:	7bfb      	ldrb	r3, [r7, #15]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d102      	bne.n	8008582 <f_close+0x36>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008582:	7bfb      	ldrb	r3, [r7, #15]
}
 8008584:	4618      	mov	r0, r3
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b090      	sub	sp, #64	; 0x40
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f107 0208 	add.w	r2, r7, #8
 800859c:	4611      	mov	r1, r2
 800859e:	4618      	mov	r0, r3
 80085a0:	f7ff fc12 	bl	8007dc8 <validate>
 80085a4:	4603      	mov	r3, r0
 80085a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80085aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d103      	bne.n	80085ba <f_lseek+0x2e>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	7c5b      	ldrb	r3, [r3, #17]
 80085b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80085ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d002      	beq.n	80085c8 <f_lseek+0x3c>
 80085c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80085c6:	e1e6      	b.n	8008996 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f000 80d1 	beq.w	8008774 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085d8:	d15a      	bne.n	8008690 <f_lseek+0x104>
			tbl = fp->cltbl;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085de:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80085e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e2:	1d1a      	adds	r2, r3, #4
 80085e4:	627a      	str	r2, [r7, #36]	; 0x24
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	617b      	str	r3, [r7, #20]
 80085ea:	2302      	movs	r3, #2
 80085ec:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80085f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d03a      	beq.n	8008670 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80085fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fc:	613b      	str	r3, [r7, #16]
 80085fe:	2300      	movs	r3, #0
 8008600:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008604:	3302      	adds	r3, #2
 8008606:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8008608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860a:	60fb      	str	r3, [r7, #12]
 800860c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800860e:	3301      	adds	r3, #1
 8008610:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008616:	4618      	mov	r0, r3
 8008618:	f7fe fa83 	bl	8006b22 <get_fat>
 800861c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800861e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008620:	2b01      	cmp	r3, #1
 8008622:	d804      	bhi.n	800862e <f_lseek+0xa2>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2202      	movs	r2, #2
 8008628:	745a      	strb	r2, [r3, #17]
 800862a:	2302      	movs	r3, #2
 800862c:	e1b3      	b.n	8008996 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800862e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008630:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008634:	d104      	bne.n	8008640 <f_lseek+0xb4>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2201      	movs	r2, #1
 800863a:	745a      	strb	r2, [r3, #17]
 800863c:	2301      	movs	r3, #1
 800863e:	e1aa      	b.n	8008996 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	3301      	adds	r3, #1
 8008644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008646:	429a      	cmp	r2, r3
 8008648:	d0de      	beq.n	8008608 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800864a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	429a      	cmp	r2, r3
 8008650:	d809      	bhi.n	8008666 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8008652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008654:	1d1a      	adds	r2, r3, #4
 8008656:	627a      	str	r2, [r7, #36]	; 0x24
 8008658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800865a:	601a      	str	r2, [r3, #0]
 800865c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865e:	1d1a      	adds	r2, r3, #4
 8008660:	627a      	str	r2, [r7, #36]	; 0x24
 8008662:	693a      	ldr	r2, [r7, #16]
 8008664:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	695b      	ldr	r3, [r3, #20]
 800866a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800866c:	429a      	cmp	r2, r3
 800866e:	d3c4      	bcc.n	80085fa <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008674:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008676:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8008678:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	429a      	cmp	r2, r3
 800867e:	d803      	bhi.n	8008688 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	2200      	movs	r2, #0
 8008684:	601a      	str	r2, [r3, #0]
 8008686:	e184      	b.n	8008992 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008688:	2311      	movs	r3, #17
 800868a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800868e:	e180      	b.n	8008992 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	683a      	ldr	r2, [r7, #0]
 8008696:	429a      	cmp	r2, r3
 8008698:	d902      	bls.n	80086a0 <f_lseek+0x114>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	615a      	str	r2, [r3, #20]
			if (ofs) {
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f000 8172 	beq.w	8008992 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	3b01      	subs	r3, #1
 80086b2:	4619      	mov	r1, r3
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f7fe fcbd 	bl	8007034 <clmt_clust>
 80086ba:	4602      	mov	r2, r0
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	619a      	str	r2, [r3, #24]
				dsc = clust2sect(fs, fp->clust);
 80086c0:	68ba      	ldr	r2, [r7, #8]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	699b      	ldr	r3, [r3, #24]
 80086c6:	4619      	mov	r1, r3
 80086c8:	4610      	mov	r0, r2
 80086ca:	f7fe fa0b 	bl	8006ae4 <clust2sect>
 80086ce:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d104      	bne.n	80086e0 <f_lseek+0x154>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2202      	movs	r2, #2
 80086da:	745a      	strb	r2, [r3, #17]
 80086dc:	2302      	movs	r3, #2
 80086de:	e15a      	b.n	8008996 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	3b01      	subs	r3, #1
 80086e4:	0a5b      	lsrs	r3, r3, #9
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	8952      	ldrh	r2, [r2, #10]
 80086ea:	3a01      	subs	r2, #1
 80086ec:	4013      	ands	r3, r2
 80086ee:	69ba      	ldr	r2, [r7, #24]
 80086f0:	4413      	add	r3, r2
 80086f2:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	695b      	ldr	r3, [r3, #20]
 80086f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f000 8148 	beq.w	8008992 <f_lseek+0x406>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	69db      	ldr	r3, [r3, #28]
 8008706:	69ba      	ldr	r2, [r7, #24]
 8008708:	429a      	cmp	r2, r3
 800870a:	f000 8142 	beq.w	8008992 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	7c1b      	ldrb	r3, [r3, #16]
 8008712:	b25b      	sxtb	r3, r3
 8008714:	2b00      	cmp	r3, #0
 8008716:	da18      	bge.n	800874a <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	7858      	ldrb	r0, [r3, #1]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	69da      	ldr	r2, [r3, #28]
 8008726:	2301      	movs	r3, #1
 8008728:	f7fd ffc0 	bl	80066ac <disk_write>
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d004      	beq.n	800873c <f_lseek+0x1b0>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2201      	movs	r2, #1
 8008736:	745a      	strb	r2, [r3, #17]
 8008738:	2301      	movs	r3, #1
 800873a:	e12c      	b.n	8008996 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	7c1b      	ldrb	r3, [r3, #16]
 8008740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008744:	b2da      	uxtb	r2, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	741a      	strb	r2, [r3, #16]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	7858      	ldrb	r0, [r3, #1]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8008754:	2301      	movs	r3, #1
 8008756:	69ba      	ldr	r2, [r7, #24]
 8008758:	f7fd ff88 	bl	800666c <disk_read>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d004      	beq.n	800876c <f_lseek+0x1e0>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2201      	movs	r2, #1
 8008766:	745a      	strb	r2, [r3, #17]
 8008768:	2301      	movs	r3, #1
 800876a:	e114      	b.n	8008996 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	69ba      	ldr	r2, [r7, #24]
 8008770:	61da      	str	r2, [r3, #28]
 8008772:	e10e      	b.n	8008992 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	683a      	ldr	r2, [r7, #0]
 800877a:	429a      	cmp	r2, r3
 800877c:	d908      	bls.n	8008790 <f_lseek+0x204>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	7c1b      	ldrb	r3, [r3, #16]
 8008782:	f003 0302 	and.w	r3, r3, #2
 8008786:	2b00      	cmp	r3, #0
 8008788:	d102      	bne.n	8008790 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	695b      	ldr	r3, [r3, #20]
 8008794:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008796:	2300      	movs	r3, #0
 8008798:	637b      	str	r3, [r7, #52]	; 0x34
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800879e:	615a      	str	r2, [r3, #20]
		if (ofs) {
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f000 80a7 	beq.w	80088f6 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	895b      	ldrh	r3, [r3, #10]
 80087ac:	025b      	lsls	r3, r3, #9
 80087ae:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80087b0:	6a3b      	ldr	r3, [r7, #32]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d01b      	beq.n	80087ee <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	1e5a      	subs	r2, r3, #1
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80087c0:	6a3b      	ldr	r3, [r7, #32]
 80087c2:	1e59      	subs	r1, r3, #1
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d30f      	bcc.n	80087ee <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80087ce:	6a3b      	ldr	r3, [r7, #32]
 80087d0:	1e5a      	subs	r2, r3, #1
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	425b      	negs	r3, r3
 80087d6:	401a      	ands	r2, r3
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	615a      	str	r2, [r3, #20]
				ofs -= fp->fptr;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	695b      	ldr	r3, [r3, #20]
 80087e0:	683a      	ldr	r2, [r7, #0]
 80087e2:	1ad3      	subs	r3, r2, r3
 80087e4:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	699b      	ldr	r3, [r3, #24]
 80087ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80087ec:	e022      	b.n	8008834 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80087f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d119      	bne.n	800882e <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2100      	movs	r1, #0
 80087fe:	4618      	mov	r0, r3
 8008800:	f7fe fb80 	bl	8006f04 <create_chain>
 8008804:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008808:	2b01      	cmp	r3, #1
 800880a:	d104      	bne.n	8008816 <f_lseek+0x28a>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2202      	movs	r2, #2
 8008810:	745a      	strb	r2, [r3, #17]
 8008812:	2302      	movs	r3, #2
 8008814:	e0bf      	b.n	8008996 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008818:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800881c:	d104      	bne.n	8008828 <f_lseek+0x29c>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2201      	movs	r2, #1
 8008822:	745a      	strb	r2, [r3, #17]
 8008824:	2301      	movs	r3, #1
 8008826:	e0b6      	b.n	8008996 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800882c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008832:	619a      	str	r2, [r3, #24]
			}
			if (clst != 0) {
 8008834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008836:	2b00      	cmp	r3, #0
 8008838:	d05d      	beq.n	80088f6 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800883a:	e03a      	b.n	80088b2 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800883c:	683a      	ldr	r2, [r7, #0]
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	603b      	str	r3, [r7, #0]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	695a      	ldr	r2, [r3, #20]
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	441a      	add	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	615a      	str	r2, [r3, #20]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	7c1b      	ldrb	r3, [r3, #16]
 8008854:	f003 0302 	and.w	r3, r3, #2
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00b      	beq.n	8008874 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008860:	4618      	mov	r0, r3
 8008862:	f7fe fb4f 	bl	8006f04 <create_chain>
 8008866:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8008868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886a:	2b00      	cmp	r3, #0
 800886c:	d108      	bne.n	8008880 <f_lseek+0x2f4>
							ofs = 0; break;
 800886e:	2300      	movs	r3, #0
 8008870:	603b      	str	r3, [r7, #0]
 8008872:	e022      	b.n	80088ba <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008878:	4618      	mov	r0, r3
 800887a:	f7fe f952 	bl	8006b22 <get_fat>
 800887e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008882:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008886:	d104      	bne.n	8008892 <f_lseek+0x306>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	745a      	strb	r2, [r3, #17]
 800888e:	2301      	movs	r3, #1
 8008890:	e081      	b.n	8008996 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8008892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008894:	2b01      	cmp	r3, #1
 8008896:	d904      	bls.n	80088a2 <f_lseek+0x316>
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	695b      	ldr	r3, [r3, #20]
 800889c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800889e:	429a      	cmp	r2, r3
 80088a0:	d304      	bcc.n	80088ac <f_lseek+0x320>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2202      	movs	r2, #2
 80088a6:	745a      	strb	r2, [r3, #17]
 80088a8:	2302      	movs	r3, #2
 80088aa:	e074      	b.n	8008996 <f_lseek+0x40a>
					fp->clust = clst;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088b0:	619a      	str	r2, [r3, #24]
				while (ofs > bcs) {						/* Cluster following loop */
 80088b2:	683a      	ldr	r2, [r7, #0]
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d8c0      	bhi.n	800883c <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	695a      	ldr	r2, [r3, #20]
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	441a      	add	r2, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	615a      	str	r2, [r3, #20]
				if (ofs % SS(fs)) {
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d012      	beq.n	80088f6 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7fe f905 	bl	8006ae4 <clust2sect>
 80088da:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80088dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d104      	bne.n	80088ec <f_lseek+0x360>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2202      	movs	r2, #2
 80088e6:	745a      	strb	r2, [r3, #17]
 80088e8:	2302      	movs	r3, #2
 80088ea:	e054      	b.n	8008996 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	0a5b      	lsrs	r3, r3, #9
 80088f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088f2:	4413      	add	r3, r2
 80088f4:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	695a      	ldr	r2, [r3, #20]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d90a      	bls.n	8008918 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	695a      	ldr	r2, [r3, #20]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	7c1b      	ldrb	r3, [r3, #16]
 800890e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008912:	b2da      	uxtb	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	741a      	strb	r2, [r3, #16]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	695b      	ldr	r3, [r3, #20]
 800891c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008920:	2b00      	cmp	r3, #0
 8008922:	d036      	beq.n	8008992 <f_lseek+0x406>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	69db      	ldr	r3, [r3, #28]
 8008928:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800892a:	429a      	cmp	r2, r3
 800892c:	d031      	beq.n	8008992 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	7c1b      	ldrb	r3, [r3, #16]
 8008932:	b25b      	sxtb	r3, r3
 8008934:	2b00      	cmp	r3, #0
 8008936:	da18      	bge.n	800896a <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	7858      	ldrb	r0, [r3, #1]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	69da      	ldr	r2, [r3, #28]
 8008946:	2301      	movs	r3, #1
 8008948:	f7fd feb0 	bl	80066ac <disk_write>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d004      	beq.n	800895c <f_lseek+0x3d0>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2201      	movs	r2, #1
 8008956:	745a      	strb	r2, [r3, #17]
 8008958:	2301      	movs	r3, #1
 800895a:	e01c      	b.n	8008996 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	7c1b      	ldrb	r3, [r3, #16]
 8008960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008964:	b2da      	uxtb	r2, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	741a      	strb	r2, [r3, #16]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	7858      	ldrb	r0, [r3, #1]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8008974:	2301      	movs	r3, #1
 8008976:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008978:	f7fd fe78 	bl	800666c <disk_read>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d004      	beq.n	800898c <f_lseek+0x400>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2201      	movs	r2, #1
 8008986:	745a      	strb	r2, [r3, #17]
 8008988:	2301      	movs	r3, #1
 800898a:	e004      	b.n	8008996 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008990:	61da      	str	r2, [r3, #28]
		}
	}

	LEAVE_FF(fs, res);
 8008992:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008996:	4618      	mov	r0, r3
 8008998:	3740      	adds	r7, #64	; 0x40
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b08e      	sub	sp, #56	; 0x38
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
 80089a6:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 80089a8:	f107 0108 	add.w	r1, r7, #8
 80089ac:	1d3b      	adds	r3, r7, #4
 80089ae:	2200      	movs	r2, #0
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7fe ffbf 	bl	8007934 <find_volume>
 80089b6:	4603      	mov	r3, r0
 80089b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res == FR_OK) {
 80089bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d11f      	bne.n	8008a04 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	f107 0308 	add.w	r3, r7, #8
 80089ca:	4611      	mov	r1, r2
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7fe fea5 	bl	800771c <follow_path>
 80089d2:	4603      	mov	r3, r0
 80089d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (res == FR_OK) {				/* Follow completed */
 80089d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d111      	bne.n	8008a04 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 80089e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80089e4:	b25b      	sxtb	r3, r3
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	da03      	bge.n	80089f2 <f_stat+0x54>
				res = FR_INVALID_NAME;
 80089ea:	2306      	movs	r3, #6
 80089ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80089f0:	e008      	b.n	8008a04 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d005      	beq.n	8008a04 <f_stat+0x66>
 80089f8:	f107 0308 	add.w	r3, r7, #8
 80089fc:	6839      	ldr	r1, [r7, #0]
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7fe fd99 	bl	8007536 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8008a04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3738      	adds	r7, #56	; 0x38
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b088      	sub	sp, #32
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	607a      	str	r2, [r7, #4]
	int n = 0;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008a24:	e01b      	b.n	8008a5e <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8008a26:	f107 0310 	add.w	r3, r7, #16
 8008a2a:	f107 0114 	add.w	r1, r7, #20
 8008a2e:	2201      	movs	r2, #1
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f7ff fbce 	bl	80081d2 <f_read>
		if (rc != 1) break;
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d116      	bne.n	8008a6a <f_gets+0x5a>
		c = s[0];
 8008a3c:	7d3b      	ldrb	r3, [r7, #20]
 8008a3e:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008a40:	7dfb      	ldrb	r3, [r7, #23]
 8008a42:	2b0d      	cmp	r3, #13
 8008a44:	d100      	bne.n	8008a48 <f_gets+0x38>
 8008a46:	e00a      	b.n	8008a5e <f_gets+0x4e>
		*p++ = c;
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	1c5a      	adds	r2, r3, #1
 8008a4c:	61ba      	str	r2, [r7, #24]
 8008a4e:	7dfa      	ldrb	r2, [r7, #23]
 8008a50:	701a      	strb	r2, [r3, #0]
		n++;
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	3301      	adds	r3, #1
 8008a56:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8008a58:	7dfb      	ldrb	r3, [r7, #23]
 8008a5a:	2b0a      	cmp	r3, #10
 8008a5c:	d007      	beq.n	8008a6e <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	3b01      	subs	r3, #1
 8008a62:	69fa      	ldr	r2, [r7, #28]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	dbde      	blt.n	8008a26 <f_gets+0x16>
 8008a68:	e002      	b.n	8008a70 <f_gets+0x60>
		if (rc != 1) break;
 8008a6a:	bf00      	nop
 8008a6c:	e000      	b.n	8008a70 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8008a6e:	bf00      	nop
	}
	*p = 0;
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	2200      	movs	r2, #0
 8008a74:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d001      	beq.n	8008a80 <f_gets+0x70>
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	e000      	b.n	8008a82 <f_gets+0x72>
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3720      	adds	r7, #32
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
	...

08008a8c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b087      	sub	sp, #28
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	4613      	mov	r3, r2
 8008a98:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008aa2:	4b1f      	ldr	r3, [pc, #124]	; (8008b20 <FATFS_LinkDriverEx+0x94>)
 8008aa4:	7a5b      	ldrb	r3, [r3, #9]
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d131      	bne.n	8008b10 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008aac:	4b1c      	ldr	r3, [pc, #112]	; (8008b20 <FATFS_LinkDriverEx+0x94>)
 8008aae:	7a5b      	ldrb	r3, [r3, #9]
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	4b1a      	ldr	r3, [pc, #104]	; (8008b20 <FATFS_LinkDriverEx+0x94>)
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008aba:	4b19      	ldr	r3, [pc, #100]	; (8008b20 <FATFS_LinkDriverEx+0x94>)
 8008abc:	7a5b      	ldrb	r3, [r3, #9]
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	4a17      	ldr	r2, [pc, #92]	; (8008b20 <FATFS_LinkDriverEx+0x94>)
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	4413      	add	r3, r2
 8008ac6:	68fa      	ldr	r2, [r7, #12]
 8008ac8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008aca:	4b15      	ldr	r3, [pc, #84]	; (8008b20 <FATFS_LinkDriverEx+0x94>)
 8008acc:	7a5b      	ldrb	r3, [r3, #9]
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	4b13      	ldr	r3, [pc, #76]	; (8008b20 <FATFS_LinkDriverEx+0x94>)
 8008ad4:	4413      	add	r3, r2
 8008ad6:	79fa      	ldrb	r2, [r7, #7]
 8008ad8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008ada:	4b11      	ldr	r3, [pc, #68]	; (8008b20 <FATFS_LinkDriverEx+0x94>)
 8008adc:	7a5b      	ldrb	r3, [r3, #9]
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	1c5a      	adds	r2, r3, #1
 8008ae2:	b2d1      	uxtb	r1, r2
 8008ae4:	4a0e      	ldr	r2, [pc, #56]	; (8008b20 <FATFS_LinkDriverEx+0x94>)
 8008ae6:	7251      	strb	r1, [r2, #9]
 8008ae8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008aea:	7dbb      	ldrb	r3, [r7, #22]
 8008aec:	3330      	adds	r3, #48	; 0x30
 8008aee:	b2da      	uxtb	r2, r3
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	3301      	adds	r3, #1
 8008af8:	223a      	movs	r2, #58	; 0x3a
 8008afa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	3302      	adds	r3, #2
 8008b00:	222f      	movs	r2, #47	; 0x2f
 8008b02:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	3303      	adds	r3, #3
 8008b08:	2200      	movs	r2, #0
 8008b0a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	371c      	adds	r7, #28
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	20000250 	.word	0x20000250

08008b24 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008b2e:	2200      	movs	r2, #0
 8008b30:	6839      	ldr	r1, [r7, #0]
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f7ff ffaa 	bl	8008a8c <FATFS_LinkDriverEx>
 8008b38:	4603      	mov	r3, r0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3708      	adds	r7, #8
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
	...

08008b44 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008b4e:	f000 f879 	bl	8008c44 <BSP_SD_IsDetected>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d001      	beq.n	8008b5c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	e012      	b.n	8008b82 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8008b5c:	480b      	ldr	r0, [pc, #44]	; (8008b8c <BSP_SD_Init+0x48>)
 8008b5e:	f7fa fdeb 	bl	8003738 <HAL_SD_Init>
 8008b62:	4603      	mov	r3, r0
 8008b64:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8008b66:	79fb      	ldrb	r3, [r7, #7]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d109      	bne.n	8008b80 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8008b6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008b70:	4806      	ldr	r0, [pc, #24]	; (8008b8c <BSP_SD_Init+0x48>)
 8008b72:	f7fb fbdd 	bl	8004330 <HAL_SD_ConfigWideBusOperation>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d001      	beq.n	8008b80 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8008b80:	79fb      	ldrb	r3, [r7, #7]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	2000a464 	.word	0x2000a464

08008b90 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b088      	sub	sp, #32
 8008b94:	af02      	add	r7, sp, #8
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	607a      	str	r2, [r7, #4]
 8008b9c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	9300      	str	r3, [sp, #0]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	68f9      	ldr	r1, [r7, #12]
 8008bac:	4806      	ldr	r0, [pc, #24]	; (8008bc8 <BSP_SD_ReadBlocks+0x38>)
 8008bae:	f7fa fe53 	bl	8003858 <HAL_SD_ReadBlocks>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d001      	beq.n	8008bbc <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8008bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3718      	adds	r7, #24
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	2000a464 	.word	0x2000a464

08008bcc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b088      	sub	sp, #32
 8008bd0:	af02      	add	r7, sp, #8
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	607a      	str	r2, [r7, #4]
 8008bd8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	9300      	str	r3, [sp, #0]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	68ba      	ldr	r2, [r7, #8]
 8008be6:	68f9      	ldr	r1, [r7, #12]
 8008be8:	4806      	ldr	r0, [pc, #24]	; (8008c04 <BSP_SD_WriteBlocks+0x38>)
 8008bea:	f7fb f82f 	bl	8003c4c <HAL_SD_WriteBlocks>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8008bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3718      	adds	r7, #24
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	2000a464 	.word	0x2000a464

08008c08 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008c0c:	4805      	ldr	r0, [pc, #20]	; (8008c24 <BSP_SD_GetCardState+0x1c>)
 8008c0e:	f7fb fc0b 	bl	8004428 <HAL_SD_GetCardState>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b04      	cmp	r3, #4
 8008c16:	bf14      	ite	ne
 8008c18:	2301      	movne	r3, #1
 8008c1a:	2300      	moveq	r3, #0
 8008c1c:	b2db      	uxtb	r3, r3
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	2000a464 	.word	0x2000a464

08008c28 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8008c30:	6879      	ldr	r1, [r7, #4]
 8008c32:	4803      	ldr	r0, [pc, #12]	; (8008c40 <BSP_SD_GetCardInfo+0x18>)
 8008c34:	f7fb fb50 	bl	80042d8 <HAL_SD_GetCardInfo>
}
 8008c38:	bf00      	nop
 8008c3a:	3708      	adds	r7, #8
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}
 8008c40:	2000a464 	.word	0x2000a464

08008c44 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8008c4e:	f000 f825 	bl	8008c9c <BSP_PlatformIsDetected>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d101      	bne.n	8008c5c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008c5c:	79fb      	ldrb	r3, [r7, #7]
 8008c5e:	b2db      	uxtb	r3, r3
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3708      	adds	r7, #8
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008c6c:	4904      	ldr	r1, [pc, #16]	; (8008c80 <MX_FATFS_Init+0x18>)
 8008c6e:	4805      	ldr	r0, [pc, #20]	; (8008c84 <MX_FATFS_Init+0x1c>)
 8008c70:	f7ff ff58 	bl	8008b24 <FATFS_LinkDriver>
 8008c74:	4603      	mov	r3, r0
 8008c76:	461a      	mov	r2, r3
 8008c78:	4b03      	ldr	r3, [pc, #12]	; (8008c88 <MX_FATFS_Init+0x20>)
 8008c7a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8008c7c:	bf00      	nop
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	20007a5c 	.word	0x20007a5c
 8008c84:	0800ae3c 	.word	0x0800ae3c
 8008c88:	20007a58 	.word	0x20007a58

08008c8c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008c90:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b082      	sub	sp, #8
 8008ca0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8008ca6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008caa:	4806      	ldr	r0, [pc, #24]	; (8008cc4 <BSP_PlatformIsDetected+0x28>)
 8008cac:	f7f8 fb7e 	bl	80013ac <HAL_GPIO_ReadPin>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d001      	beq.n	8008cba <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8008cba:	79fb      	ldrb	r3, [r7, #7]
}  
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	40020000 	.word	0x40020000

08008cc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008ccc:	f7f7 fc50 	bl	8000570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008cd0:	f000 f8a0 	bl	8008e14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008cd4:	f000 fad2 	bl	800927c <MX_GPIO_Init>
  MX_DMA_Init();
 8008cd8:	f000 faa8 	bl	800922c <MX_DMA_Init>
  MX_I2C1_Init();
 8008cdc:	f000 f91a 	bl	8008f14 <MX_I2C1_Init>
  MX_I2S2_Init();
 8008ce0:	f000 f946 	bl	8008f70 <MX_I2S2_Init>
  MX_SDIO_SD_Init();
 8008ce4:	f000 f972 	bl	8008fcc <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8008ce8:	f7ff ffbe 	bl	8008c68 <MX_FATFS_Init>
  MX_TIM3_Init();
 8008cec:	f000 f9da 	bl	80090a4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8008cf0:	f000 f98c 	bl	800900c <MX_TIM2_Init>
  MX_TIM4_Init();
 8008cf4:	f000 fa4c 	bl	8009190 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */


  // Fill screenbuffer with LOWs
  for (i = 0; i < LED_BYTES; i++)
 8008cf8:	4b39      	ldr	r3, [pc, #228]	; (8008de0 <main+0x118>)
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	601a      	str	r2, [r3, #0]
 8008cfe:	e00a      	b.n	8008d16 <main+0x4e>
  {
	  LED_Framebuffer[i] = LED_ZERO;
 8008d00:	4b37      	ldr	r3, [pc, #220]	; (8008de0 <main+0x118>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a37      	ldr	r2, [pc, #220]	; (8008de4 <main+0x11c>)
 8008d06:	211c      	movs	r1, #28
 8008d08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0; i < LED_BYTES; i++)
 8008d0c:	4b34      	ldr	r3, [pc, #208]	; (8008de0 <main+0x118>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	3301      	adds	r3, #1
 8008d12:	4a33      	ldr	r2, [pc, #204]	; (8008de0 <main+0x118>)
 8008d14:	6013      	str	r3, [r2, #0]
 8008d16:	4b32      	ldr	r3, [pc, #200]	; (8008de0 <main+0x118>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8008d1e:	d3ef      	bcc.n	8008d00 <main+0x38>
  }

  // Start circular DMA
  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_Framebuffer, sizeof(LED_Framebuffer) / sizeof(uint32_t));
 8008d20:	f641 13f4 	movw	r3, #6644	; 0x19f4
 8008d24:	4a2f      	ldr	r2, [pc, #188]	; (8008de4 <main+0x11c>)
 8008d26:	2104      	movs	r1, #4
 8008d28:	482f      	ldr	r0, [pc, #188]	; (8008de8 <main+0x120>)
 8008d2a:	f7fb ff05 	bl	8004b38 <HAL_TIM_PWM_Start_DMA>


  // Mount SD card
  fr = f_mount(&fatfs, (TCHAR const*)SDPath, 1);
 8008d2e:	2201      	movs	r2, #1
 8008d30:	492e      	ldr	r1, [pc, #184]	; (8008dec <main+0x124>)
 8008d32:	482f      	ldr	r0, [pc, #188]	; (8008df0 <main+0x128>)
 8008d34:	f7ff f87e 	bl	8007e34 <f_mount>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	4b2d      	ldr	r3, [pc, #180]	; (8008df4 <main+0x12c>)
 8008d3e:	701a      	strb	r2, [r3, #0]

  if (fr != FR_OK)
 8008d40:	4b2c      	ldr	r3, [pc, #176]	; (8008df4 <main+0x12c>)
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d001      	beq.n	8008d4c <main+0x84>
  {
	  Error_Handler();
 8008d48:	f000 feb2 	bl	8009ab0 <Error_Handler>
  }

  // Find highest file (looking contiguously, no gaps allowed!)
  for (i = 0; i < 100; i++)
 8008d4c:	4b24      	ldr	r3, [pc, #144]	; (8008de0 <main+0x118>)
 8008d4e:	2200      	movs	r2, #0
 8008d50:	601a      	str	r2, [r3, #0]
 8008d52:	e025      	b.n	8008da0 <main+0xd8>
  {
	  sprintf(Track_Next_Path, "%03lu.wav", i);
 8008d54:	4b22      	ldr	r3, [pc, #136]	; (8008de0 <main+0x118>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	461a      	mov	r2, r3
 8008d5a:	4927      	ldr	r1, [pc, #156]	; (8008df8 <main+0x130>)
 8008d5c:	4827      	ldr	r0, [pc, #156]	; (8008dfc <main+0x134>)
 8008d5e:	f001 fb2f 	bl	800a3c0 <siprintf>
	  fr = f_stat(Track_Next_Path, &fi);
 8008d62:	4927      	ldr	r1, [pc, #156]	; (8008e00 <main+0x138>)
 8008d64:	4825      	ldr	r0, [pc, #148]	; (8008dfc <main+0x134>)
 8008d66:	f7ff fe1a 	bl	800899e <f_stat>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	4b21      	ldr	r3, [pc, #132]	; (8008df4 <main+0x12c>)
 8008d70:	701a      	strb	r2, [r3, #0]
	  if (fr != FR_OK)
 8008d72:	4b20      	ldr	r3, [pc, #128]	; (8008df4 <main+0x12c>)
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00d      	beq.n	8008d96 <main+0xce>
	  {
		  if (i == 0) // 000.wav doesn't exist
 8008d7a:	4b19      	ldr	r3, [pc, #100]	; (8008de0 <main+0x118>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d101      	bne.n	8008d86 <main+0xbe>
		  {
			  Error_Handler();
 8008d82:	f000 fe95 	bl	8009ab0 <Error_Handler>
		  }
		  Track_Max = i-1;
 8008d86:	4b16      	ldr	r3, [pc, #88]	; (8008de0 <main+0x118>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	3b01      	subs	r3, #1
 8008d8e:	b2da      	uxtb	r2, r3
 8008d90:	4b1c      	ldr	r3, [pc, #112]	; (8008e04 <main+0x13c>)
 8008d92:	701a      	strb	r2, [r3, #0]
		  break;
 8008d94:	e008      	b.n	8008da8 <main+0xe0>
  for (i = 0; i < 100; i++)
 8008d96:	4b12      	ldr	r3, [pc, #72]	; (8008de0 <main+0x118>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	4a10      	ldr	r2, [pc, #64]	; (8008de0 <main+0x118>)
 8008d9e:	6013      	str	r3, [r2, #0]
 8008da0:	4b0f      	ldr	r3, [pc, #60]	; (8008de0 <main+0x118>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2b63      	cmp	r3, #99	; 0x63
 8008da6:	d9d5      	bls.n	8008d54 <main+0x8c>
	  }
  }

  HAL_TIM_Base_Start_IT(&htim2);
 8008da8:	4817      	ldr	r0, [pc, #92]	; (8008e08 <main+0x140>)
 8008daa:	f7fb fe6c 	bl	8004a86 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8008dae:	4817      	ldr	r0, [pc, #92]	; (8008e0c <main+0x144>)
 8008db0:	f7fb fe69 	bl	8004a86 <HAL_TIM_Base_Start_IT>

  LoadTrack();
 8008db4:	f000 fd0e 	bl	80097d4 <LoadTrack>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, LED_STATUS_Pin, GPIO_PIN_SET);
 8008db8:	2201      	movs	r2, #1
 8008dba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008dbe:	4814      	ldr	r0, [pc, #80]	; (8008e10 <main+0x148>)
 8008dc0:	f7f8 fb0c 	bl	80013dc <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 8008dc4:	200a      	movs	r0, #10
 8008dc6:	f7f7 fc45 	bl	8000654 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, LED_STATUS_Pin, GPIO_PIN_RESET);
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008dd0:	480f      	ldr	r0, [pc, #60]	; (8008e10 <main+0x148>)
 8008dd2:	f7f8 fb03 	bl	80013dc <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8008dd6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008dda:	f7f7 fc3b 	bl	8000654 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, LED_STATUS_Pin, GPIO_PIN_SET);
 8008dde:	e7eb      	b.n	8008db8 <main+0xf0>
 8008de0:	20007a40 	.word	0x20007a40
 8008de4:	20000268 	.word	0x20000268
 8008de8:	2000a194 	.word	0x2000a194
 8008dec:	20007a5c 	.word	0x20007a5c
 8008df0:	2000c7b4 	.word	0x2000c7b4
 8008df4:	2000a460 	.word	0x2000a460
 8008df8:	0800ad7c 	.word	0x0800ad7c
 8008dfc:	20000044 	.word	0x20000044
 8008e00:	2000817c 	.word	0x2000817c
 8008e04:	20000040 	.word	0x20000040
 8008e08:	2000c4e8 	.word	0x2000c4e8
 8008e0c:	200080e8 	.word	0x200080e8
 8008e10:	40020000 	.word	0x40020000

08008e14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b098      	sub	sp, #96	; 0x60
 8008e18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008e1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008e1e:	2230      	movs	r2, #48	; 0x30
 8008e20:	2100      	movs	r1, #0
 8008e22:	4618      	mov	r0, r3
 8008e24:	f001 fac3 	bl	800a3ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008e28:	f107 031c 	add.w	r3, r7, #28
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	601a      	str	r2, [r3, #0]
 8008e30:	605a      	str	r2, [r3, #4]
 8008e32:	609a      	str	r2, [r3, #8]
 8008e34:	60da      	str	r2, [r3, #12]
 8008e36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008e38:	f107 030c 	add.w	r3, r7, #12
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	601a      	str	r2, [r3, #0]
 8008e40:	605a      	str	r2, [r3, #4]
 8008e42:	609a      	str	r2, [r3, #8]
 8008e44:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008e46:	2300      	movs	r3, #0
 8008e48:	60bb      	str	r3, [r7, #8]
 8008e4a:	4b30      	ldr	r3, [pc, #192]	; (8008f0c <SystemClock_Config+0xf8>)
 8008e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4e:	4a2f      	ldr	r2, [pc, #188]	; (8008f0c <SystemClock_Config+0xf8>)
 8008e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e54:	6413      	str	r3, [r2, #64]	; 0x40
 8008e56:	4b2d      	ldr	r3, [pc, #180]	; (8008f0c <SystemClock_Config+0xf8>)
 8008e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e5e:	60bb      	str	r3, [r7, #8]
 8008e60:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008e62:	2300      	movs	r3, #0
 8008e64:	607b      	str	r3, [r7, #4]
 8008e66:	4b2a      	ldr	r3, [pc, #168]	; (8008f10 <SystemClock_Config+0xfc>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a29      	ldr	r2, [pc, #164]	; (8008f10 <SystemClock_Config+0xfc>)
 8008e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e70:	6013      	str	r3, [r2, #0]
 8008e72:	4b27      	ldr	r3, [pc, #156]	; (8008f10 <SystemClock_Config+0xfc>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e7a:	607b      	str	r3, [r7, #4]
 8008e7c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008e82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e86:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008e88:	2302      	movs	r3, #2
 8008e8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008e8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008e90:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8008e92:	230c      	movs	r3, #12
 8008e94:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 164;
 8008e96:	23a4      	movs	r3, #164	; 0xa4
 8008e98:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008e9a:	2302      	movs	r3, #2
 8008e9c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8008e9e:	2307      	movs	r3, #7
 8008ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008ea2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7f9 feb0 	bl	8002c0c <HAL_RCC_OscConfig>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d001      	beq.n	8008eb6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8008eb2:	f000 fdfd 	bl	8009ab0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008eb6:	230f      	movs	r3, #15
 8008eb8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008eba:	2302      	movs	r3, #2
 8008ebc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008ec2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ecc:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8008ece:	f107 031c 	add.w	r3, r7, #28
 8008ed2:	2105      	movs	r1, #5
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7fa f909 	bl	80030ec <HAL_RCC_ClockConfig>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d001      	beq.n	8008ee4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8008ee0:	f000 fde6 	bl	8009ab0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 120;
 8008ee8:	2378      	movs	r3, #120	; 0x78
 8008eea:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 5;
 8008eec:	2305      	movs	r3, #5
 8008eee:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008ef0:	f107 030c 	add.w	r3, r7, #12
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7fa fae1 	bl	80034bc <HAL_RCCEx_PeriphCLKConfig>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d001      	beq.n	8008f04 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8008f00:	f000 fdd6 	bl	8009ab0 <Error_Handler>
  }
}
 8008f04:	bf00      	nop
 8008f06:	3760      	adds	r7, #96	; 0x60
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	40023800 	.word	0x40023800
 8008f10:	40007000 	.word	0x40007000

08008f14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008f18:	4b12      	ldr	r3, [pc, #72]	; (8008f64 <MX_I2C1_Init+0x50>)
 8008f1a:	4a13      	ldr	r2, [pc, #76]	; (8008f68 <MX_I2C1_Init+0x54>)
 8008f1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8008f1e:	4b11      	ldr	r3, [pc, #68]	; (8008f64 <MX_I2C1_Init+0x50>)
 8008f20:	4a12      	ldr	r2, [pc, #72]	; (8008f6c <MX_I2C1_Init+0x58>)
 8008f22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008f24:	4b0f      	ldr	r3, [pc, #60]	; (8008f64 <MX_I2C1_Init+0x50>)
 8008f26:	2200      	movs	r2, #0
 8008f28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008f2a:	4b0e      	ldr	r3, [pc, #56]	; (8008f64 <MX_I2C1_Init+0x50>)
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008f30:	4b0c      	ldr	r3, [pc, #48]	; (8008f64 <MX_I2C1_Init+0x50>)
 8008f32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008f36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008f38:	4b0a      	ldr	r3, [pc, #40]	; (8008f64 <MX_I2C1_Init+0x50>)
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008f3e:	4b09      	ldr	r3, [pc, #36]	; (8008f64 <MX_I2C1_Init+0x50>)
 8008f40:	2200      	movs	r2, #0
 8008f42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008f44:	4b07      	ldr	r3, [pc, #28]	; (8008f64 <MX_I2C1_Init+0x50>)
 8008f46:	2200      	movs	r2, #0
 8008f48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008f4a:	4b06      	ldr	r3, [pc, #24]	; (8008f64 <MX_I2C1_Init+0x50>)
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008f50:	4804      	ldr	r0, [pc, #16]	; (8008f64 <MX_I2C1_Init+0x50>)
 8008f52:	f7f8 fa75 	bl	8001440 <HAL_I2C_Init>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d001      	beq.n	8008f60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008f5c:	f000 fda8 	bl	8009ab0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8008f60:	bf00      	nop
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	20008128 	.word	0x20008128
 8008f68:	40005400 	.word	0x40005400
 8008f6c:	000186a0 	.word	0x000186a0

08008f70 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8008f74:	4b13      	ldr	r3, [pc, #76]	; (8008fc4 <MX_I2S2_Init+0x54>)
 8008f76:	4a14      	ldr	r2, [pc, #80]	; (8008fc8 <MX_I2S2_Init+0x58>)
 8008f78:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8008f7a:	4b12      	ldr	r3, [pc, #72]	; (8008fc4 <MX_I2S2_Init+0x54>)
 8008f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f80:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8008f82:	4b10      	ldr	r3, [pc, #64]	; (8008fc4 <MX_I2S2_Init+0x54>)
 8008f84:	2200      	movs	r2, #0
 8008f86:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8008f88:	4b0e      	ldr	r3, [pc, #56]	; (8008fc4 <MX_I2S2_Init+0x54>)
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8008f8e:	4b0d      	ldr	r3, [pc, #52]	; (8008fc4 <MX_I2S2_Init+0x54>)
 8008f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f94:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8008f96:	4b0b      	ldr	r3, [pc, #44]	; (8008fc4 <MX_I2S2_Init+0x54>)
 8008f98:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8008f9c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8008f9e:	4b09      	ldr	r3, [pc, #36]	; (8008fc4 <MX_I2S2_Init+0x54>)
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8008fa4:	4b07      	ldr	r3, [pc, #28]	; (8008fc4 <MX_I2S2_Init+0x54>)
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8008faa:	4b06      	ldr	r3, [pc, #24]	; (8008fc4 <MX_I2S2_Init+0x54>)
 8008fac:	2200      	movs	r2, #0
 8008fae:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8008fb0:	4804      	ldr	r0, [pc, #16]	; (8008fc4 <MX_I2S2_Init+0x54>)
 8008fb2:	f7f8 fe85 	bl	8001cc0 <HAL_I2S_Init>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d001      	beq.n	8008fc0 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8008fbc:	f000 fd78 	bl	8009ab0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8008fc0:	bf00      	nop
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	2000c9e4 	.word	0x2000c9e4
 8008fc8:	40003800 	.word	0x40003800

08008fcc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8008fd0:	4b0c      	ldr	r3, [pc, #48]	; (8009004 <MX_SDIO_SD_Init+0x38>)
 8008fd2:	4a0d      	ldr	r2, [pc, #52]	; (8009008 <MX_SDIO_SD_Init+0x3c>)
 8008fd4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8008fd6:	4b0b      	ldr	r3, [pc, #44]	; (8009004 <MX_SDIO_SD_Init+0x38>)
 8008fd8:	2200      	movs	r2, #0
 8008fda:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8008fdc:	4b09      	ldr	r3, [pc, #36]	; (8009004 <MX_SDIO_SD_Init+0x38>)
 8008fde:	2200      	movs	r2, #0
 8008fe0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008fe2:	4b08      	ldr	r3, [pc, #32]	; (8009004 <MX_SDIO_SD_Init+0x38>)
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8008fe8:	4b06      	ldr	r3, [pc, #24]	; (8009004 <MX_SDIO_SD_Init+0x38>)
 8008fea:	2200      	movs	r2, #0
 8008fec:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008fee:	4b05      	ldr	r3, [pc, #20]	; (8009004 <MX_SDIO_SD_Init+0x38>)
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8008ff4:	4b03      	ldr	r3, [pc, #12]	; (8009004 <MX_SDIO_SD_Init+0x38>)
 8008ff6:	2204      	movs	r2, #4
 8008ff8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8008ffa:	bf00      	nop
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr
 8009004:	2000a464 	.word	0x2000a464
 8009008:	40012c00 	.word	0x40012c00

0800900c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b086      	sub	sp, #24
 8009010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009012:	f107 0308 	add.w	r3, r7, #8
 8009016:	2200      	movs	r2, #0
 8009018:	601a      	str	r2, [r3, #0]
 800901a:	605a      	str	r2, [r3, #4]
 800901c:	609a      	str	r2, [r3, #8]
 800901e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009020:	463b      	mov	r3, r7
 8009022:	2200      	movs	r2, #0
 8009024:	601a      	str	r2, [r3, #0]
 8009026:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009028:	4b1d      	ldr	r3, [pc, #116]	; (80090a0 <MX_TIM2_Init+0x94>)
 800902a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800902e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8009030:	4b1b      	ldr	r3, [pc, #108]	; (80090a0 <MX_TIM2_Init+0x94>)
 8009032:	2200      	movs	r2, #0
 8009034:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009036:	4b1a      	ldr	r3, [pc, #104]	; (80090a0 <MX_TIM2_Init+0x94>)
 8009038:	2200      	movs	r2, #0
 800903a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 83968;
 800903c:	4b18      	ldr	r3, [pc, #96]	; (80090a0 <MX_TIM2_Init+0x94>)
 800903e:	f44f 32a4 	mov.w	r2, #83968	; 0x14800
 8009042:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009044:	4b16      	ldr	r3, [pc, #88]	; (80090a0 <MX_TIM2_Init+0x94>)
 8009046:	2200      	movs	r2, #0
 8009048:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800904a:	4b15      	ldr	r3, [pc, #84]	; (80090a0 <MX_TIM2_Init+0x94>)
 800904c:	2200      	movs	r2, #0
 800904e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009050:	4813      	ldr	r0, [pc, #76]	; (80090a0 <MX_TIM2_Init+0x94>)
 8009052:	f7fb fced 	bl	8004a30 <HAL_TIM_Base_Init>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d001      	beq.n	8009060 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800905c:	f000 fd28 	bl	8009ab0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009064:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009066:	f107 0308 	add.w	r3, r7, #8
 800906a:	4619      	mov	r1, r3
 800906c:	480c      	ldr	r0, [pc, #48]	; (80090a0 <MX_TIM2_Init+0x94>)
 800906e:	f7fc f843 	bl	80050f8 <HAL_TIM_ConfigClockSource>
 8009072:	4603      	mov	r3, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d001      	beq.n	800907c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8009078:	f000 fd1a 	bl	8009ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800907c:	2300      	movs	r3, #0
 800907e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009080:	2300      	movs	r3, #0
 8009082:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009084:	463b      	mov	r3, r7
 8009086:	4619      	mov	r1, r3
 8009088:	4805      	ldr	r0, [pc, #20]	; (80090a0 <MX_TIM2_Init+0x94>)
 800908a:	f7fc fcbb 	bl	8005a04 <HAL_TIMEx_MasterConfigSynchronization>
 800908e:	4603      	mov	r3, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	d001      	beq.n	8009098 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8009094:	f000 fd0c 	bl	8009ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8009098:	bf00      	nop
 800909a:	3718      	adds	r7, #24
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	2000c4e8 	.word	0x2000c4e8

080090a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b08e      	sub	sp, #56	; 0x38
 80090a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80090aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80090ae:	2200      	movs	r2, #0
 80090b0:	601a      	str	r2, [r3, #0]
 80090b2:	605a      	str	r2, [r3, #4]
 80090b4:	609a      	str	r2, [r3, #8]
 80090b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80090b8:	f107 0320 	add.w	r3, r7, #32
 80090bc:	2200      	movs	r2, #0
 80090be:	601a      	str	r2, [r3, #0]
 80090c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80090c2:	1d3b      	adds	r3, r7, #4
 80090c4:	2200      	movs	r2, #0
 80090c6:	601a      	str	r2, [r3, #0]
 80090c8:	605a      	str	r2, [r3, #4]
 80090ca:	609a      	str	r2, [r3, #8]
 80090cc:	60da      	str	r2, [r3, #12]
 80090ce:	611a      	str	r2, [r3, #16]
 80090d0:	615a      	str	r2, [r3, #20]
 80090d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80090d4:	4b2c      	ldr	r3, [pc, #176]	; (8009188 <MX_TIM3_Init+0xe4>)
 80090d6:	4a2d      	ldr	r2, [pc, #180]	; (800918c <MX_TIM3_Init+0xe8>)
 80090d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80090da:	4b2b      	ldr	r3, [pc, #172]	; (8009188 <MX_TIM3_Init+0xe4>)
 80090dc:	2200      	movs	r2, #0
 80090de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80090e0:	4b29      	ldr	r3, [pc, #164]	; (8009188 <MX_TIM3_Init+0xe4>)
 80090e2:	2200      	movs	r2, #0
 80090e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 104;
 80090e6:	4b28      	ldr	r3, [pc, #160]	; (8009188 <MX_TIM3_Init+0xe4>)
 80090e8:	2268      	movs	r2, #104	; 0x68
 80090ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80090ec:	4b26      	ldr	r3, [pc, #152]	; (8009188 <MX_TIM3_Init+0xe4>)
 80090ee:	2200      	movs	r2, #0
 80090f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80090f2:	4b25      	ldr	r3, [pc, #148]	; (8009188 <MX_TIM3_Init+0xe4>)
 80090f4:	2280      	movs	r2, #128	; 0x80
 80090f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80090f8:	4823      	ldr	r0, [pc, #140]	; (8009188 <MX_TIM3_Init+0xe4>)
 80090fa:	f7fb fc99 	bl	8004a30 <HAL_TIM_Base_Init>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d001      	beq.n	8009108 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8009104:	f000 fcd4 	bl	8009ab0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800910c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800910e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009112:	4619      	mov	r1, r3
 8009114:	481c      	ldr	r0, [pc, #112]	; (8009188 <MX_TIM3_Init+0xe4>)
 8009116:	f7fb ffef 	bl	80050f8 <HAL_TIM_ConfigClockSource>
 800911a:	4603      	mov	r3, r0
 800911c:	2b00      	cmp	r3, #0
 800911e:	d001      	beq.n	8009124 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8009120:	f000 fcc6 	bl	8009ab0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8009124:	4818      	ldr	r0, [pc, #96]	; (8009188 <MX_TIM3_Init+0xe4>)
 8009126:	f7fb fcd2 	bl	8004ace <HAL_TIM_PWM_Init>
 800912a:	4603      	mov	r3, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d001      	beq.n	8009134 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8009130:	f000 fcbe 	bl	8009ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009134:	2300      	movs	r3, #0
 8009136:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009138:	2300      	movs	r3, #0
 800913a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800913c:	f107 0320 	add.w	r3, r7, #32
 8009140:	4619      	mov	r1, r3
 8009142:	4811      	ldr	r0, [pc, #68]	; (8009188 <MX_TIM3_Init+0xe4>)
 8009144:	f7fc fc5e 	bl	8005a04 <HAL_TIMEx_MasterConfigSynchronization>
 8009148:	4603      	mov	r3, r0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d001      	beq.n	8009152 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800914e:	f000 fcaf 	bl	8009ab0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8009152:	2370      	movs	r3, #112	; 0x70
 8009154:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009156:	2300      	movs	r3, #0
 8009158:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800915a:	2302      	movs	r3, #2
 800915c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800915e:	2300      	movs	r3, #0
 8009160:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009162:	1d3b      	adds	r3, r7, #4
 8009164:	2204      	movs	r2, #4
 8009166:	4619      	mov	r1, r3
 8009168:	4807      	ldr	r0, [pc, #28]	; (8009188 <MX_TIM3_Init+0xe4>)
 800916a:	f7fb feff 	bl	8004f6c <HAL_TIM_PWM_ConfigChannel>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d001      	beq.n	8009178 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8009174:	f000 fc9c 	bl	8009ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8009178:	4803      	ldr	r0, [pc, #12]	; (8009188 <MX_TIM3_Init+0xe4>)
 800917a:	f000 ffdf 	bl	800a13c <HAL_TIM_MspPostInit>

}
 800917e:	bf00      	nop
 8009180:	3738      	adds	r7, #56	; 0x38
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	2000a194 	.word	0x2000a194
 800918c:	40000400 	.word	0x40000400

08009190 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b086      	sub	sp, #24
 8009194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009196:	f107 0308 	add.w	r3, r7, #8
 800919a:	2200      	movs	r2, #0
 800919c:	601a      	str	r2, [r3, #0]
 800919e:	605a      	str	r2, [r3, #4]
 80091a0:	609a      	str	r2, [r3, #8]
 80091a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80091a4:	463b      	mov	r3, r7
 80091a6:	2200      	movs	r2, #0
 80091a8:	601a      	str	r2, [r3, #0]
 80091aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80091ac:	4b1d      	ldr	r3, [pc, #116]	; (8009224 <MX_TIM4_Init+0x94>)
 80091ae:	4a1e      	ldr	r2, [pc, #120]	; (8009228 <MX_TIM4_Init+0x98>)
 80091b0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 80091b2:	4b1c      	ldr	r3, [pc, #112]	; (8009224 <MX_TIM4_Init+0x94>)
 80091b4:	224f      	movs	r2, #79	; 0x4f
 80091b6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80091b8:	4b1a      	ldr	r3, [pc, #104]	; (8009224 <MX_TIM4_Init+0x94>)
 80091ba:	2200      	movs	r2, #0
 80091bc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 41983;
 80091be:	4b19      	ldr	r3, [pc, #100]	; (8009224 <MX_TIM4_Init+0x94>)
 80091c0:	f24a 32ff 	movw	r2, #41983	; 0xa3ff
 80091c4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80091c6:	4b17      	ldr	r3, [pc, #92]	; (8009224 <MX_TIM4_Init+0x94>)
 80091c8:	2200      	movs	r2, #0
 80091ca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80091cc:	4b15      	ldr	r3, [pc, #84]	; (8009224 <MX_TIM4_Init+0x94>)
 80091ce:	2200      	movs	r2, #0
 80091d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80091d2:	4814      	ldr	r0, [pc, #80]	; (8009224 <MX_TIM4_Init+0x94>)
 80091d4:	f7fb fc2c 	bl	8004a30 <HAL_TIM_Base_Init>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d001      	beq.n	80091e2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80091de:	f000 fc67 	bl	8009ab0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80091e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80091e8:	f107 0308 	add.w	r3, r7, #8
 80091ec:	4619      	mov	r1, r3
 80091ee:	480d      	ldr	r0, [pc, #52]	; (8009224 <MX_TIM4_Init+0x94>)
 80091f0:	f7fb ff82 	bl	80050f8 <HAL_TIM_ConfigClockSource>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d001      	beq.n	80091fe <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80091fa:	f000 fc59 	bl	8009ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80091fe:	2300      	movs	r3, #0
 8009200:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009202:	2300      	movs	r3, #0
 8009204:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009206:	463b      	mov	r3, r7
 8009208:	4619      	mov	r1, r3
 800920a:	4806      	ldr	r0, [pc, #24]	; (8009224 <MX_TIM4_Init+0x94>)
 800920c:	f7fc fbfa 	bl	8005a04 <HAL_TIMEx_MasterConfigSynchronization>
 8009210:	4603      	mov	r3, r0
 8009212:	2b00      	cmp	r3, #0
 8009214:	d001      	beq.n	800921a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8009216:	f000 fc4b 	bl	8009ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800921a:	bf00      	nop
 800921c:	3718      	adds	r7, #24
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	200080e8 	.word	0x200080e8
 8009228:	40000800 	.word	0x40000800

0800922c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009232:	2300      	movs	r3, #0
 8009234:	607b      	str	r3, [r7, #4]
 8009236:	4b10      	ldr	r3, [pc, #64]	; (8009278 <MX_DMA_Init+0x4c>)
 8009238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800923a:	4a0f      	ldr	r2, [pc, #60]	; (8009278 <MX_DMA_Init+0x4c>)
 800923c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009240:	6313      	str	r3, [r2, #48]	; 0x30
 8009242:	4b0d      	ldr	r3, [pc, #52]	; (8009278 <MX_DMA_Init+0x4c>)
 8009244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009246:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800924a:	607b      	str	r3, [r7, #4]
 800924c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 1, 0);
 800924e:	2200      	movs	r2, #0
 8009250:	2101      	movs	r1, #1
 8009252:	200f      	movs	r0, #15
 8009254:	f7f7 fafb 	bl	800084e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8009258:	200f      	movs	r0, #15
 800925a:	f7f7 fb14 	bl	8000886 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 1, 0);
 800925e:	2200      	movs	r2, #0
 8009260:	2101      	movs	r1, #1
 8009262:	2010      	movs	r0, #16
 8009264:	f7f7 faf3 	bl	800084e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8009268:	2010      	movs	r0, #16
 800926a:	f7f7 fb0c 	bl	8000886 <HAL_NVIC_EnableIRQ>

}
 800926e:	bf00      	nop
 8009270:	3708      	adds	r7, #8
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	40023800 	.word	0x40023800

0800927c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b08c      	sub	sp, #48	; 0x30
 8009280:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009282:	f107 031c 	add.w	r3, r7, #28
 8009286:	2200      	movs	r2, #0
 8009288:	601a      	str	r2, [r3, #0]
 800928a:	605a      	str	r2, [r3, #4]
 800928c:	609a      	str	r2, [r3, #8]
 800928e:	60da      	str	r2, [r3, #12]
 8009290:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009292:	2300      	movs	r3, #0
 8009294:	61bb      	str	r3, [r7, #24]
 8009296:	4b76      	ldr	r3, [pc, #472]	; (8009470 <MX_GPIO_Init+0x1f4>)
 8009298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800929a:	4a75      	ldr	r2, [pc, #468]	; (8009470 <MX_GPIO_Init+0x1f4>)
 800929c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092a0:	6313      	str	r3, [r2, #48]	; 0x30
 80092a2:	4b73      	ldr	r3, [pc, #460]	; (8009470 <MX_GPIO_Init+0x1f4>)
 80092a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092aa:	61bb      	str	r3, [r7, #24]
 80092ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80092ae:	2300      	movs	r3, #0
 80092b0:	617b      	str	r3, [r7, #20]
 80092b2:	4b6f      	ldr	r3, [pc, #444]	; (8009470 <MX_GPIO_Init+0x1f4>)
 80092b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092b6:	4a6e      	ldr	r2, [pc, #440]	; (8009470 <MX_GPIO_Init+0x1f4>)
 80092b8:	f043 0304 	orr.w	r3, r3, #4
 80092bc:	6313      	str	r3, [r2, #48]	; 0x30
 80092be:	4b6c      	ldr	r3, [pc, #432]	; (8009470 <MX_GPIO_Init+0x1f4>)
 80092c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c2:	f003 0304 	and.w	r3, r3, #4
 80092c6:	617b      	str	r3, [r7, #20]
 80092c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80092ca:	2300      	movs	r3, #0
 80092cc:	613b      	str	r3, [r7, #16]
 80092ce:	4b68      	ldr	r3, [pc, #416]	; (8009470 <MX_GPIO_Init+0x1f4>)
 80092d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d2:	4a67      	ldr	r2, [pc, #412]	; (8009470 <MX_GPIO_Init+0x1f4>)
 80092d4:	f043 0301 	orr.w	r3, r3, #1
 80092d8:	6313      	str	r3, [r2, #48]	; 0x30
 80092da:	4b65      	ldr	r3, [pc, #404]	; (8009470 <MX_GPIO_Init+0x1f4>)
 80092dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092de:	f003 0301 	and.w	r3, r3, #1
 80092e2:	613b      	str	r3, [r7, #16]
 80092e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80092e6:	2300      	movs	r3, #0
 80092e8:	60fb      	str	r3, [r7, #12]
 80092ea:	4b61      	ldr	r3, [pc, #388]	; (8009470 <MX_GPIO_Init+0x1f4>)
 80092ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ee:	4a60      	ldr	r2, [pc, #384]	; (8009470 <MX_GPIO_Init+0x1f4>)
 80092f0:	f043 0302 	orr.w	r3, r3, #2
 80092f4:	6313      	str	r3, [r2, #48]	; 0x30
 80092f6:	4b5e      	ldr	r3, [pc, #376]	; (8009470 <MX_GPIO_Init+0x1f4>)
 80092f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092fa:	f003 0302 	and.w	r3, r3, #2
 80092fe:	60fb      	str	r3, [r7, #12]
 8009300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009302:	2300      	movs	r3, #0
 8009304:	60bb      	str	r3, [r7, #8]
 8009306:	4b5a      	ldr	r3, [pc, #360]	; (8009470 <MX_GPIO_Init+0x1f4>)
 8009308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800930a:	4a59      	ldr	r2, [pc, #356]	; (8009470 <MX_GPIO_Init+0x1f4>)
 800930c:	f043 0310 	orr.w	r3, r3, #16
 8009310:	6313      	str	r3, [r2, #48]	; 0x30
 8009312:	4b57      	ldr	r3, [pc, #348]	; (8009470 <MX_GPIO_Init+0x1f4>)
 8009314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009316:	f003 0310 	and.w	r3, r3, #16
 800931a:	60bb      	str	r3, [r7, #8]
 800931c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800931e:	2300      	movs	r3, #0
 8009320:	607b      	str	r3, [r7, #4]
 8009322:	4b53      	ldr	r3, [pc, #332]	; (8009470 <MX_GPIO_Init+0x1f4>)
 8009324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009326:	4a52      	ldr	r2, [pc, #328]	; (8009470 <MX_GPIO_Init+0x1f4>)
 8009328:	f043 0308 	orr.w	r3, r3, #8
 800932c:	6313      	str	r3, [r2, #48]	; 0x30
 800932e:	4b50      	ldr	r3, [pc, #320]	; (8009470 <MX_GPIO_Init+0x1f4>)
 8009330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009332:	f003 0308 	and.w	r3, r3, #8
 8009336:	607b      	str	r3, [r7, #4]
 8009338:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MIDI_OUT_Pin|LED_STATUS_Pin, GPIO_PIN_RESET);
 800933a:	2200      	movs	r2, #0
 800933c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009340:	484c      	ldr	r0, [pc, #304]	; (8009474 <MX_GPIO_Init+0x1f8>)
 8009342:	f7f8 f84b 	bl	80013dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_A_Pin|LCD_B_Pin, GPIO_PIN_RESET);
 8009346:	2200      	movs	r2, #0
 8009348:	2130      	movs	r1, #48	; 0x30
 800934a:	484b      	ldr	r0, [pc, #300]	; (8009478 <MX_GPIO_Init+0x1fc>)
 800934c:	f7f8 f846 	bl	80013dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_C_Pin|LCD_D_Pin|GPIO1_Pin|GPIO2_Pin, GPIO_PIN_RESET);
 8009350:	2200      	movs	r2, #0
 8009352:	f24c 0103 	movw	r1, #49155	; 0xc003
 8009356:	4849      	ldr	r0, [pc, #292]	; (800947c <MX_GPIO_Init+0x200>)
 8009358:	f7f8 f840 	bl	80013dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_E_Pin|LCD_F_Pin|LCD_G_Pin|LCD_DP_Pin 
 800935c:	2200      	movs	r2, #0
 800935e:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 8009362:	4847      	ldr	r0, [pc, #284]	; (8009480 <MX_GPIO_Init+0x204>)
 8009364:	f7f8 f83a 	bl	80013dc <HAL_GPIO_WritePin>
                          |LCD_DIG1CC_Pin|LCD_DIG2CC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO3_Pin|GPIO4_Pin|GPIO5_Pin|GPIO6_Pin 
 8009368:	2200      	movs	r2, #0
 800936a:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
 800936e:	4845      	ldr	r0, [pc, #276]	; (8009484 <MX_GPIO_Init+0x208>)
 8009370:	f7f8 f834 	bl	80013dc <HAL_GPIO_WritePin>
                          |GPIO7_Pin|GPIO8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : MIDI_OUT_Pin LED_STATUS_Pin */
  GPIO_InitStruct.Pin = MIDI_OUT_Pin|LED_STATUS_Pin;
 8009374:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8009378:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800937a:	2301      	movs	r3, #1
 800937c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800937e:	2300      	movs	r3, #0
 8009380:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009382:	2300      	movs	r3, #0
 8009384:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009386:	f107 031c 	add.w	r3, r7, #28
 800938a:	4619      	mov	r1, r3
 800938c:	4839      	ldr	r0, [pc, #228]	; (8009474 <MX_GPIO_Init+0x1f8>)
 800938e:	f7f7 fe73 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_A_Pin LCD_B_Pin */
  GPIO_InitStruct.Pin = LCD_A_Pin|LCD_B_Pin;
 8009392:	2330      	movs	r3, #48	; 0x30
 8009394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009396:	2301      	movs	r3, #1
 8009398:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800939a:	2300      	movs	r3, #0
 800939c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800939e:	2300      	movs	r3, #0
 80093a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80093a2:	f107 031c 	add.w	r3, r7, #28
 80093a6:	4619      	mov	r1, r3
 80093a8:	4833      	ldr	r0, [pc, #204]	; (8009478 <MX_GPIO_Init+0x1fc>)
 80093aa:	f7f7 fe65 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_C_Pin LCD_D_Pin GPIO1_Pin GPIO2_Pin */
  GPIO_InitStruct.Pin = LCD_C_Pin|LCD_D_Pin|GPIO1_Pin|GPIO2_Pin;
 80093ae:	f24c 0303 	movw	r3, #49155	; 0xc003
 80093b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80093b4:	2301      	movs	r3, #1
 80093b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093b8:	2300      	movs	r3, #0
 80093ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093bc:	2300      	movs	r3, #0
 80093be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80093c0:	f107 031c 	add.w	r3, r7, #28
 80093c4:	4619      	mov	r1, r3
 80093c6:	482d      	ldr	r0, [pc, #180]	; (800947c <MX_GPIO_Init+0x200>)
 80093c8:	f7f7 fe56 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_E_Pin LCD_F_Pin LCD_G_Pin LCD_DP_Pin 
                           LCD_DIG1CC_Pin LCD_DIG2CC_Pin */
  GPIO_InitStruct.Pin = LCD_E_Pin|LCD_F_Pin|LCD_G_Pin|LCD_DP_Pin 
 80093cc:	f44f 53fc 	mov.w	r3, #8064	; 0x1f80
 80093d0:	61fb      	str	r3, [r7, #28]
                          |LCD_DIG1CC_Pin|LCD_DIG2CC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80093d2:	2301      	movs	r3, #1
 80093d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093d6:	2300      	movs	r3, #0
 80093d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093da:	2300      	movs	r3, #0
 80093dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80093de:	f107 031c 	add.w	r3, r7, #28
 80093e2:	4619      	mov	r1, r3
 80093e4:	4826      	ldr	r0, [pc, #152]	; (8009480 <MX_GPIO_Init+0x204>)
 80093e6:	f7f7 fe47 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_PREV_Pin B_NEXT_Pin B_STOP_Pin */
  GPIO_InitStruct.Pin = B_PREV_Pin|B_NEXT_Pin|B_STOP_Pin;
 80093ea:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80093ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80093f0:	2300      	movs	r3, #0
 80093f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80093f4:	2301      	movs	r3, #1
 80093f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80093f8:	f107 031c 	add.w	r3, r7, #28
 80093fc:	4619      	mov	r1, r3
 80093fe:	4820      	ldr	r0, [pc, #128]	; (8009480 <MX_GPIO_Init+0x204>)
 8009400:	f7f7 fe3a 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO3_Pin GPIO4_Pin GPIO5_Pin GPIO6_Pin 
                           GPIO7_Pin GPIO8_Pin */
  GPIO_InitStruct.Pin = GPIO3_Pin|GPIO4_Pin|GPIO5_Pin|GPIO6_Pin 
 8009404:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 8009408:	61fb      	str	r3, [r7, #28]
                          |GPIO7_Pin|GPIO8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800940a:	2301      	movs	r3, #1
 800940c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800940e:	2300      	movs	r3, #0
 8009410:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009412:	2300      	movs	r3, #0
 8009414:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009416:	f107 031c 	add.w	r3, r7, #28
 800941a:	4619      	mov	r1, r3
 800941c:	4819      	ldr	r0, [pc, #100]	; (8009484 <MX_GPIO_Init+0x208>)
 800941e:	f7f7 fe2b 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CD_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin;
 8009422:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009426:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009428:	2300      	movs	r3, #0
 800942a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800942c:	2300      	movs	r3, #0
 800942e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 8009430:	f107 031c 	add.w	r3, r7, #28
 8009434:	4619      	mov	r1, r3
 8009436:	480f      	ldr	r0, [pc, #60]	; (8009474 <MX_GPIO_Init+0x1f8>)
 8009438:	f7f7 fe1e 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIGGER_Pin */
  GPIO_InitStruct.Pin = TRIGGER_Pin;
 800943c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009440:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009442:	4b11      	ldr	r3, [pc, #68]	; (8009488 <MX_GPIO_Init+0x20c>)
 8009444:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009446:	2301      	movs	r3, #1
 8009448:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TRIGGER_GPIO_Port, &GPIO_InitStruct);
 800944a:	f107 031c 	add.w	r3, r7, #28
 800944e:	4619      	mov	r1, r3
 8009450:	4808      	ldr	r0, [pc, #32]	; (8009474 <MX_GPIO_Init+0x1f8>)
 8009452:	f7f7 fe11 	bl	8001078 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8009456:	2200      	movs	r2, #0
 8009458:	2101      	movs	r1, #1
 800945a:	2028      	movs	r0, #40	; 0x28
 800945c:	f7f7 f9f7 	bl	800084e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8009460:	2028      	movs	r0, #40	; 0x28
 8009462:	f7f7 fa10 	bl	8000886 <HAL_NVIC_EnableIRQ>

}
 8009466:	bf00      	nop
 8009468:	3730      	adds	r7, #48	; 0x30
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	40023800 	.word	0x40023800
 8009474:	40020000 	.word	0x40020000
 8009478:	40020800 	.word	0x40020800
 800947c:	40020400 	.word	0x40020400
 8009480:	40021000 	.word	0x40021000
 8009484:	40020c00 	.word	0x40020c00
 8009488:	10110000 	.word	0x10110000

0800948c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	4603      	mov	r3, r0
 8009494:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == TRIGGER_Pin)
 8009496:	88fb      	ldrh	r3, [r7, #6]
 8009498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800949c:	d110      	bne.n	80094c0 <HAL_GPIO_EXTI_Callback+0x34>
	{
		if (Debounce_current[0] == 0)
 800949e:	4b0a      	ldr	r3, [pc, #40]	; (80094c8 <HAL_GPIO_EXTI_Callback+0x3c>)
 80094a0:	881b      	ldrh	r3, [r3, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d10c      	bne.n	80094c0 <HAL_GPIO_EXTI_Callback+0x34>
		{
			Debounce_current[0] = Debounce_ms[0];
 80094a6:	2250      	movs	r2, #80	; 0x50
 80094a8:	4b07      	ldr	r3, [pc, #28]	; (80094c8 <HAL_GPIO_EXTI_Callback+0x3c>)
 80094aa:	801a      	strh	r2, [r3, #0]

			if (Track_Playing)
 80094ac:	4b07      	ldr	r3, [pc, #28]	; (80094cc <HAL_GPIO_EXTI_Callback+0x40>)
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d002      	beq.n	80094ba <HAL_GPIO_EXTI_Callback+0x2e>
			{
			  StopTrack(&hi2s2);
 80094b4:	4806      	ldr	r0, [pc, #24]	; (80094d0 <HAL_GPIO_EXTI_Callback+0x44>)
 80094b6:	f000 f947 	bl	8009748 <StopTrack>
			}

			PlayTrack(&hi2s2);
 80094ba:	4805      	ldr	r0, [pc, #20]	; (80094d0 <HAL_GPIO_EXTI_Callback+0x44>)
 80094bc:	f000 f9ca 	bl	8009854 <PlayTrack>
		}
	}
}
 80094c0:	bf00      	nop
 80094c2:	3708      	adds	r7, #8
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	2000025c 	.word	0x2000025c
 80094cc:	20000266 	.word	0x20000266
 80094d0:	2000c9e4 	.word	0x2000c9e4

080094d4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
// Main loop. 2 timers - TIM2 every 1ms (main switch detection loop) and TIM4 every 40ms (display)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
	  if (htim == &htim2) // every 1ms
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a4e      	ldr	r2, [pc, #312]	; (8009618 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d17b      	bne.n	80095dc <HAL_TIM_PeriodElapsedCallback+0x108>
	  {
		  // MAIN TRIGGER
		  if (Debounce_current[0] != 0)
 80094e4:	4b4d      	ldr	r3, [pc, #308]	; (800961c <HAL_TIM_PeriodElapsedCallback+0x148>)
 80094e6:	881b      	ldrh	r3, [r3, #0]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d005      	beq.n	80094f8 <HAL_TIM_PeriodElapsedCallback+0x24>
		  {
			  Debounce_current[0]--;
 80094ec:	4b4b      	ldr	r3, [pc, #300]	; (800961c <HAL_TIM_PeriodElapsedCallback+0x148>)
 80094ee:	881b      	ldrh	r3, [r3, #0]
 80094f0:	3b01      	subs	r3, #1
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	4b49      	ldr	r3, [pc, #292]	; (800961c <HAL_TIM_PeriodElapsedCallback+0x148>)
 80094f6:	801a      	strh	r2, [r3, #0]
		  }

		  // PREV button
		  if (Debounce_current[1] == 0)
 80094f8:	4b48      	ldr	r3, [pc, #288]	; (800961c <HAL_TIM_PeriodElapsedCallback+0x148>)
 80094fa:	885b      	ldrh	r3, [r3, #2]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d11a      	bne.n	8009536 <HAL_TIM_PeriodElapsedCallback+0x62>
		  {
			  if (HAL_GPIO_ReadPin(B_PREV_GPIO_Port, B_PREV_Pin) == GPIO_PIN_RESET)
 8009500:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009504:	4846      	ldr	r0, [pc, #280]	; (8009620 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8009506:	f7f7 ff51 	bl	80013ac <HAL_GPIO_ReadPin>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d118      	bne.n	8009542 <HAL_TIM_PeriodElapsedCallback+0x6e>
			  {
				  Debounce_current[1] = Debounce_ms[1];
 8009510:	22c8      	movs	r2, #200	; 0xc8
 8009512:	4b42      	ldr	r3, [pc, #264]	; (800961c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8009514:	805a      	strh	r2, [r3, #2]

				  if (Track_Next != 0)
 8009516:	4b43      	ldr	r3, [pc, #268]	; (8009624 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d008      	beq.n	8009530 <HAL_TIM_PeriodElapsedCallback+0x5c>
				  {
					  Track_Next--;
 800951e:	4b41      	ldr	r3, [pc, #260]	; (8009624 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	3b01      	subs	r3, #1
 8009524:	b2da      	uxtb	r2, r3
 8009526:	4b3f      	ldr	r3, [pc, #252]	; (8009624 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8009528:	701a      	strb	r2, [r3, #0]
					  Track_Preloaded = 0;
 800952a:	4b3f      	ldr	r3, [pc, #252]	; (8009628 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800952c:	2200      	movs	r2, #0
 800952e:	701a      	strb	r2, [r3, #0]
				  }
				  LoadTrack();
 8009530:	f000 f950 	bl	80097d4 <LoadTrack>
 8009534:	e005      	b.n	8009542 <HAL_TIM_PeriodElapsedCallback+0x6e>
			  }
		  }
		  else
		  {
			  Debounce_current[1]--;
 8009536:	4b39      	ldr	r3, [pc, #228]	; (800961c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8009538:	885b      	ldrh	r3, [r3, #2]
 800953a:	3b01      	subs	r3, #1
 800953c:	b29a      	uxth	r2, r3
 800953e:	4b37      	ldr	r3, [pc, #220]	; (800961c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8009540:	805a      	strh	r2, [r3, #2]
		  }

		  // NEXT button
		  if (Debounce_current[2] == 0)
 8009542:	4b36      	ldr	r3, [pc, #216]	; (800961c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8009544:	889b      	ldrh	r3, [r3, #4]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d11c      	bne.n	8009584 <HAL_TIM_PeriodElapsedCallback+0xb0>
		  {
			  if (HAL_GPIO_ReadPin(B_NEXT_GPIO_Port, B_NEXT_Pin) == GPIO_PIN_RESET)
 800954a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800954e:	4834      	ldr	r0, [pc, #208]	; (8009620 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8009550:	f7f7 ff2c 	bl	80013ac <HAL_GPIO_ReadPin>
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	d11a      	bne.n	8009590 <HAL_TIM_PeriodElapsedCallback+0xbc>
			  {
				  Debounce_current[2] = Debounce_ms[2];
 800955a:	22c8      	movs	r2, #200	; 0xc8
 800955c:	4b2f      	ldr	r3, [pc, #188]	; (800961c <HAL_TIM_PeriodElapsedCallback+0x148>)
 800955e:	809a      	strh	r2, [r3, #4]

				  if (Track_Next < Track_Max)
 8009560:	4b30      	ldr	r3, [pc, #192]	; (8009624 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8009562:	781a      	ldrb	r2, [r3, #0]
 8009564:	4b31      	ldr	r3, [pc, #196]	; (800962c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	429a      	cmp	r2, r3
 800956a:	d208      	bcs.n	800957e <HAL_TIM_PeriodElapsedCallback+0xaa>
				  {
					  Track_Next++;
 800956c:	4b2d      	ldr	r3, [pc, #180]	; (8009624 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	3301      	adds	r3, #1
 8009572:	b2da      	uxtb	r2, r3
 8009574:	4b2b      	ldr	r3, [pc, #172]	; (8009624 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8009576:	701a      	strb	r2, [r3, #0]
					  Track_Preloaded = 0;
 8009578:	4b2b      	ldr	r3, [pc, #172]	; (8009628 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800957a:	2200      	movs	r2, #0
 800957c:	701a      	strb	r2, [r3, #0]
				  }
				  LoadTrack();
 800957e:	f000 f929 	bl	80097d4 <LoadTrack>
 8009582:	e005      	b.n	8009590 <HAL_TIM_PeriodElapsedCallback+0xbc>
			  }
		  }
		  else
		  {
			  Debounce_current[2]--;
 8009584:	4b25      	ldr	r3, [pc, #148]	; (800961c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8009586:	889b      	ldrh	r3, [r3, #4]
 8009588:	3b01      	subs	r3, #1
 800958a:	b29a      	uxth	r2, r3
 800958c:	4b23      	ldr	r3, [pc, #140]	; (800961c <HAL_TIM_PeriodElapsedCallback+0x148>)
 800958e:	809a      	strh	r2, [r3, #4]
		  }

		  // STOP button
		  if (Debounce_current[3] == 0)
 8009590:	4b22      	ldr	r3, [pc, #136]	; (800961c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8009592:	88db      	ldrh	r3, [r3, #6]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d10e      	bne.n	80095b6 <HAL_TIM_PeriodElapsedCallback+0xe2>
		  {
			  if (HAL_GPIO_ReadPin(B_STOP_GPIO_Port, B_STOP_Pin) == GPIO_PIN_RESET)
 8009598:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800959c:	4820      	ldr	r0, [pc, #128]	; (8009620 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800959e:	f7f7 ff05 	bl	80013ac <HAL_GPIO_ReadPin>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d10c      	bne.n	80095c2 <HAL_TIM_PeriodElapsedCallback+0xee>
			  {
				  Debounce_current[3] = Debounce_ms[3];
 80095a8:	22c8      	movs	r2, #200	; 0xc8
 80095aa:	4b1c      	ldr	r3, [pc, #112]	; (800961c <HAL_TIM_PeriodElapsedCallback+0x148>)
 80095ac:	80da      	strh	r2, [r3, #6]

				  StopTrack(&hi2s2);
 80095ae:	4820      	ldr	r0, [pc, #128]	; (8009630 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80095b0:	f000 f8ca 	bl	8009748 <StopTrack>
 80095b4:	e005      	b.n	80095c2 <HAL_TIM_PeriodElapsedCallback+0xee>
			  }
		  }
		  else
		  {
			  Debounce_current[3]--;
 80095b6:	4b19      	ldr	r3, [pc, #100]	; (800961c <HAL_TIM_PeriodElapsedCallback+0x148>)
 80095b8:	88db      	ldrh	r3, [r3, #6]
 80095ba:	3b01      	subs	r3, #1
 80095bc:	b29a      	uxth	r2, r3
 80095be:	4b17      	ldr	r3, [pc, #92]	; (800961c <HAL_TIM_PeriodElapsedCallback+0x148>)
 80095c0:	80da      	strh	r2, [r3, #6]
		  }

		  UpdateLCD(curr_digit);
 80095c2:	4b1c      	ldr	r3, [pc, #112]	; (8009634 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	4618      	mov	r0, r3
 80095c8:	f000 f9fc 	bl	80099c4 <UpdateLCD>
		  curr_digit = 1 - curr_digit;
 80095cc:	4b19      	ldr	r3, [pc, #100]	; (8009634 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	f1c3 0301 	rsb	r3, r3, #1
 80095d4:	b2da      	uxtb	r2, r3
 80095d6:	4b17      	ldr	r3, [pc, #92]	; (8009634 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80095d8:	701a      	strb	r2, [r3, #0]
				  LED_Current_Frame++;
			  }
		  }
	}

}
 80095da:	e019      	b.n	8009610 <HAL_TIM_PeriodElapsedCallback+0x13c>
	  else if (htim == &htim4) // every 40ms, 25fps
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a16      	ldr	r2, [pc, #88]	; (8009638 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d115      	bne.n	8009610 <HAL_TIM_PeriodElapsedCallback+0x13c>
		  if (Track_Playing)
 80095e4:	4b15      	ldr	r3, [pc, #84]	; (800963c <HAL_TIM_PeriodElapsedCallback+0x168>)
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d011      	beq.n	8009610 <HAL_TIM_PeriodElapsedCallback+0x13c>
			  if(LED_Current_Frame < LED_COLOUR_BUFFER_SIZE)
 80095ec:	4b14      	ldr	r3, [pc, #80]	; (8009640 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095f4:	d20c      	bcs.n	8009610 <HAL_TIM_PeriodElapsedCallback+0x13c>
				  Set_LED_Colour(LED_Colour_Buffer[LED_Current_Frame]);
 80095f6:	4b12      	ldr	r3, [pc, #72]	; (8009640 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a12      	ldr	r2, [pc, #72]	; (8009644 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80095fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009600:	4618      	mov	r0, r3
 8009602:	f000 f997 	bl	8009934 <Set_LED_Colour>
				  LED_Current_Frame++;
 8009606:	4b0e      	ldr	r3, [pc, #56]	; (8009640 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	3301      	adds	r3, #1
 800960c:	4a0c      	ldr	r2, [pc, #48]	; (8009640 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800960e:	6013      	str	r3, [r2, #0]
}
 8009610:	bf00      	nop
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}
 8009618:	2000c4e8 	.word	0x2000c4e8
 800961c:	2000025c 	.word	0x2000025c
 8009620:	40021000 	.word	0x40021000
 8009624:	20000264 	.word	0x20000264
 8009628:	20000265 	.word	0x20000265
 800962c:	20000040 	.word	0x20000040
 8009630:	2000c9e4 	.word	0x2000c9e4
 8009634:	20007a44 	.word	0x20007a44
 8009638:	200080e8 	.word	0x200080e8
 800963c:	20000266 	.word	0x20000266
 8009640:	20007a38 	.word	0x20007a38
 8009644:	20006a38 	.word	0x20006a38

08009648 <LoadLEDBuffer>:

void LoadLEDBuffer(void)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
	// Loads the entire file into LED buffer.

	for(uint32_t i = 0; i < LED_COLOUR_BUFFER_SIZE; i++)
 800964e:	2300      	movs	r3, #0
 8009650:	60fb      	str	r3, [r7, #12]
 8009652:	e007      	b.n	8009664 <LoadLEDBuffer+0x1c>
	{
		LED_Colour_Buffer[i] = 0;
 8009654:	4a35      	ldr	r2, [pc, #212]	; (800972c <LoadLEDBuffer+0xe4>)
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2100      	movs	r1, #0
 800965a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(uint32_t i = 0; i < LED_COLOUR_BUFFER_SIZE; i++)
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	3301      	adds	r3, #1
 8009662:	60fb      	str	r3, [r7, #12]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800966a:	d3f3      	bcc.n	8009654 <LoadLEDBuffer+0xc>
	}

	sprintf(LED_Current_Path, "%03d.led", Track_Next);
 800966c:	4b30      	ldr	r3, [pc, #192]	; (8009730 <LoadLEDBuffer+0xe8>)
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	461a      	mov	r2, r3
 8009672:	4930      	ldr	r1, [pc, #192]	; (8009734 <LoadLEDBuffer+0xec>)
 8009674:	4830      	ldr	r0, [pc, #192]	; (8009738 <LoadLEDBuffer+0xf0>)
 8009676:	f000 fea3 	bl	800a3c0 <siprintf>
	fr = f_open(&LED_fil, LED_Current_Path, FA_READ);
 800967a:	2201      	movs	r2, #1
 800967c:	492e      	ldr	r1, [pc, #184]	; (8009738 <LoadLEDBuffer+0xf0>)
 800967e:	482f      	ldr	r0, [pc, #188]	; (800973c <LoadLEDBuffer+0xf4>)
 8009680:	f7fe fc1c 	bl	8007ebc <f_open>
 8009684:	4603      	mov	r3, r0
 8009686:	461a      	mov	r2, r3
 8009688:	4b2d      	ldr	r3, [pc, #180]	; (8009740 <LoadLEDBuffer+0xf8>)
 800968a:	701a      	strb	r2, [r3, #0]

	if (fr == FR_OK)
 800968c:	4b2c      	ldr	r3, [pc, #176]	; (8009740 <LoadLEDBuffer+0xf8>)
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d145      	bne.n	8009720 <LoadLEDBuffer+0xd8>
	{
		char linebuffer[8] = "0000000";
 8009694:	4a2b      	ldr	r2, [pc, #172]	; (8009744 <LoadLEDBuffer+0xfc>)
 8009696:	463b      	mov	r3, r7
 8009698:	e892 0003 	ldmia.w	r2, {r0, r1}
 800969c:	e883 0003 	stmia.w	r3, {r0, r1}
		for(uint32_t i = 0; i < LED_COLOUR_BUFFER_SIZE; i++)
 80096a0:	2300      	movs	r3, #0
 80096a2:	60bb      	str	r3, [r7, #8]
 80096a4:	e038      	b.n	8009718 <LoadLEDBuffer+0xd0>
		{
			f_gets(linebuffer, 8, &LED_fil);
 80096a6:	463b      	mov	r3, r7
 80096a8:	4a24      	ldr	r2, [pc, #144]	; (800973c <LoadLEDBuffer+0xf4>)
 80096aa:	2108      	movs	r1, #8
 80096ac:	4618      	mov	r0, r3
 80096ae:	f7ff f9af 	bl	8008a10 <f_gets>
			if f_eof(&LED_fil)
 80096b2:	4b22      	ldr	r3, [pc, #136]	; (800973c <LoadLEDBuffer+0xf4>)
 80096b4:	695a      	ldr	r2, [r3, #20]
 80096b6:	4b21      	ldr	r3, [pc, #132]	; (800973c <LoadLEDBuffer+0xf4>)
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d104      	bne.n	80096c8 <LoadLEDBuffer+0x80>
			{
				f_close(&LED_fil);
 80096be:	481f      	ldr	r0, [pc, #124]	; (800973c <LoadLEDBuffer+0xf4>)
 80096c0:	f7fe ff44 	bl	800854c <f_close>
				return;
 80096c4:	bf00      	nop
 80096c6:	e02e      	b.n	8009726 <LoadLEDBuffer+0xde>
			}
			else
			{
				LED_Colour_Buffer[i] = strtol(linebuffer, '\0', 16);
 80096c8:	463b      	mov	r3, r7
 80096ca:	2210      	movs	r2, #16
 80096cc:	2100      	movs	r1, #0
 80096ce:	4618      	mov	r0, r3
 80096d0:	f000 ff12 	bl	800a4f8 <strtol>
 80096d4:	4603      	mov	r3, r0
 80096d6:	4619      	mov	r1, r3
 80096d8:	4a14      	ldr	r2, [pc, #80]	; (800972c <LoadLEDBuffer+0xe4>)
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

				// swap RGB to GRB (?!!) for DMA to WS2812
				LED_Colour_Buffer[i] = (LED_Colour_Buffer[i] & 255) // B
 80096e0:	4a12      	ldr	r2, [pc, #72]	; (800972c <LoadLEDBuffer+0xe4>)
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096e8:	b2da      	uxtb	r2, r3
						+ ((LED_Colour_Buffer[i] & 0xff00) << 8) // G
 80096ea:	4910      	ldr	r1, [pc, #64]	; (800972c <LoadLEDBuffer+0xe4>)
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80096f2:	021b      	lsls	r3, r3, #8
 80096f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80096f8:	431a      	orrs	r2, r3
						+ ((LED_Colour_Buffer[i] & 0xff0000) >> 8); // R
 80096fa:	490c      	ldr	r1, [pc, #48]	; (800972c <LoadLEDBuffer+0xe4>)
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009702:	0a1b      	lsrs	r3, r3, #8
 8009704:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009708:	441a      	add	r2, r3
				LED_Colour_Buffer[i] = (LED_Colour_Buffer[i] & 255) // B
 800970a:	4908      	ldr	r1, [pc, #32]	; (800972c <LoadLEDBuffer+0xe4>)
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(uint32_t i = 0; i < LED_COLOUR_BUFFER_SIZE; i++)
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	3301      	adds	r3, #1
 8009716:	60bb      	str	r3, [r7, #8]
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800971e:	d3c2      	bcc.n	80096a6 <LoadLEDBuffer+0x5e>
			}
		}
	}
	f_close(&LED_fil);
 8009720:	4806      	ldr	r0, [pc, #24]	; (800973c <LoadLEDBuffer+0xf4>)
 8009722:	f7fe ff13 	bl	800854c <f_close>
}
 8009726:	3710      	adds	r7, #16
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}
 800972c:	20006a38 	.word	0x20006a38
 8009730:	20000264 	.word	0x20000264
 8009734:	0800ad88 	.word	0x0800ad88
 8009738:	2000004c 	.word	0x2000004c
 800973c:	20007ebc 	.word	0x20007ebc
 8009740:	2000a460 	.word	0x2000a460
 8009744:	0800ad94 	.word	0x0800ad94

08009748 <StopTrack>:

void StopTrack(I2S_HandleTypeDef *hi2s)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b086      	sub	sp, #24
 800974c:	af02      	add	r7, sp, #8
 800974e:	6078      	str	r0, [r7, #4]
	// Stop what's now playing.

	uint8_t data[2];
	data[0] = 0x03;
 8009750:	2303      	movs	r3, #3
 8009752:	733b      	strb	r3, [r7, #12]
	data[1] = 255;
 8009754:	23ff      	movs	r3, #255	; 0xff
 8009756:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, 0x98, data, 2, 100); // soft-mute the audio to avoid clicks
 8009758:	f107 020c 	add.w	r2, r7, #12
 800975c:	2364      	movs	r3, #100	; 0x64
 800975e:	9300      	str	r3, [sp, #0]
 8009760:	2302      	movs	r3, #2
 8009762:	2198      	movs	r1, #152	; 0x98
 8009764:	4817      	ldr	r0, [pc, #92]	; (80097c4 <StopTrack+0x7c>)
 8009766:	f7f7 ffa3 	bl	80016b0 <HAL_I2C_Master_Transmit>

    // Wait for playback to fade out before stopping DMA (4ms is -20dB... that should be enough)
    HAL_Delay(4);
 800976a:	2004      	movs	r0, #4
 800976c:	f7f6 ff72 	bl	8000654 <HAL_Delay>
    HAL_I2S_DMAStop(hi2s);
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f7f8 fc8d 	bl	8002090 <HAL_I2S_DMAStop>

    // Unmute!
    data[1] = 0;
 8009776:	2300      	movs	r3, #0
 8009778:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, 0x98, data, 2, 100);
 800977a:	f107 020c 	add.w	r2, r7, #12
 800977e:	2364      	movs	r3, #100	; 0x64
 8009780:	9300      	str	r3, [sp, #0]
 8009782:	2302      	movs	r3, #2
 8009784:	2198      	movs	r1, #152	; 0x98
 8009786:	480f      	ldr	r0, [pc, #60]	; (80097c4 <StopTrack+0x7c>)
 8009788:	f7f7 ff92 	bl	80016b0 <HAL_I2C_Master_Transmit>
    Track_Playing = 0;
 800978c:	4b0e      	ldr	r3, [pc, #56]	; (80097c8 <StopTrack+0x80>)
 800978e:	2200      	movs	r2, #0
 8009790:	701a      	strb	r2, [r3, #0]

    // Fill screenbuffer with LOWs
    for (i = 0; i < LED_BYTES; i++)
 8009792:	4b0e      	ldr	r3, [pc, #56]	; (80097cc <StopTrack+0x84>)
 8009794:	2200      	movs	r2, #0
 8009796:	601a      	str	r2, [r3, #0]
 8009798:	e00a      	b.n	80097b0 <StopTrack+0x68>
    {
  	  LED_Framebuffer[i] = LED_ZERO;
 800979a:	4b0c      	ldr	r3, [pc, #48]	; (80097cc <StopTrack+0x84>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a0c      	ldr	r2, [pc, #48]	; (80097d0 <StopTrack+0x88>)
 80097a0:	211c      	movs	r1, #28
 80097a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = 0; i < LED_BYTES; i++)
 80097a6:	4b09      	ldr	r3, [pc, #36]	; (80097cc <StopTrack+0x84>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	3301      	adds	r3, #1
 80097ac:	4a07      	ldr	r2, [pc, #28]	; (80097cc <StopTrack+0x84>)
 80097ae:	6013      	str	r3, [r2, #0]
 80097b0:	4b06      	ldr	r3, [pc, #24]	; (80097cc <StopTrack+0x84>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80097b8:	d3ef      	bcc.n	800979a <StopTrack+0x52>
    }
}
 80097ba:	bf00      	nop
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	bf00      	nop
 80097c4:	20008128 	.word	0x20008128
 80097c8:	20000266 	.word	0x20000266
 80097cc:	20007a40 	.word	0x20007a40
 80097d0:	20000268 	.word	0x20000268

080097d4 <LoadTrack>:

void LoadTrack(void)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	af00      	add	r7, sp, #0
	// Loads the track in Track_Next into the Audio_Next_fil
	  fr = f_close(&Audio_Next_fil);
 80097d8:	4816      	ldr	r0, [pc, #88]	; (8009834 <LoadTrack+0x60>)
 80097da:	f7fe feb7 	bl	800854c <f_close>
 80097de:	4603      	mov	r3, r0
 80097e0:	461a      	mov	r2, r3
 80097e2:	4b15      	ldr	r3, [pc, #84]	; (8009838 <LoadTrack+0x64>)
 80097e4:	701a      	strb	r2, [r3, #0]

	  sprintf(Track_Next_Path, "%03d.wav", Track_Next);
 80097e6:	4b15      	ldr	r3, [pc, #84]	; (800983c <LoadTrack+0x68>)
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	461a      	mov	r2, r3
 80097ec:	4914      	ldr	r1, [pc, #80]	; (8009840 <LoadTrack+0x6c>)
 80097ee:	4815      	ldr	r0, [pc, #84]	; (8009844 <LoadTrack+0x70>)
 80097f0:	f000 fde6 	bl	800a3c0 <siprintf>
	  fr = f_open(&Audio_Next_fil, Track_Next_Path, FA_READ);
 80097f4:	2201      	movs	r2, #1
 80097f6:	4913      	ldr	r1, [pc, #76]	; (8009844 <LoadTrack+0x70>)
 80097f8:	480e      	ldr	r0, [pc, #56]	; (8009834 <LoadTrack+0x60>)
 80097fa:	f7fe fb5f 	bl	8007ebc <f_open>
 80097fe:	4603      	mov	r3, r0
 8009800:	461a      	mov	r2, r3
 8009802:	4b0d      	ldr	r3, [pc, #52]	; (8009838 <LoadTrack+0x64>)
 8009804:	701a      	strb	r2, [r3, #0]
	  if (fr != FR_OK)
 8009806:	4b0c      	ldr	r3, [pc, #48]	; (8009838 <LoadTrack+0x64>)
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d001      	beq.n	8009812 <LoadTrack+0x3e>
	  {
		  Error_Handler();
 800980e:	f000 f94f 	bl	8009ab0 <Error_Handler>
	  }

	  f_rewind(&Audio_Next_fil);
 8009812:	2100      	movs	r1, #0
 8009814:	4807      	ldr	r0, [pc, #28]	; (8009834 <LoadTrack+0x60>)
 8009816:	f7fe feb9 	bl	800858c <f_lseek>
	  f_read(&Audio_Next_fil, &Audio_Next_Buffer[0], AUDIO_BUFFER_SIZE*2, &br);
 800981a:	4b0b      	ldr	r3, [pc, #44]	; (8009848 <LoadTrack+0x74>)
 800981c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009820:	490a      	ldr	r1, [pc, #40]	; (800984c <LoadTrack+0x78>)
 8009822:	4804      	ldr	r0, [pc, #16]	; (8009834 <LoadTrack+0x60>)
 8009824:	f7fe fcd5 	bl	80081d2 <f_read>
	  Track_Preloaded = 1;
 8009828:	4b09      	ldr	r3, [pc, #36]	; (8009850 <LoadTrack+0x7c>)
 800982a:	2201      	movs	r2, #1
 800982c:	701a      	strb	r2, [r3, #0]
}
 800982e:	bf00      	nop
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	2000c528 	.word	0x2000c528
 8009838:	2000a460 	.word	0x2000a460
 800983c:	20000264 	.word	0x20000264
 8009840:	0800ad9c 	.word	0x0800ad9c
 8009844:	20000044 	.word	0x20000044
 8009848:	20007a3c 	.word	0x20007a3c
 800984c:	20008194 	.word	0x20008194
 8009850:	20000265 	.word	0x20000265

08009854 <PlayTrack>:

void PlayTrack(I2S_HandleTypeDef *hi2s)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
	// Moves Audio_Next_Buffer into Audio_DMA_Buffer, starts playback
	memcpy(Audio_DMA_Buffer, Audio_Next_Buffer, AUDIO_BUFFER_SIZE*2);
 800985c:	4a11      	ldr	r2, [pc, #68]	; (80098a4 <PlayTrack+0x50>)
 800985e:	4b12      	ldr	r3, [pc, #72]	; (80098a8 <PlayTrack+0x54>)
 8009860:	4610      	mov	r0, r2
 8009862:	4619      	mov	r1, r3
 8009864:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009868:	461a      	mov	r2, r3
 800986a:	f000 fd95 	bl	800a398 <memcpy>
	Audio_Current_fil = Audio_Next_fil;
 800986e:	4a0f      	ldr	r2, [pc, #60]	; (80098ac <PlayTrack+0x58>)
 8009870:	4b0f      	ldr	r3, [pc, #60]	; (80098b0 <PlayTrack+0x5c>)
 8009872:	4610      	mov	r0, r2
 8009874:	4619      	mov	r1, r3
 8009876:	f44f 730b 	mov.w	r3, #556	; 0x22c
 800987a:	461a      	mov	r2, r3
 800987c:	f000 fd8c 	bl	800a398 <memcpy>
	HAL_I2S_Transmit_DMA (hi2s, Audio_DMA_Buffer, AUDIO_BUFFER_SIZE);
 8009880:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009884:	4907      	ldr	r1, [pc, #28]	; (80098a4 <PlayTrack+0x50>)
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f7f8 fb5a 	bl	8001f40 <HAL_I2S_Transmit_DMA>
	LED_Current_Frame = 0;
 800988c:	4b09      	ldr	r3, [pc, #36]	; (80098b4 <PlayTrack+0x60>)
 800988e:	2200      	movs	r2, #0
 8009890:	601a      	str	r2, [r3, #0]
	LoadLEDBuffer();
 8009892:	f7ff fed9 	bl	8009648 <LoadLEDBuffer>

	Track_Playing = 1;
 8009896:	4b08      	ldr	r3, [pc, #32]	; (80098b8 <PlayTrack+0x64>)
 8009898:	2201      	movs	r2, #1
 800989a:	701a      	strb	r2, [r3, #0]
}
 800989c:	bf00      	nop
 800989e:	3708      	adds	r7, #8
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	2000a4e8 	.word	0x2000a4e8
 80098a8:	20008194 	.word	0x20008194
 80098ac:	2000a1d4 	.word	0x2000a1d4
 80098b0:	2000c528 	.word	0x2000c528
 80098b4:	20007a38 	.word	0x20007a38
 80098b8:	20000266 	.word	0x20000266

080098bc <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
	// First half finished: refill first half while second half is playing
    f_read(&Audio_Current_fil,
 80098c4:	4b08      	ldr	r3, [pc, #32]	; (80098e8 <HAL_I2S_TxHalfCpltCallback+0x2c>)
 80098c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80098ca:	4908      	ldr	r1, [pc, #32]	; (80098ec <HAL_I2S_TxHalfCpltCallback+0x30>)
 80098cc:	4808      	ldr	r0, [pc, #32]	; (80098f0 <HAL_I2S_TxHalfCpltCallback+0x34>)
 80098ce:	f7fe fc80 	bl	80081d2 <f_read>
           &Audio_DMA_Buffer[0],
           AUDIO_BUFFER_SIZE,
           &br);

    if(!br)
 80098d2:	4b05      	ldr	r3, [pc, #20]	; (80098e8 <HAL_I2S_TxHalfCpltCallback+0x2c>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d102      	bne.n	80098e0 <HAL_I2S_TxHalfCpltCallback+0x24>
    {
    	StopTrack(&hi2s2);
 80098da:	4806      	ldr	r0, [pc, #24]	; (80098f4 <HAL_I2S_TxHalfCpltCallback+0x38>)
 80098dc:	f7ff ff34 	bl	8009748 <StopTrack>
    }
}
 80098e0:	bf00      	nop
 80098e2:	3708      	adds	r7, #8
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	20007a3c 	.word	0x20007a3c
 80098ec:	2000a4e8 	.word	0x2000a4e8
 80098f0:	2000a1d4 	.word	0x2000a1d4
 80098f4:	2000c9e4 	.word	0x2000c9e4

080098f8 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
	// Second half finished: refill second half while first half is playing
    f_read(&Audio_Current_fil,
 8009900:	4b08      	ldr	r3, [pc, #32]	; (8009924 <HAL_I2S_TxCpltCallback+0x2c>)
 8009902:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009906:	4908      	ldr	r1, [pc, #32]	; (8009928 <HAL_I2S_TxCpltCallback+0x30>)
 8009908:	4808      	ldr	r0, [pc, #32]	; (800992c <HAL_I2S_TxCpltCallback+0x34>)
 800990a:	f7fe fc62 	bl	80081d2 <f_read>
           &Audio_DMA_Buffer[AUDIO_BUFFER_SIZE/2],
           AUDIO_BUFFER_SIZE,
           &br);

    if(!br)
 800990e:	4b05      	ldr	r3, [pc, #20]	; (8009924 <HAL_I2S_TxCpltCallback+0x2c>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d102      	bne.n	800991c <HAL_I2S_TxCpltCallback+0x24>
    {
    	StopTrack(&hi2s2);
 8009916:	4806      	ldr	r0, [pc, #24]	; (8009930 <HAL_I2S_TxCpltCallback+0x38>)
 8009918:	f7ff ff16 	bl	8009748 <StopTrack>
    }
}
 800991c:	bf00      	nop
 800991e:	3708      	adds	r7, #8
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}
 8009924:	20007a3c 	.word	0x20007a3c
 8009928:	2000b4e8 	.word	0x2000b4e8
 800992c:	2000a1d4 	.word	0x2000a1d4
 8009930:	2000c9e4 	.word	0x2000c9e4

08009934 <Set_LED_Colour>:

void Set_LED_Colour(uint32_t grb_value)
{
 8009934:	b480      	push	{r7}
 8009936:	b085      	sub	sp, #20
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
	// Set the whole WS2812 string to the same colour, a GRB word.

	for (i = 0; i < 24; i++)
 800993c:	4b1f      	ldr	r3, [pc, #124]	; (80099bc <Set_LED_Colour+0x88>)
 800993e:	2200      	movs	r2, #0
 8009940:	601a      	str	r2, [r3, #0]
 8009942:	e030      	b.n	80099a6 <Set_LED_Colour+0x72>
	{
		// Since the LEDs expect MSB-first, we need to do some fiddling to fire
		// that out first.

		uint8_t grb_bit_offset = 23 - i;
 8009944:	4b1d      	ldr	r3, [pc, #116]	; (80099bc <Set_LED_Colour+0x88>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	b2db      	uxtb	r3, r3
 800994a:	f1c3 0317 	rsb	r3, r3, #23
 800994e:	72fb      	strb	r3, [r7, #11]
		uint8_t grb_bit = (grb_value >> grb_bit_offset) & 1;
 8009950:	7afb      	ldrb	r3, [r7, #11]
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	fa22 f303 	lsr.w	r3, r2, r3
 8009958:	b2db      	uxtb	r3, r3
 800995a:	f003 0301 	and.w	r3, r3, #1
 800995e:	72bb      	strb	r3, [r7, #10]

		for (uint32_t j = 0; j < LED_BYTES; j += 24)
 8009960:	2300      	movs	r3, #0
 8009962:	60fb      	str	r3, [r7, #12]
 8009964:	e016      	b.n	8009994 <Set_LED_Colour+0x60>
			{
			if (grb_bit == 1)
 8009966:	7abb      	ldrb	r3, [r7, #10]
 8009968:	2b01      	cmp	r3, #1
 800996a:	d108      	bne.n	800997e <Set_LED_Colour+0x4a>
			{
				LED_Framebuffer[i+j] = LED_ONE;
 800996c:	4b13      	ldr	r3, [pc, #76]	; (80099bc <Set_LED_Colour+0x88>)
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	4413      	add	r3, r2
 8009974:	4a12      	ldr	r2, [pc, #72]	; (80099c0 <Set_LED_Colour+0x8c>)
 8009976:	214c      	movs	r1, #76	; 0x4c
 8009978:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800997c:	e007      	b.n	800998e <Set_LED_Colour+0x5a>
			}
			else
			{
				LED_Framebuffer[i+j] = LED_ZERO;
 800997e:	4b0f      	ldr	r3, [pc, #60]	; (80099bc <Set_LED_Colour+0x88>)
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	4413      	add	r3, r2
 8009986:	4a0e      	ldr	r2, [pc, #56]	; (80099c0 <Set_LED_Colour+0x8c>)
 8009988:	211c      	movs	r1, #28
 800998a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (uint32_t j = 0; j < LED_BYTES; j += 24)
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	3318      	adds	r3, #24
 8009992:	60fb      	str	r3, [r7, #12]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800999a:	d3e4      	bcc.n	8009966 <Set_LED_Colour+0x32>
	for (i = 0; i < 24; i++)
 800999c:	4b07      	ldr	r3, [pc, #28]	; (80099bc <Set_LED_Colour+0x88>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	3301      	adds	r3, #1
 80099a2:	4a06      	ldr	r2, [pc, #24]	; (80099bc <Set_LED_Colour+0x88>)
 80099a4:	6013      	str	r3, [r2, #0]
 80099a6:	4b05      	ldr	r3, [pc, #20]	; (80099bc <Set_LED_Colour+0x88>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	2b17      	cmp	r3, #23
 80099ac:	d9ca      	bls.n	8009944 <Set_LED_Colour+0x10>
			}
		}
	}
}
 80099ae:	bf00      	nop
 80099b0:	3714      	adds	r7, #20
 80099b2:	46bd      	mov	sp, r7
 80099b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b8:	4770      	bx	lr
 80099ba:	bf00      	nop
 80099bc:	20007a40 	.word	0x20007a40
 80099c0:	20000268 	.word	0x20000268

080099c4 <UpdateLCD>:

void UpdateLCD(uint8_t Display_Number)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	4603      	mov	r3, r0
 80099cc:	71fb      	strb	r3, [r7, #7]
	// Calculate pinout for LCD and set pins. Flip-flop between multiple LCD quickly enough to avoid flicker.

	uint8_t digit = Track_Next;
 80099ce:	4b32      	ldr	r3, [pc, #200]	; (8009a98 <UpdateLCD+0xd4>)
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	73fb      	strb	r3, [r7, #15]
	if (Display_Number == 1)
 80099d4:	79fb      	ldrb	r3, [r7, #7]
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d11f      	bne.n	8009a1a <UpdateLCD+0x56>
	{
		digit %= 10;
 80099da:	7bfa      	ldrb	r2, [r7, #15]
 80099dc:	4b2f      	ldr	r3, [pc, #188]	; (8009a9c <UpdateLCD+0xd8>)
 80099de:	fba3 1302 	umull	r1, r3, r3, r2
 80099e2:	08d9      	lsrs	r1, r3, #3
 80099e4:	460b      	mov	r3, r1
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	440b      	add	r3, r1
 80099ea:	005b      	lsls	r3, r3, #1
 80099ec:	1ad3      	subs	r3, r2, r3
 80099ee:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(LCD_DIG1CC_GPIO_Port, LCD_DIG1CC_Pin, GPIO_PIN_RESET);
 80099f0:	2200      	movs	r2, #0
 80099f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80099f6:	482a      	ldr	r0, [pc, #168]	; (8009aa0 <UpdateLCD+0xdc>)
 80099f8:	f7f7 fcf0 	bl	80013dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_DIG2CC_GPIO_Port, LCD_DIG2CC_Pin, GPIO_PIN_SET);
 80099fc:	2201      	movs	r2, #1
 80099fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009a02:	4827      	ldr	r0, [pc, #156]	; (8009aa0 <UpdateLCD+0xdc>)
 8009a04:	f7f7 fcea 	bl	80013dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_DP_GPIO_Port, LCD_DP_Pin, Track_Playing);
 8009a08:	4b26      	ldr	r3, [pc, #152]	; (8009aa4 <UpdateLCD+0xe0>)
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009a12:	4823      	ldr	r0, [pc, #140]	; (8009aa0 <UpdateLCD+0xdc>)
 8009a14:	f7f7 fce2 	bl	80013dc <HAL_GPIO_WritePin>
 8009a18:	e017      	b.n	8009a4a <UpdateLCD+0x86>
	}
	else
	{
		digit /= 10;
 8009a1a:	7bfb      	ldrb	r3, [r7, #15]
 8009a1c:	4a1f      	ldr	r2, [pc, #124]	; (8009a9c <UpdateLCD+0xd8>)
 8009a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a22:	08db      	lsrs	r3, r3, #3
 8009a24:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(LCD_DIG1CC_GPIO_Port, LCD_DIG1CC_Pin, GPIO_PIN_SET);
 8009a26:	2201      	movs	r2, #1
 8009a28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009a2c:	481c      	ldr	r0, [pc, #112]	; (8009aa0 <UpdateLCD+0xdc>)
 8009a2e:	f7f7 fcd5 	bl	80013dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_DIG2CC_GPIO_Port, LCD_DIG2CC_Pin, GPIO_PIN_RESET);
 8009a32:	2200      	movs	r2, #0
 8009a34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009a38:	4819      	ldr	r0, [pc, #100]	; (8009aa0 <UpdateLCD+0xdc>)
 8009a3a:	f7f7 fccf 	bl	80013dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_DP_GPIO_Port, LCD_DP_Pin, GPIO_PIN_RESET);
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009a44:	4816      	ldr	r0, [pc, #88]	; (8009aa0 <UpdateLCD+0xdc>)
 8009a46:	f7f7 fcc9 	bl	80013dc <HAL_GPIO_WritePin>
	}

	for (uint8_t i = 0; i < 8; i++)
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	73bb      	strb	r3, [r7, #14]
 8009a4e:	e01b      	b.n	8009a88 <UpdateLCD+0xc4>
	{
		uint8_t truth = (b7SegmentTable[digit] >> i) & 1;
 8009a50:	7bfb      	ldrb	r3, [r7, #15]
 8009a52:	4a15      	ldr	r2, [pc, #84]	; (8009aa8 <UpdateLCD+0xe4>)
 8009a54:	5cd3      	ldrb	r3, [r2, r3]
 8009a56:	461a      	mov	r2, r3
 8009a58:	7bbb      	ldrb	r3, [r7, #14]
 8009a5a:	fa42 f303 	asr.w	r3, r2, r3
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	f003 0301 	and.w	r3, r3, #1
 8009a64:	737b      	strb	r3, [r7, #13]
		HAL_GPIO_WritePin(LCDs[i].port, LCDs[i].pin, truth);
 8009a66:	7bbb      	ldrb	r3, [r7, #14]
 8009a68:	4a10      	ldr	r2, [pc, #64]	; (8009aac <UpdateLCD+0xe8>)
 8009a6a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8009a6e:	7bbb      	ldrb	r3, [r7, #14]
 8009a70:	4a0e      	ldr	r2, [pc, #56]	; (8009aac <UpdateLCD+0xe8>)
 8009a72:	00db      	lsls	r3, r3, #3
 8009a74:	4413      	add	r3, r2
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	7b7a      	ldrb	r2, [r7, #13]
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	f7f7 fcad 	bl	80013dc <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 8; i++)
 8009a82:	7bbb      	ldrb	r3, [r7, #14]
 8009a84:	3301      	adds	r3, #1
 8009a86:	73bb      	strb	r3, [r7, #14]
 8009a88:	7bbb      	ldrb	r3, [r7, #14]
 8009a8a:	2b07      	cmp	r3, #7
 8009a8c:	d9e0      	bls.n	8009a50 <UpdateLCD+0x8c>
	}

}
 8009a8e:	bf00      	nop
 8009a90:	3710      	adds	r7, #16
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	20000264 	.word	0x20000264
 8009a9c:	cccccccd 	.word	0xcccccccd
 8009aa0:	40021000 	.word	0x40021000
 8009aa4:	20000266 	.word	0x20000266
 8009aa8:	0800ae30 	.word	0x0800ae30
 8009aac:	20000008 	.word	0x20000008

08009ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(GPIOA, LED_STATUS_Pin, GPIO_PIN_SET);
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009abc:	4817      	ldr	r0, [pc, #92]	; (8009b1c <Error_Handler+0x6c>)
 8009abe:	f7f7 fc8d 	bl	80013dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DIG1CC_GPIO_Port, LCD_DIG1CC_Pin, GPIO_PIN_SET);
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009ac8:	4815      	ldr	r0, [pc, #84]	; (8009b20 <Error_Handler+0x70>)
 8009aca:	f7f7 fc87 	bl	80013dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DIG2CC_GPIO_Port, LCD_DIG2CC_Pin, GPIO_PIN_SET);
 8009ace:	2201      	movs	r2, #1
 8009ad0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009ad4:	4812      	ldr	r0, [pc, #72]	; (8009b20 <Error_Handler+0x70>)
 8009ad6:	f7f7 fc81 	bl	80013dc <HAL_GPIO_WritePin>

	for (uint8_t i = 0; i < 8; i++)
 8009ada:	2300      	movs	r3, #0
 8009adc:	71fb      	strb	r3, [r7, #7]
 8009ade:	e019      	b.n	8009b14 <Error_Handler+0x64>
	{
		uint8_t truth = (b7SegmentTable[10] >> i) & 1;
 8009ae0:	2379      	movs	r3, #121	; 0x79
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	79fb      	ldrb	r3, [r7, #7]
 8009ae6:	fa42 f303 	asr.w	r3, r2, r3
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	f003 0301 	and.w	r3, r3, #1
 8009af0:	71bb      	strb	r3, [r7, #6]
		HAL_GPIO_WritePin(LCDs[i].port, LCDs[i].pin, truth);
 8009af2:	79fb      	ldrb	r3, [r7, #7]
 8009af4:	4a0b      	ldr	r2, [pc, #44]	; (8009b24 <Error_Handler+0x74>)
 8009af6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8009afa:	79fb      	ldrb	r3, [r7, #7]
 8009afc:	4a09      	ldr	r2, [pc, #36]	; (8009b24 <Error_Handler+0x74>)
 8009afe:	00db      	lsls	r3, r3, #3
 8009b00:	4413      	add	r3, r2
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	79ba      	ldrb	r2, [r7, #6]
 8009b08:	4619      	mov	r1, r3
 8009b0a:	f7f7 fc67 	bl	80013dc <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 8; i++)
 8009b0e:	79fb      	ldrb	r3, [r7, #7]
 8009b10:	3301      	adds	r3, #1
 8009b12:	71fb      	strb	r3, [r7, #7]
 8009b14:	79fb      	ldrb	r3, [r7, #7]
 8009b16:	2b07      	cmp	r3, #7
 8009b18:	d9e2      	bls.n	8009ae0 <Error_Handler+0x30>
	}
  while (1) {}
 8009b1a:	e7fe      	b.n	8009b1a <Error_Handler+0x6a>
 8009b1c:	40020000 	.word	0x40020000
 8009b20:	40021000 	.word	0x40021000
 8009b24:	20000008 	.word	0x20000008

08009b28 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	4603      	mov	r3, r0
 8009b30:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009b32:	4b0b      	ldr	r3, [pc, #44]	; (8009b60 <SD_CheckStatus+0x38>)
 8009b34:	2201      	movs	r2, #1
 8009b36:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009b38:	f7ff f866 	bl	8008c08 <BSP_SD_GetCardState>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d107      	bne.n	8009b52 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009b42:	4b07      	ldr	r3, [pc, #28]	; (8009b60 <SD_CheckStatus+0x38>)
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	f023 0301 	bic.w	r3, r3, #1
 8009b4c:	b2da      	uxtb	r2, r3
 8009b4e:	4b04      	ldr	r3, [pc, #16]	; (8009b60 <SD_CheckStatus+0x38>)
 8009b50:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009b52:	4b03      	ldr	r3, [pc, #12]	; (8009b60 <SD_CheckStatus+0x38>)
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	b2db      	uxtb	r3, r3
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3708      	adds	r7, #8
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	20000054 	.word	0x20000054

08009b64 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 8009b6e:	4b0b      	ldr	r3, [pc, #44]	; (8009b9c <SD_initialize+0x38>)
 8009b70:	2201      	movs	r2, #1
 8009b72:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009b74:	f7fe ffe6 	bl	8008b44 <BSP_SD_Init>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d107      	bne.n	8009b8e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8009b7e:	79fb      	ldrb	r3, [r7, #7]
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7ff ffd1 	bl	8009b28 <SD_CheckStatus>
 8009b86:	4603      	mov	r3, r0
 8009b88:	461a      	mov	r2, r3
 8009b8a:	4b04      	ldr	r3, [pc, #16]	; (8009b9c <SD_initialize+0x38>)
 8009b8c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009b8e:	4b03      	ldr	r3, [pc, #12]	; (8009b9c <SD_initialize+0x38>)
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	b2db      	uxtb	r3, r3
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3708      	adds	r7, #8
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	20000054 	.word	0x20000054

08009ba0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009baa:	79fb      	ldrb	r3, [r7, #7]
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7ff ffbb 	bl	8009b28 <SD_CheckStatus>
 8009bb2:	4603      	mov	r3, r0
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3708      	adds	r7, #8
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b086      	sub	sp, #24
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60b9      	str	r1, [r7, #8]
 8009bc4:	607a      	str	r2, [r7, #4]
 8009bc6:	603b      	str	r3, [r7, #0]
 8009bc8:	4603      	mov	r3, r0
 8009bca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8009bd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bd4:	683a      	ldr	r2, [r7, #0]
 8009bd6:	6879      	ldr	r1, [r7, #4]
 8009bd8:	68b8      	ldr	r0, [r7, #8]
 8009bda:	f7fe ffd9 	bl	8008b90 <BSP_SD_ReadBlocks>
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d107      	bne.n	8009bf4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8009be4:	bf00      	nop
 8009be6:	f7ff f80f 	bl	8008c08 <BSP_SD_GetCardState>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d1fa      	bne.n	8009be6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3718      	adds	r7, #24
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b086      	sub	sp, #24
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	607a      	str	r2, [r7, #4]
 8009c08:	603b      	str	r3, [r7, #0]
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8009c12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c16:	683a      	ldr	r2, [r7, #0]
 8009c18:	6879      	ldr	r1, [r7, #4]
 8009c1a:	68b8      	ldr	r0, [r7, #8]
 8009c1c:	f7fe ffd6 	bl	8008bcc <BSP_SD_WriteBlocks>
 8009c20:	4603      	mov	r3, r0
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d107      	bne.n	8009c36 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8009c26:	bf00      	nop
 8009c28:	f7fe ffee 	bl	8008c08 <BSP_SD_GetCardState>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1fa      	bne.n	8009c28 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8009c32:	2300      	movs	r3, #0
 8009c34:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3718      	adds	r7, #24
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b08c      	sub	sp, #48	; 0x30
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	4603      	mov	r3, r0
 8009c48:	603a      	str	r2, [r7, #0]
 8009c4a:	71fb      	strb	r3, [r7, #7]
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009c56:	4b25      	ldr	r3, [pc, #148]	; (8009cec <SD_ioctl+0xac>)
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	f003 0301 	and.w	r3, r3, #1
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d001      	beq.n	8009c68 <SD_ioctl+0x28>
 8009c64:	2303      	movs	r3, #3
 8009c66:	e03c      	b.n	8009ce2 <SD_ioctl+0xa2>

  switch (cmd)
 8009c68:	79bb      	ldrb	r3, [r7, #6]
 8009c6a:	2b03      	cmp	r3, #3
 8009c6c:	d834      	bhi.n	8009cd8 <SD_ioctl+0x98>
 8009c6e:	a201      	add	r2, pc, #4	; (adr r2, 8009c74 <SD_ioctl+0x34>)
 8009c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c74:	08009c85 	.word	0x08009c85
 8009c78:	08009c8d 	.word	0x08009c8d
 8009c7c:	08009ca5 	.word	0x08009ca5
 8009c80:	08009cbf 	.word	0x08009cbf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009c84:	2300      	movs	r3, #0
 8009c86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009c8a:	e028      	b.n	8009cde <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009c8c:	f107 030c 	add.w	r3, r7, #12
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7fe ffc9 	bl	8008c28 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009ca2:	e01c      	b.n	8009cde <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009ca4:	f107 030c 	add.w	r3, r7, #12
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7fe ffbd 	bl	8008c28 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb0:	b29a      	uxth	r2, r3
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009cbc:	e00f      	b.n	8009cde <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009cbe:	f107 030c 	add.w	r3, r7, #12
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7fe ffb0 	bl	8008c28 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cca:	0a5a      	lsrs	r2, r3, #9
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009cd6:	e002      	b.n	8009cde <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009cd8:	2304      	movs	r3, #4
 8009cda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009cde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3730      	adds	r7, #48	; 0x30
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	20000054 	.word	0x20000054

08009cf0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	607b      	str	r3, [r7, #4]
 8009cfa:	4b21      	ldr	r3, [pc, #132]	; (8009d80 <HAL_MspInit+0x90>)
 8009cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cfe:	4a20      	ldr	r2, [pc, #128]	; (8009d80 <HAL_MspInit+0x90>)
 8009d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009d04:	6453      	str	r3, [r2, #68]	; 0x44
 8009d06:	4b1e      	ldr	r3, [pc, #120]	; (8009d80 <HAL_MspInit+0x90>)
 8009d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d0e:	607b      	str	r3, [r7, #4]
 8009d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009d12:	2300      	movs	r3, #0
 8009d14:	603b      	str	r3, [r7, #0]
 8009d16:	4b1a      	ldr	r3, [pc, #104]	; (8009d80 <HAL_MspInit+0x90>)
 8009d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d1a:	4a19      	ldr	r2, [pc, #100]	; (8009d80 <HAL_MspInit+0x90>)
 8009d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d20:	6413      	str	r3, [r2, #64]	; 0x40
 8009d22:	4b17      	ldr	r3, [pc, #92]	; (8009d80 <HAL_MspInit+0x90>)
 8009d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d2a:	603b      	str	r3, [r7, #0]
 8009d2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8009d2e:	2200      	movs	r2, #0
 8009d30:	2101      	movs	r1, #1
 8009d32:	f06f 000b 	mvn.w	r0, #11
 8009d36:	f7f6 fd8a 	bl	800084e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	2101      	movs	r1, #1
 8009d3e:	f06f 000a 	mvn.w	r0, #10
 8009d42:	f7f6 fd84 	bl	800084e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8009d46:	2200      	movs	r2, #0
 8009d48:	2101      	movs	r1, #1
 8009d4a:	f06f 0009 	mvn.w	r0, #9
 8009d4e:	f7f6 fd7e 	bl	800084e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 8009d52:	2200      	movs	r2, #0
 8009d54:	2101      	movs	r1, #1
 8009d56:	f06f 0004 	mvn.w	r0, #4
 8009d5a:	f7f6 fd78 	bl	800084e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8009d5e:	2200      	movs	r2, #0
 8009d60:	2101      	movs	r1, #1
 8009d62:	f06f 0003 	mvn.w	r0, #3
 8009d66:	f7f6 fd72 	bl	800084e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	2101      	movs	r1, #1
 8009d6e:	f06f 0001 	mvn.w	r0, #1
 8009d72:	f7f6 fd6c 	bl	800084e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009d76:	bf00      	nop
 8009d78:	3708      	adds	r7, #8
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	40023800 	.word	0x40023800

08009d84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b08a      	sub	sp, #40	; 0x28
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d8c:	f107 0314 	add.w	r3, r7, #20
 8009d90:	2200      	movs	r2, #0
 8009d92:	601a      	str	r2, [r3, #0]
 8009d94:	605a      	str	r2, [r3, #4]
 8009d96:	609a      	str	r2, [r3, #8]
 8009d98:	60da      	str	r2, [r3, #12]
 8009d9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a19      	ldr	r2, [pc, #100]	; (8009e08 <HAL_I2C_MspInit+0x84>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d12b      	bne.n	8009dfe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009da6:	2300      	movs	r3, #0
 8009da8:	613b      	str	r3, [r7, #16]
 8009daa:	4b18      	ldr	r3, [pc, #96]	; (8009e0c <HAL_I2C_MspInit+0x88>)
 8009dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dae:	4a17      	ldr	r2, [pc, #92]	; (8009e0c <HAL_I2C_MspInit+0x88>)
 8009db0:	f043 0302 	orr.w	r3, r3, #2
 8009db4:	6313      	str	r3, [r2, #48]	; 0x30
 8009db6:	4b15      	ldr	r3, [pc, #84]	; (8009e0c <HAL_I2C_MspInit+0x88>)
 8009db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dba:	f003 0302 	and.w	r3, r3, #2
 8009dbe:	613b      	str	r3, [r7, #16]
 8009dc0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009dc2:	23c0      	movs	r3, #192	; 0xc0
 8009dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009dc6:	2312      	movs	r3, #18
 8009dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009dce:	2303      	movs	r3, #3
 8009dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8009dd2:	2304      	movs	r3, #4
 8009dd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009dd6:	f107 0314 	add.w	r3, r7, #20
 8009dda:	4619      	mov	r1, r3
 8009ddc:	480c      	ldr	r0, [pc, #48]	; (8009e10 <HAL_I2C_MspInit+0x8c>)
 8009dde:	f7f7 f94b 	bl	8001078 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009de2:	2300      	movs	r3, #0
 8009de4:	60fb      	str	r3, [r7, #12]
 8009de6:	4b09      	ldr	r3, [pc, #36]	; (8009e0c <HAL_I2C_MspInit+0x88>)
 8009de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dea:	4a08      	ldr	r2, [pc, #32]	; (8009e0c <HAL_I2C_MspInit+0x88>)
 8009dec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009df0:	6413      	str	r3, [r2, #64]	; 0x40
 8009df2:	4b06      	ldr	r3, [pc, #24]	; (8009e0c <HAL_I2C_MspInit+0x88>)
 8009df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009dfa:	60fb      	str	r3, [r7, #12]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8009dfe:	bf00      	nop
 8009e00:	3728      	adds	r7, #40	; 0x28
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	40005400 	.word	0x40005400
 8009e0c:	40023800 	.word	0x40023800
 8009e10:	40020400 	.word	0x40020400

08009e14 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b08a      	sub	sp, #40	; 0x28
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e1c:	f107 0314 	add.w	r3, r7, #20
 8009e20:	2200      	movs	r2, #0
 8009e22:	601a      	str	r2, [r3, #0]
 8009e24:	605a      	str	r2, [r3, #4]
 8009e26:	609a      	str	r2, [r3, #8]
 8009e28:	60da      	str	r2, [r3, #12]
 8009e2a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a41      	ldr	r2, [pc, #260]	; (8009f38 <HAL_I2S_MspInit+0x124>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d17b      	bne.n	8009f2e <HAL_I2S_MspInit+0x11a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8009e36:	2300      	movs	r3, #0
 8009e38:	613b      	str	r3, [r7, #16]
 8009e3a:	4b40      	ldr	r3, [pc, #256]	; (8009f3c <HAL_I2S_MspInit+0x128>)
 8009e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e3e:	4a3f      	ldr	r2, [pc, #252]	; (8009f3c <HAL_I2S_MspInit+0x128>)
 8009e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009e44:	6413      	str	r3, [r2, #64]	; 0x40
 8009e46:	4b3d      	ldr	r3, [pc, #244]	; (8009f3c <HAL_I2S_MspInit+0x128>)
 8009e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e4e:	613b      	str	r3, [r7, #16]
 8009e50:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009e52:	2300      	movs	r3, #0
 8009e54:	60fb      	str	r3, [r7, #12]
 8009e56:	4b39      	ldr	r3, [pc, #228]	; (8009f3c <HAL_I2S_MspInit+0x128>)
 8009e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e5a:	4a38      	ldr	r2, [pc, #224]	; (8009f3c <HAL_I2S_MspInit+0x128>)
 8009e5c:	f043 0304 	orr.w	r3, r3, #4
 8009e60:	6313      	str	r3, [r2, #48]	; 0x30
 8009e62:	4b36      	ldr	r3, [pc, #216]	; (8009f3c <HAL_I2S_MspInit+0x128>)
 8009e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e66:	f003 0304 	and.w	r3, r3, #4
 8009e6a:	60fb      	str	r3, [r7, #12]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009e6e:	2300      	movs	r3, #0
 8009e70:	60bb      	str	r3, [r7, #8]
 8009e72:	4b32      	ldr	r3, [pc, #200]	; (8009f3c <HAL_I2S_MspInit+0x128>)
 8009e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e76:	4a31      	ldr	r2, [pc, #196]	; (8009f3c <HAL_I2S_MspInit+0x128>)
 8009e78:	f043 0302 	orr.w	r3, r3, #2
 8009e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8009e7e:	4b2f      	ldr	r3, [pc, #188]	; (8009f3c <HAL_I2S_MspInit+0x128>)
 8009e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e82:	f003 0302 	and.w	r3, r3, #2
 8009e86:	60bb      	str	r3, [r7, #8]
 8009e88:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PC6     ------> I2S2_MCK
    PB9     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8009e8a:	2348      	movs	r3, #72	; 0x48
 8009e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e8e:	2302      	movs	r3, #2
 8009e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e92:	2300      	movs	r3, #0
 8009e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e96:	2300      	movs	r3, #0
 8009e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009e9a:	2305      	movs	r3, #5
 8009e9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009e9e:	f107 0314 	add.w	r3, r7, #20
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	4826      	ldr	r0, [pc, #152]	; (8009f40 <HAL_I2S_MspInit+0x12c>)
 8009ea6:	f7f7 f8e7 	bl	8001078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8009eaa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009eb0:	2302      	movs	r3, #2
 8009eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009ebc:	2305      	movs	r3, #5
 8009ebe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009ec0:	f107 0314 	add.w	r3, r7, #20
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	481f      	ldr	r0, [pc, #124]	; (8009f44 <HAL_I2S_MspInit+0x130>)
 8009ec8:	f7f7 f8d6 	bl	8001078 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8009ecc:	4b1e      	ldr	r3, [pc, #120]	; (8009f48 <HAL_I2S_MspInit+0x134>)
 8009ece:	4a1f      	ldr	r2, [pc, #124]	; (8009f4c <HAL_I2S_MspInit+0x138>)
 8009ed0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8009ed2:	4b1d      	ldr	r3, [pc, #116]	; (8009f48 <HAL_I2S_MspInit+0x134>)
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009ed8:	4b1b      	ldr	r3, [pc, #108]	; (8009f48 <HAL_I2S_MspInit+0x134>)
 8009eda:	2240      	movs	r2, #64	; 0x40
 8009edc:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009ede:	4b1a      	ldr	r3, [pc, #104]	; (8009f48 <HAL_I2S_MspInit+0x134>)
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009ee4:	4b18      	ldr	r3, [pc, #96]	; (8009f48 <HAL_I2S_MspInit+0x134>)
 8009ee6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009eea:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009eec:	4b16      	ldr	r3, [pc, #88]	; (8009f48 <HAL_I2S_MspInit+0x134>)
 8009eee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ef2:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009ef4:	4b14      	ldr	r3, [pc, #80]	; (8009f48 <HAL_I2S_MspInit+0x134>)
 8009ef6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009efa:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8009efc:	4b12      	ldr	r3, [pc, #72]	; (8009f48 <HAL_I2S_MspInit+0x134>)
 8009efe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f02:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009f04:	4b10      	ldr	r3, [pc, #64]	; (8009f48 <HAL_I2S_MspInit+0x134>)
 8009f06:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8009f0a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009f0c:	4b0e      	ldr	r3, [pc, #56]	; (8009f48 <HAL_I2S_MspInit+0x134>)
 8009f0e:	2200      	movs	r2, #0
 8009f10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8009f12:	480d      	ldr	r0, [pc, #52]	; (8009f48 <HAL_I2S_MspInit+0x134>)
 8009f14:	f7f6 fcd2 	bl	80008bc <HAL_DMA_Init>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d001      	beq.n	8009f22 <HAL_I2S_MspInit+0x10e>
    {
      Error_Handler();
 8009f1e:	f7ff fdc7 	bl	8009ab0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	4a08      	ldr	r2, [pc, #32]	; (8009f48 <HAL_I2S_MspInit+0x134>)
 8009f26:	639a      	str	r2, [r3, #56]	; 0x38
 8009f28:	4a07      	ldr	r2, [pc, #28]	; (8009f48 <HAL_I2S_MspInit+0x134>)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8009f2e:	bf00      	nop
 8009f30:	3728      	adds	r7, #40	; 0x28
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	40003800 	.word	0x40003800
 8009f3c:	40023800 	.word	0x40023800
 8009f40:	40020800 	.word	0x40020800
 8009f44:	40020400 	.word	0x40020400
 8009f48:	2000c754 	.word	0x2000c754
 8009f4c:	40026070 	.word	0x40026070

08009f50 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b08a      	sub	sp, #40	; 0x28
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f58:	f107 0314 	add.w	r3, r7, #20
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	601a      	str	r2, [r3, #0]
 8009f60:	605a      	str	r2, [r3, #4]
 8009f62:	609a      	str	r2, [r3, #8]
 8009f64:	60da      	str	r2, [r3, #12]
 8009f66:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a28      	ldr	r2, [pc, #160]	; (800a010 <HAL_SD_MspInit+0xc0>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d14a      	bne.n	800a008 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8009f72:	2300      	movs	r3, #0
 8009f74:	613b      	str	r3, [r7, #16]
 8009f76:	4b27      	ldr	r3, [pc, #156]	; (800a014 <HAL_SD_MspInit+0xc4>)
 8009f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f7a:	4a26      	ldr	r2, [pc, #152]	; (800a014 <HAL_SD_MspInit+0xc4>)
 8009f7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009f80:	6453      	str	r3, [r2, #68]	; 0x44
 8009f82:	4b24      	ldr	r3, [pc, #144]	; (800a014 <HAL_SD_MspInit+0xc4>)
 8009f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f8a:	613b      	str	r3, [r7, #16]
 8009f8c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009f8e:	2300      	movs	r3, #0
 8009f90:	60fb      	str	r3, [r7, #12]
 8009f92:	4b20      	ldr	r3, [pc, #128]	; (800a014 <HAL_SD_MspInit+0xc4>)
 8009f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f96:	4a1f      	ldr	r2, [pc, #124]	; (800a014 <HAL_SD_MspInit+0xc4>)
 8009f98:	f043 0304 	orr.w	r3, r3, #4
 8009f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8009f9e:	4b1d      	ldr	r3, [pc, #116]	; (800a014 <HAL_SD_MspInit+0xc4>)
 8009fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fa2:	f003 0304 	and.w	r3, r3, #4
 8009fa6:	60fb      	str	r3, [r7, #12]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009faa:	2300      	movs	r3, #0
 8009fac:	60bb      	str	r3, [r7, #8]
 8009fae:	4b19      	ldr	r3, [pc, #100]	; (800a014 <HAL_SD_MspInit+0xc4>)
 8009fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fb2:	4a18      	ldr	r2, [pc, #96]	; (800a014 <HAL_SD_MspInit+0xc4>)
 8009fb4:	f043 0308 	orr.w	r3, r3, #8
 8009fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8009fba:	4b16      	ldr	r3, [pc, #88]	; (800a014 <HAL_SD_MspInit+0xc4>)
 8009fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fbe:	f003 0308 	and.w	r3, r3, #8
 8009fc2:	60bb      	str	r3, [r7, #8]
 8009fc4:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8009fc6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8009fca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fcc:	2302      	movs	r3, #2
 8009fce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009fd4:	2303      	movs	r3, #3
 8009fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8009fd8:	230c      	movs	r3, #12
 8009fda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009fdc:	f107 0314 	add.w	r3, r7, #20
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	480d      	ldr	r0, [pc, #52]	; (800a018 <HAL_SD_MspInit+0xc8>)
 8009fe4:	f7f7 f848 	bl	8001078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009fe8:	2304      	movs	r3, #4
 8009fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fec:	2302      	movs	r3, #2
 8009fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ff4:	2303      	movs	r3, #3
 8009ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8009ff8:	230c      	movs	r3, #12
 8009ffa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009ffc:	f107 0314 	add.w	r3, r7, #20
 800a000:	4619      	mov	r1, r3
 800a002:	4806      	ldr	r0, [pc, #24]	; (800a01c <HAL_SD_MspInit+0xcc>)
 800a004:	f7f7 f838 	bl	8001078 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800a008:	bf00      	nop
 800a00a:	3728      	adds	r7, #40	; 0x28
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	40012c00 	.word	0x40012c00
 800a014:	40023800 	.word	0x40023800
 800a018:	40020800 	.word	0x40020800
 800a01c:	40020c00 	.word	0x40020c00

0800a020 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b086      	sub	sp, #24
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a030:	d116      	bne.n	800a060 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a032:	2300      	movs	r3, #0
 800a034:	617b      	str	r3, [r7, #20]
 800a036:	4b3c      	ldr	r3, [pc, #240]	; (800a128 <HAL_TIM_Base_MspInit+0x108>)
 800a038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03a:	4a3b      	ldr	r2, [pc, #236]	; (800a128 <HAL_TIM_Base_MspInit+0x108>)
 800a03c:	f043 0301 	orr.w	r3, r3, #1
 800a040:	6413      	str	r3, [r2, #64]	; 0x40
 800a042:	4b39      	ldr	r3, [pc, #228]	; (800a128 <HAL_TIM_Base_MspInit+0x108>)
 800a044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a046:	f003 0301 	and.w	r3, r3, #1
 800a04a:	617b      	str	r3, [r7, #20]
 800a04c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800a04e:	2200      	movs	r2, #0
 800a050:	2101      	movs	r1, #1
 800a052:	201c      	movs	r0, #28
 800a054:	f7f6 fbfb 	bl	800084e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800a058:	201c      	movs	r0, #28
 800a05a:	f7f6 fc14 	bl	8000886 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800a05e:	e05f      	b.n	800a120 <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM3)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a31      	ldr	r2, [pc, #196]	; (800a12c <HAL_TIM_Base_MspInit+0x10c>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d13f      	bne.n	800a0ea <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a06a:	2300      	movs	r3, #0
 800a06c:	613b      	str	r3, [r7, #16]
 800a06e:	4b2e      	ldr	r3, [pc, #184]	; (800a128 <HAL_TIM_Base_MspInit+0x108>)
 800a070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a072:	4a2d      	ldr	r2, [pc, #180]	; (800a128 <HAL_TIM_Base_MspInit+0x108>)
 800a074:	f043 0302 	orr.w	r3, r3, #2
 800a078:	6413      	str	r3, [r2, #64]	; 0x40
 800a07a:	4b2b      	ldr	r3, [pc, #172]	; (800a128 <HAL_TIM_Base_MspInit+0x108>)
 800a07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a07e:	f003 0302 	and.w	r3, r3, #2
 800a082:	613b      	str	r3, [r7, #16]
 800a084:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 800a086:	4b2a      	ldr	r3, [pc, #168]	; (800a130 <HAL_TIM_Base_MspInit+0x110>)
 800a088:	4a2a      	ldr	r2, [pc, #168]	; (800a134 <HAL_TIM_Base_MspInit+0x114>)
 800a08a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 800a08c:	4b28      	ldr	r3, [pc, #160]	; (800a130 <HAL_TIM_Base_MspInit+0x110>)
 800a08e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800a092:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a094:	4b26      	ldr	r3, [pc, #152]	; (800a130 <HAL_TIM_Base_MspInit+0x110>)
 800a096:	2240      	movs	r2, #64	; 0x40
 800a098:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800a09a:	4b25      	ldr	r3, [pc, #148]	; (800a130 <HAL_TIM_Base_MspInit+0x110>)
 800a09c:	2200      	movs	r2, #0
 800a09e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800a0a0:	4b23      	ldr	r3, [pc, #140]	; (800a130 <HAL_TIM_Base_MspInit+0x110>)
 800a0a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a0a6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a0a8:	4b21      	ldr	r3, [pc, #132]	; (800a130 <HAL_TIM_Base_MspInit+0x110>)
 800a0aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a0ae:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a0b0:	4b1f      	ldr	r3, [pc, #124]	; (800a130 <HAL_TIM_Base_MspInit+0x110>)
 800a0b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a0b6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_CIRCULAR;
 800a0b8:	4b1d      	ldr	r3, [pc, #116]	; (800a130 <HAL_TIM_Base_MspInit+0x110>)
 800a0ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a0be:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800a0c0:	4b1b      	ldr	r3, [pc, #108]	; (800a130 <HAL_TIM_Base_MspInit+0x110>)
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a0c6:	4b1a      	ldr	r3, [pc, #104]	; (800a130 <HAL_TIM_Base_MspInit+0x110>)
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 800a0cc:	4818      	ldr	r0, [pc, #96]	; (800a130 <HAL_TIM_Base_MspInit+0x110>)
 800a0ce:	f7f6 fbf5 	bl	80008bc <HAL_DMA_Init>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d001      	beq.n	800a0dc <HAL_TIM_Base_MspInit+0xbc>
      Error_Handler();
 800a0d8:	f7ff fcea 	bl	8009ab0 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	4a14      	ldr	r2, [pc, #80]	; (800a130 <HAL_TIM_Base_MspInit+0x110>)
 800a0e0:	629a      	str	r2, [r3, #40]	; 0x28
 800a0e2:	4a13      	ldr	r2, [pc, #76]	; (800a130 <HAL_TIM_Base_MspInit+0x110>)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6393      	str	r3, [r2, #56]	; 0x38
}
 800a0e8:	e01a      	b.n	800a120 <HAL_TIM_Base_MspInit+0x100>
  else if(htim_base->Instance==TIM4)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a12      	ldr	r2, [pc, #72]	; (800a138 <HAL_TIM_Base_MspInit+0x118>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d115      	bne.n	800a120 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	60fb      	str	r3, [r7, #12]
 800a0f8:	4b0b      	ldr	r3, [pc, #44]	; (800a128 <HAL_TIM_Base_MspInit+0x108>)
 800a0fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0fc:	4a0a      	ldr	r2, [pc, #40]	; (800a128 <HAL_TIM_Base_MspInit+0x108>)
 800a0fe:	f043 0304 	orr.w	r3, r3, #4
 800a102:	6413      	str	r3, [r2, #64]	; 0x40
 800a104:	4b08      	ldr	r3, [pc, #32]	; (800a128 <HAL_TIM_Base_MspInit+0x108>)
 800a106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a108:	f003 0304 	and.w	r3, r3, #4
 800a10c:	60fb      	str	r3, [r7, #12]
 800a10e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800a110:	2200      	movs	r2, #0
 800a112:	2101      	movs	r1, #1
 800a114:	201e      	movs	r0, #30
 800a116:	f7f6 fb9a 	bl	800084e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800a11a:	201e      	movs	r0, #30
 800a11c:	f7f6 fbb3 	bl	8000886 <HAL_NVIC_EnableIRQ>
}
 800a120:	bf00      	nop
 800a122:	3718      	adds	r7, #24
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}
 800a128:	40023800 	.word	0x40023800
 800a12c:	40000400 	.word	0x40000400
 800a130:	2000a400 	.word	0x2000a400
 800a134:	40026088 	.word	0x40026088
 800a138:	40000800 	.word	0x40000800

0800a13c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b088      	sub	sp, #32
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a144:	f107 030c 	add.w	r3, r7, #12
 800a148:	2200      	movs	r2, #0
 800a14a:	601a      	str	r2, [r3, #0]
 800a14c:	605a      	str	r2, [r3, #4]
 800a14e:	609a      	str	r2, [r3, #8]
 800a150:	60da      	str	r2, [r3, #12]
 800a152:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a12      	ldr	r2, [pc, #72]	; (800a1a4 <HAL_TIM_MspPostInit+0x68>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d11d      	bne.n	800a19a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a15e:	2300      	movs	r3, #0
 800a160:	60bb      	str	r3, [r7, #8]
 800a162:	4b11      	ldr	r3, [pc, #68]	; (800a1a8 <HAL_TIM_MspPostInit+0x6c>)
 800a164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a166:	4a10      	ldr	r2, [pc, #64]	; (800a1a8 <HAL_TIM_MspPostInit+0x6c>)
 800a168:	f043 0301 	orr.w	r3, r3, #1
 800a16c:	6313      	str	r3, [r2, #48]	; 0x30
 800a16e:	4b0e      	ldr	r3, [pc, #56]	; (800a1a8 <HAL_TIM_MspPostInit+0x6c>)
 800a170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a172:	f003 0301 	and.w	r3, r3, #1
 800a176:	60bb      	str	r3, [r7, #8]
 800a178:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = WS2812_Pin;
 800a17a:	2380      	movs	r3, #128	; 0x80
 800a17c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a17e:	2302      	movs	r3, #2
 800a180:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a182:	2302      	movs	r3, #2
 800a184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a186:	2302      	movs	r3, #2
 800a188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a18a:	2302      	movs	r3, #2
 800a18c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 800a18e:	f107 030c 	add.w	r3, r7, #12
 800a192:	4619      	mov	r1, r3
 800a194:	4805      	ldr	r0, [pc, #20]	; (800a1ac <HAL_TIM_MspPostInit+0x70>)
 800a196:	f7f6 ff6f 	bl	8001078 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800a19a:	bf00      	nop
 800a19c:	3720      	adds	r7, #32
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	40000400 	.word	0x40000400
 800a1a8:	40023800 	.word	0x40023800
 800a1ac:	40020000 	.word	0x40020000

0800a1b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a1b4:	bf00      	nop
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1bc:	4770      	bx	lr

0800a1be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a1be:	b480      	push	{r7}
 800a1c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a1c2:	e7fe      	b.n	800a1c2 <HardFault_Handler+0x4>

0800a1c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a1c8:	e7fe      	b.n	800a1c8 <MemManage_Handler+0x4>

0800a1ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a1ca:	b480      	push	{r7}
 800a1cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a1ce:	e7fe      	b.n	800a1ce <BusFault_Handler+0x4>

0800a1d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a1d4:	e7fe      	b.n	800a1d4 <UsageFault_Handler+0x4>

0800a1d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a1d6:	b480      	push	{r7}
 800a1d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a1da:	bf00      	nop
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a1e8:	bf00      	nop
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr

0800a1f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a1f2:	b480      	push	{r7}
 800a1f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a1f6:	bf00      	nop
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a204:	f7f6 fa06 	bl	8000614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a208:	bf00      	nop
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800a210:	4802      	ldr	r0, [pc, #8]	; (800a21c <DMA1_Stream4_IRQHandler+0x10>)
 800a212:	f7f6 fcc9 	bl	8000ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800a216:	bf00      	nop
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop
 800a21c:	2000c754 	.word	0x2000c754

0800a220 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 800a224:	4802      	ldr	r0, [pc, #8]	; (800a230 <DMA1_Stream5_IRQHandler+0x10>)
 800a226:	f7f6 fcbf 	bl	8000ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800a22a:	bf00      	nop
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop
 800a230:	2000a400 	.word	0x2000a400

0800a234 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800a238:	4802      	ldr	r0, [pc, #8]	; (800a244 <TIM2_IRQHandler+0x10>)
 800a23a:	f7fa fd8f 	bl	8004d5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800a23e:	bf00      	nop
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	2000c4e8 	.word	0x2000c4e8

0800a248 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800a24c:	4802      	ldr	r0, [pc, #8]	; (800a258 <TIM4_IRQHandler+0x10>)
 800a24e:	f7fa fd85 	bl	8004d5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800a252:	bf00      	nop
 800a254:	bd80      	pop	{r7, pc}
 800a256:	bf00      	nop
 800a258:	200080e8 	.word	0x200080e8

0800a25c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800a260:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a264:	f7f7 f8d4 	bl	8001410 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800a268:	bf00      	nop
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800a274:	4b11      	ldr	r3, [pc, #68]	; (800a2bc <_sbrk+0x50>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d102      	bne.n	800a282 <_sbrk+0x16>
		heap_end = &end;
 800a27c:	4b0f      	ldr	r3, [pc, #60]	; (800a2bc <_sbrk+0x50>)
 800a27e:	4a10      	ldr	r2, [pc, #64]	; (800a2c0 <_sbrk+0x54>)
 800a280:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800a282:	4b0e      	ldr	r3, [pc, #56]	; (800a2bc <_sbrk+0x50>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800a288:	4b0c      	ldr	r3, [pc, #48]	; (800a2bc <_sbrk+0x50>)
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	4413      	add	r3, r2
 800a290:	466a      	mov	r2, sp
 800a292:	4293      	cmp	r3, r2
 800a294:	d907      	bls.n	800a2a6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800a296:	f000 f855 	bl	800a344 <__errno>
 800a29a:	4602      	mov	r2, r0
 800a29c:	230c      	movs	r3, #12
 800a29e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800a2a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a2a4:	e006      	b.n	800a2b4 <_sbrk+0x48>
	}

	heap_end += incr;
 800a2a6:	4b05      	ldr	r3, [pc, #20]	; (800a2bc <_sbrk+0x50>)
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	4a03      	ldr	r2, [pc, #12]	; (800a2bc <_sbrk+0x50>)
 800a2b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3710      	adds	r7, #16
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	20007a48 	.word	0x20007a48
 800a2c0:	2000ca30 	.word	0x2000ca30

0800a2c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a2c8:	4b08      	ldr	r3, [pc, #32]	; (800a2ec <SystemInit+0x28>)
 800a2ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2ce:	4a07      	ldr	r2, [pc, #28]	; (800a2ec <SystemInit+0x28>)
 800a2d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a2d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a2d8:	4b04      	ldr	r3, [pc, #16]	; (800a2ec <SystemInit+0x28>)
 800a2da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a2de:	609a      	str	r2, [r3, #8]
#endif
}
 800a2e0:	bf00      	nop
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr
 800a2ea:	bf00      	nop
 800a2ec:	e000ed00 	.word	0xe000ed00

0800a2f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800a2f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a328 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800a2f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a2f6:	e003      	b.n	800a300 <LoopCopyDataInit>

0800a2f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a2f8:	4b0c      	ldr	r3, [pc, #48]	; (800a32c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800a2fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a2fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a2fe:	3104      	adds	r1, #4

0800a300 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800a300:	480b      	ldr	r0, [pc, #44]	; (800a330 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800a302:	4b0c      	ldr	r3, [pc, #48]	; (800a334 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800a304:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a306:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a308:	d3f6      	bcc.n	800a2f8 <CopyDataInit>
  ldr  r2, =_sbss
 800a30a:	4a0b      	ldr	r2, [pc, #44]	; (800a338 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800a30c:	e002      	b.n	800a314 <LoopFillZerobss>

0800a30e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800a30e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800a310:	f842 3b04 	str.w	r3, [r2], #4

0800a314 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800a314:	4b09      	ldr	r3, [pc, #36]	; (800a33c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800a316:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a318:	d3f9      	bcc.n	800a30e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a31a:	f7ff ffd3 	bl	800a2c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a31e:	f000 f817 	bl	800a350 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a322:	f7fe fcd1 	bl	8008cc8 <main>
  bx  lr    
 800a326:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800a328:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800a32c:	0800afb8 	.word	0x0800afb8
  ldr  r0, =_sdata
 800a330:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a334:	2000022c 	.word	0x2000022c
  ldr  r2, =_sbss
 800a338:	2000022c 	.word	0x2000022c
  ldr  r3, = _ebss
 800a33c:	2000ca30 	.word	0x2000ca30

0800a340 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a340:	e7fe      	b.n	800a340 <ADC_IRQHandler>
	...

0800a344 <__errno>:
 800a344:	4b01      	ldr	r3, [pc, #4]	; (800a34c <__errno+0x8>)
 800a346:	6818      	ldr	r0, [r3, #0]
 800a348:	4770      	bx	lr
 800a34a:	bf00      	nop
 800a34c:	2000005c 	.word	0x2000005c

0800a350 <__libc_init_array>:
 800a350:	b570      	push	{r4, r5, r6, lr}
 800a352:	4e0d      	ldr	r6, [pc, #52]	; (800a388 <__libc_init_array+0x38>)
 800a354:	4c0d      	ldr	r4, [pc, #52]	; (800a38c <__libc_init_array+0x3c>)
 800a356:	1ba4      	subs	r4, r4, r6
 800a358:	10a4      	asrs	r4, r4, #2
 800a35a:	2500      	movs	r5, #0
 800a35c:	42a5      	cmp	r5, r4
 800a35e:	d109      	bne.n	800a374 <__libc_init_array+0x24>
 800a360:	4e0b      	ldr	r6, [pc, #44]	; (800a390 <__libc_init_array+0x40>)
 800a362:	4c0c      	ldr	r4, [pc, #48]	; (800a394 <__libc_init_array+0x44>)
 800a364:	f000 fcdc 	bl	800ad20 <_init>
 800a368:	1ba4      	subs	r4, r4, r6
 800a36a:	10a4      	asrs	r4, r4, #2
 800a36c:	2500      	movs	r5, #0
 800a36e:	42a5      	cmp	r5, r4
 800a370:	d105      	bne.n	800a37e <__libc_init_array+0x2e>
 800a372:	bd70      	pop	{r4, r5, r6, pc}
 800a374:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a378:	4798      	blx	r3
 800a37a:	3501      	adds	r5, #1
 800a37c:	e7ee      	b.n	800a35c <__libc_init_array+0xc>
 800a37e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a382:	4798      	blx	r3
 800a384:	3501      	adds	r5, #1
 800a386:	e7f2      	b.n	800a36e <__libc_init_array+0x1e>
 800a388:	0800afb0 	.word	0x0800afb0
 800a38c:	0800afb0 	.word	0x0800afb0
 800a390:	0800afb0 	.word	0x0800afb0
 800a394:	0800afb4 	.word	0x0800afb4

0800a398 <memcpy>:
 800a398:	b510      	push	{r4, lr}
 800a39a:	1e43      	subs	r3, r0, #1
 800a39c:	440a      	add	r2, r1
 800a39e:	4291      	cmp	r1, r2
 800a3a0:	d100      	bne.n	800a3a4 <memcpy+0xc>
 800a3a2:	bd10      	pop	{r4, pc}
 800a3a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3ac:	e7f7      	b.n	800a39e <memcpy+0x6>

0800a3ae <memset>:
 800a3ae:	4402      	add	r2, r0
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d100      	bne.n	800a3b8 <memset+0xa>
 800a3b6:	4770      	bx	lr
 800a3b8:	f803 1b01 	strb.w	r1, [r3], #1
 800a3bc:	e7f9      	b.n	800a3b2 <memset+0x4>
	...

0800a3c0 <siprintf>:
 800a3c0:	b40e      	push	{r1, r2, r3}
 800a3c2:	b500      	push	{lr}
 800a3c4:	b09c      	sub	sp, #112	; 0x70
 800a3c6:	ab1d      	add	r3, sp, #116	; 0x74
 800a3c8:	9002      	str	r0, [sp, #8]
 800a3ca:	9006      	str	r0, [sp, #24]
 800a3cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a3d0:	4809      	ldr	r0, [pc, #36]	; (800a3f8 <siprintf+0x38>)
 800a3d2:	9107      	str	r1, [sp, #28]
 800a3d4:	9104      	str	r1, [sp, #16]
 800a3d6:	4909      	ldr	r1, [pc, #36]	; (800a3fc <siprintf+0x3c>)
 800a3d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3dc:	9105      	str	r1, [sp, #20]
 800a3de:	6800      	ldr	r0, [r0, #0]
 800a3e0:	9301      	str	r3, [sp, #4]
 800a3e2:	a902      	add	r1, sp, #8
 800a3e4:	f000 f90e 	bl	800a604 <_svfiprintf_r>
 800a3e8:	9b02      	ldr	r3, [sp, #8]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	701a      	strb	r2, [r3, #0]
 800a3ee:	b01c      	add	sp, #112	; 0x70
 800a3f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3f4:	b003      	add	sp, #12
 800a3f6:	4770      	bx	lr
 800a3f8:	2000005c 	.word	0x2000005c
 800a3fc:	ffff0208 	.word	0xffff0208

0800a400 <_strtol_l.isra.0>:
 800a400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a404:	4680      	mov	r8, r0
 800a406:	4689      	mov	r9, r1
 800a408:	4692      	mov	sl, r2
 800a40a:	461e      	mov	r6, r3
 800a40c:	460f      	mov	r7, r1
 800a40e:	463d      	mov	r5, r7
 800a410:	9808      	ldr	r0, [sp, #32]
 800a412:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a416:	f000 f885 	bl	800a524 <__locale_ctype_ptr_l>
 800a41a:	4420      	add	r0, r4
 800a41c:	7843      	ldrb	r3, [r0, #1]
 800a41e:	f013 0308 	ands.w	r3, r3, #8
 800a422:	d132      	bne.n	800a48a <_strtol_l.isra.0+0x8a>
 800a424:	2c2d      	cmp	r4, #45	; 0x2d
 800a426:	d132      	bne.n	800a48e <_strtol_l.isra.0+0x8e>
 800a428:	787c      	ldrb	r4, [r7, #1]
 800a42a:	1cbd      	adds	r5, r7, #2
 800a42c:	2201      	movs	r2, #1
 800a42e:	2e00      	cmp	r6, #0
 800a430:	d05d      	beq.n	800a4ee <_strtol_l.isra.0+0xee>
 800a432:	2e10      	cmp	r6, #16
 800a434:	d109      	bne.n	800a44a <_strtol_l.isra.0+0x4a>
 800a436:	2c30      	cmp	r4, #48	; 0x30
 800a438:	d107      	bne.n	800a44a <_strtol_l.isra.0+0x4a>
 800a43a:	782b      	ldrb	r3, [r5, #0]
 800a43c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a440:	2b58      	cmp	r3, #88	; 0x58
 800a442:	d14f      	bne.n	800a4e4 <_strtol_l.isra.0+0xe4>
 800a444:	786c      	ldrb	r4, [r5, #1]
 800a446:	2610      	movs	r6, #16
 800a448:	3502      	adds	r5, #2
 800a44a:	2a00      	cmp	r2, #0
 800a44c:	bf14      	ite	ne
 800a44e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a452:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a456:	2700      	movs	r7, #0
 800a458:	fbb1 fcf6 	udiv	ip, r1, r6
 800a45c:	4638      	mov	r0, r7
 800a45e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a462:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a466:	2b09      	cmp	r3, #9
 800a468:	d817      	bhi.n	800a49a <_strtol_l.isra.0+0x9a>
 800a46a:	461c      	mov	r4, r3
 800a46c:	42a6      	cmp	r6, r4
 800a46e:	dd23      	ble.n	800a4b8 <_strtol_l.isra.0+0xb8>
 800a470:	1c7b      	adds	r3, r7, #1
 800a472:	d007      	beq.n	800a484 <_strtol_l.isra.0+0x84>
 800a474:	4584      	cmp	ip, r0
 800a476:	d31c      	bcc.n	800a4b2 <_strtol_l.isra.0+0xb2>
 800a478:	d101      	bne.n	800a47e <_strtol_l.isra.0+0x7e>
 800a47a:	45a6      	cmp	lr, r4
 800a47c:	db19      	blt.n	800a4b2 <_strtol_l.isra.0+0xb2>
 800a47e:	fb00 4006 	mla	r0, r0, r6, r4
 800a482:	2701      	movs	r7, #1
 800a484:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a488:	e7eb      	b.n	800a462 <_strtol_l.isra.0+0x62>
 800a48a:	462f      	mov	r7, r5
 800a48c:	e7bf      	b.n	800a40e <_strtol_l.isra.0+0xe>
 800a48e:	2c2b      	cmp	r4, #43	; 0x2b
 800a490:	bf04      	itt	eq
 800a492:	1cbd      	addeq	r5, r7, #2
 800a494:	787c      	ldrbeq	r4, [r7, #1]
 800a496:	461a      	mov	r2, r3
 800a498:	e7c9      	b.n	800a42e <_strtol_l.isra.0+0x2e>
 800a49a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a49e:	2b19      	cmp	r3, #25
 800a4a0:	d801      	bhi.n	800a4a6 <_strtol_l.isra.0+0xa6>
 800a4a2:	3c37      	subs	r4, #55	; 0x37
 800a4a4:	e7e2      	b.n	800a46c <_strtol_l.isra.0+0x6c>
 800a4a6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a4aa:	2b19      	cmp	r3, #25
 800a4ac:	d804      	bhi.n	800a4b8 <_strtol_l.isra.0+0xb8>
 800a4ae:	3c57      	subs	r4, #87	; 0x57
 800a4b0:	e7dc      	b.n	800a46c <_strtol_l.isra.0+0x6c>
 800a4b2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a4b6:	e7e5      	b.n	800a484 <_strtol_l.isra.0+0x84>
 800a4b8:	1c7b      	adds	r3, r7, #1
 800a4ba:	d108      	bne.n	800a4ce <_strtol_l.isra.0+0xce>
 800a4bc:	2322      	movs	r3, #34	; 0x22
 800a4be:	f8c8 3000 	str.w	r3, [r8]
 800a4c2:	4608      	mov	r0, r1
 800a4c4:	f1ba 0f00 	cmp.w	sl, #0
 800a4c8:	d107      	bne.n	800a4da <_strtol_l.isra.0+0xda>
 800a4ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4ce:	b102      	cbz	r2, 800a4d2 <_strtol_l.isra.0+0xd2>
 800a4d0:	4240      	negs	r0, r0
 800a4d2:	f1ba 0f00 	cmp.w	sl, #0
 800a4d6:	d0f8      	beq.n	800a4ca <_strtol_l.isra.0+0xca>
 800a4d8:	b10f      	cbz	r7, 800a4de <_strtol_l.isra.0+0xde>
 800a4da:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800a4de:	f8ca 9000 	str.w	r9, [sl]
 800a4e2:	e7f2      	b.n	800a4ca <_strtol_l.isra.0+0xca>
 800a4e4:	2430      	movs	r4, #48	; 0x30
 800a4e6:	2e00      	cmp	r6, #0
 800a4e8:	d1af      	bne.n	800a44a <_strtol_l.isra.0+0x4a>
 800a4ea:	2608      	movs	r6, #8
 800a4ec:	e7ad      	b.n	800a44a <_strtol_l.isra.0+0x4a>
 800a4ee:	2c30      	cmp	r4, #48	; 0x30
 800a4f0:	d0a3      	beq.n	800a43a <_strtol_l.isra.0+0x3a>
 800a4f2:	260a      	movs	r6, #10
 800a4f4:	e7a9      	b.n	800a44a <_strtol_l.isra.0+0x4a>
	...

0800a4f8 <strtol>:
 800a4f8:	4b08      	ldr	r3, [pc, #32]	; (800a51c <strtol+0x24>)
 800a4fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4fc:	681c      	ldr	r4, [r3, #0]
 800a4fe:	4d08      	ldr	r5, [pc, #32]	; (800a520 <strtol+0x28>)
 800a500:	6a23      	ldr	r3, [r4, #32]
 800a502:	2b00      	cmp	r3, #0
 800a504:	bf08      	it	eq
 800a506:	462b      	moveq	r3, r5
 800a508:	9300      	str	r3, [sp, #0]
 800a50a:	4613      	mov	r3, r2
 800a50c:	460a      	mov	r2, r1
 800a50e:	4601      	mov	r1, r0
 800a510:	4620      	mov	r0, r4
 800a512:	f7ff ff75 	bl	800a400 <_strtol_l.isra.0>
 800a516:	b003      	add	sp, #12
 800a518:	bd30      	pop	{r4, r5, pc}
 800a51a:	bf00      	nop
 800a51c:	2000005c 	.word	0x2000005c
 800a520:	200000c0 	.word	0x200000c0

0800a524 <__locale_ctype_ptr_l>:
 800a524:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a528:	4770      	bx	lr

0800a52a <__ascii_mbtowc>:
 800a52a:	b082      	sub	sp, #8
 800a52c:	b901      	cbnz	r1, 800a530 <__ascii_mbtowc+0x6>
 800a52e:	a901      	add	r1, sp, #4
 800a530:	b142      	cbz	r2, 800a544 <__ascii_mbtowc+0x1a>
 800a532:	b14b      	cbz	r3, 800a548 <__ascii_mbtowc+0x1e>
 800a534:	7813      	ldrb	r3, [r2, #0]
 800a536:	600b      	str	r3, [r1, #0]
 800a538:	7812      	ldrb	r2, [r2, #0]
 800a53a:	1c10      	adds	r0, r2, #0
 800a53c:	bf18      	it	ne
 800a53e:	2001      	movne	r0, #1
 800a540:	b002      	add	sp, #8
 800a542:	4770      	bx	lr
 800a544:	4610      	mov	r0, r2
 800a546:	e7fb      	b.n	800a540 <__ascii_mbtowc+0x16>
 800a548:	f06f 0001 	mvn.w	r0, #1
 800a54c:	e7f8      	b.n	800a540 <__ascii_mbtowc+0x16>

0800a54e <__ssputs_r>:
 800a54e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a552:	688e      	ldr	r6, [r1, #8]
 800a554:	429e      	cmp	r6, r3
 800a556:	4682      	mov	sl, r0
 800a558:	460c      	mov	r4, r1
 800a55a:	4690      	mov	r8, r2
 800a55c:	4699      	mov	r9, r3
 800a55e:	d837      	bhi.n	800a5d0 <__ssputs_r+0x82>
 800a560:	898a      	ldrh	r2, [r1, #12]
 800a562:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a566:	d031      	beq.n	800a5cc <__ssputs_r+0x7e>
 800a568:	6825      	ldr	r5, [r4, #0]
 800a56a:	6909      	ldr	r1, [r1, #16]
 800a56c:	1a6f      	subs	r7, r5, r1
 800a56e:	6965      	ldr	r5, [r4, #20]
 800a570:	2302      	movs	r3, #2
 800a572:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a576:	fb95 f5f3 	sdiv	r5, r5, r3
 800a57a:	f109 0301 	add.w	r3, r9, #1
 800a57e:	443b      	add	r3, r7
 800a580:	429d      	cmp	r5, r3
 800a582:	bf38      	it	cc
 800a584:	461d      	movcc	r5, r3
 800a586:	0553      	lsls	r3, r2, #21
 800a588:	d530      	bpl.n	800a5ec <__ssputs_r+0x9e>
 800a58a:	4629      	mov	r1, r5
 800a58c:	f000 fb2e 	bl	800abec <_malloc_r>
 800a590:	4606      	mov	r6, r0
 800a592:	b950      	cbnz	r0, 800a5aa <__ssputs_r+0x5c>
 800a594:	230c      	movs	r3, #12
 800a596:	f8ca 3000 	str.w	r3, [sl]
 800a59a:	89a3      	ldrh	r3, [r4, #12]
 800a59c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5a0:	81a3      	strh	r3, [r4, #12]
 800a5a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5aa:	463a      	mov	r2, r7
 800a5ac:	6921      	ldr	r1, [r4, #16]
 800a5ae:	f7ff fef3 	bl	800a398 <memcpy>
 800a5b2:	89a3      	ldrh	r3, [r4, #12]
 800a5b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a5b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5bc:	81a3      	strh	r3, [r4, #12]
 800a5be:	6126      	str	r6, [r4, #16]
 800a5c0:	6165      	str	r5, [r4, #20]
 800a5c2:	443e      	add	r6, r7
 800a5c4:	1bed      	subs	r5, r5, r7
 800a5c6:	6026      	str	r6, [r4, #0]
 800a5c8:	60a5      	str	r5, [r4, #8]
 800a5ca:	464e      	mov	r6, r9
 800a5cc:	454e      	cmp	r6, r9
 800a5ce:	d900      	bls.n	800a5d2 <__ssputs_r+0x84>
 800a5d0:	464e      	mov	r6, r9
 800a5d2:	4632      	mov	r2, r6
 800a5d4:	4641      	mov	r1, r8
 800a5d6:	6820      	ldr	r0, [r4, #0]
 800a5d8:	f000 faa1 	bl	800ab1e <memmove>
 800a5dc:	68a3      	ldr	r3, [r4, #8]
 800a5de:	1b9b      	subs	r3, r3, r6
 800a5e0:	60a3      	str	r3, [r4, #8]
 800a5e2:	6823      	ldr	r3, [r4, #0]
 800a5e4:	441e      	add	r6, r3
 800a5e6:	6026      	str	r6, [r4, #0]
 800a5e8:	2000      	movs	r0, #0
 800a5ea:	e7dc      	b.n	800a5a6 <__ssputs_r+0x58>
 800a5ec:	462a      	mov	r2, r5
 800a5ee:	f000 fb57 	bl	800aca0 <_realloc_r>
 800a5f2:	4606      	mov	r6, r0
 800a5f4:	2800      	cmp	r0, #0
 800a5f6:	d1e2      	bne.n	800a5be <__ssputs_r+0x70>
 800a5f8:	6921      	ldr	r1, [r4, #16]
 800a5fa:	4650      	mov	r0, sl
 800a5fc:	f000 faa8 	bl	800ab50 <_free_r>
 800a600:	e7c8      	b.n	800a594 <__ssputs_r+0x46>
	...

0800a604 <_svfiprintf_r>:
 800a604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a608:	461d      	mov	r5, r3
 800a60a:	898b      	ldrh	r3, [r1, #12]
 800a60c:	061f      	lsls	r7, r3, #24
 800a60e:	b09d      	sub	sp, #116	; 0x74
 800a610:	4680      	mov	r8, r0
 800a612:	460c      	mov	r4, r1
 800a614:	4616      	mov	r6, r2
 800a616:	d50f      	bpl.n	800a638 <_svfiprintf_r+0x34>
 800a618:	690b      	ldr	r3, [r1, #16]
 800a61a:	b96b      	cbnz	r3, 800a638 <_svfiprintf_r+0x34>
 800a61c:	2140      	movs	r1, #64	; 0x40
 800a61e:	f000 fae5 	bl	800abec <_malloc_r>
 800a622:	6020      	str	r0, [r4, #0]
 800a624:	6120      	str	r0, [r4, #16]
 800a626:	b928      	cbnz	r0, 800a634 <_svfiprintf_r+0x30>
 800a628:	230c      	movs	r3, #12
 800a62a:	f8c8 3000 	str.w	r3, [r8]
 800a62e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a632:	e0c8      	b.n	800a7c6 <_svfiprintf_r+0x1c2>
 800a634:	2340      	movs	r3, #64	; 0x40
 800a636:	6163      	str	r3, [r4, #20]
 800a638:	2300      	movs	r3, #0
 800a63a:	9309      	str	r3, [sp, #36]	; 0x24
 800a63c:	2320      	movs	r3, #32
 800a63e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a642:	2330      	movs	r3, #48	; 0x30
 800a644:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a648:	9503      	str	r5, [sp, #12]
 800a64a:	f04f 0b01 	mov.w	fp, #1
 800a64e:	4637      	mov	r7, r6
 800a650:	463d      	mov	r5, r7
 800a652:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a656:	b10b      	cbz	r3, 800a65c <_svfiprintf_r+0x58>
 800a658:	2b25      	cmp	r3, #37	; 0x25
 800a65a:	d13e      	bne.n	800a6da <_svfiprintf_r+0xd6>
 800a65c:	ebb7 0a06 	subs.w	sl, r7, r6
 800a660:	d00b      	beq.n	800a67a <_svfiprintf_r+0x76>
 800a662:	4653      	mov	r3, sl
 800a664:	4632      	mov	r2, r6
 800a666:	4621      	mov	r1, r4
 800a668:	4640      	mov	r0, r8
 800a66a:	f7ff ff70 	bl	800a54e <__ssputs_r>
 800a66e:	3001      	adds	r0, #1
 800a670:	f000 80a4 	beq.w	800a7bc <_svfiprintf_r+0x1b8>
 800a674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a676:	4453      	add	r3, sl
 800a678:	9309      	str	r3, [sp, #36]	; 0x24
 800a67a:	783b      	ldrb	r3, [r7, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f000 809d 	beq.w	800a7bc <_svfiprintf_r+0x1b8>
 800a682:	2300      	movs	r3, #0
 800a684:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a688:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a68c:	9304      	str	r3, [sp, #16]
 800a68e:	9307      	str	r3, [sp, #28]
 800a690:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a694:	931a      	str	r3, [sp, #104]	; 0x68
 800a696:	462f      	mov	r7, r5
 800a698:	2205      	movs	r2, #5
 800a69a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a69e:	4850      	ldr	r0, [pc, #320]	; (800a7e0 <_svfiprintf_r+0x1dc>)
 800a6a0:	f7f5 fd96 	bl	80001d0 <memchr>
 800a6a4:	9b04      	ldr	r3, [sp, #16]
 800a6a6:	b9d0      	cbnz	r0, 800a6de <_svfiprintf_r+0xda>
 800a6a8:	06d9      	lsls	r1, r3, #27
 800a6aa:	bf44      	itt	mi
 800a6ac:	2220      	movmi	r2, #32
 800a6ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a6b2:	071a      	lsls	r2, r3, #28
 800a6b4:	bf44      	itt	mi
 800a6b6:	222b      	movmi	r2, #43	; 0x2b
 800a6b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a6bc:	782a      	ldrb	r2, [r5, #0]
 800a6be:	2a2a      	cmp	r2, #42	; 0x2a
 800a6c0:	d015      	beq.n	800a6ee <_svfiprintf_r+0xea>
 800a6c2:	9a07      	ldr	r2, [sp, #28]
 800a6c4:	462f      	mov	r7, r5
 800a6c6:	2000      	movs	r0, #0
 800a6c8:	250a      	movs	r5, #10
 800a6ca:	4639      	mov	r1, r7
 800a6cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6d0:	3b30      	subs	r3, #48	; 0x30
 800a6d2:	2b09      	cmp	r3, #9
 800a6d4:	d94d      	bls.n	800a772 <_svfiprintf_r+0x16e>
 800a6d6:	b1b8      	cbz	r0, 800a708 <_svfiprintf_r+0x104>
 800a6d8:	e00f      	b.n	800a6fa <_svfiprintf_r+0xf6>
 800a6da:	462f      	mov	r7, r5
 800a6dc:	e7b8      	b.n	800a650 <_svfiprintf_r+0x4c>
 800a6de:	4a40      	ldr	r2, [pc, #256]	; (800a7e0 <_svfiprintf_r+0x1dc>)
 800a6e0:	1a80      	subs	r0, r0, r2
 800a6e2:	fa0b f000 	lsl.w	r0, fp, r0
 800a6e6:	4318      	orrs	r0, r3
 800a6e8:	9004      	str	r0, [sp, #16]
 800a6ea:	463d      	mov	r5, r7
 800a6ec:	e7d3      	b.n	800a696 <_svfiprintf_r+0x92>
 800a6ee:	9a03      	ldr	r2, [sp, #12]
 800a6f0:	1d11      	adds	r1, r2, #4
 800a6f2:	6812      	ldr	r2, [r2, #0]
 800a6f4:	9103      	str	r1, [sp, #12]
 800a6f6:	2a00      	cmp	r2, #0
 800a6f8:	db01      	blt.n	800a6fe <_svfiprintf_r+0xfa>
 800a6fa:	9207      	str	r2, [sp, #28]
 800a6fc:	e004      	b.n	800a708 <_svfiprintf_r+0x104>
 800a6fe:	4252      	negs	r2, r2
 800a700:	f043 0302 	orr.w	r3, r3, #2
 800a704:	9207      	str	r2, [sp, #28]
 800a706:	9304      	str	r3, [sp, #16]
 800a708:	783b      	ldrb	r3, [r7, #0]
 800a70a:	2b2e      	cmp	r3, #46	; 0x2e
 800a70c:	d10c      	bne.n	800a728 <_svfiprintf_r+0x124>
 800a70e:	787b      	ldrb	r3, [r7, #1]
 800a710:	2b2a      	cmp	r3, #42	; 0x2a
 800a712:	d133      	bne.n	800a77c <_svfiprintf_r+0x178>
 800a714:	9b03      	ldr	r3, [sp, #12]
 800a716:	1d1a      	adds	r2, r3, #4
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	9203      	str	r2, [sp, #12]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	bfb8      	it	lt
 800a720:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a724:	3702      	adds	r7, #2
 800a726:	9305      	str	r3, [sp, #20]
 800a728:	4d2e      	ldr	r5, [pc, #184]	; (800a7e4 <_svfiprintf_r+0x1e0>)
 800a72a:	7839      	ldrb	r1, [r7, #0]
 800a72c:	2203      	movs	r2, #3
 800a72e:	4628      	mov	r0, r5
 800a730:	f7f5 fd4e 	bl	80001d0 <memchr>
 800a734:	b138      	cbz	r0, 800a746 <_svfiprintf_r+0x142>
 800a736:	2340      	movs	r3, #64	; 0x40
 800a738:	1b40      	subs	r0, r0, r5
 800a73a:	fa03 f000 	lsl.w	r0, r3, r0
 800a73e:	9b04      	ldr	r3, [sp, #16]
 800a740:	4303      	orrs	r3, r0
 800a742:	3701      	adds	r7, #1
 800a744:	9304      	str	r3, [sp, #16]
 800a746:	7839      	ldrb	r1, [r7, #0]
 800a748:	4827      	ldr	r0, [pc, #156]	; (800a7e8 <_svfiprintf_r+0x1e4>)
 800a74a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a74e:	2206      	movs	r2, #6
 800a750:	1c7e      	adds	r6, r7, #1
 800a752:	f7f5 fd3d 	bl	80001d0 <memchr>
 800a756:	2800      	cmp	r0, #0
 800a758:	d038      	beq.n	800a7cc <_svfiprintf_r+0x1c8>
 800a75a:	4b24      	ldr	r3, [pc, #144]	; (800a7ec <_svfiprintf_r+0x1e8>)
 800a75c:	bb13      	cbnz	r3, 800a7a4 <_svfiprintf_r+0x1a0>
 800a75e:	9b03      	ldr	r3, [sp, #12]
 800a760:	3307      	adds	r3, #7
 800a762:	f023 0307 	bic.w	r3, r3, #7
 800a766:	3308      	adds	r3, #8
 800a768:	9303      	str	r3, [sp, #12]
 800a76a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a76c:	444b      	add	r3, r9
 800a76e:	9309      	str	r3, [sp, #36]	; 0x24
 800a770:	e76d      	b.n	800a64e <_svfiprintf_r+0x4a>
 800a772:	fb05 3202 	mla	r2, r5, r2, r3
 800a776:	2001      	movs	r0, #1
 800a778:	460f      	mov	r7, r1
 800a77a:	e7a6      	b.n	800a6ca <_svfiprintf_r+0xc6>
 800a77c:	2300      	movs	r3, #0
 800a77e:	3701      	adds	r7, #1
 800a780:	9305      	str	r3, [sp, #20]
 800a782:	4619      	mov	r1, r3
 800a784:	250a      	movs	r5, #10
 800a786:	4638      	mov	r0, r7
 800a788:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a78c:	3a30      	subs	r2, #48	; 0x30
 800a78e:	2a09      	cmp	r2, #9
 800a790:	d903      	bls.n	800a79a <_svfiprintf_r+0x196>
 800a792:	2b00      	cmp	r3, #0
 800a794:	d0c8      	beq.n	800a728 <_svfiprintf_r+0x124>
 800a796:	9105      	str	r1, [sp, #20]
 800a798:	e7c6      	b.n	800a728 <_svfiprintf_r+0x124>
 800a79a:	fb05 2101 	mla	r1, r5, r1, r2
 800a79e:	2301      	movs	r3, #1
 800a7a0:	4607      	mov	r7, r0
 800a7a2:	e7f0      	b.n	800a786 <_svfiprintf_r+0x182>
 800a7a4:	ab03      	add	r3, sp, #12
 800a7a6:	9300      	str	r3, [sp, #0]
 800a7a8:	4622      	mov	r2, r4
 800a7aa:	4b11      	ldr	r3, [pc, #68]	; (800a7f0 <_svfiprintf_r+0x1ec>)
 800a7ac:	a904      	add	r1, sp, #16
 800a7ae:	4640      	mov	r0, r8
 800a7b0:	f3af 8000 	nop.w
 800a7b4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a7b8:	4681      	mov	r9, r0
 800a7ba:	d1d6      	bne.n	800a76a <_svfiprintf_r+0x166>
 800a7bc:	89a3      	ldrh	r3, [r4, #12]
 800a7be:	065b      	lsls	r3, r3, #25
 800a7c0:	f53f af35 	bmi.w	800a62e <_svfiprintf_r+0x2a>
 800a7c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7c6:	b01d      	add	sp, #116	; 0x74
 800a7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7cc:	ab03      	add	r3, sp, #12
 800a7ce:	9300      	str	r3, [sp, #0]
 800a7d0:	4622      	mov	r2, r4
 800a7d2:	4b07      	ldr	r3, [pc, #28]	; (800a7f0 <_svfiprintf_r+0x1ec>)
 800a7d4:	a904      	add	r1, sp, #16
 800a7d6:	4640      	mov	r0, r8
 800a7d8:	f000 f882 	bl	800a8e0 <_printf_i>
 800a7dc:	e7ea      	b.n	800a7b4 <_svfiprintf_r+0x1b0>
 800a7de:	bf00      	nop
 800a7e0:	0800ae72 	.word	0x0800ae72
 800a7e4:	0800ae78 	.word	0x0800ae78
 800a7e8:	0800ae7c 	.word	0x0800ae7c
 800a7ec:	00000000 	.word	0x00000000
 800a7f0:	0800a54f 	.word	0x0800a54f

0800a7f4 <_printf_common>:
 800a7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7f8:	4691      	mov	r9, r2
 800a7fa:	461f      	mov	r7, r3
 800a7fc:	688a      	ldr	r2, [r1, #8]
 800a7fe:	690b      	ldr	r3, [r1, #16]
 800a800:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a804:	4293      	cmp	r3, r2
 800a806:	bfb8      	it	lt
 800a808:	4613      	movlt	r3, r2
 800a80a:	f8c9 3000 	str.w	r3, [r9]
 800a80e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a812:	4606      	mov	r6, r0
 800a814:	460c      	mov	r4, r1
 800a816:	b112      	cbz	r2, 800a81e <_printf_common+0x2a>
 800a818:	3301      	adds	r3, #1
 800a81a:	f8c9 3000 	str.w	r3, [r9]
 800a81e:	6823      	ldr	r3, [r4, #0]
 800a820:	0699      	lsls	r1, r3, #26
 800a822:	bf42      	ittt	mi
 800a824:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a828:	3302      	addmi	r3, #2
 800a82a:	f8c9 3000 	strmi.w	r3, [r9]
 800a82e:	6825      	ldr	r5, [r4, #0]
 800a830:	f015 0506 	ands.w	r5, r5, #6
 800a834:	d107      	bne.n	800a846 <_printf_common+0x52>
 800a836:	f104 0a19 	add.w	sl, r4, #25
 800a83a:	68e3      	ldr	r3, [r4, #12]
 800a83c:	f8d9 2000 	ldr.w	r2, [r9]
 800a840:	1a9b      	subs	r3, r3, r2
 800a842:	42ab      	cmp	r3, r5
 800a844:	dc28      	bgt.n	800a898 <_printf_common+0xa4>
 800a846:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a84a:	6822      	ldr	r2, [r4, #0]
 800a84c:	3300      	adds	r3, #0
 800a84e:	bf18      	it	ne
 800a850:	2301      	movne	r3, #1
 800a852:	0692      	lsls	r2, r2, #26
 800a854:	d42d      	bmi.n	800a8b2 <_printf_common+0xbe>
 800a856:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a85a:	4639      	mov	r1, r7
 800a85c:	4630      	mov	r0, r6
 800a85e:	47c0      	blx	r8
 800a860:	3001      	adds	r0, #1
 800a862:	d020      	beq.n	800a8a6 <_printf_common+0xb2>
 800a864:	6823      	ldr	r3, [r4, #0]
 800a866:	68e5      	ldr	r5, [r4, #12]
 800a868:	f8d9 2000 	ldr.w	r2, [r9]
 800a86c:	f003 0306 	and.w	r3, r3, #6
 800a870:	2b04      	cmp	r3, #4
 800a872:	bf08      	it	eq
 800a874:	1aad      	subeq	r5, r5, r2
 800a876:	68a3      	ldr	r3, [r4, #8]
 800a878:	6922      	ldr	r2, [r4, #16]
 800a87a:	bf0c      	ite	eq
 800a87c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a880:	2500      	movne	r5, #0
 800a882:	4293      	cmp	r3, r2
 800a884:	bfc4      	itt	gt
 800a886:	1a9b      	subgt	r3, r3, r2
 800a888:	18ed      	addgt	r5, r5, r3
 800a88a:	f04f 0900 	mov.w	r9, #0
 800a88e:	341a      	adds	r4, #26
 800a890:	454d      	cmp	r5, r9
 800a892:	d11a      	bne.n	800a8ca <_printf_common+0xd6>
 800a894:	2000      	movs	r0, #0
 800a896:	e008      	b.n	800a8aa <_printf_common+0xb6>
 800a898:	2301      	movs	r3, #1
 800a89a:	4652      	mov	r2, sl
 800a89c:	4639      	mov	r1, r7
 800a89e:	4630      	mov	r0, r6
 800a8a0:	47c0      	blx	r8
 800a8a2:	3001      	adds	r0, #1
 800a8a4:	d103      	bne.n	800a8ae <_printf_common+0xba>
 800a8a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8ae:	3501      	adds	r5, #1
 800a8b0:	e7c3      	b.n	800a83a <_printf_common+0x46>
 800a8b2:	18e1      	adds	r1, r4, r3
 800a8b4:	1c5a      	adds	r2, r3, #1
 800a8b6:	2030      	movs	r0, #48	; 0x30
 800a8b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a8bc:	4422      	add	r2, r4
 800a8be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a8c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a8c6:	3302      	adds	r3, #2
 800a8c8:	e7c5      	b.n	800a856 <_printf_common+0x62>
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	4622      	mov	r2, r4
 800a8ce:	4639      	mov	r1, r7
 800a8d0:	4630      	mov	r0, r6
 800a8d2:	47c0      	blx	r8
 800a8d4:	3001      	adds	r0, #1
 800a8d6:	d0e6      	beq.n	800a8a6 <_printf_common+0xb2>
 800a8d8:	f109 0901 	add.w	r9, r9, #1
 800a8dc:	e7d8      	b.n	800a890 <_printf_common+0x9c>
	...

0800a8e0 <_printf_i>:
 800a8e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a8e4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a8e8:	460c      	mov	r4, r1
 800a8ea:	7e09      	ldrb	r1, [r1, #24]
 800a8ec:	b085      	sub	sp, #20
 800a8ee:	296e      	cmp	r1, #110	; 0x6e
 800a8f0:	4617      	mov	r7, r2
 800a8f2:	4606      	mov	r6, r0
 800a8f4:	4698      	mov	r8, r3
 800a8f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a8f8:	f000 80b3 	beq.w	800aa62 <_printf_i+0x182>
 800a8fc:	d822      	bhi.n	800a944 <_printf_i+0x64>
 800a8fe:	2963      	cmp	r1, #99	; 0x63
 800a900:	d036      	beq.n	800a970 <_printf_i+0x90>
 800a902:	d80a      	bhi.n	800a91a <_printf_i+0x3a>
 800a904:	2900      	cmp	r1, #0
 800a906:	f000 80b9 	beq.w	800aa7c <_printf_i+0x19c>
 800a90a:	2958      	cmp	r1, #88	; 0x58
 800a90c:	f000 8083 	beq.w	800aa16 <_printf_i+0x136>
 800a910:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a914:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a918:	e032      	b.n	800a980 <_printf_i+0xa0>
 800a91a:	2964      	cmp	r1, #100	; 0x64
 800a91c:	d001      	beq.n	800a922 <_printf_i+0x42>
 800a91e:	2969      	cmp	r1, #105	; 0x69
 800a920:	d1f6      	bne.n	800a910 <_printf_i+0x30>
 800a922:	6820      	ldr	r0, [r4, #0]
 800a924:	6813      	ldr	r3, [r2, #0]
 800a926:	0605      	lsls	r5, r0, #24
 800a928:	f103 0104 	add.w	r1, r3, #4
 800a92c:	d52a      	bpl.n	800a984 <_printf_i+0xa4>
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	6011      	str	r1, [r2, #0]
 800a932:	2b00      	cmp	r3, #0
 800a934:	da03      	bge.n	800a93e <_printf_i+0x5e>
 800a936:	222d      	movs	r2, #45	; 0x2d
 800a938:	425b      	negs	r3, r3
 800a93a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a93e:	486f      	ldr	r0, [pc, #444]	; (800aafc <_printf_i+0x21c>)
 800a940:	220a      	movs	r2, #10
 800a942:	e039      	b.n	800a9b8 <_printf_i+0xd8>
 800a944:	2973      	cmp	r1, #115	; 0x73
 800a946:	f000 809d 	beq.w	800aa84 <_printf_i+0x1a4>
 800a94a:	d808      	bhi.n	800a95e <_printf_i+0x7e>
 800a94c:	296f      	cmp	r1, #111	; 0x6f
 800a94e:	d020      	beq.n	800a992 <_printf_i+0xb2>
 800a950:	2970      	cmp	r1, #112	; 0x70
 800a952:	d1dd      	bne.n	800a910 <_printf_i+0x30>
 800a954:	6823      	ldr	r3, [r4, #0]
 800a956:	f043 0320 	orr.w	r3, r3, #32
 800a95a:	6023      	str	r3, [r4, #0]
 800a95c:	e003      	b.n	800a966 <_printf_i+0x86>
 800a95e:	2975      	cmp	r1, #117	; 0x75
 800a960:	d017      	beq.n	800a992 <_printf_i+0xb2>
 800a962:	2978      	cmp	r1, #120	; 0x78
 800a964:	d1d4      	bne.n	800a910 <_printf_i+0x30>
 800a966:	2378      	movs	r3, #120	; 0x78
 800a968:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a96c:	4864      	ldr	r0, [pc, #400]	; (800ab00 <_printf_i+0x220>)
 800a96e:	e055      	b.n	800aa1c <_printf_i+0x13c>
 800a970:	6813      	ldr	r3, [r2, #0]
 800a972:	1d19      	adds	r1, r3, #4
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	6011      	str	r1, [r2, #0]
 800a978:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a97c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a980:	2301      	movs	r3, #1
 800a982:	e08c      	b.n	800aa9e <_printf_i+0x1be>
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	6011      	str	r1, [r2, #0]
 800a988:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a98c:	bf18      	it	ne
 800a98e:	b21b      	sxthne	r3, r3
 800a990:	e7cf      	b.n	800a932 <_printf_i+0x52>
 800a992:	6813      	ldr	r3, [r2, #0]
 800a994:	6825      	ldr	r5, [r4, #0]
 800a996:	1d18      	adds	r0, r3, #4
 800a998:	6010      	str	r0, [r2, #0]
 800a99a:	0628      	lsls	r0, r5, #24
 800a99c:	d501      	bpl.n	800a9a2 <_printf_i+0xc2>
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	e002      	b.n	800a9a8 <_printf_i+0xc8>
 800a9a2:	0668      	lsls	r0, r5, #25
 800a9a4:	d5fb      	bpl.n	800a99e <_printf_i+0xbe>
 800a9a6:	881b      	ldrh	r3, [r3, #0]
 800a9a8:	4854      	ldr	r0, [pc, #336]	; (800aafc <_printf_i+0x21c>)
 800a9aa:	296f      	cmp	r1, #111	; 0x6f
 800a9ac:	bf14      	ite	ne
 800a9ae:	220a      	movne	r2, #10
 800a9b0:	2208      	moveq	r2, #8
 800a9b2:	2100      	movs	r1, #0
 800a9b4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a9b8:	6865      	ldr	r5, [r4, #4]
 800a9ba:	60a5      	str	r5, [r4, #8]
 800a9bc:	2d00      	cmp	r5, #0
 800a9be:	f2c0 8095 	blt.w	800aaec <_printf_i+0x20c>
 800a9c2:	6821      	ldr	r1, [r4, #0]
 800a9c4:	f021 0104 	bic.w	r1, r1, #4
 800a9c8:	6021      	str	r1, [r4, #0]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d13d      	bne.n	800aa4a <_printf_i+0x16a>
 800a9ce:	2d00      	cmp	r5, #0
 800a9d0:	f040 808e 	bne.w	800aaf0 <_printf_i+0x210>
 800a9d4:	4665      	mov	r5, ip
 800a9d6:	2a08      	cmp	r2, #8
 800a9d8:	d10b      	bne.n	800a9f2 <_printf_i+0x112>
 800a9da:	6823      	ldr	r3, [r4, #0]
 800a9dc:	07db      	lsls	r3, r3, #31
 800a9de:	d508      	bpl.n	800a9f2 <_printf_i+0x112>
 800a9e0:	6923      	ldr	r3, [r4, #16]
 800a9e2:	6862      	ldr	r2, [r4, #4]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	bfde      	ittt	le
 800a9e8:	2330      	movle	r3, #48	; 0x30
 800a9ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a9ee:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a9f2:	ebac 0305 	sub.w	r3, ip, r5
 800a9f6:	6123      	str	r3, [r4, #16]
 800a9f8:	f8cd 8000 	str.w	r8, [sp]
 800a9fc:	463b      	mov	r3, r7
 800a9fe:	aa03      	add	r2, sp, #12
 800aa00:	4621      	mov	r1, r4
 800aa02:	4630      	mov	r0, r6
 800aa04:	f7ff fef6 	bl	800a7f4 <_printf_common>
 800aa08:	3001      	adds	r0, #1
 800aa0a:	d14d      	bne.n	800aaa8 <_printf_i+0x1c8>
 800aa0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa10:	b005      	add	sp, #20
 800aa12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa16:	4839      	ldr	r0, [pc, #228]	; (800aafc <_printf_i+0x21c>)
 800aa18:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800aa1c:	6813      	ldr	r3, [r2, #0]
 800aa1e:	6821      	ldr	r1, [r4, #0]
 800aa20:	1d1d      	adds	r5, r3, #4
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	6015      	str	r5, [r2, #0]
 800aa26:	060a      	lsls	r2, r1, #24
 800aa28:	d50b      	bpl.n	800aa42 <_printf_i+0x162>
 800aa2a:	07ca      	lsls	r2, r1, #31
 800aa2c:	bf44      	itt	mi
 800aa2e:	f041 0120 	orrmi.w	r1, r1, #32
 800aa32:	6021      	strmi	r1, [r4, #0]
 800aa34:	b91b      	cbnz	r3, 800aa3e <_printf_i+0x15e>
 800aa36:	6822      	ldr	r2, [r4, #0]
 800aa38:	f022 0220 	bic.w	r2, r2, #32
 800aa3c:	6022      	str	r2, [r4, #0]
 800aa3e:	2210      	movs	r2, #16
 800aa40:	e7b7      	b.n	800a9b2 <_printf_i+0xd2>
 800aa42:	064d      	lsls	r5, r1, #25
 800aa44:	bf48      	it	mi
 800aa46:	b29b      	uxthmi	r3, r3
 800aa48:	e7ef      	b.n	800aa2a <_printf_i+0x14a>
 800aa4a:	4665      	mov	r5, ip
 800aa4c:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa50:	fb02 3311 	mls	r3, r2, r1, r3
 800aa54:	5cc3      	ldrb	r3, [r0, r3]
 800aa56:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	2900      	cmp	r1, #0
 800aa5e:	d1f5      	bne.n	800aa4c <_printf_i+0x16c>
 800aa60:	e7b9      	b.n	800a9d6 <_printf_i+0xf6>
 800aa62:	6813      	ldr	r3, [r2, #0]
 800aa64:	6825      	ldr	r5, [r4, #0]
 800aa66:	6961      	ldr	r1, [r4, #20]
 800aa68:	1d18      	adds	r0, r3, #4
 800aa6a:	6010      	str	r0, [r2, #0]
 800aa6c:	0628      	lsls	r0, r5, #24
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	d501      	bpl.n	800aa76 <_printf_i+0x196>
 800aa72:	6019      	str	r1, [r3, #0]
 800aa74:	e002      	b.n	800aa7c <_printf_i+0x19c>
 800aa76:	066a      	lsls	r2, r5, #25
 800aa78:	d5fb      	bpl.n	800aa72 <_printf_i+0x192>
 800aa7a:	8019      	strh	r1, [r3, #0]
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	6123      	str	r3, [r4, #16]
 800aa80:	4665      	mov	r5, ip
 800aa82:	e7b9      	b.n	800a9f8 <_printf_i+0x118>
 800aa84:	6813      	ldr	r3, [r2, #0]
 800aa86:	1d19      	adds	r1, r3, #4
 800aa88:	6011      	str	r1, [r2, #0]
 800aa8a:	681d      	ldr	r5, [r3, #0]
 800aa8c:	6862      	ldr	r2, [r4, #4]
 800aa8e:	2100      	movs	r1, #0
 800aa90:	4628      	mov	r0, r5
 800aa92:	f7f5 fb9d 	bl	80001d0 <memchr>
 800aa96:	b108      	cbz	r0, 800aa9c <_printf_i+0x1bc>
 800aa98:	1b40      	subs	r0, r0, r5
 800aa9a:	6060      	str	r0, [r4, #4]
 800aa9c:	6863      	ldr	r3, [r4, #4]
 800aa9e:	6123      	str	r3, [r4, #16]
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aaa6:	e7a7      	b.n	800a9f8 <_printf_i+0x118>
 800aaa8:	6923      	ldr	r3, [r4, #16]
 800aaaa:	462a      	mov	r2, r5
 800aaac:	4639      	mov	r1, r7
 800aaae:	4630      	mov	r0, r6
 800aab0:	47c0      	blx	r8
 800aab2:	3001      	adds	r0, #1
 800aab4:	d0aa      	beq.n	800aa0c <_printf_i+0x12c>
 800aab6:	6823      	ldr	r3, [r4, #0]
 800aab8:	079b      	lsls	r3, r3, #30
 800aaba:	d413      	bmi.n	800aae4 <_printf_i+0x204>
 800aabc:	68e0      	ldr	r0, [r4, #12]
 800aabe:	9b03      	ldr	r3, [sp, #12]
 800aac0:	4298      	cmp	r0, r3
 800aac2:	bfb8      	it	lt
 800aac4:	4618      	movlt	r0, r3
 800aac6:	e7a3      	b.n	800aa10 <_printf_i+0x130>
 800aac8:	2301      	movs	r3, #1
 800aaca:	464a      	mov	r2, r9
 800aacc:	4639      	mov	r1, r7
 800aace:	4630      	mov	r0, r6
 800aad0:	47c0      	blx	r8
 800aad2:	3001      	adds	r0, #1
 800aad4:	d09a      	beq.n	800aa0c <_printf_i+0x12c>
 800aad6:	3501      	adds	r5, #1
 800aad8:	68e3      	ldr	r3, [r4, #12]
 800aada:	9a03      	ldr	r2, [sp, #12]
 800aadc:	1a9b      	subs	r3, r3, r2
 800aade:	42ab      	cmp	r3, r5
 800aae0:	dcf2      	bgt.n	800aac8 <_printf_i+0x1e8>
 800aae2:	e7eb      	b.n	800aabc <_printf_i+0x1dc>
 800aae4:	2500      	movs	r5, #0
 800aae6:	f104 0919 	add.w	r9, r4, #25
 800aaea:	e7f5      	b.n	800aad8 <_printf_i+0x1f8>
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d1ac      	bne.n	800aa4a <_printf_i+0x16a>
 800aaf0:	7803      	ldrb	r3, [r0, #0]
 800aaf2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aaf6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aafa:	e76c      	b.n	800a9d6 <_printf_i+0xf6>
 800aafc:	0800ae83 	.word	0x0800ae83
 800ab00:	0800ae94 	.word	0x0800ae94

0800ab04 <__ascii_wctomb>:
 800ab04:	b149      	cbz	r1, 800ab1a <__ascii_wctomb+0x16>
 800ab06:	2aff      	cmp	r2, #255	; 0xff
 800ab08:	bf85      	ittet	hi
 800ab0a:	238a      	movhi	r3, #138	; 0x8a
 800ab0c:	6003      	strhi	r3, [r0, #0]
 800ab0e:	700a      	strbls	r2, [r1, #0]
 800ab10:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ab14:	bf98      	it	ls
 800ab16:	2001      	movls	r0, #1
 800ab18:	4770      	bx	lr
 800ab1a:	4608      	mov	r0, r1
 800ab1c:	4770      	bx	lr

0800ab1e <memmove>:
 800ab1e:	4288      	cmp	r0, r1
 800ab20:	b510      	push	{r4, lr}
 800ab22:	eb01 0302 	add.w	r3, r1, r2
 800ab26:	d807      	bhi.n	800ab38 <memmove+0x1a>
 800ab28:	1e42      	subs	r2, r0, #1
 800ab2a:	4299      	cmp	r1, r3
 800ab2c:	d00a      	beq.n	800ab44 <memmove+0x26>
 800ab2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab32:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ab36:	e7f8      	b.n	800ab2a <memmove+0xc>
 800ab38:	4283      	cmp	r3, r0
 800ab3a:	d9f5      	bls.n	800ab28 <memmove+0xa>
 800ab3c:	1881      	adds	r1, r0, r2
 800ab3e:	1ad2      	subs	r2, r2, r3
 800ab40:	42d3      	cmn	r3, r2
 800ab42:	d100      	bne.n	800ab46 <memmove+0x28>
 800ab44:	bd10      	pop	{r4, pc}
 800ab46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab4a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ab4e:	e7f7      	b.n	800ab40 <memmove+0x22>

0800ab50 <_free_r>:
 800ab50:	b538      	push	{r3, r4, r5, lr}
 800ab52:	4605      	mov	r5, r0
 800ab54:	2900      	cmp	r1, #0
 800ab56:	d045      	beq.n	800abe4 <_free_r+0x94>
 800ab58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab5c:	1f0c      	subs	r4, r1, #4
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	bfb8      	it	lt
 800ab62:	18e4      	addlt	r4, r4, r3
 800ab64:	f000 f8d2 	bl	800ad0c <__malloc_lock>
 800ab68:	4a1f      	ldr	r2, [pc, #124]	; (800abe8 <_free_r+0x98>)
 800ab6a:	6813      	ldr	r3, [r2, #0]
 800ab6c:	4610      	mov	r0, r2
 800ab6e:	b933      	cbnz	r3, 800ab7e <_free_r+0x2e>
 800ab70:	6063      	str	r3, [r4, #4]
 800ab72:	6014      	str	r4, [r2, #0]
 800ab74:	4628      	mov	r0, r5
 800ab76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab7a:	f000 b8c8 	b.w	800ad0e <__malloc_unlock>
 800ab7e:	42a3      	cmp	r3, r4
 800ab80:	d90c      	bls.n	800ab9c <_free_r+0x4c>
 800ab82:	6821      	ldr	r1, [r4, #0]
 800ab84:	1862      	adds	r2, r4, r1
 800ab86:	4293      	cmp	r3, r2
 800ab88:	bf04      	itt	eq
 800ab8a:	681a      	ldreq	r2, [r3, #0]
 800ab8c:	685b      	ldreq	r3, [r3, #4]
 800ab8e:	6063      	str	r3, [r4, #4]
 800ab90:	bf04      	itt	eq
 800ab92:	1852      	addeq	r2, r2, r1
 800ab94:	6022      	streq	r2, [r4, #0]
 800ab96:	6004      	str	r4, [r0, #0]
 800ab98:	e7ec      	b.n	800ab74 <_free_r+0x24>
 800ab9a:	4613      	mov	r3, r2
 800ab9c:	685a      	ldr	r2, [r3, #4]
 800ab9e:	b10a      	cbz	r2, 800aba4 <_free_r+0x54>
 800aba0:	42a2      	cmp	r2, r4
 800aba2:	d9fa      	bls.n	800ab9a <_free_r+0x4a>
 800aba4:	6819      	ldr	r1, [r3, #0]
 800aba6:	1858      	adds	r0, r3, r1
 800aba8:	42a0      	cmp	r0, r4
 800abaa:	d10b      	bne.n	800abc4 <_free_r+0x74>
 800abac:	6820      	ldr	r0, [r4, #0]
 800abae:	4401      	add	r1, r0
 800abb0:	1858      	adds	r0, r3, r1
 800abb2:	4282      	cmp	r2, r0
 800abb4:	6019      	str	r1, [r3, #0]
 800abb6:	d1dd      	bne.n	800ab74 <_free_r+0x24>
 800abb8:	6810      	ldr	r0, [r2, #0]
 800abba:	6852      	ldr	r2, [r2, #4]
 800abbc:	605a      	str	r2, [r3, #4]
 800abbe:	4401      	add	r1, r0
 800abc0:	6019      	str	r1, [r3, #0]
 800abc2:	e7d7      	b.n	800ab74 <_free_r+0x24>
 800abc4:	d902      	bls.n	800abcc <_free_r+0x7c>
 800abc6:	230c      	movs	r3, #12
 800abc8:	602b      	str	r3, [r5, #0]
 800abca:	e7d3      	b.n	800ab74 <_free_r+0x24>
 800abcc:	6820      	ldr	r0, [r4, #0]
 800abce:	1821      	adds	r1, r4, r0
 800abd0:	428a      	cmp	r2, r1
 800abd2:	bf04      	itt	eq
 800abd4:	6811      	ldreq	r1, [r2, #0]
 800abd6:	6852      	ldreq	r2, [r2, #4]
 800abd8:	6062      	str	r2, [r4, #4]
 800abda:	bf04      	itt	eq
 800abdc:	1809      	addeq	r1, r1, r0
 800abde:	6021      	streq	r1, [r4, #0]
 800abe0:	605c      	str	r4, [r3, #4]
 800abe2:	e7c7      	b.n	800ab74 <_free_r+0x24>
 800abe4:	bd38      	pop	{r3, r4, r5, pc}
 800abe6:	bf00      	nop
 800abe8:	20007a4c 	.word	0x20007a4c

0800abec <_malloc_r>:
 800abec:	b570      	push	{r4, r5, r6, lr}
 800abee:	1ccd      	adds	r5, r1, #3
 800abf0:	f025 0503 	bic.w	r5, r5, #3
 800abf4:	3508      	adds	r5, #8
 800abf6:	2d0c      	cmp	r5, #12
 800abf8:	bf38      	it	cc
 800abfa:	250c      	movcc	r5, #12
 800abfc:	2d00      	cmp	r5, #0
 800abfe:	4606      	mov	r6, r0
 800ac00:	db01      	blt.n	800ac06 <_malloc_r+0x1a>
 800ac02:	42a9      	cmp	r1, r5
 800ac04:	d903      	bls.n	800ac0e <_malloc_r+0x22>
 800ac06:	230c      	movs	r3, #12
 800ac08:	6033      	str	r3, [r6, #0]
 800ac0a:	2000      	movs	r0, #0
 800ac0c:	bd70      	pop	{r4, r5, r6, pc}
 800ac0e:	f000 f87d 	bl	800ad0c <__malloc_lock>
 800ac12:	4a21      	ldr	r2, [pc, #132]	; (800ac98 <_malloc_r+0xac>)
 800ac14:	6814      	ldr	r4, [r2, #0]
 800ac16:	4621      	mov	r1, r4
 800ac18:	b991      	cbnz	r1, 800ac40 <_malloc_r+0x54>
 800ac1a:	4c20      	ldr	r4, [pc, #128]	; (800ac9c <_malloc_r+0xb0>)
 800ac1c:	6823      	ldr	r3, [r4, #0]
 800ac1e:	b91b      	cbnz	r3, 800ac28 <_malloc_r+0x3c>
 800ac20:	4630      	mov	r0, r6
 800ac22:	f000 f863 	bl	800acec <_sbrk_r>
 800ac26:	6020      	str	r0, [r4, #0]
 800ac28:	4629      	mov	r1, r5
 800ac2a:	4630      	mov	r0, r6
 800ac2c:	f000 f85e 	bl	800acec <_sbrk_r>
 800ac30:	1c43      	adds	r3, r0, #1
 800ac32:	d124      	bne.n	800ac7e <_malloc_r+0x92>
 800ac34:	230c      	movs	r3, #12
 800ac36:	6033      	str	r3, [r6, #0]
 800ac38:	4630      	mov	r0, r6
 800ac3a:	f000 f868 	bl	800ad0e <__malloc_unlock>
 800ac3e:	e7e4      	b.n	800ac0a <_malloc_r+0x1e>
 800ac40:	680b      	ldr	r3, [r1, #0]
 800ac42:	1b5b      	subs	r3, r3, r5
 800ac44:	d418      	bmi.n	800ac78 <_malloc_r+0x8c>
 800ac46:	2b0b      	cmp	r3, #11
 800ac48:	d90f      	bls.n	800ac6a <_malloc_r+0x7e>
 800ac4a:	600b      	str	r3, [r1, #0]
 800ac4c:	50cd      	str	r5, [r1, r3]
 800ac4e:	18cc      	adds	r4, r1, r3
 800ac50:	4630      	mov	r0, r6
 800ac52:	f000 f85c 	bl	800ad0e <__malloc_unlock>
 800ac56:	f104 000b 	add.w	r0, r4, #11
 800ac5a:	1d23      	adds	r3, r4, #4
 800ac5c:	f020 0007 	bic.w	r0, r0, #7
 800ac60:	1ac3      	subs	r3, r0, r3
 800ac62:	d0d3      	beq.n	800ac0c <_malloc_r+0x20>
 800ac64:	425a      	negs	r2, r3
 800ac66:	50e2      	str	r2, [r4, r3]
 800ac68:	e7d0      	b.n	800ac0c <_malloc_r+0x20>
 800ac6a:	428c      	cmp	r4, r1
 800ac6c:	684b      	ldr	r3, [r1, #4]
 800ac6e:	bf16      	itet	ne
 800ac70:	6063      	strne	r3, [r4, #4]
 800ac72:	6013      	streq	r3, [r2, #0]
 800ac74:	460c      	movne	r4, r1
 800ac76:	e7eb      	b.n	800ac50 <_malloc_r+0x64>
 800ac78:	460c      	mov	r4, r1
 800ac7a:	6849      	ldr	r1, [r1, #4]
 800ac7c:	e7cc      	b.n	800ac18 <_malloc_r+0x2c>
 800ac7e:	1cc4      	adds	r4, r0, #3
 800ac80:	f024 0403 	bic.w	r4, r4, #3
 800ac84:	42a0      	cmp	r0, r4
 800ac86:	d005      	beq.n	800ac94 <_malloc_r+0xa8>
 800ac88:	1a21      	subs	r1, r4, r0
 800ac8a:	4630      	mov	r0, r6
 800ac8c:	f000 f82e 	bl	800acec <_sbrk_r>
 800ac90:	3001      	adds	r0, #1
 800ac92:	d0cf      	beq.n	800ac34 <_malloc_r+0x48>
 800ac94:	6025      	str	r5, [r4, #0]
 800ac96:	e7db      	b.n	800ac50 <_malloc_r+0x64>
 800ac98:	20007a4c 	.word	0x20007a4c
 800ac9c:	20007a50 	.word	0x20007a50

0800aca0 <_realloc_r>:
 800aca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aca2:	4607      	mov	r7, r0
 800aca4:	4614      	mov	r4, r2
 800aca6:	460e      	mov	r6, r1
 800aca8:	b921      	cbnz	r1, 800acb4 <_realloc_r+0x14>
 800acaa:	4611      	mov	r1, r2
 800acac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800acb0:	f7ff bf9c 	b.w	800abec <_malloc_r>
 800acb4:	b922      	cbnz	r2, 800acc0 <_realloc_r+0x20>
 800acb6:	f7ff ff4b 	bl	800ab50 <_free_r>
 800acba:	4625      	mov	r5, r4
 800acbc:	4628      	mov	r0, r5
 800acbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acc0:	f000 f826 	bl	800ad10 <_malloc_usable_size_r>
 800acc4:	42a0      	cmp	r0, r4
 800acc6:	d20f      	bcs.n	800ace8 <_realloc_r+0x48>
 800acc8:	4621      	mov	r1, r4
 800acca:	4638      	mov	r0, r7
 800accc:	f7ff ff8e 	bl	800abec <_malloc_r>
 800acd0:	4605      	mov	r5, r0
 800acd2:	2800      	cmp	r0, #0
 800acd4:	d0f2      	beq.n	800acbc <_realloc_r+0x1c>
 800acd6:	4631      	mov	r1, r6
 800acd8:	4622      	mov	r2, r4
 800acda:	f7ff fb5d 	bl	800a398 <memcpy>
 800acde:	4631      	mov	r1, r6
 800ace0:	4638      	mov	r0, r7
 800ace2:	f7ff ff35 	bl	800ab50 <_free_r>
 800ace6:	e7e9      	b.n	800acbc <_realloc_r+0x1c>
 800ace8:	4635      	mov	r5, r6
 800acea:	e7e7      	b.n	800acbc <_realloc_r+0x1c>

0800acec <_sbrk_r>:
 800acec:	b538      	push	{r3, r4, r5, lr}
 800acee:	4c06      	ldr	r4, [pc, #24]	; (800ad08 <_sbrk_r+0x1c>)
 800acf0:	2300      	movs	r3, #0
 800acf2:	4605      	mov	r5, r0
 800acf4:	4608      	mov	r0, r1
 800acf6:	6023      	str	r3, [r4, #0]
 800acf8:	f7ff fab8 	bl	800a26c <_sbrk>
 800acfc:	1c43      	adds	r3, r0, #1
 800acfe:	d102      	bne.n	800ad06 <_sbrk_r+0x1a>
 800ad00:	6823      	ldr	r3, [r4, #0]
 800ad02:	b103      	cbz	r3, 800ad06 <_sbrk_r+0x1a>
 800ad04:	602b      	str	r3, [r5, #0]
 800ad06:	bd38      	pop	{r3, r4, r5, pc}
 800ad08:	2000ca2c 	.word	0x2000ca2c

0800ad0c <__malloc_lock>:
 800ad0c:	4770      	bx	lr

0800ad0e <__malloc_unlock>:
 800ad0e:	4770      	bx	lr

0800ad10 <_malloc_usable_size_r>:
 800ad10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad14:	1f18      	subs	r0, r3, #4
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	bfbc      	itt	lt
 800ad1a:	580b      	ldrlt	r3, [r1, r0]
 800ad1c:	18c0      	addlt	r0, r0, r3
 800ad1e:	4770      	bx	lr

0800ad20 <_init>:
 800ad20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad22:	bf00      	nop
 800ad24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad26:	bc08      	pop	{r3}
 800ad28:	469e      	mov	lr, r3
 800ad2a:	4770      	bx	lr

0800ad2c <_fini>:
 800ad2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad2e:	bf00      	nop
 800ad30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad32:	bc08      	pop	{r3}
 800ad34:	469e      	mov	lr, r3
 800ad36:	4770      	bx	lr
